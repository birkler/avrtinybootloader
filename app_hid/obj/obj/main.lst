   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__mulsi3
  11               	.global	filter_iir2
  12               		.type	filter_iir2, @function
  13               	filter_iir2:
  14               	.LFB21:
  15               		.file 1 "../util/iir_filter.h"
   1:../util/iir_filter.h **** /*
   2:../util/iir_filter.h ****  * iir_filter.h
   3:../util/iir_filter.h ****  *
   4:../util/iir_filter.h ****  *  Created on: Jan 25, 2011
   5:../util/iir_filter.h ****  *      Author: jorgen
   6:../util/iir_filter.h ****  *
   7:../util/iir_filter.h ****  *
   8:../util/iir_filter.h ****  *
   9:../util/iir_filter.h ****  *
  10:../util/iir_filter.h ****  *
  11:../util/iir_filter.h ****  *      http://faculty.cua.edu/regalia/regalia-perso_files/sp-sep-91.pdf
  12:../util/iir_filter.h ****  *
  13:../util/iir_filter.h ****  *      http://www.dsptutor.freeuk.com/IIRFilterDesign/IIRFilterDesign.html
  14:../util/iir_filter.h ****  *
  15:../util/iir_filter.h ****  *      http://ntur.lib.ntu.edu.tw/bitstream/246246/142473/1/63.pdf
  16:../util/iir_filter.h ****  */
  17:../util/iir_filter.h **** 
  18:../util/iir_filter.h **** #ifndef IIR_FILTER_H_
  19:../util/iir_filter.h **** #define IIR_FILTER_H_
  20:../util/iir_filter.h **** 
  21:../util/iir_filter.h **** #include "q7_8_t.h"
  22:../util/iir_filter.h **** #include "q2_13_t.h"
  23:../util/iir_filter.h **** 
  24:../util/iir_filter.h **** typedef struct {
  25:../util/iir_filter.h **** 	q7_8_t y_1;
  26:../util/iir_filter.h **** 	q7_8_t y_2;
  27:../util/iir_filter.h **** 	q7_8_t x_1;
  28:../util/iir_filter.h **** 	q7_8_t x_2;
  29:../util/iir_filter.h **** } filter_iir2_t;
  30:../util/iir_filter.h **** 
  31:../util/iir_filter.h **** 
  32:../util/iir_filter.h **** //Chebyshev IIR filter
  33:../util/iir_filter.h **** //
  34:../util/iir_filter.h **** //Filter type: HP
  35:../util/iir_filter.h **** //Passband: 400 - 4000 Hz
  36:../util/iir_filter.h **** //Passband ripple: 1.0 dB
  37:../util/iir_filter.h **** //Order: 2
  38:../util/iir_filter.h **** //
  39:../util/iir_filter.h **** //Coefficients
  40:../util/iir_filter.h **** //
  41:../util/iir_filter.h **** //a[0] = 0.7550102     	b[0] = 1.0
  42:../util/iir_filter.h **** //a[1] = -1.5100204     	b[1] = -1.655717
  43:../util/iir_filter.h **** //a[2] = 0.7550102     	b[2] = 0.73281693
  44:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_90per_HP(filter_iir2_t* iir2,q2_13_t in)
  45:../util/iir_filter.h **** {
  46:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.7550102);
  47:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(-1.5100204);
  48:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float( 0.7550102);
  49:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
  50:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.655717);
  51:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float(0.73281693);
  52:../util/iir_filter.h **** 
  53:../util/iir_filter.h **** 	q2_13_t res;
  54:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
  55:../util/iir_filter.h **** 			q2_13_mul(a0,in),
  56:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
  57:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
  58:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
  59:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
  60:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
  61:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
  62:../util/iir_filter.h **** 	iir2->y_1 = res;
  63:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
  64:../util/iir_filter.h **** 	iir2->x_1 = in;
  65:../util/iir_filter.h **** 	return res;
  66:../util/iir_filter.h **** }
  67:../util/iir_filter.h **** 
  68:../util/iir_filter.h **** 
  69:../util/iir_filter.h **** 
  70:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_50_BP(filter_iir2_t* iir2,q2_13_t in)
  71:../util/iir_filter.h **** {
  72:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.037804753 );
  73:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.0  );
  74:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(-0.037804753 );
  75:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
  76:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.1792585E-16);
  77:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float( 0.9243905);
  78:../util/iir_filter.h **** 
  79:../util/iir_filter.h **** 	q2_13_t res;
  80:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
  81:../util/iir_filter.h **** 			q2_13_mul(a0,in),
  82:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
  83:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
  84:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
  85:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
  86:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
  87:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
  88:../util/iir_filter.h **** 	iir2->y_1 = res;
  89:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
  90:../util/iir_filter.h **** 	iir2->x_1 = in;
  91:../util/iir_filter.h **** 	return res;
  92:../util/iir_filter.h **** }
  93:../util/iir_filter.h **** 
  94:../util/iir_filter.h **** /*
  95:../util/iir_filter.h **** 
  96:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_2_10_LP(filter_iir2_t* iir2,q2_13_t in)
  97:../util/iir_filter.h **** {
  98:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.0014603166);
  99:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.0029206332 );
 100:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(0.0014603166);
 101:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
 102:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.8890331);
 103:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float( 0.89487433);
 104:../util/iir_filter.h **** 
 105:../util/iir_filter.h **** 	q2_13_t res;
 106:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
 107:../util/iir_filter.h **** 			q2_13_mul(a0,in),
 108:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
 109:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
 110:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
 111:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
 112:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 113:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 114:../util/iir_filter.h **** 	iir2->y_1 = res;
 115:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 116:../util/iir_filter.h **** 	iir2->x_1 = in;
 117:../util/iir_filter.h **** 	return res;
 118:../util/iir_filter.h **** }
 119:../util/iir_filter.h **** */
 120:../util/iir_filter.h **** /*
 121:../util/iir_filter.h **** q2_13_t q2_13_filter_iir2(filter_iir2_t* iir2,q2_13_t in)
 122:../util/iir_filter.h **** {
 123:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.020517392);
 124:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.041034784);
 125:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(0.020517392);
 126:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
 127:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.6185197);
 128:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float(0.71059346);
 129:../util/iir_filter.h **** 
 130:../util/iir_filter.h **** 	q2_13_t res;
 131:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
 132:../util/iir_filter.h **** 			q2_13_mul(a0,in),
 133:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
 134:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
 135:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
 136:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
 137:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 138:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 139:../util/iir_filter.h **** 	iir2->y_1 = res;
 140:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 141:../util/iir_filter.h **** 	iir2->x_1 = in;
 142:../util/iir_filter.h **** 	return res;
 143:../util/iir_filter.h **** }
 144:../util/iir_filter.h **** */
 145:../util/iir_filter.h **** 
 146:../util/iir_filter.h **** q7_8_t filter_iir2(filter_iir2_t* iir2,q7_8_t in)
 147:../util/iir_filter.h **** {
  16               		.loc 1 147 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 A0E0      		ldi r26,0
  20 0002 B0E0      		ldi r27,0
  21 0004 E0E0      		ldi r30,lo8(gs(1f))
  22 0006 F0E0      		ldi r31,hi8(gs(1f))
  23 0008 00C0      		rjmp __prologue_saves__+((18 - 16) * 2)
  24               	1:
  25               	.LCFI0:
  26               		.cfi_offset 4, -2
  27               		.cfi_offset 5, -3
  28               		.cfi_offset 6, -4
  29               		.cfi_offset 7, -5
  30               		.cfi_offset 8, -6
  31               		.cfi_offset 9, -7
  32               		.cfi_offset 10, -8
  33               		.cfi_offset 11, -9
  34               		.cfi_offset 12, -10
  35               		.cfi_offset 13, -11
  36               		.cfi_offset 14, -12
  37               		.cfi_offset 15, -13
  38               		.cfi_offset 16, -14
  39               		.cfi_offset 17, -15
  40               		.cfi_offset 28, -16
  41               		.cfi_offset 29, -17
  42               		.cfi_def_cfa_offset 18
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 16 */
  46               	.L__stack_usage = 16
  47 000a EC01      		movw r28,r24
  48 000c 8B01      		movw r16,r22
  49               	.LVL1:
 148:../util/iir_filter.h **** 	const q7_8_t a0 = q7_8_float(0.020517392);
 149:../util/iir_filter.h **** 	const q7_8_t a1 = q7_8_float(0.041034784);
 150:../util/iir_filter.h **** 	const q7_8_t a2 = q7_8_float(0.020517392);
 151:../util/iir_filter.h **** 	const q7_8_t inv_b0 = q7_8_float(1/1.0);
 152:../util/iir_filter.h **** 	const q7_8_t _b1 = -q7_8_float(-1.6185197);
 153:../util/iir_filter.h **** 	const q7_8_t _b2 = -q7_8_float(0.71059346);
 154:../util/iir_filter.h **** 
 155:../util/iir_filter.h **** 	q7_8_t res;
 156:../util/iir_filter.h **** 	res =  q7_8_mul(inv_b0,q7_8_sum(
  50               		.loc 1 156 0
  51 000e EC80      		ldd r14,Y+4
  52 0010 FD80      		ldd r15,Y+5
  53 0012 C880      		ld r12,Y
  54 0014 D980      		ldd r13,Y+1
  55 0016 072E      		mov __tmp_reg__,r23
  56 0018 000C      		lsl r0
  57 001a 880B      		sbc r24,r24
  58 001c 990B      		sbc r25,r25
  59               	.LVL2:
  60 001e 25E0      		ldi r18,lo8(5)
  61 0020 30E0      		ldi r19,0
  62 0022 40E0      		ldi r20,0
  63 0024 50E0      		ldi r21,0
  64 0026 00D0      		rcall __mulsi3
  65               	.LVL3:
  66 0028 472E      		mov r4,r23
  67 002a 582E      		mov r5,r24
  68 002c 692E      		mov r6,r25
  69 002e 7724      		clr r7
  70 0030 67FC      		sbrc r6,7
  71 0032 7A94      		dec r7
  72 0034 B701      		movw r22,r14
  73 0036 0F2C      		mov __tmp_reg__,r15
  74 0038 000C      		lsl r0
  75 003a 880B      		sbc r24,r24
  76 003c 990B      		sbc r25,r25
  77 003e 2AE0      		ldi r18,lo8(10)
  78 0040 30E0      		ldi r19,0
  79 0042 40E0      		ldi r20,0
  80 0044 50E0      		ldi r21,0
  81 0046 00D0      		rcall __mulsi3
  82               	.LVL4:
  83 0048 BB27      		clr r27
  84 004a 97FD      		sbrc r25,7
  85 004c BA95      		dec r27
  86 004e A92F      		mov r26,r25
  87 0050 982F      		mov r25,r24
  88 0052 872F      		mov r24,r23
  89 0054 3201      		movw r6,r4
  90 0056 680E      		add r6,r24
  91 0058 791E      		adc r7,r25
  92 005a 6E81      		ldd r22,Y+6
  93 005c 7F81      		ldd r23,Y+7
  94 005e 072E      		mov __tmp_reg__,r23
  95 0060 000C      		lsl r0
  96 0062 880B      		sbc r24,r24
  97 0064 990B      		sbc r25,r25
  98 0066 25E0      		ldi r18,lo8(5)
  99 0068 30E0      		ldi r19,0
 100 006a 40E0      		ldi r20,0
 101 006c 50E0      		ldi r21,0
 102 006e 00D0      		rcall __mulsi3
 103               	.LVL5:
 104 0070 BB27      		clr r27
 105 0072 97FD      		sbrc r25,7
 106 0074 BA95      		dec r27
 107 0076 A92F      		mov r26,r25
 108 0078 982F      		mov r25,r24
 109 007a 872F      		mov r24,r23
 110 007c 4301      		movw r8,r6
 111 007e 880E      		add r8,r24
 112 0080 991E      		adc r9,r25
 113 0082 B601      		movw r22,r12
 114 0084 0D2C      		mov __tmp_reg__,r13
 115 0086 000C      		lsl r0
 116 0088 880B      		sbc r24,r24
 117 008a 990B      		sbc r25,r25
 118 008c 2EE9      		ldi r18,lo8(-98)
 119 008e 31E0      		ldi r19,lo8(1)
 120 0090 40E0      		ldi r20,0
 121 0092 50E0      		ldi r21,0
 122 0094 00D0      		rcall __mulsi3
 123               	.LVL6:
 124 0096 BB27      		clr r27
 125 0098 97FD      		sbrc r25,7
 126 009a BA95      		dec r27
 127 009c A92F      		mov r26,r25
 128 009e 982F      		mov r25,r24
 129 00a0 872F      		mov r24,r23
 130 00a2 5401      		movw r10,r8
 131 00a4 A80E      		add r10,r24
 132 00a6 B91E      		adc r11,r25
 133 00a8 6A81      		ldd r22,Y+2
 134 00aa 7B81      		ldd r23,Y+3
 135 00ac 072E      		mov __tmp_reg__,r23
 136 00ae 000C      		lsl r0
 137 00b0 880B      		sbc r24,r24
 138 00b2 990B      		sbc r25,r25
 139 00b4 2BE4      		ldi r18,lo8(75)
 140 00b6 3FEF      		ldi r19,lo8(-1)
 141 00b8 4FEF      		ldi r20,lo8(-1)
 142 00ba 5FEF      		ldi r21,lo8(-1)
 143 00bc 00D0      		rcall __mulsi3
 144               	.LVL7:
 145 00be BB27      		clr r27
 146 00c0 97FD      		sbrc r25,7
 147 00c2 BA95      		dec r27
 148 00c4 A92F      		mov r26,r25
 149 00c6 982F      		mov r25,r24
 150 00c8 872F      		mov r24,r23
 151 00ca 8A0D      		add r24,r10
 152 00cc 9B1D      		adc r25,r11
 153 00ce 092E      		mov __tmp_reg__,r25
 154 00d0 000C      		lsl r0
 155 00d2 AA0B      		sbc r26,r26
 156 00d4 BB0B      		sbc r27,r27
 157               	.LVL8:
 157:../util/iir_filter.h **** 			q7_8_mul(a0,in),
 158:../util/iir_filter.h **** 			q7_8_mul(a1,iir2->x_1),
 159:../util/iir_filter.h **** 			q7_8_mul(a2,iir2->x_2),
 160:../util/iir_filter.h **** 			q7_8_mul(_b1,iir2->y_1),
 161:../util/iir_filter.h **** 			q7_8_mul(_b2,iir2->y_2)));
 162:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 163:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 158               		.loc 1 163 0
 159 00d6 DB82      		std Y+3,r13
 160 00d8 CA82      		std Y+2,r12
 164:../util/iir_filter.h **** 	iir2->y_1 = res;
 161               		.loc 1 164 0
 162 00da 9983      		std Y+1,r25
 163 00dc 8883      		st Y,r24
 165:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 164               		.loc 1 165 0
 165 00de FF82      		std Y+7,r15
 166 00e0 EE82      		std Y+6,r14
 166:../util/iir_filter.h **** 	iir2->x_1 = in;
 167               		.loc 1 166 0
 168 00e2 1D83      		std Y+5,r17
 169 00e4 0C83      		std Y+4,r16
 170               	/* epilogue start */
 167:../util/iir_filter.h **** 	return res;
 168:../util/iir_filter.h **** }
 171               		.loc 1 168 0
 172 00e6 CDB7      		in r28,__SP_L__
 173 00e8 DEB7      		in r29,__SP_H__
 174               	.LVL9:
 175 00ea E0E1      		ldi r30, lo8(16)
 176 00ec 00C0      		rjmp __epilogue_restores__ + ((18 - 16) * 2)
 177               		.cfi_endproc
 178               	.LFE21:
 179               		.size	filter_iir2, .-filter_iir2
 180               	.global	__vector_16
 181               		.type	__vector_16, @function
 182               	__vector_16:
 183               	.LFB22:
 184               		.file 2 "main.c"
   1:main.c        **** 
   2:main.c        **** /*
   3:main.c        ****  * Copyright 2007 Jorgen Birkler
   4:main.c        ****  * jorgen.birkler)a(gmail.com
   5:main.c        ****  * USB HID device for current monitoring and battery switch on-off
   6:main.c        ****  * License: GNU GPL v2 (see License.txt) or proprietary (contact author)
   7:main.c        ****  */
   8:main.c        **** 
   9:main.c        **** /**
  10:main.c        ****  * @mainpage
  11:main.c        ****  *
  12:main.c        ****  *
  13:main.c        ****  * \section implementation_guide Implementation
  14:main.c        ****  * - \ref software
  15:main.c        ****  * - \ref hardware
  16:main.c        ****  * .
  17:main.c        ****  *
  18:main.c        ****  * (c) 2010 Jorgen Birkler (jorgen.birkler)a(gmail.com)
  19:main.c        ****  *
  20:main.c        ****  * USB driver
  21:main.c        ****  *
  22:main.c        ****  * (c) 2006 by OBJECTIVE DEVELOPMENT Software GmbH
  23:main.c        ****  */
  24:main.c        **** /**
  25:main.c        ****  * \page software Software
  26:main.c        ****  * Uses the firmware only USB low speed driver from http://obdev.at.
  27:main.c        ****  * The USB device is configured as a Remote Control HID device.
  28:main.c        ****  *
  29:main.c        ****  * \section tips Tips about HID development
  30:main.c        ****  * General tips about HID development:
  31:main.c        ****  *
  32:main.c        ****  * 1. HID device class is cached by Windows; change USB_CFG_DEVICE_ID if you change USAGE_PAGE
  33:main.c        ****  *    class to another. It took me several weeks to find this info. I copied the use page for the
  34:main.c        ****  *    remote but it never work until I changed the USB_CFG_DEVICE_ID to another number so that the
  35:main.c        ****  *    device was rediscovered by Windows.
  36:main.c        ****  *
  37:main.c        ****  * 2. Added usbconfig.h manually to the dependencies in the make file to all .o files.
  38:main.c        ****  *    WinAVR .d files doesn't seem to work for subdirs
  39:main.c        ****  *
  40:main.c        ****  * Ir is received by ICP interrupt:
  41:main.c        ****  * \include irrx.h
  42:main.c        ****  *
  43:main.c        ****  * Main loop translated the ir codes received and handles the main USB look:
  44:main.c        ****  * \include main.c
  45:main.c        ****  */
  46:main.c        **** /**
  47:main.c        ****  * \page hardware Hardware
  48:main.c        ****  *
  49:main.c        ****  * Schematic:
  50:main.c        ****  * \image html current_mon_switch.sch.png Schematic
  51:main.c        ****  *
  52:main.c        ****  * Partlist:
  53:main.c        ****  * \verbinclude current_mon_switch.sch..parts.txt
  54:main.c        ****  *
  55:main.c        ****  * Board (for protoboards):
  56:main.c        ****  * \image html current_mon_switch.brd.png
  57:main.c        ****  *
  58:main.c        ****  */
  59:main.c        **** 
  60:main.c        **** #include <avr/io.h>
  61:main.c        **** #include <avr/interrupt.h>
  62:main.c        **** #include <avr/pgmspace.h>
  63:main.c        **** #include <avr/eeprom.h>
  64:main.c        **** #include <avr/wdt.h>
  65:main.c        **** #include <util/delay.h>
  66:main.c        **** #include <util/atomic.h>
  67:main.c        **** 
  68:main.c        **** #include <stdio.h>
  69:main.c        **** #include <string.h>
  70:main.c        **** #include <stdint.h>
  71:main.c        **** #define USB_GET_REPORT_IDS
  72:main.c        **** #include "usbdrv.h"
  73:main.c        **** #include "oddebug.h"
  74:main.c        **** #include "hw.h"
  75:main.c        **** #include "timers.h"
  76:main.c        **** #include "usbstream.h"
  77:main.c        **** //#include "uartsw.h"
  78:main.c        **** #include "lfsr8.h"
  79:main.c        **** #include "iir_filter.h"
  80:main.c        **** 
  81:main.c        **** /*
  82:main.c        ****  * help macros
  83:main.c        ****  */
  84:main.c        **** #ifndef STATIC_ASSERT
  85:main.c        **** #define STATIC_ASSERT(expr) extern char static_assert[ (!!(expr))*2 - 1]
  86:main.c        **** #endif //#ifndef STATIC_ASSERT
  87:main.c        **** #define elements_of(array) (sizeof(array) / sizeof(array[0]))
  88:main.c        **** 
  89:main.c        **** STATIC_ASSERT(((int8_t)(-8))>>1 < 0);
  90:main.c        **** /* ------------------------------------------------------------------------- */
  91:main.c        **** /* ------------------------------------------------------------------------- */
  92:main.c        **** /* ----------------------------- UART interface ----------------------------- */
  93:main.c        **** /* ------------------------------------------------------------------------- */
  94:main.c        **** /*
  95:main.c        **** static int uartsw_stream_putchar(char c, FILE *stream)
  96:main.c        **** {
  97:main.c        **** 	//uartsw1_putc(c);
  98:main.c        **** 	return c;
  99:main.c        **** }
 100:main.c        **** static int uartsw_stream_getchar(FILE *stream)
 101:main.c        **** {
 102:main.c        **** 	return -1;//uartsw2_getc_nowait();
 103:main.c        **** }
 104:main.c        **** #define uartsw_init() (void)0
 105:main.c        **** 
 106:main.c        **** FILE uartsw_stream = FDEV_SETUP_STREAM(uartsw_stream_putchar,uartsw_stream_getchar, _FDEV_SETUP_REA
 107:main.c        **** 
 108:main.c        **** */
 109:main.c        **** 
 110:main.c        **** /* ------------------------------------------------------------------------- */
 111:main.c        **** /* ------------------------------------------------------------------------- */
 112:main.c        **** /* ----------------------------- USB interface ----------------------------- */
 113:main.c        **** /* ------------------------------------------------------------------------- */
 114:main.c        **** 
 115:main.c        **** /*
 116:main.c        **** ISR(TIMER0_OVF_vect,ISR_NOBLOCK )
 117:main.c        **** {
 118:main.c        **** }
 119:main.c        ****  */
 120:main.c        **** 
 121:main.c        **** STATIC_ASSERT(TIMER0_OVERFLOW_PERIOD_MS_X256 > 2);
 122:main.c        **** STATIC_ASSERT(TIMER0_OVERFLOW_PERIOD_MS_X256 < 60000);
 123:main.c        **** 
 124:main.c        **** #define us_to_ticks(_us_) (((_us_)*F_TIMER1) / 1000000L)
 125:main.c        **** 
 126:main.c        **** STATIC_ASSERT(us_to_ticks(100) > 0);
 127:main.c        **** 
 128:main.c        **** 
 129:main.c        **** static volatile uint16_t capture_diff;
 130:main.c        **** static volatile uint16_t capture_diff_max;
 131:main.c        **** static volatile uint16_t captured;
 132:main.c        **** 
 133:main.c        **** 
 134:main.c        **** ISR(TIMER0_CAPT_vect,ISR_NOBLOCK )
 135:main.c        **** {
 185               		.loc 2 135 0
 186               		.cfi_startproc
 187 00ee 7894      		sei
 188 00f0 1F92      		push r1
 189               	.LCFI1:
 190               		.cfi_def_cfa_offset 3
 191               		.cfi_offset 1, -2
 192 00f2 0F92      		push r0
 193               	.LCFI2:
 194               		.cfi_def_cfa_offset 4
 195               		.cfi_offset 0, -3
 196 00f4 0FB6      		in r0,__SREG__
 197 00f6 0F92      		push r0
 198 00f8 1124      		clr __zero_reg__
 199               	/* prologue: Interrupt */
 200               	/* frame size = 0 */
 201               	/* stack size = 3 */
 202               	.L__stack_usage = 3
 203               	/* epilogue start */
 136:main.c        **** 	/*
 137:main.c        **** 	uint16_t capture_time;
 138:main.c        **** 	uint16_t service_time;
 139:main.c        **** 	service_time = TCNT0L;
 140:main.c        **** 	service_time |= ((unsigned int)TCNT0H << 8);
 141:main.c        **** 	capture_time = OCR0A;
 142:main.c        **** 	capture_time |= ((unsigned int)OCR0B << 8);
 143:main.c        **** 	capture_diff = service_time - capture_time;
 144:main.c        **** 	if (capture_diff > capture_diff_max) {
 145:main.c        **** 		capture_diff_max = capture_diff;
 146:main.c        **** 	}
 147:main.c        **** 	captured++;
 148:main.c        **** */
 149:main.c        **** }
 204               		.loc 2 149 0
 205 00fa 0F90      		pop r0
 206 00fc 0FBE      		out __SREG__,r0
 207 00fe 0F90      		pop r0
 208 0100 1F90      		pop r1
 209 0102 1895      		reti
 210               		.cfi_endproc
 211               	.LFE22:
 212               		.size	__vector_16, .-__vector_16
 213               	.global	usbFunctionSetup2
 214               		.type	usbFunctionSetup2, @function
 215               	usbFunctionSetup2:
 216               	.LFB23:
 150:main.c        **** 
 151:main.c        **** 
 152:main.c        **** 
 153:main.c        **** /*
 154:main.c        **** ISR(TIMER1_OVF_vect,ISR_NOBLOCK)
 155:main.c        **** {
 156:main.c        **** 	timer1_ticks_major++;
 157:main.c        **** }
 158:main.c        **** static uint32_t gettimer1ticks(void)
 159:main.c        **** {
 160:main.c        **** 	uint32_t res;
 161:main.c        **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 162:main.c        **** 	{
 163:main.c        **** 		res = TCNT1;
 164:main.c        **** 		res |= timer1_ticks_major<<8;
 165:main.c        **** 	}
 166:main.c        **** 	return res;
 167:main.c        **** }
 168:main.c        **** */
 169:main.c        **** 
 170:main.c        **** 
 171:main.c        **** #define ReportDescriptor usbHidReportDescriptor
 172:main.c        **** 
 173:main.c        **** PROGMEM
 174:main.c        **** #include "hid.h"
 175:main.c        **** 
 176:main.c        **** STATIC_ASSERT(sizeof(usbHidReportDescriptor) == USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH);
 177:main.c        **** 
 178:main.c        **** typedef struct{
 179:main.c        **** 	struct {
 180:main.c        **** 		unsigned char report_id;
 181:main.c        **** 		uchar   buttonMask;
 182:main.c        **** 	} mouse;
 183:main.c        **** }report_t;
 184:main.c        **** 
 185:main.c        **** 
 186:main.c        **** static report_t reportBuffer;
 187:main.c        **** 
 188:main.c        **** 
 189:main.c        **** usbMsgLen_t usbFunctionSetup2(uchar data[8])
 190:main.c        **** {
 217               		.loc 2 190 0
 218               		.cfi_startproc
 219               	.LVL10:
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 0 */
 223               	.L__stack_usage = 0
 191:main.c        **** 	usbRequest_t    *rq = (void *)data;
 192:main.c        **** 
 193:main.c        **** 	/* The following requests are never used. But since they are required by
 194:main.c        **** 	 * the specification, we implement them in this example.
 195:main.c        **** 	 *
 196:main.c        **** 	 */
 197:main.c        **** 	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 198:main.c        **** 		DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
 199:main.c        **** 		if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) *
 200:main.c        **** 			switch (rq->wValue.bytes[0]) {
 201:main.c        **** 			default:
 202:main.c        **** 				break;
 203:main.c        **** 			}
 204:main.c        **** 
 205:main.c        **** 		}
 206:main.c        **** 	}else{
 207:main.c        **** 		/* no vendor specific requests implemented */
 208:main.c        **** 	}
 209:main.c        **** 	return 0;   /* default for not implemented requests: return no data back to host */
 210:main.c        **** }
 224               		.loc 2 210 0
 225 0104 80E0      		ldi r24,0
 226               	.LVL11:
 227 0106 0895      		ret
 228               		.cfi_endproc
 229               	.LFE23:
 230               		.size	usbFunctionSetup2, .-usbFunctionSetup2
 231               		.section	.rodata.str1.1,"aMS",@progbits,1
 232               	.LC0:
 233 0000 6C65 6420 		.string	"led adc[%d]:\t%05u: \t%05u,\t%05u\t%05u ticks:\t%06u\tfilt:%06d   \r"
 233      6164 635B 
 233      2564 5D3A 
 233      0925 3035 
 233      753A 2009 
 234               		.section	.text.startup,"ax",@progbits
 235               	.global	main
 236               		.type	main, @function
 237               	main:
 238               	.LFB24:
 211:main.c        **** 
 212:main.c        **** 
 213:main.c        **** typedef struct {
 214:main.c        **** 	char buffer[64];
 215:main.c        **** 	uchar bufLen;
 216:main.c        **** } stdin_get_string_t;
 217:main.c        **** 
 218:main.c        **** /*
 219:main.c        **** static const char* stdin_get_string(stdin_get_string_t* b)
 220:main.c        **** {
 221:main.c        **** 	int c;
 222:main.c        **** 	if ((c = getchar()) >= 0) {
 223:main.c        **** 		if (c=='\b') {
 224:main.c        **** 			if (b->bufLen > 0) {
 225:main.c        **** 				b->bufLen--;
 226:main.c        **** 				putchar(c); //echo back
 227:main.c        **** 			}
 228:main.c        **** 		}
 229:main.c        **** 		else if (c=='\n') {
 230:main.c        **** 			b->buffer[b->bufLen] = '\0';
 231:main.c        **** 			putchar(c); //echo back
 232:main.c        **** 			b->bufLen = 0;
 233:main.c        **** 			return (const char*)b->buffer;
 234:main.c        **** 		}
 235:main.c        **** 		else if (c<20) {
 236:main.c        **** 
 237:main.c        **** 		}
 238:main.c        **** 		else {
 239:main.c        **** 			if (b->bufLen+1 < sizeof(b->buffer)) {
 240:main.c        **** 				b->buffer[b->bufLen++] = (char)c;
 241:main.c        **** 				putchar(c); //echo back
 242:main.c        **** 			}
 243:main.c        **** 		}
 244:main.c        **** 	}
 245:main.c        **** 	return 0;
 246:main.c        **** }
 247:main.c        ****  */
 248:main.c        **** /* ------------------------------------------------------------------------- */
 249:main.c        **** 
 250:main.c        **** int main(void)
 251:main.c        **** {
 239               		.loc 2 251 0
 240               		.cfi_startproc
 241 0000 A3E1      		ldi r26,lo8(19)
 242 0002 B0E0      		ldi r27,0
 243 0004 E0E0      		ldi r30,lo8(gs(1f))
 244 0006 F0E0      		ldi r31,hi8(gs(1f))
 245 0008 00C0      		rjmp __prologue_saves__+((18 - 18) * 2)
 246               	1:
 247               	.LCFI3:
 248               		.cfi_offset 2, -2
 249               		.cfi_offset 3, -3
 250               		.cfi_offset 4, -4
 251               		.cfi_offset 5, -5
 252               		.cfi_offset 6, -6
 253               		.cfi_offset 7, -7
 254               		.cfi_offset 8, -8
 255               		.cfi_offset 9, -9
 256               		.cfi_offset 10, -10
 257               		.cfi_offset 11, -11
 258               		.cfi_offset 12, -12
 259               		.cfi_offset 13, -13
 260               		.cfi_offset 14, -14
 261               		.cfi_offset 15, -15
 262               		.cfi_offset 16, -16
 263               		.cfi_offset 17, -17
 264               		.cfi_offset 28, -18
 265               		.cfi_offset 29, -19
 266               		.cfi_def_cfa 28, 39
 267               	/* prologue: function */
 268               	/* frame size = 19 */
 269               	/* stack size = 37 */
 270               	.L__stack_usage = 37
 271               	.LVL12:
 252:main.c        **** 	unsigned char buttonPressed = 0;
 253:main.c        **** 	unsigned char buttonMask = 0;
 254:main.c        **** 	unsigned char led_sensor_blink = 0;
 255:main.c        **** 	filter_iir2_t filter_iir2_data = {0,0,0,0};
 272               		.loc 2 255 0
 273 000a 88E0      		ldi r24,lo8(8)
 274 000c 1E01      		movw r2,r28
 275 000e 2BE0      		ldi r18,11
 276 0010 220E      		add r2,r18
 277 0012 311C      		adc r3,__zero_reg__
 278 0014 F101      		movw r30,r2
 279 0016 282F      		mov r18,r24
 280               		0:
 281 0018 1192      		st Z+,__zero_reg__
 282 001a 2A95      		dec r18
 283 001c 01F4      		brne 0b
 284               	.LVL13:
 285               	.LBB18:
 286               	.LBB19:
 287               		.file 3 "../hw.h"
   1:../hw.h       **** /**
   2:../hw.h       ****  * Copyright 2007 Jorgen Birkler
   3:../hw.h       ****  * jorgen.birkler)a(gmail.com
   4:../hw.h       ****  * USB HID device for current monitoring and battery switch on-off
   5:../hw.h       ****  * License: GNU GPL v2 (see License.txt) or proprietary (contact author)
   6:../hw.h       ****  */
   7:../hw.h       **** 
   8:../hw.h       **** #ifndef __hw_h_included__
   9:../hw.h       **** #define __hw_h_included__
  10:../hw.h       **** #include <avr/io.h>
  11:../hw.h       **** 
  12:../hw.h       **** #define BOOTLOADER_CONDITION_INIT()   DDRA &= ~_BV(PA3);PORTA |= _BV(PA3)
  13:../hw.h       **** #define BOOTLOADER_CONDITION (bit_is_clear(PINA,PA3))
  14:../hw.h       **** 
  15:../hw.h       **** 
  16:../hw.h       **** #define LED_RED_CHANGE() PORTB ^= _BV(PB3)
  17:../hw.h       **** #define LED_RED_ON() PORTB |= _BV(PB3)
  18:../hw.h       **** #define LED_RED_OFF() PORTB &= ~_BV(PB3)
  19:../hw.h       **** #define LED_RED_INIT() DDRB |= _BV(PB3);PORTB &= ~_BV(PB3);LED_RED_OFF()
  20:../hw.h       **** 
  21:../hw.h       **** #define LED_SENSOR_CHANGE() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB ^= _BV(PB0);PORTA &= ~_BV(PA2)
  22:../hw.h       **** #define LED_SENSOR_ON() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB |= _BV(PB0); PORTA &= ~_BV(PA2)
  23:../hw.h       **** #define LED_SENSOR_OFF() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_BV(PB0); PORTA &= ~_BV(PA2)
  24:../hw.h       **** #define LED_SENSOR_INIT() LED_SENSOR_OFF()
  25:../hw.h       **** #define LED_SENSOR_REVERSE_BIAS()  PORTA |= _BV(PA2);DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_B
  26:../hw.h       **** #define LED_SENSOR_INPUT() DDRA &= ~_BV(PA2);PORTA &= ~_BV(PA2)
  27:../hw.h       **** #define LED_SENSOR_IS_HIGH() (PINA & _BV(PA2))
  28:../hw.h       **** 
  29:../hw.h       **** 
  30:../hw.h       **** 
  31:../hw.h       **** //#define LED_SENSOR_CHANGE() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB ^= _BV(PB0);PORTA &= ~_BV(PA2
  32:../hw.h       **** //#define LED_SENSOR_ON() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB |= _BV(PB0); PORTA &= ~_BV(PA2)
  33:../hw.h       **** //#define LED_SENSOR_OFF() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_BV(PB0); PORTA &= ~_BV(PA2)
  34:../hw.h       **** //#define LED_SENSOR_INIT() LED_SENSOR_OFF()
  35:../hw.h       **** //#define LED_SENSOR_REVERSE_BIAS()  PORTA |= _BV(PA2);DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~
  36:../hw.h       **** //#define LED_SENSOR_INPUT() DDRB &= ~_BV(PB0)
  37:../hw.h       **** //#define LED_SENSOR_IS_HIGH() (PINB & _BV(PB0))
  38:../hw.h       **** 
  39:../hw.h       **** 
  40:../hw.h       **** 
  41:../hw.h       **** #define LED_BUTTON_CHANGE() PORTB ^= _BV(PB1)
  42:../hw.h       **** #define LED_BUTTON_ON() PORTB |= _BV(PB1)
  43:../hw.h       **** #define LED_BUTTON_OFF() PORTB &= ~_BV(PB1)
  44:../hw.h       **** #define LED_BUTTON_INIT() DDRB |= _BV(PB1);PORTB &= ~_BV(PB1);LED_BUTTON_OFF()
  45:../hw.h       **** 
  46:../hw.h       **** #define BUTTON_INIT() DDRA &= ~_BV(PA4);PORTA |= _BV(PA4)
  47:../hw.h       **** #define BUTTON_IS_PRESSED() (!(PINA & _BV(PA4)))
  48:../hw.h       **** 
  49:../hw.h       **** #define POT_ON() PORTA |= _BV(PA0)
  50:../hw.h       **** #define POT_OFF() PORTA &= ~_BV(PA0)
  51:../hw.h       **** #define POT_INIT() DDRA |= _BV(PA0);DDRA &= ~_BV(PA1);PORTA &= ~_BV(PA1);POT_OFF()
  52:../hw.h       **** #define POT_ADC_SETUP() ADCSRA = _BV(ADEN) | _BV(ADIF) | _BV(ADPS1) | _BV(ADPS0);ADCSRB = 0x00
  53:../hw.h       **** 
  54:../hw.h       **** #define POT_ADC_START() ADMUX = 0x1;ADCSRA |= _BV(ADSC)
  55:../hw.h       **** #define POT_ADC_DONE() ADCSRA |= _BV(ADIF)
  56:../hw.h       **** 
  57:../hw.h       **** #define POT_ADC_IS_POT_CHANNEL() ((ADMUX & 0x3F) == 0x1)
  58:../hw.h       **** 
  59:../hw.h       **** #define POT_ADC_IS_COMPLETED() (!(!(ADCSRA | _BV(ADIF))))
  60:../hw.h       **** 
  61:../hw.h       **** //Channel =ADC2
  62:../hw.h       **** //#define LED_SENSOR_ADC_CH 0x02
  63:../hw.h       **** 
  64:../hw.h       **** 
  65:../hw.h       **** // Channel= (ADC2-ADC1) x 20
  66:../hw.h       **** #define LED_SENSOR_ADC_CH 0x0E
  67:../hw.h       **** 
  68:../hw.h       **** 
  69:../hw.h       **** #define LED_SENSOR_ADC_SETUP() POT_OFF();ADCSRA = _BV(ADEN) | _BV(ADIF) | _BV(ADPS1) | _BV(ADPS0);A
  70:../hw.h       **** 
  71:../hw.h       **** #define LED_SENSOR_ADC_START() ADMUX = _BV(REFS1) | LED_SENSOR_ADC_CH;ADCSRA |= _BV(ADSC)
  72:../hw.h       **** #define LED_SENSOR_ADC_DONE() ADCSRA |= _BV(ADIF)
  73:../hw.h       **** 
  74:../hw.h       **** #define LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() ((ADMUX & 0x3F) == LED_SENSOR_ADC_CH)
  75:../hw.h       **** 
  76:../hw.h       **** #define LED_SENSOR_ADC_IS_COMPLETED() (!(!(ADCSRA & _BV(ADIF))))
  77:../hw.h       **** 
  78:../hw.h       **** 
  79:../hw.h       **** 
  80:../hw.h       **** //Timer0
  81:../hw.h       **** ////////////////////////////////////
  82:../hw.h       **** 
  83:../hw.h       **** 
  84:../hw.h       **** //16bit mode. clk/1. Input capture on. noise canceler on. Negative edge (ICES0 cleared).
  85:../hw.h       **** #define TIMER0_INIT() {TCCR0A = _BV(TCW0)|_BV(ICEN0)|_BV(ICNC0); TCCR0B = _BV(CS00);}
  86:../hw.h       **** #define F_TIMER0 (F_CPU / 1)
  87:../hw.h       **** #define TIMER0_ENABLE_OVERFLOW_INTERRUPT() TIMSK |= _BV(TOIE0);
  88:../hw.h       **** #define TIMER0_DISABLE_OVERFLOW_INTERRUPT() TIMSK &= ~_BV(TOIE0);
  89:../hw.h       **** #define TIMER0_ENABLE_INPUTCAPT_INTERRUPT() TIMSK |= _BV(TICIE0);
  90:../hw.h       **** #define TIMER0_DISABLE_INPUTCAPT_INTERRUPT() TIMSK &= ~_BV(TICIE0);
  91:../hw.h       **** #define TIMER0_OVERFLOW_PERIOD_MS ((256L * 256L * 1000L) / F_CPU)
  92:../hw.h       **** #define TIMER0_OVERFLOW_PERIOD_MS_X256 ((256L * 256L *256L) / (F_CPU / 1000L))
  93:../hw.h       **** 
  94:../hw.h       **** 
  95:../hw.h       **** 
  96:../hw.h       **** //Normal mode. clk/128
  97:../hw.h       **** #define TIMER1_INIT() {TCCR1A = 0; TCCR1B = _BV(CS13); TCCR1C = 0; TCCR1D = 0; TCCR1E = 0; PLLCSR =
  98:../hw.h       **** #define F_TIMER1 (F_CPU/128)
  99:../hw.h       **** #define TIMER1_ENABLE_OVERFLOW_INTERRUPT() TIMSK |= _BV(TOIE1);
 100:../hw.h       **** #define TIMER1_DISABLE_OVERFLOW_INTERRUPT() TIMSK &= ~_BV(TOIE1);
 101:../hw.h       **** #define TIMER1_OVERFLOW_PERIOD_MS ((256L * 1000L) / F_TIMER1)
 102:../hw.h       **** #define TIMER1_OVERFLOW_PERIOD_MS_X256 ((256L *256L) / (F_TIMER1 / 1000L))
 103:../hw.h       **** 
 104:../hw.h       **** #define UARTSW_1_TX_ENABLE 1
 105:../hw.h       **** #define UARTSW_1_RX_ENABLE 0
 106:../hw.h       **** #define UARTSW_2_TX_ENABLE 0
 107:../hw.h       **** #define UARTSW_2_RX_ENABLE 1
 108:../hw.h       **** #define UARTSW_2_INVERT 1
 109:../hw.h       **** #define UARTSW_1_INVERT 1
 110:../hw.h       **** 
 111:../hw.h       **** #define UARTSW_1_BAUDRATE 9600
 112:../hw.h       **** #define UARTSW_2_BAUDRATE 9600
 113:../hw.h       **** #define UARTSW_1_RXD_PINNAME
 114:../hw.h       **** #define UARTSW_1_RXD_PINPORT
 115:../hw.h       **** #define UARTSW_1_TXD_PINNAME A
 116:../hw.h       **** #define UARTSW_1_TXD_PINPORT PA6
 117:../hw.h       **** #define UARTSW_2_RXD_PINNAME A
 118:../hw.h       **** #define UARTSW_2_RXD_PINPORT PA6
 119:../hw.h       **** #define UARTSW_2_TXD_PINNAME
 120:../hw.h       **** #define UARTSW_2_TXD_PINPORT
 121:../hw.h       **** 
 122:../hw.h       **** 
 123:../hw.h       **** #ifndef __ASSEMBLER__
 124:../hw.h       **** 
 125:../hw.h       **** static inline void hardwareInit(void) {
 126:../hw.h       **** 	BOOTLOADER_CONDITION_INIT();
 288               		.loc 3 126 0
 289 001e D398      		cbi 0x1a,3
 290 0020 DB9A      		sbi 0x1b,3
 127:../hw.h       **** 	LED_RED_INIT();
 291               		.loc 3 127 0
 292 0022 BB9A      		sbi 0x17,3
 293 0024 C398      		cbi 0x18,3
 294 0026 C398      		cbi 0x18,3
 128:../hw.h       **** 	LED_BUTTON_INIT();
 295               		.loc 3 128 0
 296 0028 B99A      		sbi 0x17,1
 297 002a C198      		cbi 0x18,1
 298 002c C198      		cbi 0x18,1
 129:../hw.h       **** 	TIMER0_INIT();
 299               		.loc 3 129 0
 300 002e 90EE      		ldi r25,lo8(-32)
 301 0030 95BB      		out 0x15,r25
 302 0032 91E0      		ldi r25,lo8(1)
 303 0034 93BF      		out 0x33,r25
 130:../hw.h       **** 	TIMER1_INIT();
 304               		.loc 3 130 0
 305 0036 10BE      		out 0x30,__zero_reg__
 306 0038 8FBD      		out 0x2f,r24
 307 003a 17BC      		out 0x27,__zero_reg__
 308 003c 16BC      		out 0x26,__zero_reg__
 309 003e 10B8      		out 0,__zero_reg__
 310 0040 19BC      		out 0x29,__zero_reg__
 131:../hw.h       **** 	BUTTON_INIT();
 311               		.loc 3 131 0
 312 0042 D498      		cbi 0x1a,4
 313 0044 DC9A      		sbi 0x1b,4
 132:../hw.h       **** 	POT_INIT();
 314               		.loc 3 132 0
 315 0046 D09A      		sbi 0x1a,0
 316 0048 D198      		cbi 0x1a,1
 317 004a D998      		cbi 0x1b,1
 318 004c D898      		cbi 0x1b,0
 319               	.LBE19:
 320               	.LBE18:
 256:main.c        **** 	q7_8_t filtered_val = 0;
 257:main.c        **** 	uint8_t led_sensor_last_random = 0;
 258:main.c        **** 	static uint16_t led_sensor_delta_time = 0;
 259:main.c        **** 	uint16_t led_sensor_trig_time = 0;
 260:main.c        **** 	uint8_t led_sensor_prev_time=0;
 261:main.c        **** 	uint16_t led_sensor_values[5];
 262:main.c        **** 	uint8_t led_sensor_nvalues = 0;
 263:main.c        **** 	static uint8_t led_sensor_nsample = 5;
 264:main.c        **** 	static uint16_t led_sensor_weigthed_sum_data[20];
 265:main.c        **** 	uint16_t led_sensor_weigthed_sum = 0;
 266:main.c        **** 	uint8_t led_sensor_weigthed_sum_idx = 0;
 267:main.c        **** 
 268:main.c        **** 	hardwareInit();
 269:main.c        **** 	stdout = &usb_out_stream;
 321               		.loc 2 269 0
 322 004e 80E0      		ldi r24,lo8(usb_out_stream)
 323 0050 90E0      		ldi r25,hi8(usb_out_stream)
 324 0052 9093 0000 		sts __iob+2+1,r25
 325 0056 8093 0000 		sts __iob+2,r24
 270:main.c        **** 	stdin = &usb_in_stream;
 326               		.loc 2 270 0
 327 005a 80E0      		ldi r24,lo8(usb_in_stream)
 328 005c 90E0      		ldi r25,hi8(usb_in_stream)
 329 005e 9093 0000 		sts __iob+1,r25
 330 0062 8093 0000 		sts __iob,r24
 271:main.c        **** 	stdin_get_string_t stdin_get_string_buffer;
 272:main.c        **** 	stdin_get_string_buffer.bufLen = 0;
 273:main.c        **** 	//const char* stdin_str;
 274:main.c        **** 
 275:main.c        **** 	printf_P(PSTR("B!\n"));
 331               		.loc 2 275 0
 332 0066 80E0      		ldi r24,lo8(__c.2386)
 333 0068 90E0      		ldi r25,hi8(__c.2386)
 334 006a 9F93      		push r25
 335 006c 8F93      		push r24
 336 006e 00D0      		rcall printf_P
 337               	.LVL14:
 276:main.c        **** 	usbDeviceDisconnect();
 338               		.loc 2 276 0
 339 0070 BC98      		cbi 0x17,4
 340 0072 C498      		cbi 0x18,4
 341               	.LVL15:
 342               	.LBB20:
 343               	.LBB21:
 344               		.file 4 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/lib/avr/include/avr/wdt.h **** 
 103:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/lib/avr/include/avr/wdt.h **** #else
 106:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/lib/avr/include/avr/wdt.h **** #endif
 108:/usr/lib/avr/include/avr/wdt.h **** 
 109:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/lib/avr/include/avr/wdt.h **** #else
 114:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/lib/avr/include/avr/wdt.h **** #endif
 116:/usr/lib/avr/include/avr/wdt.h **** 
 117:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/lib/avr/include/avr/wdt.h **** #else
 120:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/lib/avr/include/avr/wdt.h **** #endif
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/lib/avr/include/avr/wdt.h **** 
 125:/usr/lib/avr/include/avr/wdt.h **** 
 126:/usr/lib/avr/include/avr/wdt.h **** /**
 127:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/lib/avr/include/avr/wdt.h **** */
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** 
 138:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/lib/avr/include/avr/wdt.h **** 
 140:/usr/lib/avr/include/avr/wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:/usr/lib/avr/include/avr/wdt.h **** 
 142:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 143:/usr/lib/avr/include/avr/wdt.h **** do { \
 144:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 145:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 146:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"									"\n\t" \
 147:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:/usr/lib/avr/include/avr/wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:/usr/lib/avr/include/avr/wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:/usr/lib/avr/include/avr/wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:/usr/lib/avr/include/avr/wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h **** 	: [tmp]					"=r" (temp) \
 155:/usr/lib/avr/include/avr/wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:/usr/lib/avr/include/avr/wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:/usr/lib/avr/include/avr/wdt.h **** ); \
 162:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 163:/usr/lib/avr/include/avr/wdt.h **** 
 164:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 165:/usr/lib/avr/include/avr/wdt.h **** do { \
 166:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 167:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 168:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"								"\n\t" \
 169:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:/usr/lib/avr/include/avr/wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]            "=r" (temp) \
 174:/usr/lib/avr/include/avr/wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:/usr/lib/avr/include/avr/wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:/usr/lib/avr/include/avr/wdt.h **** ); \
 179:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 180:/usr/lib/avr/include/avr/wdt.h **** 
 181:/usr/lib/avr/include/avr/wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:/usr/lib/avr/include/avr/wdt.h **** 
 183:/usr/lib/avr/include/avr/wdt.h **** /*
 184:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 185:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 187:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 188:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 191:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 194:/usr/lib/avr/include/avr/wdt.h **** */
 195:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 196:/usr/lib/avr/include/avr/wdt.h **** do { \
 197:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 198:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 199:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 208:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 216:/usr/lib/avr/include/avr/wdt.h **** ); \
 217:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 218:/usr/lib/avr/include/avr/wdt.h **** 
 219:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 220:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 221:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:/usr/lib/avr/include/avr/wdt.h ****     : \
 227:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 233:/usr/lib/avr/include/avr/wdt.h **** );
 234:/usr/lib/avr/include/avr/wdt.h **** 
 235:/usr/lib/avr/include/avr/wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:/usr/lib/avr/include/avr/wdt.h **** 
 237:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 238:/usr/lib/avr/include/avr/wdt.h **** 
 239:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 240:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 241:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 243:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 244:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 248:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 254:/usr/lib/avr/include/avr/wdt.h **** )
 255:/usr/lib/avr/include/avr/wdt.h **** 
 256:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 257:/usr/lib/avr/include/avr/wdt.h **** do { \
 258:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 259:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 260:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 262:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 263:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 269:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 275:/usr/lib/avr/include/avr/wdt.h **** ); \
 276:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 277:/usr/lib/avr/include/avr/wdt.h **** 
 278:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 279:/usr/lib/avr/include/avr/wdt.h **** 
 280:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 281:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 282:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 283:/usr/lib/avr/include/avr/wdt.h **** {
 284:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:/usr/lib/avr/include/avr/wdt.h **** 	{
 286:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 287:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 289:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 290:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 294:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 300:/usr/lib/avr/include/avr/wdt.h **** 			);
 301:/usr/lib/avr/include/avr/wdt.h **** 	}
 302:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:/usr/lib/avr/include/avr/wdt.h **** 	{
 304:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 305:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 307:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 308:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 312:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 318:/usr/lib/avr/include/avr/wdt.h **** 			);
 319:/usr/lib/avr/include/avr/wdt.h **** 	}
 320:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:/usr/lib/avr/include/avr/wdt.h **** 	{
 322:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 323:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 330:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 336:/usr/lib/avr/include/avr/wdt.h **** 			);
 337:/usr/lib/avr/include/avr/wdt.h **** 	}
 338:/usr/lib/avr/include/avr/wdt.h **** 	else
 339:/usr/lib/avr/include/avr/wdt.h ****  	{
 340:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 341:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 348:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 			);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** }
 357:/usr/lib/avr/include/avr/wdt.h **** 
 358:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 359:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 360:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 361:/usr/lib/avr/include/avr/wdt.h **** {
 362:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:/usr/lib/avr/include/avr/wdt.h **** 	{
 364:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 365:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 366:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 369:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 375:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 381:/usr/lib/avr/include/avr/wdt.h **** 				);
 382:/usr/lib/avr/include/avr/wdt.h **** 	}
 383:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:/usr/lib/avr/include/avr/wdt.h **** 	{
 385:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 386:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 387:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 390:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 396:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 402:/usr/lib/avr/include/avr/wdt.h **** 				);
 403:/usr/lib/avr/include/avr/wdt.h **** 	}
 404:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:/usr/lib/avr/include/avr/wdt.h **** 	{
 406:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 407:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 408:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 417:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 423:/usr/lib/avr/include/avr/wdt.h **** 				);
 424:/usr/lib/avr/include/avr/wdt.h **** 	}
 425:/usr/lib/avr/include/avr/wdt.h **** 	else
 426:/usr/lib/avr/include/avr/wdt.h **** 	{
 427:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 428:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 429:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 438:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 444:/usr/lib/avr/include/avr/wdt.h **** 				);
 445:/usr/lib/avr/include/avr/wdt.h **** 	}
 446:/usr/lib/avr/include/avr/wdt.h **** }
 447:/usr/lib/avr/include/avr/wdt.h **** 
 448:/usr/lib/avr/include/avr/wdt.h **** #else
 449:/usr/lib/avr/include/avr/wdt.h **** 
 450:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 451:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 452:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 453:/usr/lib/avr/include/avr/wdt.h **** {
 454:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:/usr/lib/avr/include/avr/wdt.h **** 	{
 456:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 345               		.loc 4 456 0
 346 0074 9FE0      		ldi r25,lo8(15)
 347 0076 88E1      		ldi r24,lo8(24)
 348               	/* #APP */
 349               	 ;  456 "/usr/lib/avr/include/avr/wdt.h" 1
 350 0078 0FB6      		in __tmp_reg__,__SREG__
 351 007a F894      		cli
 352 007c A895      		wdr
 353 007e 81BD      		out 33, r24
 354 0080 0FBE      		out __SREG__,__tmp_reg__
 355 0082 91BD      		out 33, r25
 356               	 	
 357               	 ;  0 "" 2
 358               	.LVL16:
 359               	/* #NOAPP */
 360               	.LBE21:
 361               	.LBE20:
 277:main.c        **** 	uchar i, j;
 278:main.c        **** 	j = 0;
 279:main.c        **** 	while (--j)
 280:main.c        **** 	{ /* USB Reset by device only required on Watchdog Reset */
 281:main.c        **** 		i = 0;
 282:main.c        **** 		while (--i)
 283:main.c        **** 			; /* delay >10ms for USB reset */
 284:main.c        **** 	}
 285:main.c        **** 
 286:main.c        **** 	wdt_enable(WDTO_2S);
 287:main.c        **** 	odDebugInit();
 288:main.c        **** 	usbInit();
 362               		.loc 2 288 0
 363 0084 00D0      		rcall usbInit
 364               	.LVL17:
 289:main.c        **** 	TIMER0_ENABLE_INPUTCAPT_INTERRUPT();
 365               		.loc 2 289 0
 366 0086 89B7      		in r24,0x39
 367 0088 8160      		ori r24,lo8(1)
 368 008a 89BF      		out 0x39,r24
 290:main.c        **** 	//uartsw_init();
 291:main.c        **** 	sei();
 369               		.loc 2 291 0
 370               	/* #APP */
 371               	 ;  291 "main.c" 1
 372 008c 7894      		sei
 373               	 ;  0 "" 2
 292:main.c        **** 	usbDeviceConnect();
 374               		.loc 2 292 0
 375               	/* #NOAPP */
 376 008e BC9A      		sbi 0x17,4
 377 0090 C49A      		sbi 0x18,4
 293:main.c        **** 	LED_RED_ON();
 378               		.loc 2 293 0
 379 0092 C39A      		sbi 0x18,3
 294:main.c        **** 	LED_SENSOR_INIT();
 380               		.loc 2 294 0
 381 0094 D29A      		sbi 0x1a,2
 382 0096 B89A      		sbi 0x17,0
 383 0098 C098      		cbi 0x18,0
 384 009a DA98      		cbi 0x1b,2
 295:main.c        **** 	LED_BUTTON_OFF();
 385               		.loc 2 295 0
 386 009c C198      		cbi 0x18,1
 296:main.c        **** 	Timer_Set(TIMER_LED_BLINK,TIMER_LED_STARTUP_TIMEOUT);
 387               		.loc 2 296 0
 388 009e 60ED      		ldi r22,lo8(-48)
 389 00a0 77E0      		ldi r23,lo8(7)
 390 00a2 80E0      		ldi r24,0
 391 00a4 00D0      		rcall Timer_Set
 392               	.LVL18:
 297:main.c        **** 	Timer_Set(TIMER_LED_SENSOR_BLINK,2);
 393               		.loc 2 297 0
 394 00a6 62E0      		ldi r22,lo8(2)
 395 00a8 70E0      		ldi r23,0
 396 00aa 81E0      		ldi r24,lo8(1)
 397 00ac 00D0      		rcall Timer_Set
 398               	.LVL19:
 298:main.c        **** 	Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_STARTUP_TIMEOUT);
 399               		.loc 2 298 0
 400 00ae 60ED      		ldi r22,lo8(-48)
 401 00b0 77E0      		ldi r23,lo8(7)
 402 00b2 82E0      		ldi r24,lo8(2)
 403 00b4 00D0      		rcall Timer_Set
 404               	.LVL20:
 299:main.c        **** 	//fprintf_P(&uartsw_stream,PSTR("B!\x10\n"));
 300:main.c        **** 	/*char buffer[10];
 301:main.c        **** 	if (strcmp_P(fgets(buffer,sizeof(buffer),&uartsw_stream),PSTR("B!\x10\n")) != 0) {
 302:main.c        **** 		fprintf_P(&uartsw_stream,PSTR("Fail"));
 303:main.c        **** 	}*/
 304:main.c        **** 	filtered_val = filter_iir2(&filter_iir2_data,1000);
 405               		.loc 2 304 0
 406 00b6 68EE      		ldi r22,lo8(-24)
 407 00b8 73E0      		ldi r23,lo8(3)
 408 00ba C101      		movw r24,r2
 409 00bc 00D0      		rcall filter_iir2
 410               	.LVL21:
 411 00be 882E      		mov r8,r24
 412 00c0 9B8B      		std Y+19,r25
 413               	.LVL22:
 414 00c2 0F90      		pop __tmp_reg__
 415 00c4 0F90      		pop __tmp_reg__
 266:main.c        **** 
 416               		.loc 2 266 0
 417 00c6 B12C      		mov r11,__zero_reg__
 265:main.c        **** 	uint8_t led_sensor_weigthed_sum_idx = 0;
 418               		.loc 2 265 0
 419 00c8 C12C      		mov r12,__zero_reg__
 420 00ca D12C      		mov r13,__zero_reg__
 262:main.c        **** 	static uint8_t led_sensor_nsample = 5;
 421               		.loc 2 262 0
 422 00cc 10E0      		ldi r17,0
 260:main.c        **** 	uint16_t led_sensor_values[5];
 423               		.loc 2 260 0
 424 00ce 80E0      		ldi r24,0
 259:main.c        **** 	uint8_t led_sensor_prev_time=0;
 425               		.loc 2 259 0
 426 00d0 E12C      		mov r14,__zero_reg__
 427 00d2 F12C      		mov r15,__zero_reg__
 257:main.c        **** 	static uint16_t led_sensor_delta_time = 0;
 428               		.loc 2 257 0
 429 00d4 00E0      		ldi r16,0
 254:main.c        **** 	filter_iir2_t filter_iir2_data = {0,0,0,0};
 430               		.loc 2 254 0
 431 00d6 A12C      		mov r10,__zero_reg__
 432               	.LVL23:
 433               	.L5:
 434               	.LBB22:
 305:main.c        **** 	// main event loop
 306:main.c        **** 	for (;;)
 307:main.c        **** 	{
 308:main.c        **** 		//update delta time
 309:main.c        **** 		{
 310:main.c        **** 			uint8_t temp = TCNT1;
 435               		.loc 2 310 0
 436 00d8 9EB4      		in r9,0x2e
 437               	.LVL24:
 311:main.c        **** 			led_sensor_delta_time += (temp - led_sensor_prev_time) & 0xFF;
 438               		.loc 2 311 0
 439 00da 292D      		mov r18,r9
 440 00dc 281B      		sub r18,r24
 441 00de 8091 0000 		lds r24,led_sensor_delta_time.2376
 442 00e2 9091 0000 		lds r25,led_sensor_delta_time.2376+1
 443 00e6 820F      		add r24,r18
 444 00e8 911D      		adc r25,__zero_reg__
 445 00ea 9093 0000 		sts led_sensor_delta_time.2376+1,r25
 446 00ee 8093 0000 		sts led_sensor_delta_time.2376,r24
 447               	.LVL25:
 448               	.LBE22:
 312:main.c        **** 			led_sensor_prev_time = temp;
 313:main.c        **** 		}
 314:main.c        **** 
 315:main.c        **** 		//Watchdog
 316:main.c        **** 		wdt_reset();
 449               		.loc 2 316 0
 450               	/* #APP */
 451               	 ;  316 "main.c" 1
 452 00f2 A895      		wdr
 453               	 ;  0 "" 2
 317:main.c        **** 
 318:main.c        **** 		//Timers
 319:main.c        **** 		/////////////////////////////////////////////////////
 320:main.c        **** 		if (TIFR & _BV(TOV1)) {
 454               		.loc 2 320 0
 455               	/* #NOAPP */
 456 00f4 08B6      		in __tmp_reg__,0x38
 457 00f6 02FE      		sbrs __tmp_reg__,2
 458 00f8 00C0      		rjmp .L6
 321:main.c        **** 			TIFR |= _BV(TOV1);
 459               		.loc 2 321 0
 460 00fa 88B7      		in r24,0x38
 461 00fc 8460      		ori r24,lo8(4)
 462 00fe 88BF      		out 0x38,r24
 463               	.LVL26:
 322:main.c        **** 			Timers_DecreaseAll(TIMER1_OVERFLOW_PERIOD_MS_X256);
 464               		.loc 2 322 0
 465 0100 80E0      		ldi r24,0
 466 0102 92E0      		ldi r25,lo8(2)
 467 0104 00D0      		rcall Timers_DecreaseAll
 468               	.LVL27:
 469               	.L6:
 323:main.c        **** 		}
 324:main.c        **** 
 325:main.c        **** 		//usb
 326:main.c        **** 		/////////////////////////////////////////////////////
 327:main.c        **** 		usbPoll();
 470               		.loc 2 327 0
 471 0106 00D0      		rcall usbPoll
 472               	.LVL28:
 328:main.c        **** 
 329:main.c        **** 		//
 330:main.c        **** 		/////////////////////////////////////////////////////
 331:main.c        **** 		if (BUTTON_IS_PRESSED()) {
 473               		.loc 2 331 0
 474 0108 CC9B      		sbis 0x19,4
 332:main.c        **** 			LED_BUTTON_ON();
 475               		.loc 2 332 0
 476 010a C19A      		sbi 0x18,1
 477               	.LVL29:
 478               	.L7:
 333:main.c        **** 			if (!(buttonPressed)) {
 334:main.c        **** 				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
 335:main.c        **** 				//uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
 336:main.c        **** 				//printf_P(PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,capture_diff_max,u
 337:main.c        **** 				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,ca
 338:main.c        **** 			}
 339:main.c        **** 			buttonPressed = 1;
 340:main.c        **** 		}
 341:main.c        **** 		else {
 342:main.c        **** 			//LED_BUTTON_OFF();
 343:main.c        **** 			//buttonMask &= ~0x1;
 344:main.c        **** 			buttonPressed = 0;
 345:main.c        **** 		}
 346:main.c        **** 
 347:main.c        **** 		//USB interrupt
 348:main.c        **** 		/////////////////////////////////////////////////////
 349:main.c        **** 		if (usbInterruptIsReady())
 479               		.loc 2 349 0
 480 010c 8091 0000 		lds r24,usbTxStatus1
 481 0110 84FF      		sbrs r24,4
 482 0112 00C0      		rjmp .L8
 350:main.c        **** 		{
 351:main.c        **** 			if (buttonMask != reportBuffer.mouse.buttonMask) {
 483               		.loc 2 351 0
 484 0114 8091 0000 		lds r24,reportBuffer+1
 485 0118 8823      		tst r24
 486 011a 01F0      		breq .L8
 352:main.c        **** 				reportBuffer.mouse.report_id = report_id_mouse;
 487               		.loc 2 352 0
 488 011c 81E0      		ldi r24,lo8(1)
 489 011e 8093 0000 		sts reportBuffer,r24
 353:main.c        **** 				reportBuffer.mouse.buttonMask = buttonMask;
 490               		.loc 2 353 0
 491 0122 1092 0000 		sts reportBuffer+1,__zero_reg__
 354:main.c        **** 				usbSetInterrupt((uchar*)&reportBuffer.mouse, sizeof(reportBuffer.mouse));
 492               		.loc 2 354 0
 493 0126 62E0      		ldi r22,lo8(2)
 494 0128 80E0      		ldi r24,lo8(reportBuffer)
 495 012a 90E0      		ldi r25,hi8(reportBuffer)
 496 012c 00D0      		rcall usbSetInterrupt
 497               	.LVL30:
 498               	.L8:
 355:main.c        **** 
 356:main.c        **** 			}
 357:main.c        **** 			else if (1) {
 358:main.c        **** 
 359:main.c        **** 			}
 360:main.c        **** 
 361:main.c        **** 		}
 362:main.c        **** 		/*
 363:main.c        **** 		int c;
 364:main.c        **** 		if (0 && (c = fgetc(&uartsw_stream)) != -1) {
 365:main.c        **** 			printf_P(PSTR("%c"),c);
 366:main.c        **** 			//fprintf_P(&uartsw_stream,PSTR("%c"),c);
 367:main.c        **** 		}
 368:main.c        **** 		*/
 369:main.c        **** 
 370:main.c        **** 		//stdin_str = stdin_get_string(&stdin_get_string_buffer);
 371:main.c        **** 		if (0 && getchar() >= 0) { //offending line...?
 372:main.c        **** 			//if (strcmp_P(stdin_str,PSTR("stat")) == 0 )
 373:main.c        **** 			{
 374:main.c        **** 
 375:main.c        **** 			}
 376:main.c        **** 		}
 377:main.c        **** 
 378:main.c        **** 		//
 379:main.c        **** 		///////////////////////////////////////////////////////
 380:main.c        **** 
 381:main.c        **** 
 382:main.c        **** 		//LED Timer
 383:main.c        **** 		/////////////////////////////////////////////////////
 384:main.c        **** 		if (Timer_HasExpired(TIMER_LED_BLINK)) {
 499               		.loc 2 384 0
 500 012e 80E0      		ldi r24,0
 501 0130 00D0      		rcall Timer_HasExpired
 502               	.LVL31:
 503 0132 892B      		or r24,r25
 504 0134 01F0      		breq .L9
 385:main.c        **** 			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
 505               		.loc 2 385 0
 506 0136 64EF      		ldi r22,lo8(-12)
 507 0138 71E0      		ldi r23,lo8(1)
 508 013a 80E0      		ldi r24,0
 509 013c 00D0      		rcall Timer_Set
 510               	.LVL32:
 511               	.L9:
 386:main.c        **** 			//LED_RED_CHANGE();
 387:main.c        **** 		}
 388:main.c        **** 		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
 512               		.loc 2 388 0
 513 013e 82E0      		ldi r24,lo8(2)
 514 0140 00D0      		rcall Timer_HasExpired
 515               	.LVL33:
 516 0142 892B      		or r24,r25
 517 0144 01F0      		breq .L10
 389:main.c        **** 			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
 518               		.loc 2 389 0
 519 0146 6AEF      		ldi r22,lo8(-6)
 520 0148 70E0      		ldi r23,0
 521 014a 82E0      		ldi r24,lo8(2)
 522 014c 00D0      		rcall Timer_Set
 523               	.LVL34:
 524               	.L10:
 390:main.c        **** 			//LED_BUTTON_CHANGE();
 391:main.c        **** 		}
 392:main.c        **** 		if (Timer_HasExpired(TIMER_LED_SENSOR_BLINK))
 525               		.loc 2 392 0
 526 014e 81E0      		ldi r24,lo8(1)
 527 0150 00D0      		rcall Timer_HasExpired
 528               	.LVL35:
 529 0152 892B      		or r24,r25
 530 0154 01F4      		brne .+2
 531 0156 00C0      		rjmp .L11
 532               	.LBB23:
 533               	.LBB24:
 534               		.file 5 "../util/lfsr8.h"
   1:../util/lfsr8.h **** 
   2:../util/lfsr8.h **** static uint8_t prng_lfsr8_255(void) {
   3:../util/lfsr8.h **** 	static uint8_t lfsr = 0x01;
   4:../util/lfsr8.h **** 	unsigned char lsb = lfsr & 1;  /* Get lsb (i.e., the output bit). */
   5:../util/lfsr8.h **** 	lfsr >>= 1;               /* Shift register */
   6:../util/lfsr8.h **** 	if (lsb == 1)             /* Only apply toggle mask if output bit is 1. */  //[1,2,3,7]
   7:../util/lfsr8.h **** 		lfsr ^= (1<<7 | 1<<3 | 1<<2 | 1<<1);        /* Apply toggle mask, value has 1 at bits correspondi
   8:../util/lfsr8.h **** 	return lfsr;
   9:../util/lfsr8.h **** }
  10:../util/lfsr8.h **** 
  11:../util/lfsr8.h **** static uint8_t prng_lfsr8_31(void) {
  12:../util/lfsr8.h **** 	static uint8_t lfsr = 0x01;
  13:../util/lfsr8.h **** 	unsigned char lsb = lfsr & 1;  /* Get lsb (i.e., the output bit). */
  14:../util/lfsr8.h **** 	lfsr >>= 1;               /* Shift register */
  15:../util/lfsr8.h **** 	if (lsb == 1)             /* Only apply toggle mask if output bit is 1. */  //[1,2,3,7]
  16:../util/lfsr8.h **** 		lfsr ^= (1<<3 | 1<<4 | 1<<2 | 1<<1);        /* Apply toggle mask, value has 1 at bits correspondi
  17:../util/lfsr8.h **** 	return lfsr;
  18:../util/lfsr8.h **** }
  19:../util/lfsr8.h **** 
  20:../util/lfsr8.h **** 
  21:../util/lfsr8.h **** static uint8_t prng_lfsr1_1(void) {
  22:../util/lfsr8.h **** 	static uint8_t lfsr = 0x01;
  23:../util/lfsr8.h **** 	lfsr ^= 0x1;
 535               		.loc 5 23 0
 536 0158 0091 0000 		lds r16,lfsr.2294
 537               	.LVL36:
 538 015c 91E0      		ldi r25,lo8(1)
 539 015e 0927      		eor r16,r25
 540 0160 0093 0000 		sts lfsr.2294,r16
 541               	.LBE24:
 542               	.LBE23:
 393:main.c        **** 		{
 394:main.c        **** 			led_sensor_last_random = prng_lfsr1_1();
 395:main.c        **** 			if (led_sensor_last_random & 0x1) {
 543               		.loc 2 395 0
 544 0164 00FF      		sbrs r16,0
 545 0166 00C0      		rjmp .L12
 396:main.c        **** 				LED_RED_ON();
 546               		.loc 2 396 0
 547 0168 C39A      		sbi 0x18,3
 548 016a 00C0      		rjmp .L13
 549               	.L12:
 397:main.c        **** 			}
 398:main.c        **** 			else {
 399:main.c        **** 				LED_RED_OFF();
 550               		.loc 2 399 0
 551 016c C398      		cbi 0x18,3
 552               	.L13:
 400:main.c        **** 			}
 401:main.c        **** 			Timer_Set(TIMER_LED_SENSOR_BLINK,100);
 553               		.loc 2 401 0
 554 016e 64E6      		ldi r22,lo8(100)
 555 0170 70E0      		ldi r23,0
 556 0172 81E0      		ldi r24,lo8(1)
 557 0174 00D0      		rcall Timer_Set
 558               	.LVL37:
 402:main.c        **** 			LED_SENSOR_ADC_SETUP();
 559               		.loc 2 402 0
 560 0176 D898      		cbi 0x1b,0
 561 0178 E3E9      		ldi r30,lo8(-109)
 562 017a E6B9      		out 0x6,r30
 563 017c 13B8      		out 0x3,__zero_reg__
 403:main.c        **** 			//LED_SENSOR_ON();
 404:main.c        **** 			//_delay_us(200);
 405:main.c        **** 			//LED_SENSOR_REVERSE_BIAS();
 406:main.c        **** 			//_delay_us(200);
 407:main.c        **** 			LED_SENSOR_INPUT();
 564               		.loc 2 407 0
 565 017e D298      		cbi 0x1a,2
 566 0180 DA98      		cbi 0x1b,2
 408:main.c        **** 
 409:main.c        **** 			led_sensor_blink++;
 567               		.loc 2 409 0
 568 0182 A394      		inc r10
 569               	.LVL38:
 410:main.c        **** 			if (led_sensor_nvalues > 0) {
 570               		.loc 2 410 0
 571 0184 1123      		tst r17
 572 0186 01F0      		breq .L14
 411:main.c        **** 				led_sensor_weigthed_sum -= led_sensor_weigthed_sum_data[led_sensor_weigthed_sum_idx];
 573               		.loc 2 411 0
 574 0188 EB2D      		mov r30,r11
 575 018a F0E0      		ldi r31,0
 576 018c EE0F      		lsl r30
 577 018e FF1F      		rol r31
 578 0190 E050      		subi r30,lo8(-(led_sensor_weigthed_sum_data.2382))
 579 0192 F040      		sbci r31,hi8(-(led_sensor_weigthed_sum_data.2382))
 580 0194 2081      		ld r18,Z
 581 0196 3181      		ldd r19,Z+1
 582               	.LVL39:
 412:main.c        **** 				led_sensor_weigthed_sum_data[led_sensor_weigthed_sum_idx] = led_sensor_values[4];
 583               		.loc 2 412 0
 584 0198 8985      		ldd r24,Y+9
 585 019a 9A85      		ldd r25,Y+10
 586 019c C80E      		add r12,r24
 587 019e D91E      		adc r13,r25
 588               	.LVL40:
 589 01a0 9183      		std Z+1,r25
 590 01a2 8083      		st Z,r24
 413:main.c        **** 				led_sensor_weigthed_sum += led_sensor_weigthed_sum_data[led_sensor_weigthed_sum_idx];
 591               		.loc 2 413 0
 592 01a4 C21A      		sub r12,r18
 593 01a6 D30A      		sbc r13,r19
 594               	.LVL41:
 414:main.c        **** 
 415:main.c        **** 				led_sensor_weigthed_sum_idx++;
 595               		.loc 2 415 0
 596 01a8 B394      		inc r11
 597               	.LVL42:
 416:main.c        **** 				if (led_sensor_weigthed_sum_idx >= elements_of(led_sensor_weigthed_sum_data) ) {
 598               		.loc 2 416 0
 599 01aa F3E1      		ldi r31,lo8(19)
 600 01ac FB15      		cp r31,r11
 601 01ae 00F4      		brsh .L15
 417:main.c        **** 					led_sensor_weigthed_sum_idx = 0;
 602               		.loc 2 417 0
 603 01b0 B12C      		mov r11,__zero_reg__
 604               	.LVL43:
 605               	.L15:
 418:main.c        **** 				}
 419:main.c        **** 
 420:main.c        **** 
 421:main.c        **** 				if ((led_sensor_blink & 0xF) == 0) {
 606               		.loc 2 421 0
 607 01b2 2A2D      		mov r18,r10
 608 01b4 2F70      		andi r18,lo8(15)
 609 01b6 01F4      		brne .L14
 422:main.c        **** 					printf("led adc[%d]:\t%05u: \t%05u,\t%05u\t%05u ticks:\t%06u\tfilt:%06d   \r",
 610               		.loc 2 422 0
 611 01b8 2B89      		ldd r18,Y+19
 612 01ba 2F93      		push r18
 613 01bc 8F92      		push r8
 614 01be FF92      		push r15
 615 01c0 EF92      		push r14
 616 01c2 9F93      		push r25
 617 01c4 8F93      		push r24
 618 01c6 8885      		ldd r24,Y+8
 619 01c8 8F93      		push r24
 620 01ca 8F81      		ldd r24,Y+7
 621 01cc 8F93      		push r24
 622 01ce 8E81      		ldd r24,Y+6
 623 01d0 8F93      		push r24
 624 01d2 8D81      		ldd r24,Y+5
 625 01d4 8F93      		push r24
 626 01d6 C601      		movw r24,r12
 627 01d8 64E1      		ldi r22,lo8(20)
 628 01da 70E0      		ldi r23,0
 629 01dc 00D0      		rcall __udivmodhi4
 630 01de 7F93      		push r23
 631 01e0 6F93      		push r22
 632 01e2 1F92      		push __zero_reg__
 633 01e4 1F93      		push r17
 634 01e6 80E0      		ldi r24,lo8(.LC0)
 635 01e8 90E0      		ldi r25,hi8(.LC0)
 636 01ea 9F93      		push r25
 637 01ec 8F93      		push r24
 638 01ee 00D0      		rcall printf
 639               	.LVL44:
 640 01f0 0FB6      		in __tmp_reg__,__SREG__
 641 01f2 F894      		cli
 642 01f4 DEBF      		out __SP_H__,r29
 643 01f6 0FBE      		out __SREG__,__tmp_reg__
 644 01f8 CDBF      		out __SP_L__,r28
 645               	.L14:
 423:main.c        **** 							led_sensor_nvalues,
 424:main.c        **** 							led_sensor_weigthed_sum / elements_of(led_sensor_weigthed_sum_data) ,
 425:main.c        **** 							led_sensor_values[2],
 426:main.c        **** 							led_sensor_values[3],
 427:main.c        **** 							led_sensor_values[4],
 428:main.c        **** 							led_sensor_trig_time,
 429:main.c        **** 							filtered_val);
 430:main.c        **** 				}
 431:main.c        **** 			}
 432:main.c        **** 
 433:main.c        **** 			led_sensor_delta_time = 0;
 646               		.loc 2 433 0
 647 01fa 1092 0000 		sts led_sensor_delta_time.2376+1,__zero_reg__
 648 01fe 1092 0000 		sts led_sensor_delta_time.2376,__zero_reg__
 649               	.LVL45:
 434:main.c        **** 			led_sensor_trig_time = 0;
 435:main.c        **** 			led_sensor_nvalues = 0;
 436:main.c        **** 			led_sensor_nsample = 2;
 650               		.loc 2 436 0
 651 0202 82E0      		ldi r24,lo8(2)
 652 0204 8093 0000 		sts led_sensor_nsample.2381,r24
 435:main.c        **** 			led_sensor_nsample = 2;
 653               		.loc 2 435 0
 654 0208 10E0      		ldi r17,0
 434:main.c        **** 			led_sensor_trig_time = 0;
 655               		.loc 2 434 0
 656 020a E12C      		mov r14,__zero_reg__
 657 020c F12C      		mov r15,__zero_reg__
 658               	.LVL46:
 659               	.L11:
 437:main.c        **** 		}
 438:main.c        **** 
 439:main.c        **** 		//Time measurement of LED sensor discharge
 440:main.c        **** 		if (!LED_SENSOR_IS_HIGH()) {
 660               		.loc 2 440 0
 661 020e CA99      		sbic 0x19,2
 662 0210 00C0      		rjmp .L16
 441:main.c        **** 			LED_BUTTON_OFF();
 663               		.loc 2 441 0
 664 0212 C198      		cbi 0x18,1
 442:main.c        **** 			if (led_sensor_trig_time == 0) {
 665               		.loc 2 442 0
 666 0214 E114      		cp r14,__zero_reg__
 667 0216 F104      		cpc r15,__zero_reg__
 668 0218 01F4      		brne .L17
 443:main.c        **** 				led_sensor_trig_time = led_sensor_delta_time;
 669               		.loc 2 443 0
 670 021a E090 0000 		lds r14,led_sensor_delta_time.2376
 671 021e F090 0000 		lds r15,led_sensor_delta_time.2376+1
 672               	.LVL47:
 673 0222 00C0      		rjmp .L17
 674               	.L16:
 444:main.c        **** 			}
 445:main.c        **** 		}
 446:main.c        **** 		else {
 447:main.c        **** 			LED_BUTTON_ON();
 675               		.loc 2 447 0
 676 0224 C19A      		sbi 0x18,1
 677               	.L17:
 448:main.c        **** 		}
 449:main.c        **** 
 450:main.c        **** 
 451:main.c        **** 		//ADC measurement of led sensor
 452:main.c        **** 		{
 453:main.c        **** 			if (led_sensor_delta_time >= us_to_ticks(4000) * led_sensor_nsample)
 678               		.loc 2 453 0
 679 0226 4090 0000 		lds r4,led_sensor_delta_time.2376
 680 022a 5090 0000 		lds r5,led_sensor_delta_time.2376+1
 681 022e 612C      		mov r6,__zero_reg__
 682 0230 712C      		mov r7,__zero_reg__
 683 0232 6091 0000 		lds r22,led_sensor_nsample.2381
 684 0236 70E0      		ldi r23,0
 685 0238 80E0      		ldi r24,0
 686 023a 90E0      		ldi r25,0
 687 023c 23E0      		ldi r18,lo8(3)
 688 023e 32E0      		ldi r19,lo8(2)
 689 0240 40E0      		ldi r20,0
 690 0242 50E0      		ldi r21,0
 691 0244 00D0      		rcall __mulsi3
 692               	.LVL48:
 693 0246 4616      		cp r4,r22
 694 0248 5706      		cpc r5,r23
 695 024a 6806      		cpc r6,r24
 696 024c 7906      		cpc r7,r25
 697 024e 00F0      		brlo .L18
 454:main.c        **** 			{
 455:main.c        **** 				LED_SENSOR_ADC_START();
 698               		.loc 2 455 0
 699 0250 9EE8      		ldi r25,lo8(-114)
 700 0252 97B9      		out 0x7,r25
 701 0254 369A      		sbi 0x6,6
 456:main.c        **** 				led_sensor_nsample++;
 702               		.loc 2 456 0
 703 0256 8091 0000 		lds r24,led_sensor_nsample.2381
 704 025a 8F5F      		subi r24,lo8(-(1))
 705 025c 8093 0000 		sts led_sensor_nsample.2381,r24
 706               	.L18:
 457:main.c        **** 			}
 458:main.c        **** 			if (LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() && LED_SENSOR_ADC_IS_COMPLETED()) {
 707               		.loc 2 458 0
 708 0260 87B1      		in r24,0x7
 709 0262 8F73      		andi r24,lo8(63)
 710 0264 8E30      		cpi r24,lo8(14)
 711 0266 01F4      		brne .L19
 712               		.loc 2 458 0 is_stmt 0 discriminator 1
 713 0268 349B      		sbis 0x6,4
 714 026a 00C0      		rjmp .L19
 459:main.c        **** 				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
 715               		.loc 2 459 0 is_stmt 1
 716 026c 1530      		cpi r17,lo8(5)
 717 026e 00F4      		brsh .L20
 460:main.c        **** 					led_sensor_values[led_sensor_nvalues] = ADC;
 718               		.loc 2 460 0
 719 0270 64B1      		in r22,0x4
 720 0272 75B1      		in r23,0x4+1
 721 0274 E12F      		mov r30,r17
 722 0276 F0E0      		ldi r31,0
 723 0278 EE0F      		lsl r30
 724 027a FF1F      		rol r31
 725 027c 81E0      		ldi r24,lo8(1)
 726 027e 90E0      		ldi r25,0
 727 0280 8C0F      		add r24,r28
 728 0282 9D1F      		adc r25,r29
 729 0284 E80F      		add r30,r24
 730 0286 F91F      		adc r31,r25
 731 0288 7183      		std Z+1,r23
 732 028a 6083      		st Z,r22
 461:main.c        **** 					if (led_sensor_nvalues == 4) {
 733               		.loc 2 461 0
 734 028c 1430      		cpi r17,lo8(4)
 735 028e 01F4      		brne .L20
 736               	.LVL49:
 737               	.LBB25:
 462:main.c        **** 						int16_t val = led_sensor_values[led_sensor_nvalues];
 463:main.c        **** 						if ((led_sensor_last_random & 0x1)) {
 738               		.loc 2 463 0
 739 0290 00FF      		sbrs r16,0
 740 0292 00C0      		rjmp .L21
 464:main.c        **** 							val = -val;
 741               		.loc 2 464 0
 742 0294 7195      		neg r23
 743 0296 6195      		neg r22
 744 0298 7109      		sbc r23,__zero_reg__
 745               	.LVL50:
 746               	.L21:
 465:main.c        **** 						}
 466:main.c        **** 						filtered_val = filter_iir2(&filter_iir2_data,val);
 747               		.loc 2 466 0
 748 029a C101      		movw r24,r2
 749 029c 00D0      		rcall filter_iir2
 750               	.LVL51:
 751 029e 882E      		mov r8,r24
 752 02a0 9B8B      		std Y+19,r25
 753               	.LVL52:
 754               	.L20:
 755               	.LBE25:
 467:main.c        **** 					}
 468:main.c        **** 				}
 469:main.c        **** 				led_sensor_nvalues++;
 756               		.loc 2 469 0
 757 02a2 1F5F      		subi r17,lo8(-(1))
 758               	.LVL53:
 470:main.c        **** 				LED_SENSOR_ADC_DONE();
 759               		.loc 2 470 0
 760 02a4 349A      		sbi 0x6,4
 761               	.LVL54:
 762               	.L19:
 471:main.c        **** 			}
 472:main.c        **** 		}
 473:main.c        **** 
 474:main.c        **** 
 475:main.c        **** 		if (BOOTLOADER_CONDITION) {
 763               		.loc 2 475 0
 764 02a6 CB9B      		sbis 0x19,3
 765 02a8 00C0      		rjmp .L51
 766               	.L22:
 251:main.c        **** 	unsigned char buttonPressed = 0;
 767               		.loc 2 251 0
 768 02aa 892D      		mov r24,r9
 769 02ac 00C0      		rjmp .L5
 770               	.L51:
 771               	.LBB26:
 476:main.c        **** 			cli();
 772               		.loc 2 476 0
 773               	/* #APP */
 774               	 ;  476 "main.c" 1
 775 02ae F894      		cli
 776               	 ;  0 "" 2
 477:main.c        **** 			BOOTLOADER_CONDITION_INIT();
 777               		.loc 2 477 0
 778               	/* #NOAPP */
 779 02b0 D398      		cbi 0x1a,3
 780 02b2 DB9A      		sbi 0x1b,3
 781               	.LVL55:
 478:main.c        **** 			void (*reset_vec)(void) = 0;
 479:main.c        **** 			reset_vec();
 782               		.loc 2 479 0
 783 02b4 E0E0      		ldi r30,0
 784 02b6 F0E0      		ldi r31,0
 785 02b8 0995      		icall
 786               	.LVL56:
 787 02ba 00C0      		rjmp .L22
 788               	.LBE26:
 789               		.cfi_endproc
 790               	.LFE24:
 791               		.size	main, .-main
 792               		.data
 793               		.type	lfsr.2294, @object
 794               		.size	lfsr.2294, 1
 795               	lfsr.2294:
 796 0000 01        		.byte	1
 797               		.type	led_sensor_nsample.2381, @object
 798               		.size	led_sensor_nsample.2381, 1
 799               	led_sensor_nsample.2381:
 800 0001 05        		.byte	5
 801               		.local	led_sensor_weigthed_sum_data.2382
 802               		.comm	led_sensor_weigthed_sum_data.2382,40,1
 803               		.local	led_sensor_delta_time.2376
 804               		.comm	led_sensor_delta_time.2376,2,1
 805               		.section	.progmem.data,"a",@progbits
 806               		.type	__c.2386, @object
 807               		.size	__c.2386, 4
 808               	__c.2386:
 809 0000 4221 0A00 		.string	"B!\n"
 810               		.local	reportBuffer
 811               		.comm	reportBuffer,2,1
 812               	.global	usbDescriptorHidReport
 813               		.type	usbDescriptorHidReport, @object
 814               		.size	usbDescriptorHidReport, 80
 815               	usbDescriptorHidReport:
 816 0004 05        		.byte	5
 817 0005 01        		.byte	1
 818 0006 09        		.byte	9
 819 0007 02        		.byte	2
 820 0008 A1        		.byte	-95
 821 0009 01        		.byte	1
 822 000a 09        		.byte	9
 823 000b 01        		.byte	1
 824 000c A1        		.byte	-95
 825 000d 00        		.byte	0
 826 000e 05        		.byte	5
 827 000f 09        		.byte	9
 828 0010 19        		.byte	25
 829 0011 01        		.byte	1
 830 0012 29        		.byte	41
 831 0013 03        		.byte	3
 832 0014 15        		.byte	21
 833 0015 00        		.byte	0
 834 0016 25        		.byte	37
 835 0017 01        		.byte	1
 836 0018 95        		.byte	-107
 837 0019 03        		.byte	3
 838 001a 75        		.byte	117
 839 001b 01        		.byte	1
 840 001c 85        		.byte	-123
 841 001d 01        		.byte	1
 842 001e 81        		.byte	-127
 843 001f 02        		.byte	2
 844 0020 95        		.byte	-107
 845 0021 01        		.byte	1
 846 0022 75        		.byte	117
 847 0023 05        		.byte	5
 848 0024 81        		.byte	-127
 849 0025 03        		.byte	3
 850 0026 C0        		.byte	-64
 851 0027 C0        		.byte	-64
 852 0028 0B        		.byte	11
 853 0029 00        		.byte	0
 854 002a 00        		.byte	0
 855 002b 01        		.byte	1
 856 002c 00        		.byte	0
 857 002d A1        		.byte	-95
 858 002e 00        		.byte	0
 859 002f 05        		.byte	5
 860 0030 01        		.byte	1
 861 0031 75        		.byte	117
 862 0032 10        		.byte	16
 863 0033 95        		.byte	-107
 864 0034 01        		.byte	1
 865 0035 09        		.byte	9
 866 0036 00        		.byte	0
 867 0037 85        		.byte	-123
 868 0038 7C        		.byte	124
 869 0039 B1        		.byte	-79
 870 003a 02        		.byte	2
 871 003b 09        		.byte	9
 872 003c 00        		.byte	0
 873 003d 85        		.byte	-123
 874 003e 7D        		.byte	125
 875 003f B1        		.byte	-79
 876 0040 02        		.byte	2
 877 0041 75        		.byte	117
 878 0042 08        		.byte	8
 879 0043 95        		.byte	-107
 880 0044 44        		.byte	68
 881 0045 09        		.byte	9
 882 0046 00        		.byte	0
 883 0047 85        		.byte	-123
 884 0048 7E        		.byte	126
 885 0049 B1        		.byte	-79
 886 004a 00        		.byte	0
 887 004b 09        		.byte	9
 888 004c 00        		.byte	0
 889 004d 95        		.byte	-107
 890 004e 09        		.byte	9
 891 004f 85        		.byte	-123
 892 0050 7F        		.byte	127
 893 0051 B1        		.byte	-79
 894 0052 00        		.byte	0
 895 0053 C0        		.byte	-64
 896               		.local	captured
 897               		.comm	captured,2,1
 898               		.local	capture_diff_max
 899               		.comm	capture_diff_max,2,1
 900               		.local	capture_diff
 901               		.comm	capture_diff,2,1
 902               		.text
 903               	.Letext0:
 904               		.file 6 "/usr/lib/avr/include/stdint.h"
 905               		.file 7 "/usr/lib/avr/include/stdio.h"
 906               		.file 8 "../usbdrv/usbdrv.h"
 907               		.file 9 "./usbconfig.h"
 908               		.file 10 "./timer_ids.h"
 909               		.file 11 "../util/q7_8_t.h"
 910               		.file 12 "hid.h"
 911               		.file 13 "../util/usbstream.h"
 912               		.file 14 "../util/timers.h"
 913               		.section	.debug_info,"",@progbits
 914               	.Ldebug_info0:
 915 0000 AF09 0000 		.long	0x9af
 916 0004 0200      		.word	0x2
 917 0006 0000 0000 		.long	.Ldebug_abbrev0
 918 000a 04        		.byte	0x4
 919 000b 01        		.uleb128 0x1
 920 000c 0000 0000 		.long	.LASF96
 921 0010 0C        		.byte	0xc
 922 0011 0000 0000 		.long	.LASF97
 923 0015 0000 0000 		.long	.LASF98
 924 0019 0000 0000 		.long	.Ldebug_ranges0+0
 925 001d 0000 0000 		.long	0
 926 0021 0000 0000 		.long	0
 927 0025 0000 0000 		.long	.Ldebug_line0
 928 0029 02        		.uleb128 0x2
 929 002a 0000 0000 		.long	.LASF0
 930 002e 06        		.byte	0x6
 931 002f 7D        		.byte	0x7d
 932 0030 3400 0000 		.long	0x34
 933 0034 03        		.uleb128 0x3
 934 0035 01        		.byte	0x1
 935 0036 06        		.byte	0x6
 936 0037 0000 0000 		.long	.LASF2
 937 003b 02        		.uleb128 0x2
 938 003c 0000 0000 		.long	.LASF1
 939 0040 06        		.byte	0x6
 940 0041 7E        		.byte	0x7e
 941 0042 4600 0000 		.long	0x46
 942 0046 03        		.uleb128 0x3
 943 0047 01        		.byte	0x1
 944 0048 08        		.byte	0x8
 945 0049 0000 0000 		.long	.LASF3
 946 004d 02        		.uleb128 0x2
 947 004e 0000 0000 		.long	.LASF4
 948 0052 06        		.byte	0x6
 949 0053 7F        		.byte	0x7f
 950 0054 5800 0000 		.long	0x58
 951 0058 04        		.uleb128 0x4
 952 0059 02        		.byte	0x2
 953 005a 05        		.byte	0x5
 954 005b 696E 7400 		.string	"int"
 955 005f 02        		.uleb128 0x2
 956 0060 0000 0000 		.long	.LASF5
 957 0064 06        		.byte	0x6
 958 0065 80        		.byte	0x80
 959 0066 6A00 0000 		.long	0x6a
 960 006a 03        		.uleb128 0x3
 961 006b 02        		.byte	0x2
 962 006c 07        		.byte	0x7
 963 006d 0000 0000 		.long	.LASF6
 964 0071 02        		.uleb128 0x2
 965 0072 0000 0000 		.long	.LASF7
 966 0076 06        		.byte	0x6
 967 0077 81        		.byte	0x81
 968 0078 7C00 0000 		.long	0x7c
 969 007c 03        		.uleb128 0x3
 970 007d 04        		.byte	0x4
 971 007e 05        		.byte	0x5
 972 007f 0000 0000 		.long	.LASF8
 973 0083 03        		.uleb128 0x3
 974 0084 04        		.byte	0x4
 975 0085 07        		.byte	0x7
 976 0086 0000 0000 		.long	.LASF9
 977 008a 03        		.uleb128 0x3
 978 008b 08        		.byte	0x8
 979 008c 05        		.byte	0x5
 980 008d 0000 0000 		.long	.LASF10
 981 0091 03        		.uleb128 0x3
 982 0092 08        		.byte	0x8
 983 0093 07        		.byte	0x7
 984 0094 0000 0000 		.long	.LASF11
 985 0098 05        		.uleb128 0x5
 986 0099 0000 0000 		.long	.LASF25
 987 009d 0E        		.byte	0xe
 988 009e 07        		.byte	0x7
 989 009f F4        		.byte	0xf4
 990 00a0 1A01 0000 		.long	0x11a
 991 00a4 06        		.uleb128 0x6
 992 00a5 6275 6600 		.string	"buf"
 993 00a9 07        		.byte	0x7
 994 00aa F5        		.byte	0xf5
 995 00ab 1A01 0000 		.long	0x11a
 996 00af 02        		.byte	0x2
 997 00b0 23        		.byte	0x23
 998 00b1 00        		.uleb128 0
 999 00b2 07        		.uleb128 0x7
 1000 00b3 0000 0000 		.long	.LASF12
 1001 00b7 07        		.byte	0x7
 1002 00b8 F6        		.byte	0xf6
 1003 00b9 4600 0000 		.long	0x46
 1004 00bd 02        		.byte	0x2
 1005 00be 23        		.byte	0x23
 1006 00bf 02        		.uleb128 0x2
 1007 00c0 07        		.uleb128 0x7
 1008 00c1 0000 0000 		.long	.LASF13
 1009 00c5 07        		.byte	0x7
 1010 00c6 F7        		.byte	0xf7
 1011 00c7 3B00 0000 		.long	0x3b
 1012 00cb 02        		.byte	0x2
 1013 00cc 23        		.byte	0x23
 1014 00cd 03        		.uleb128 0x3
 1015 00ce 08        		.uleb128 0x8
 1016 00cf 0000 0000 		.long	.LASF14
 1017 00d3 07        		.byte	0x7
 1018 00d4 0701      		.word	0x107
 1019 00d6 5800 0000 		.long	0x58
 1020 00da 02        		.byte	0x2
 1021 00db 23        		.byte	0x23
 1022 00dc 04        		.uleb128 0x4
 1023 00dd 09        		.uleb128 0x9
 1024 00de 6C65 6E00 		.string	"len"
 1025 00e2 07        		.byte	0x7
 1026 00e3 0801      		.word	0x108
 1027 00e5 5800 0000 		.long	0x58
 1028 00e9 02        		.byte	0x2
 1029 00ea 23        		.byte	0x23
 1030 00eb 06        		.uleb128 0x6
 1031 00ec 09        		.uleb128 0x9
 1032 00ed 7075 7400 		.string	"put"
 1033 00f1 07        		.byte	0x7
 1034 00f2 0901      		.word	0x109
 1035 00f4 4201 0000 		.long	0x142
 1036 00f8 02        		.byte	0x2
 1037 00f9 23        		.byte	0x23
 1038 00fa 08        		.uleb128 0x8
 1039 00fb 09        		.uleb128 0x9
 1040 00fc 6765 7400 		.string	"get"
 1041 0100 07        		.byte	0x7
 1042 0101 0A01      		.word	0x10a
 1043 0103 5801 0000 		.long	0x158
 1044 0107 02        		.byte	0x2
 1045 0108 23        		.byte	0x23
 1046 0109 0A        		.uleb128 0xa
 1047 010a 08        		.uleb128 0x8
 1048 010b 0000 0000 		.long	.LASF15
 1049 010f 07        		.byte	0x7
 1050 0110 0B01      		.word	0x10b
 1051 0112 5E01 0000 		.long	0x15e
 1052 0116 02        		.byte	0x2
 1053 0117 23        		.byte	0x23
 1054 0118 0C        		.uleb128 0xc
 1055 0119 00        		.byte	0
 1056 011a 0A        		.uleb128 0xa
 1057 011b 02        		.byte	0x2
 1058 011c 2001 0000 		.long	0x120
 1059 0120 03        		.uleb128 0x3
 1060 0121 01        		.byte	0x1
 1061 0122 08        		.byte	0x8
 1062 0123 0000 0000 		.long	.LASF16
 1063 0127 0B        		.uleb128 0xb
 1064 0128 01        		.byte	0x1
 1065 0129 5800 0000 		.long	0x58
 1066 012d 3C01 0000 		.long	0x13c
 1067 0131 0C        		.uleb128 0xc
 1068 0132 2001 0000 		.long	0x120
 1069 0136 0C        		.uleb128 0xc
 1070 0137 3C01 0000 		.long	0x13c
 1071 013b 00        		.byte	0
 1072 013c 0A        		.uleb128 0xa
 1073 013d 02        		.byte	0x2
 1074 013e 9800 0000 		.long	0x98
 1075 0142 0A        		.uleb128 0xa
 1076 0143 02        		.byte	0x2
 1077 0144 2701 0000 		.long	0x127
 1078 0148 0B        		.uleb128 0xb
 1079 0149 01        		.byte	0x1
 1080 014a 5800 0000 		.long	0x58
 1081 014e 5801 0000 		.long	0x158
 1082 0152 0C        		.uleb128 0xc
 1083 0153 3C01 0000 		.long	0x13c
 1084 0157 00        		.byte	0
 1085 0158 0A        		.uleb128 0xa
 1086 0159 02        		.byte	0x2
 1087 015a 4801 0000 		.long	0x148
 1088 015e 0D        		.uleb128 0xd
 1089 015f 02        		.byte	0x2
 1090 0160 0E        		.uleb128 0xe
 1091 0161 0000 0000 		.long	.LASF17
 1092 0165 07        		.byte	0x7
 1093 0166 1501      		.word	0x115
 1094 0168 9800 0000 		.long	0x98
 1095 016c 0F        		.uleb128 0xf
 1096 016d 01        		.byte	0x1
 1097 016e 4600 0000 		.long	0x46
 1098 0172 09        		.byte	0x9
 1099 0173 7601      		.word	0x176
 1100 0175 9E01 0000 		.long	0x19e
 1101 0179 10        		.uleb128 0x10
 1102 017a 0000 0000 		.long	.LASF18
 1103 017e 01        		.byte	0x1
 1104 017f 10        		.uleb128 0x10
 1105 0180 0000 0000 		.long	.LASF19
 1106 0184 02        		.byte	0x2
 1107 0185 10        		.uleb128 0x10
 1108 0186 0000 0000 		.long	.LASF20
 1109 018a 7C        		.byte	0x7c
 1110 018b 10        		.uleb128 0x10
 1111 018c 0000 0000 		.long	.LASF21
 1112 0190 7D        		.byte	0x7d
 1113 0191 10        		.uleb128 0x10
 1114 0192 0000 0000 		.long	.LASF22
 1115 0196 7E        		.byte	0x7e
 1116 0197 10        		.uleb128 0x10
 1117 0198 0000 0000 		.long	.LASF23
 1118 019c 7F        		.byte	0x7f
 1119 019d 00        		.byte	0
 1120 019e 03        		.uleb128 0x3
 1121 019f 02        		.byte	0x2
 1122 01a0 07        		.byte	0x7
 1123 01a1 0000 0000 		.long	.LASF24
 1124 01a5 11        		.uleb128 0x11
 1125 01a6 0000 0000 		.long	.LASF26
 1126 01aa 0C        		.byte	0xc
 1127 01ab 08        		.byte	0x8
 1128 01ac 8702      		.word	0x287
 1129 01ae D101 0000 		.long	0x1d1
 1130 01b2 09        		.uleb128 0x9
 1131 01b3 6C65 6E00 		.string	"len"
 1132 01b7 08        		.byte	0x8
 1133 01b8 8802      		.word	0x288
 1134 01ba D101 0000 		.long	0x1d1
 1135 01be 02        		.byte	0x2
 1136 01bf 23        		.byte	0x23
 1137 01c0 00        		.uleb128 0
 1138 01c1 08        		.uleb128 0x8
 1139 01c2 0000 0000 		.long	.LASF27
 1140 01c6 08        		.byte	0x8
 1141 01c7 8902      		.word	0x289
 1142 01c9 D601 0000 		.long	0x1d6
 1143 01cd 02        		.byte	0x2
 1144 01ce 23        		.byte	0x23
 1145 01cf 01        		.uleb128 0x1
 1146 01d0 00        		.byte	0
 1147 01d1 12        		.uleb128 0x12
 1148 01d2 4600 0000 		.long	0x46
 1149 01d6 13        		.uleb128 0x13
 1150 01d7 4600 0000 		.long	0x46
 1151 01db E601 0000 		.long	0x1e6
 1152 01df 14        		.uleb128 0x14
 1153 01e0 9E01 0000 		.long	0x19e
 1154 01e4 0A        		.byte	0xa
 1155 01e5 00        		.byte	0
 1156 01e6 0E        		.uleb128 0xe
 1157 01e7 0000 0000 		.long	.LASF28
 1158 01eb 08        		.byte	0x8
 1159 01ec 8A02      		.word	0x28a
 1160 01ee A501 0000 		.long	0x1a5
 1161 01f2 15        		.uleb128 0x15
 1162 01f3 0000 0000 		.long	.LASF99
 1163 01f7 02        		.byte	0x2
 1164 01f8 08        		.byte	0x8
 1165 01f9 9302      		.word	0x293
 1166 01fb 1802 0000 		.long	0x218
 1167 01ff 16        		.uleb128 0x16
 1168 0200 0000 0000 		.long	.LASF29
 1169 0204 08        		.byte	0x8
 1170 0205 9402      		.word	0x294
 1171 0207 6A00 0000 		.long	0x6a
 1172 020b 16        		.uleb128 0x16
 1173 020c 0000 0000 		.long	.LASF30
 1174 0210 08        		.byte	0x8
 1175 0211 9502      		.word	0x295
 1176 0213 1802 0000 		.long	0x218
 1177 0217 00        		.byte	0
 1178 0218 13        		.uleb128 0x13
 1179 0219 4600 0000 		.long	0x46
 1180 021d 2802 0000 		.long	0x228
 1181 0221 14        		.uleb128 0x14
 1182 0222 9E01 0000 		.long	0x19e
 1183 0226 01        		.byte	0x1
 1184 0227 00        		.byte	0
 1185 0228 0E        		.uleb128 0xe
 1186 0229 0000 0000 		.long	.LASF31
 1187 022d 08        		.byte	0x8
 1188 022e 9602      		.word	0x296
 1189 0230 F201 0000 		.long	0x1f2
 1190 0234 11        		.uleb128 0x11
 1191 0235 0000 0000 		.long	.LASF32
 1192 0239 08        		.byte	0x8
 1193 023a 08        		.byte	0x8
 1194 023b 9802      		.word	0x298
 1195 023d 8D02 0000 		.long	0x28d
 1196 0241 08        		.uleb128 0x8
 1197 0242 0000 0000 		.long	.LASF33
 1198 0246 08        		.byte	0x8
 1199 0247 9902      		.word	0x299
 1200 0249 4600 0000 		.long	0x46
 1201 024d 02        		.byte	0x2
 1202 024e 23        		.byte	0x23
 1203 024f 00        		.uleb128 0
 1204 0250 08        		.uleb128 0x8
 1205 0251 0000 0000 		.long	.LASF34
 1206 0255 08        		.byte	0x8
 1207 0256 9A02      		.word	0x29a
 1208 0258 4600 0000 		.long	0x46
 1209 025c 02        		.byte	0x2
 1210 025d 23        		.byte	0x23
 1211 025e 01        		.uleb128 0x1
 1212 025f 08        		.uleb128 0x8
 1213 0260 0000 0000 		.long	.LASF35
 1214 0264 08        		.byte	0x8
 1215 0265 9B02      		.word	0x29b
 1216 0267 2802 0000 		.long	0x228
 1217 026b 02        		.byte	0x2
 1218 026c 23        		.byte	0x23
 1219 026d 02        		.uleb128 0x2
 1220 026e 08        		.uleb128 0x8
 1221 026f 0000 0000 		.long	.LASF36
 1222 0273 08        		.byte	0x8
 1223 0274 9C02      		.word	0x29c
 1224 0276 2802 0000 		.long	0x228
 1225 027a 02        		.byte	0x2
 1226 027b 23        		.byte	0x23
 1227 027c 04        		.uleb128 0x4
 1228 027d 08        		.uleb128 0x8
 1229 027e 0000 0000 		.long	.LASF37
 1230 0282 08        		.byte	0x8
 1231 0283 9D02      		.word	0x29d
 1232 0285 2802 0000 		.long	0x228
 1233 0289 02        		.byte	0x2
 1234 028a 23        		.byte	0x23
 1235 028b 06        		.uleb128 0x6
 1236 028c 00        		.byte	0
 1237 028d 0E        		.uleb128 0xe
 1238 028e 0000 0000 		.long	.LASF38
 1239 0292 08        		.byte	0x8
 1240 0293 9E02      		.word	0x29e
 1241 0295 3402 0000 		.long	0x234
 1242 0299 17        		.uleb128 0x17
 1243 029a 01        		.byte	0x1
 1244 029b 4600 0000 		.long	0x46
 1245 029f 0A        		.byte	0xa
 1246 02a0 12        		.byte	0x12
 1247 02a1 DC02 0000 		.long	0x2dc
 1248 02a5 10        		.uleb128 0x10
 1249 02a6 0000 0000 		.long	.LASF39
 1250 02aa 00        		.byte	0
 1251 02ab 10        		.uleb128 0x10
 1252 02ac 0000 0000 		.long	.LASF40
 1253 02b0 01        		.byte	0x1
 1254 02b1 10        		.uleb128 0x10
 1255 02b2 0000 0000 		.long	.LASF41
 1256 02b6 02        		.byte	0x2
 1257 02b7 10        		.uleb128 0x10
 1258 02b8 0000 0000 		.long	.LASF42
 1259 02bc 03        		.byte	0x3
 1260 02bd 10        		.uleb128 0x10
 1261 02be 0000 0000 		.long	.LASF43
 1262 02c2 04        		.byte	0x4
 1263 02c3 10        		.uleb128 0x10
 1264 02c4 0000 0000 		.long	.LASF44
 1265 02c8 05        		.byte	0x5
 1266 02c9 10        		.uleb128 0x10
 1267 02ca 0000 0000 		.long	.LASF45
 1268 02ce 06        		.byte	0x6
 1269 02cf 10        		.uleb128 0x10
 1270 02d0 0000 0000 		.long	.LASF46
 1271 02d4 07        		.byte	0x7
 1272 02d5 10        		.uleb128 0x10
 1273 02d6 0000 0000 		.long	.LASF47
 1274 02da 08        		.byte	0x8
 1275 02db 00        		.byte	0
 1276 02dc 02        		.uleb128 0x2
 1277 02dd 0000 0000 		.long	.LASF48
 1278 02e1 0B        		.byte	0xb
 1279 02e2 0B        		.byte	0xb
 1280 02e3 4D00 0000 		.long	0x4d
 1281 02e7 18        		.uleb128 0x18
 1282 02e8 08        		.byte	0x8
 1283 02e9 01        		.byte	0x1
 1284 02ea 18        		.byte	0x18
 1285 02eb 2803 0000 		.long	0x328
 1286 02ef 06        		.uleb128 0x6
 1287 02f0 795F 3100 		.string	"y_1"
 1288 02f4 01        		.byte	0x1
 1289 02f5 19        		.byte	0x19
 1290 02f6 DC02 0000 		.long	0x2dc
 1291 02fa 02        		.byte	0x2
 1292 02fb 23        		.byte	0x23
 1293 02fc 00        		.uleb128 0
 1294 02fd 06        		.uleb128 0x6
 1295 02fe 795F 3200 		.string	"y_2"
 1296 0302 01        		.byte	0x1
 1297 0303 1A        		.byte	0x1a
 1298 0304 DC02 0000 		.long	0x2dc
 1299 0308 02        		.byte	0x2
 1300 0309 23        		.byte	0x23
 1301 030a 02        		.uleb128 0x2
 1302 030b 06        		.uleb128 0x6
 1303 030c 785F 3100 		.string	"x_1"
 1304 0310 01        		.byte	0x1
 1305 0311 1B        		.byte	0x1b
 1306 0312 DC02 0000 		.long	0x2dc
 1307 0316 02        		.byte	0x2
 1308 0317 23        		.byte	0x23
 1309 0318 04        		.uleb128 0x4
 1310 0319 06        		.uleb128 0x6
 1311 031a 785F 3200 		.string	"x_2"
 1312 031e 01        		.byte	0x1
 1313 031f 1C        		.byte	0x1c
 1314 0320 DC02 0000 		.long	0x2dc
 1315 0324 02        		.byte	0x2
 1316 0325 23        		.byte	0x23
 1317 0326 06        		.uleb128 0x6
 1318 0327 00        		.byte	0
 1319 0328 02        		.uleb128 0x2
 1320 0329 0000 0000 		.long	.LASF49
 1321 032d 01        		.byte	0x1
 1322 032e 1D        		.byte	0x1d
 1323 032f E702 0000 		.long	0x2e7
 1324 0333 18        		.uleb128 0x18
 1325 0334 02        		.byte	0x2
 1326 0335 02        		.byte	0x2
 1327 0336 B3        		.byte	0xb3
 1328 0337 5803 0000 		.long	0x358
 1329 033b 07        		.uleb128 0x7
 1330 033c 0000 0000 		.long	.LASF50
 1331 0340 02        		.byte	0x2
 1332 0341 B4        		.byte	0xb4
 1333 0342 4600 0000 		.long	0x46
 1334 0346 02        		.byte	0x2
 1335 0347 23        		.byte	0x23
 1336 0348 00        		.uleb128 0
 1337 0349 07        		.uleb128 0x7
 1338 034a 0000 0000 		.long	.LASF51
 1339 034e 02        		.byte	0x2
 1340 034f B5        		.byte	0xb5
 1341 0350 4600 0000 		.long	0x46
 1342 0354 02        		.byte	0x2
 1343 0355 23        		.byte	0x23
 1344 0356 01        		.uleb128 0x1
 1345 0357 00        		.byte	0
 1346 0358 18        		.uleb128 0x18
 1347 0359 02        		.byte	0x2
 1348 035a 02        		.byte	0x2
 1349 035b B2        		.byte	0xb2
 1350 035c 6F03 0000 		.long	0x36f
 1351 0360 07        		.uleb128 0x7
 1352 0361 0000 0000 		.long	.LASF52
 1353 0365 02        		.byte	0x2
 1354 0366 B6        		.byte	0xb6
 1355 0367 3303 0000 		.long	0x333
 1356 036b 02        		.byte	0x2
 1357 036c 23        		.byte	0x23
 1358 036d 00        		.uleb128 0
 1359 036e 00        		.byte	0
 1360 036f 02        		.uleb128 0x2
 1361 0370 0000 0000 		.long	.LASF53
 1362 0374 02        		.byte	0x2
 1363 0375 B7        		.byte	0xb7
 1364 0376 5803 0000 		.long	0x358
 1365 037a 18        		.uleb128 0x18
 1366 037b 41        		.byte	0x41
 1367 037c 02        		.byte	0x2
 1368 037d D5        		.byte	0xd5
 1369 037e 9F03 0000 		.long	0x39f
 1370 0382 07        		.uleb128 0x7
 1371 0383 0000 0000 		.long	.LASF27
 1372 0387 02        		.byte	0x2
 1373 0388 D6        		.byte	0xd6
 1374 0389 9F03 0000 		.long	0x39f
 1375 038d 02        		.byte	0x2
 1376 038e 23        		.byte	0x23
 1377 038f 00        		.uleb128 0
 1378 0390 07        		.uleb128 0x7
 1379 0391 0000 0000 		.long	.LASF54
 1380 0395 02        		.byte	0x2
 1381 0396 D7        		.byte	0xd7
 1382 0397 4600 0000 		.long	0x46
 1383 039b 02        		.byte	0x2
 1384 039c 23        		.byte	0x23
 1385 039d 40        		.uleb128 0x40
 1386 039e 00        		.byte	0
 1387 039f 13        		.uleb128 0x13
 1388 03a0 2001 0000 		.long	0x120
 1389 03a4 AF03 0000 		.long	0x3af
 1390 03a8 14        		.uleb128 0x14
 1391 03a9 9E01 0000 		.long	0x19e
 1392 03ad 3F        		.byte	0x3f
 1393 03ae 00        		.byte	0
 1394 03af 02        		.uleb128 0x2
 1395 03b0 0000 0000 		.long	.LASF55
 1396 03b4 02        		.byte	0x2
 1397 03b5 D8        		.byte	0xd8
 1398 03b6 7A03 0000 		.long	0x37a
 1399 03ba 19        		.uleb128 0x19
 1400 03bb 0000 0000 		.long	.LASF100
 1401 03bf 04        		.byte	0x4
 1402 03c0 C401      		.word	0x1c4
 1403 03c2 01        		.byte	0x1
 1404 03c3 03        		.byte	0x3
 1405 03c4 D503 0000 		.long	0x3d5
 1406 03c8 1A        		.uleb128 0x1a
 1407 03c9 0000 0000 		.long	.LASF101
 1408 03cd 04        		.byte	0x4
 1409 03ce C401      		.word	0x1c4
 1410 03d0 D503 0000 		.long	0x3d5
 1411 03d4 00        		.byte	0
 1412 03d5 1B        		.uleb128 0x1b
 1413 03d6 3B00 0000 		.long	0x3b
 1414 03da 1C        		.uleb128 0x1c
 1415 03db 01        		.byte	0x1
 1416 03dc 0000 0000 		.long	.LASF58
 1417 03e0 01        		.byte	0x1
 1418 03e1 92        		.byte	0x92
 1419 03e2 01        		.byte	0x1
 1420 03e3 DC02 0000 		.long	0x2dc
 1421 03e7 0000 0000 		.long	.LFB21
 1422 03eb 0000 0000 		.long	.LFE21
 1423 03ef 0000 0000 		.long	.LLST0
 1424 03f3 01        		.byte	0x1
 1425 03f4 7004 0000 		.long	0x470
 1426 03f8 1D        		.uleb128 0x1d
 1427 03f9 0000 0000 		.long	.LASF56
 1428 03fd 01        		.byte	0x1
 1429 03fe 92        		.byte	0x92
 1430 03ff 7004 0000 		.long	0x470
 1431 0403 0000 0000 		.long	.LLST1
 1432 0407 1E        		.uleb128 0x1e
 1433 0408 696E 00   		.string	"in"
 1434 040b 01        		.byte	0x1
 1435 040c 92        		.byte	0x92
 1436 040d DC02 0000 		.long	0x2dc
 1437 0411 0000 0000 		.long	.LLST2
 1438 0415 1F        		.uleb128 0x1f
 1439 0416 6130 00   		.string	"a0"
 1440 0419 01        		.byte	0x1
 1441 041a 94        		.byte	0x94
 1442 041b 7604 0000 		.long	0x476
 1443 041f 05        		.byte	0x5
 1444 0420 1F        		.uleb128 0x1f
 1445 0421 6131 00   		.string	"a1"
 1446 0424 01        		.byte	0x1
 1447 0425 95        		.byte	0x95
 1448 0426 7604 0000 		.long	0x476
 1449 042a 0A        		.byte	0xa
 1450 042b 1F        		.uleb128 0x1f
 1451 042c 6132 00   		.string	"a2"
 1452 042f 01        		.byte	0x1
 1453 0430 96        		.byte	0x96
 1454 0431 7604 0000 		.long	0x476
 1455 0435 05        		.byte	0x5
 1456 0436 20        		.uleb128 0x20
 1457 0437 0000 0000 		.long	.LASF57
 1458 043b 01        		.byte	0x1
 1459 043c 97        		.byte	0x97
 1460 043d 7604 0000 		.long	0x476
 1461 0441 0001      		.word	0x100
 1462 0443 21        		.uleb128 0x21
 1463 0444 5F62 3100 		.string	"_b1"
 1464 0448 01        		.byte	0x1
 1465 0449 98        		.byte	0x98
 1466 044a 7604 0000 		.long	0x476
 1467 044e 9E01      		.word	0x19e
 1468 0450 22        		.uleb128 0x22
 1469 0451 5F62 3200 		.string	"_b2"
 1470 0455 01        		.byte	0x1
 1471 0456 99        		.byte	0x99
 1472 0457 7604 0000 		.long	0x476
 1473 045b CB7E      		.sleb128 -181
 1474 045d 23        		.uleb128 0x23
 1475 045e 7265 7300 		.string	"res"
 1476 0462 01        		.byte	0x1
 1477 0463 9B        		.byte	0x9b
 1478 0464 DC02 0000 		.long	0x2dc
 1479 0468 06        		.byte	0x6
 1480 0469 68        		.byte	0x68
 1481 046a 93        		.byte	0x93
 1482 046b 01        		.uleb128 0x1
 1483 046c 69        		.byte	0x69
 1484 046d 93        		.byte	0x93
 1485 046e 01        		.uleb128 0x1
 1486 046f 00        		.byte	0
 1487 0470 0A        		.uleb128 0xa
 1488 0471 02        		.byte	0x2
 1489 0472 2803 0000 		.long	0x328
 1490 0476 1B        		.uleb128 0x1b
 1491 0477 DC02 0000 		.long	0x2dc
 1492 047b 24        		.uleb128 0x24
 1493 047c 01        		.byte	0x1
 1494 047d 0000 0000 		.long	.LASF102
 1495 0481 02        		.byte	0x2
 1496 0482 86        		.byte	0x86
 1497 0483 01        		.byte	0x1
 1498 0484 0000 0000 		.long	.LFB22
 1499 0488 0000 0000 		.long	.LFE22
 1500 048c 0000 0000 		.long	.LLST3
 1501 0490 01        		.byte	0x1
 1502 0491 25        		.uleb128 0x25
 1503 0492 01        		.byte	0x1
 1504 0493 0000 0000 		.long	.LASF59
 1505 0497 02        		.byte	0x2
 1506 0498 BD        		.byte	0xbd
 1507 0499 01        		.byte	0x1
 1508 049a 4600 0000 		.long	0x46
 1509 049e 0000 0000 		.long	.LFB23
 1510 04a2 0000 0000 		.long	.LFE23
 1511 04a6 03        		.byte	0x3
 1512 04a7 92        		.byte	0x92
 1513 04a8 20        		.uleb128 0x20
 1514 04a9 02        		.sleb128 2
 1515 04aa 01        		.byte	0x1
 1516 04ab CD04 0000 		.long	0x4cd
 1517 04af 1D        		.uleb128 0x1d
 1518 04b0 0000 0000 		.long	.LASF60
 1519 04b4 02        		.byte	0x2
 1520 04b5 BD        		.byte	0xbd
 1521 04b6 CD04 0000 		.long	0x4cd
 1522 04ba 0000 0000 		.long	.LLST4
 1523 04be 26        		.uleb128 0x26
 1524 04bf 7271 00   		.string	"rq"
 1525 04c2 02        		.byte	0x2
 1526 04c3 BF        		.byte	0xbf
 1527 04c4 D304 0000 		.long	0x4d3
 1528 04c8 0000 0000 		.long	.LLST5
 1529 04cc 00        		.byte	0
 1530 04cd 0A        		.uleb128 0xa
 1531 04ce 02        		.byte	0x2
 1532 04cf 4600 0000 		.long	0x46
 1533 04d3 0A        		.uleb128 0xa
 1534 04d4 02        		.byte	0x2
 1535 04d5 8D02 0000 		.long	0x28d
 1536 04d9 27        		.uleb128 0x27
 1537 04da 0000 0000 		.long	.LASF103
 1538 04de 03        		.byte	0x3
 1539 04df 7D        		.byte	0x7d
 1540 04e0 01        		.byte	0x1
 1541 04e1 03        		.byte	0x3
 1542 04e2 28        		.uleb128 0x28
 1543 04e3 0000 0000 		.long	.LASF104
 1544 04e7 05        		.byte	0x5
 1545 04e8 15        		.byte	0x15
 1546 04e9 01        		.byte	0x1
 1547 04ea 3B00 0000 		.long	0x3b
 1548 04ee 01        		.byte	0x1
 1549 04ef FF04 0000 		.long	0x4ff
 1550 04f3 29        		.uleb128 0x29
 1551 04f4 0000 0000 		.long	.LASF75
 1552 04f8 05        		.byte	0x5
 1553 04f9 16        		.byte	0x16
 1554 04fa 3B00 0000 		.long	0x3b
 1555 04fe 00        		.byte	0
 1556 04ff 2A        		.uleb128 0x2a
 1557 0500 01        		.byte	0x1
 1558 0501 0000 0000 		.long	.LASF105
 1559 0505 02        		.byte	0x2
 1560 0506 FA        		.byte	0xfa
 1561 0507 01        		.byte	0x1
 1562 0508 5800 0000 		.long	0x58
 1563 050c 01        		.byte	0x1
 1564 050d 0000 0000 		.long	.LFB24
 1565 0511 0000 0000 		.long	.LFE24
 1566 0515 0000 0000 		.long	.LLST6
 1567 0519 01        		.byte	0x1
 1568 051a 6A08 0000 		.long	0x86a
 1569 051e 2B        		.uleb128 0x2b
 1570 051f 0000 0000 		.long	.LASF61
 1571 0523 02        		.byte	0x2
 1572 0524 FC        		.byte	0xfc
 1573 0525 4600 0000 		.long	0x46
 1574 0529 0000 0000 		.long	.LLST7
 1575 052d 2C        		.uleb128 0x2c
 1576 052e 0000 0000 		.long	.LASF51
 1577 0532 02        		.byte	0x2
 1578 0533 FD        		.byte	0xfd
 1579 0534 4600 0000 		.long	0x46
 1580 0538 00        		.byte	0
 1581 0539 2B        		.uleb128 0x2b
 1582 053a 0000 0000 		.long	.LASF62
 1583 053e 02        		.byte	0x2
 1584 053f FE        		.byte	0xfe
 1585 0540 4600 0000 		.long	0x46
 1586 0544 0000 0000 		.long	.LLST8
 1587 0548 2D        		.uleb128 0x2d
 1588 0549 0000 0000 		.long	.LASF63
 1589 054d 02        		.byte	0x2
 1590 054e FF        		.byte	0xff
 1591 054f 2803 0000 		.long	0x328
 1592 0553 02        		.byte	0x2
 1593 0554 8C        		.byte	0x8c
 1594 0555 0B        		.sleb128 11
 1595 0556 2E        		.uleb128 0x2e
 1596 0557 0000 0000 		.long	.LASF64
 1597 055b 02        		.byte	0x2
 1598 055c 0001      		.word	0x100
 1599 055e DC02 0000 		.long	0x2dc
 1600 0562 0000 0000 		.long	.LLST9
 1601 0566 2E        		.uleb128 0x2e
 1602 0567 0000 0000 		.long	.LASF65
 1603 056b 02        		.byte	0x2
 1604 056c 0101      		.word	0x101
 1605 056e 3B00 0000 		.long	0x3b
 1606 0572 0000 0000 		.long	.LLST10
 1607 0576 2F        		.uleb128 0x2f
 1608 0577 0000 0000 		.long	.LASF66
 1609 057b 02        		.byte	0x2
 1610 057c 0201      		.word	0x102
 1611 057e 5F00 0000 		.long	0x5f
 1612 0582 05        		.byte	0x5
 1613 0583 03        		.byte	0x3
 1614 0584 0000 0000 		.long	led_sensor_delta_time.2376
 1615 0588 2E        		.uleb128 0x2e
 1616 0589 0000 0000 		.long	.LASF67
 1617 058d 02        		.byte	0x2
 1618 058e 0301      		.word	0x103
 1619 0590 5F00 0000 		.long	0x5f
 1620 0594 0000 0000 		.long	.LLST11
 1621 0598 2E        		.uleb128 0x2e
 1622 0599 0000 0000 		.long	.LASF68
 1623 059d 02        		.byte	0x2
 1624 059e 0401      		.word	0x104
 1625 05a0 3B00 0000 		.long	0x3b
 1626 05a4 0000 0000 		.long	.LLST12
 1627 05a8 2F        		.uleb128 0x2f
 1628 05a9 0000 0000 		.long	.LASF69
 1629 05ad 02        		.byte	0x2
 1630 05ae 0501      		.word	0x105
 1631 05b0 6A08 0000 		.long	0x86a
 1632 05b4 02        		.byte	0x2
 1633 05b5 8C        		.byte	0x8c
 1634 05b6 01        		.sleb128 1
 1635 05b7 2E        		.uleb128 0x2e
 1636 05b8 0000 0000 		.long	.LASF70
 1637 05bc 02        		.byte	0x2
 1638 05bd 0601      		.word	0x106
 1639 05bf 3B00 0000 		.long	0x3b
 1640 05c3 0000 0000 		.long	.LLST13
 1641 05c7 2F        		.uleb128 0x2f
 1642 05c8 0000 0000 		.long	.LASF71
 1643 05cc 02        		.byte	0x2
 1644 05cd 0701      		.word	0x107
 1645 05cf 3B00 0000 		.long	0x3b
 1646 05d3 05        		.byte	0x5
 1647 05d4 03        		.byte	0x3
 1648 05d5 0000 0000 		.long	led_sensor_nsample.2381
 1649 05d9 2F        		.uleb128 0x2f
 1650 05da 0000 0000 		.long	.LASF72
 1651 05de 02        		.byte	0x2
 1652 05df 0801      		.word	0x108
 1653 05e1 7A08 0000 		.long	0x87a
 1654 05e5 05        		.byte	0x5
 1655 05e6 03        		.byte	0x3
 1656 05e7 0000 0000 		.long	led_sensor_weigthed_sum_data.2382
 1657 05eb 2E        		.uleb128 0x2e
 1658 05ec 0000 0000 		.long	.LASF73
 1659 05f0 02        		.byte	0x2
 1660 05f1 0901      		.word	0x109
 1661 05f3 5F00 0000 		.long	0x5f
 1662 05f7 0000 0000 		.long	.LLST14
 1663 05fb 2E        		.uleb128 0x2e
 1664 05fc 0000 0000 		.long	.LASF74
 1665 0600 02        		.byte	0x2
 1666 0601 0A01      		.word	0x10a
 1667 0603 3B00 0000 		.long	0x3b
 1668 0607 0000 0000 		.long	.LLST15
 1669 060b 30        		.uleb128 0x30
 1670 060c 0000 0000 		.long	.LASF76
 1671 0610 02        		.byte	0x2
 1672 0611 0F01      		.word	0x10f
 1673 0613 AF03 0000 		.long	0x3af
 1674 0617 31        		.uleb128 0x31
 1675 0618 6900      		.string	"i"
 1676 061a 02        		.byte	0x2
 1677 061b 1501      		.word	0x115
 1678 061d 4600 0000 		.long	0x46
 1679 0621 32        		.uleb128 0x32
 1680 0622 6A00      		.string	"j"
 1681 0624 02        		.byte	0x2
 1682 0625 1501      		.word	0x115
 1683 0627 4600 0000 		.long	0x46
 1684 062b 7F        		.sleb128 -1
 1685 062c 33        		.uleb128 0x33
 1686 062d D904 0000 		.long	0x4d9
 1687 0631 0000 0000 		.long	.LBB18
 1688 0635 0000 0000 		.long	.LBE18
 1689 0639 02        		.byte	0x2
 1690 063a 0C01      		.word	0x10c
 1691 063c 34        		.uleb128 0x34
 1692 063d BA03 0000 		.long	0x3ba
 1693 0641 0000 0000 		.long	.LBB20
 1694 0645 0000 0000 		.long	.LBE20
 1695 0649 02        		.byte	0x2
 1696 064a 1E01      		.word	0x11e
 1697 064c 5A06 0000 		.long	0x65a
 1698 0650 35        		.uleb128 0x35
 1699 0651 C803 0000 		.long	0x3c8
 1700 0655 0000 0000 		.long	.LLST16
 1701 0659 00        		.byte	0
 1702 065a 36        		.uleb128 0x36
 1703 065b 0000 0000 		.long	.LBB22
 1704 065f 0000 0000 		.long	.LBE22
 1705 0663 7606 0000 		.long	0x676
 1706 0667 2F        		.uleb128 0x2f
 1707 0668 0000 0000 		.long	.LASF77
 1708 066c 02        		.byte	0x2
 1709 066d 3601      		.word	0x136
 1710 066f 3B00 0000 		.long	0x3b
 1711 0673 01        		.byte	0x1
 1712 0674 59        		.byte	0x59
 1713 0675 00        		.byte	0
 1714 0676 34        		.uleb128 0x34
 1715 0677 E204 0000 		.long	0x4e2
 1716 067b 0000 0000 		.long	.LBB23
 1717 067f 0000 0000 		.long	.LBE23
 1718 0683 02        		.byte	0x2
 1719 0684 8A01      		.word	0x18a
 1720 0686 A006 0000 		.long	0x6a0
 1721 068a 37        		.uleb128 0x37
 1722 068b 0000 0000 		.long	.LBB24
 1723 068f 0000 0000 		.long	.LBE24
 1724 0693 38        		.uleb128 0x38
 1725 0694 F304 0000 		.long	0x4f3
 1726 0698 05        		.byte	0x5
 1727 0699 03        		.byte	0x3
 1728 069a 0000 0000 		.long	lfsr.2294
 1729 069e 00        		.byte	0
 1730 069f 00        		.byte	0
 1731 06a0 36        		.uleb128 0x36
 1732 06a1 0000 0000 		.long	.LBB25
 1733 06a5 0000 0000 		.long	.LBE25
 1734 06a9 D306 0000 		.long	0x6d3
 1735 06ad 39        		.uleb128 0x39
 1736 06ae 7661 6C00 		.string	"val"
 1737 06b2 02        		.byte	0x2
 1738 06b3 CE01      		.word	0x1ce
 1739 06b5 4D00 0000 		.long	0x4d
 1740 06b9 0000 0000 		.long	.LLST17
 1741 06bd 3A        		.uleb128 0x3a
 1742 06be 0000 0000 		.long	.LVL51
 1743 06c2 DA03 0000 		.long	0x3da
 1744 06c6 3B        		.uleb128 0x3b
 1745 06c7 06        		.byte	0x6
 1746 06c8 68        		.byte	0x68
 1747 06c9 93        		.byte	0x93
 1748 06ca 01        		.uleb128 0x1
 1749 06cb 69        		.byte	0x69
 1750 06cc 93        		.byte	0x93
 1751 06cd 01        		.uleb128 0x1
 1752 06ce 02        		.byte	0x2
 1753 06cf 72        		.byte	0x72
 1754 06d0 00        		.sleb128 0
 1755 06d1 00        		.byte	0
 1756 06d2 00        		.byte	0
 1757 06d3 36        		.uleb128 0x36
 1758 06d4 0000 0000 		.long	.LBB26
 1759 06d8 0000 0000 		.long	.LBE26
 1760 06dc F606 0000 		.long	0x6f6
 1761 06e0 3C        		.uleb128 0x3c
 1762 06e1 0000 0000 		.long	.LASF78
 1763 06e5 02        		.byte	0x2
 1764 06e6 DE01      		.word	0x1de
 1765 06e8 8C08 0000 		.long	0x88c
 1766 06ec 00        		.byte	0
 1767 06ed 3D        		.uleb128 0x3d
 1768 06ee 0000 0000 		.long	.LVL56
 1769 06f2 02        		.byte	0x2
 1770 06f3 76        		.byte	0x76
 1771 06f4 00        		.sleb128 0
 1772 06f5 00        		.byte	0
 1773 06f6 3E        		.uleb128 0x3e
 1774 06f7 0000 0000 		.long	.LVL14
 1775 06fb 4809 0000 		.long	0x948
 1776 06ff 3E        		.uleb128 0x3e
 1777 0700 0000 0000 		.long	.LVL17
 1778 0704 5609 0000 		.long	0x956
 1779 0708 3F        		.uleb128 0x3f
 1780 0709 0000 0000 		.long	.LVL18
 1781 070d 6309 0000 		.long	0x963
 1782 0711 2707 0000 		.long	0x727
 1783 0715 3B        		.uleb128 0x3b
 1784 0716 01        		.byte	0x1
 1785 0717 68        		.byte	0x68
 1786 0718 01        		.byte	0x1
 1787 0719 30        		.byte	0x30
 1788 071a 3B        		.uleb128 0x3b
 1789 071b 06        		.byte	0x6
 1790 071c 66        		.byte	0x66
 1791 071d 93        		.byte	0x93
 1792 071e 01        		.uleb128 0x1
 1793 071f 67        		.byte	0x67
 1794 0720 93        		.byte	0x93
 1795 0721 01        		.uleb128 0x1
 1796 0722 03        		.byte	0x3
 1797 0723 0A        		.byte	0xa
 1798 0724 D007      		.word	0x7d0
 1799 0726 00        		.byte	0
 1800 0727 3F        		.uleb128 0x3f
 1801 0728 0000 0000 		.long	.LVL19
 1802 072c 6309 0000 		.long	0x963
 1803 0730 4407 0000 		.long	0x744
 1804 0734 3B        		.uleb128 0x3b
 1805 0735 01        		.byte	0x1
 1806 0736 68        		.byte	0x68
 1807 0737 01        		.byte	0x1
 1808 0738 31        		.byte	0x31
 1809 0739 3B        		.uleb128 0x3b
 1810 073a 06        		.byte	0x6
 1811 073b 66        		.byte	0x66
 1812 073c 93        		.byte	0x93
 1813 073d 01        		.uleb128 0x1
 1814 073e 67        		.byte	0x67
 1815 073f 93        		.byte	0x93
 1816 0740 01        		.uleb128 0x1
 1817 0741 01        		.byte	0x1
 1818 0742 32        		.byte	0x32
 1819 0743 00        		.byte	0
 1820 0744 3F        		.uleb128 0x3f
 1821 0745 0000 0000 		.long	.LVL20
 1822 0749 6309 0000 		.long	0x963
 1823 074d 6307 0000 		.long	0x763
 1824 0751 3B        		.uleb128 0x3b
 1825 0752 01        		.byte	0x1
 1826 0753 68        		.byte	0x68
 1827 0754 01        		.byte	0x1
 1828 0755 32        		.byte	0x32
 1829 0756 3B        		.uleb128 0x3b
 1830 0757 06        		.byte	0x6
 1831 0758 66        		.byte	0x66
 1832 0759 93        		.byte	0x93
 1833 075a 01        		.uleb128 0x1
 1834 075b 67        		.byte	0x67
 1835 075c 93        		.byte	0x93
 1836 075d 01        		.uleb128 0x1
 1837 075e 03        		.byte	0x3
 1838 075f 0A        		.byte	0xa
 1839 0760 D007      		.word	0x7d0
 1840 0762 00        		.byte	0
 1841 0763 3F        		.uleb128 0x3f
 1842 0764 0000 0000 		.long	.LVL21
 1843 0768 DA03 0000 		.long	0x3da
 1844 076c 8807 0000 		.long	0x788
 1845 0770 3B        		.uleb128 0x3b
 1846 0771 06        		.byte	0x6
 1847 0772 68        		.byte	0x68
 1848 0773 93        		.byte	0x93
 1849 0774 01        		.uleb128 0x1
 1850 0775 69        		.byte	0x69
 1851 0776 93        		.byte	0x93
 1852 0777 01        		.uleb128 0x1
 1853 0778 02        		.byte	0x2
 1854 0779 72        		.byte	0x72
 1855 077a 00        		.sleb128 0
 1856 077b 3B        		.uleb128 0x3b
 1857 077c 06        		.byte	0x6
 1858 077d 66        		.byte	0x66
 1859 077e 93        		.byte	0x93
 1860 077f 01        		.uleb128 0x1
 1861 0780 67        		.byte	0x67
 1862 0781 93        		.byte	0x93
 1863 0782 01        		.uleb128 0x1
 1864 0783 03        		.byte	0x3
 1865 0784 0A        		.byte	0xa
 1866 0785 E803      		.word	0x3e8
 1867 0787 00        		.byte	0
 1868 0788 3F        		.uleb128 0x3f
 1869 0789 0000 0000 		.long	.LVL27
 1870 078d 7009 0000 		.long	0x970
 1871 0791 A207 0000 		.long	0x7a2
 1872 0795 3B        		.uleb128 0x3b
 1873 0796 06        		.byte	0x6
 1874 0797 68        		.byte	0x68
 1875 0798 93        		.byte	0x93
 1876 0799 01        		.uleb128 0x1
 1877 079a 69        		.byte	0x69
 1878 079b 93        		.byte	0x93
 1879 079c 01        		.uleb128 0x1
 1880 079d 03        		.byte	0x3
 1881 079e 0A        		.byte	0xa
 1882 079f 0002      		.word	0x200
 1883 07a1 00        		.byte	0
 1884 07a2 3E        		.uleb128 0x3e
 1885 07a3 0000 0000 		.long	.LVL28
 1886 07a7 7D09 0000 		.long	0x97d
 1887 07ab 3F        		.uleb128 0x3f
 1888 07ac 0000 0000 		.long	.LVL30
 1889 07b0 8A09 0000 		.long	0x98a
 1890 07b4 CC07 0000 		.long	0x7cc
 1891 07b8 3B        		.uleb128 0x3b
 1892 07b9 06        		.byte	0x6
 1893 07ba 68        		.byte	0x68
 1894 07bb 93        		.byte	0x93
 1895 07bc 01        		.uleb128 0x1
 1896 07bd 69        		.byte	0x69
 1897 07be 93        		.byte	0x93
 1898 07bf 01        		.uleb128 0x1
 1899 07c0 05        		.byte	0x5
 1900 07c1 03        		.byte	0x3
 1901 07c2 0000 0000 		.long	reportBuffer
 1902 07c6 3B        		.uleb128 0x3b
 1903 07c7 01        		.byte	0x1
 1904 07c8 66        		.byte	0x66
 1905 07c9 01        		.byte	0x1
 1906 07ca 32        		.byte	0x32
 1907 07cb 00        		.byte	0
 1908 07cc 3F        		.uleb128 0x3f
 1909 07cd 0000 0000 		.long	.LVL31
 1910 07d1 9709 0000 		.long	0x997
 1911 07d5 DF07 0000 		.long	0x7df
 1912 07d9 3B        		.uleb128 0x3b
 1913 07da 01        		.byte	0x1
 1914 07db 68        		.byte	0x68
 1915 07dc 01        		.byte	0x1
 1916 07dd 30        		.byte	0x30
 1917 07de 00        		.byte	0
 1918 07df 3F        		.uleb128 0x3f
 1919 07e0 0000 0000 		.long	.LVL32
 1920 07e4 6309 0000 		.long	0x963
 1921 07e8 FE07 0000 		.long	0x7fe
 1922 07ec 3B        		.uleb128 0x3b
 1923 07ed 01        		.byte	0x1
 1924 07ee 68        		.byte	0x68
 1925 07ef 01        		.byte	0x1
 1926 07f0 30        		.byte	0x30
 1927 07f1 3B        		.uleb128 0x3b
 1928 07f2 06        		.byte	0x6
 1929 07f3 66        		.byte	0x66
 1930 07f4 93        		.byte	0x93
 1931 07f5 01        		.uleb128 0x1
 1932 07f6 67        		.byte	0x67
 1933 07f7 93        		.byte	0x93
 1934 07f8 01        		.uleb128 0x1
 1935 07f9 03        		.byte	0x3
 1936 07fa 0A        		.byte	0xa
 1937 07fb F401      		.word	0x1f4
 1938 07fd 00        		.byte	0
 1939 07fe 3F        		.uleb128 0x3f
 1940 07ff 0000 0000 		.long	.LVL33
 1941 0803 9709 0000 		.long	0x997
 1942 0807 1108 0000 		.long	0x811
 1943 080b 3B        		.uleb128 0x3b
 1944 080c 01        		.byte	0x1
 1945 080d 68        		.byte	0x68
 1946 080e 01        		.byte	0x1
 1947 080f 32        		.byte	0x32
 1948 0810 00        		.byte	0
 1949 0811 3F        		.uleb128 0x3f
 1950 0812 0000 0000 		.long	.LVL34
 1951 0816 6309 0000 		.long	0x963
 1952 081a 2F08 0000 		.long	0x82f
 1953 081e 3B        		.uleb128 0x3b
 1954 081f 01        		.byte	0x1
 1955 0820 68        		.byte	0x68
 1956 0821 01        		.byte	0x1
 1957 0822 32        		.byte	0x32
 1958 0823 3B        		.uleb128 0x3b
 1959 0824 06        		.byte	0x6
 1960 0825 66        		.byte	0x66
 1961 0826 93        		.byte	0x93
 1962 0827 01        		.uleb128 0x1
 1963 0828 67        		.byte	0x67
 1964 0829 93        		.byte	0x93
 1965 082a 01        		.uleb128 0x1
 1966 082b 02        		.byte	0x2
 1967 082c 08        		.byte	0x8
 1968 082d FA        		.byte	0xfa
 1969 082e 00        		.byte	0
 1970 082f 3F        		.uleb128 0x3f
 1971 0830 0000 0000 		.long	.LVL35
 1972 0834 9709 0000 		.long	0x997
 1973 0838 4208 0000 		.long	0x842
 1974 083c 3B        		.uleb128 0x3b
 1975 083d 01        		.byte	0x1
 1976 083e 68        		.byte	0x68
 1977 083f 01        		.byte	0x1
 1978 0840 31        		.byte	0x31
 1979 0841 00        		.byte	0
 1980 0842 3F        		.uleb128 0x3f
 1981 0843 0000 0000 		.long	.LVL37
 1982 0847 6309 0000 		.long	0x963
 1983 084b 6008 0000 		.long	0x860
 1984 084f 3B        		.uleb128 0x3b
 1985 0850 01        		.byte	0x1
 1986 0851 68        		.byte	0x68
 1987 0852 01        		.byte	0x1
 1988 0853 31        		.byte	0x31
 1989 0854 3B        		.uleb128 0x3b
 1990 0855 06        		.byte	0x6
 1991 0856 66        		.byte	0x66
 1992 0857 93        		.byte	0x93
 1993 0858 01        		.uleb128 0x1
 1994 0859 67        		.byte	0x67
 1995 085a 93        		.byte	0x93
 1996 085b 01        		.uleb128 0x1
 1997 085c 02        		.byte	0x2
 1998 085d 08        		.byte	0x8
 1999 085e 64        		.byte	0x64
 2000 085f 00        		.byte	0
 2001 0860 3E        		.uleb128 0x3e
 2002 0861 0000 0000 		.long	.LVL44
 2003 0865 A409 0000 		.long	0x9a4
 2004 0869 00        		.byte	0
 2005 086a 13        		.uleb128 0x13
 2006 086b 5F00 0000 		.long	0x5f
 2007 086f 7A08 0000 		.long	0x87a
 2008 0873 14        		.uleb128 0x14
 2009 0874 9E01 0000 		.long	0x19e
 2010 0878 04        		.byte	0x4
 2011 0879 00        		.byte	0
 2012 087a 13        		.uleb128 0x13
 2013 087b 5F00 0000 		.long	0x5f
 2014 087f 8A08 0000 		.long	0x88a
 2015 0883 14        		.uleb128 0x14
 2016 0884 9E01 0000 		.long	0x19e
 2017 0888 13        		.byte	0x13
 2018 0889 00        		.byte	0
 2019 088a 40        		.uleb128 0x40
 2020 088b 01        		.byte	0x1
 2021 088c 0A        		.uleb128 0xa
 2022 088d 02        		.byte	0x2
 2023 088e 8A08 0000 		.long	0x88a
 2024 0892 2D        		.uleb128 0x2d
 2025 0893 0000 0000 		.long	.LASF79
 2026 0897 02        		.byte	0x2
 2027 0898 81        		.byte	0x81
 2028 0899 A308 0000 		.long	0x8a3
 2029 089d 05        		.byte	0x5
 2030 089e 03        		.byte	0x3
 2031 089f 0000 0000 		.long	capture_diff
 2032 08a3 12        		.uleb128 0x12
 2033 08a4 5F00 0000 		.long	0x5f
 2034 08a8 2D        		.uleb128 0x2d
 2035 08a9 0000 0000 		.long	.LASF80
 2036 08ad 02        		.byte	0x2
 2037 08ae 82        		.byte	0x82
 2038 08af A308 0000 		.long	0x8a3
 2039 08b3 05        		.byte	0x5
 2040 08b4 03        		.byte	0x3
 2041 08b5 0000 0000 		.long	capture_diff_max
 2042 08b9 2D        		.uleb128 0x2d
 2043 08ba 0000 0000 		.long	.LASF81
 2044 08be 02        		.byte	0x2
 2045 08bf 83        		.byte	0x83
 2046 08c0 A308 0000 		.long	0x8a3
 2047 08c4 05        		.byte	0x5
 2048 08c5 03        		.byte	0x3
 2049 08c6 0000 0000 		.long	captured
 2050 08ca 2D        		.uleb128 0x2d
 2051 08cb 0000 0000 		.long	.LASF82
 2052 08cf 02        		.byte	0x2
 2053 08d0 BA        		.byte	0xba
 2054 08d1 6F03 0000 		.long	0x36f
 2055 08d5 05        		.byte	0x5
 2056 08d6 03        		.byte	0x3
 2057 08d7 0000 0000 		.long	reportBuffer
 2058 08db 13        		.uleb128 0x13
 2059 08dc 3C01 0000 		.long	0x13c
 2060 08e0 E608 0000 		.long	0x8e6
 2061 08e4 41        		.uleb128 0x41
 2062 08e5 00        		.byte	0
 2063 08e6 42        		.uleb128 0x42
 2064 08e7 0000 0000 		.long	.LASF83
 2065 08eb 07        		.byte	0x7
 2066 08ec 9701      		.word	0x197
 2067 08ee DB08 0000 		.long	0x8db
 2068 08f2 01        		.byte	0x1
 2069 08f3 01        		.byte	0x1
 2070 08f4 13        		.uleb128 0x13
 2071 08f5 0409 0000 		.long	0x904
 2072 08f9 0409 0000 		.long	0x904
 2073 08fd 14        		.uleb128 0x14
 2074 08fe 9E01 0000 		.long	0x19e
 2075 0902 4F        		.byte	0x4f
 2076 0903 00        		.byte	0
 2077 0904 1B        		.uleb128 0x1b
 2078 0905 2001 0000 		.long	0x120
 2079 0909 43        		.uleb128 0x43
 2080 090a 0000 0000 		.long	.LASF84
 2081 090e 0C        		.byte	0xc
 2082 090f 03        		.byte	0x3
 2083 0910 1B09 0000 		.long	0x91b
 2084 0914 01        		.byte	0x1
 2085 0915 05        		.byte	0x5
 2086 0916 03        		.byte	0x3
 2087 0917 0000 0000 		.long	usbDescriptorHidReport
 2088 091b 1B        		.uleb128 0x1b
 2089 091c F408 0000 		.long	0x8f4
 2090 0920 42        		.uleb128 0x42
 2091 0921 0000 0000 		.long	.LASF85
 2092 0925 08        		.byte	0x8
 2093 0926 8C02      		.word	0x28c
 2094 0928 E601 0000 		.long	0x1e6
 2095 092c 01        		.byte	0x1
 2096 092d 01        		.byte	0x1
 2097 092e 44        		.uleb128 0x44
 2098 092f 0000 0000 		.long	.LASF86
 2099 0933 0D        		.byte	0xd
 2100 0934 0D        		.byte	0xd
 2101 0935 6001 0000 		.long	0x160
 2102 0939 01        		.byte	0x1
 2103 093a 01        		.byte	0x1
 2104 093b 44        		.uleb128 0x44
 2105 093c 0000 0000 		.long	.LASF87
 2106 0940 0D        		.byte	0xd
 2107 0941 0E        		.byte	0xe
 2108 0942 6001 0000 		.long	0x160
 2109 0946 01        		.byte	0x1
 2110 0947 01        		.byte	0x1
 2111 0948 45        		.uleb128 0x45
 2112 0949 01        		.byte	0x1
 2113 094a 01        		.byte	0x1
 2114 094b 0000 0000 		.long	.LASF88
 2115 094f 0000 0000 		.long	.LASF88
 2116 0953 07        		.byte	0x7
 2117 0954 9102      		.word	0x291
 2118 0956 46        		.uleb128 0x46
 2119 0957 01        		.byte	0x1
 2120 0958 01        		.byte	0x1
 2121 0959 0000 0000 		.long	.LASF89
 2122 095d 0000 0000 		.long	.LASF89
 2123 0961 08        		.byte	0x8
 2124 0962 A8        		.byte	0xa8
 2125 0963 46        		.uleb128 0x46
 2126 0964 01        		.byte	0x1
 2127 0965 01        		.byte	0x1
 2128 0966 0000 0000 		.long	.LASF90
 2129 096a 0000 0000 		.long	.LASF90
 2130 096e 0E        		.byte	0xe
 2131 096f 20        		.byte	0x20
 2132 0970 46        		.uleb128 0x46
 2133 0971 01        		.byte	0x1
 2134 0972 01        		.byte	0x1
 2135 0973 0000 0000 		.long	.LASF91
 2136 0977 0000 0000 		.long	.LASF91
 2137 097b 0E        		.byte	0xe
 2138 097c 19        		.byte	0x19
 2139 097d 46        		.uleb128 0x46
 2140 097e 01        		.byte	0x1
 2141 097f 01        		.byte	0x1
 2142 0980 0000 0000 		.long	.LASF92
 2143 0984 0000 0000 		.long	.LASF92
 2144 0988 08        		.byte	0x8
 2145 0989 AE        		.byte	0xae
 2146 098a 46        		.uleb128 0x46
 2147 098b 01        		.byte	0x1
 2148 098c 01        		.byte	0x1
 2149 098d 0000 0000 		.long	.LASF93
 2150 0991 0000 0000 		.long	.LASF93
 2151 0995 08        		.byte	0x8
 2152 0996 DC        		.byte	0xdc
 2153 0997 46        		.uleb128 0x46
 2154 0998 01        		.byte	0x1
 2155 0999 01        		.byte	0x1
 2156 099a 0000 0000 		.long	.LASF94
 2157 099e 0000 0000 		.long	.LASF94
 2158 09a2 0E        		.byte	0xe
 2159 09a3 1C        		.byte	0x1c
 2160 09a4 45        		.uleb128 0x45
 2161 09a5 01        		.byte	0x1
 2162 09a6 01        		.byte	0x1
 2163 09a7 0000 0000 		.long	.LASF95
 2164 09ab 0000 0000 		.long	.LASF95
 2165 09af 07        		.byte	0x7
 2166 09b0 8B02      		.word	0x28b
 2167 09b2 00        		.byte	0
 2168               		.section	.debug_abbrev,"",@progbits
 2169               	.Ldebug_abbrev0:
 2170 0000 01        		.uleb128 0x1
 2171 0001 11        		.uleb128 0x11
 2172 0002 01        		.byte	0x1
 2173 0003 25        		.uleb128 0x25
 2174 0004 0E        		.uleb128 0xe
 2175 0005 13        		.uleb128 0x13
 2176 0006 0B        		.uleb128 0xb
 2177 0007 03        		.uleb128 0x3
 2178 0008 0E        		.uleb128 0xe
 2179 0009 1B        		.uleb128 0x1b
 2180 000a 0E        		.uleb128 0xe
 2181 000b 55        		.uleb128 0x55
 2182 000c 06        		.uleb128 0x6
 2183 000d 11        		.uleb128 0x11
 2184 000e 01        		.uleb128 0x1
 2185 000f 52        		.uleb128 0x52
 2186 0010 01        		.uleb128 0x1
 2187 0011 10        		.uleb128 0x10
 2188 0012 06        		.uleb128 0x6
 2189 0013 00        		.byte	0
 2190 0014 00        		.byte	0
 2191 0015 02        		.uleb128 0x2
 2192 0016 16        		.uleb128 0x16
 2193 0017 00        		.byte	0
 2194 0018 03        		.uleb128 0x3
 2195 0019 0E        		.uleb128 0xe
 2196 001a 3A        		.uleb128 0x3a
 2197 001b 0B        		.uleb128 0xb
 2198 001c 3B        		.uleb128 0x3b
 2199 001d 0B        		.uleb128 0xb
 2200 001e 49        		.uleb128 0x49
 2201 001f 13        		.uleb128 0x13
 2202 0020 00        		.byte	0
 2203 0021 00        		.byte	0
 2204 0022 03        		.uleb128 0x3
 2205 0023 24        		.uleb128 0x24
 2206 0024 00        		.byte	0
 2207 0025 0B        		.uleb128 0xb
 2208 0026 0B        		.uleb128 0xb
 2209 0027 3E        		.uleb128 0x3e
 2210 0028 0B        		.uleb128 0xb
 2211 0029 03        		.uleb128 0x3
 2212 002a 0E        		.uleb128 0xe
 2213 002b 00        		.byte	0
 2214 002c 00        		.byte	0
 2215 002d 04        		.uleb128 0x4
 2216 002e 24        		.uleb128 0x24
 2217 002f 00        		.byte	0
 2218 0030 0B        		.uleb128 0xb
 2219 0031 0B        		.uleb128 0xb
 2220 0032 3E        		.uleb128 0x3e
 2221 0033 0B        		.uleb128 0xb
 2222 0034 03        		.uleb128 0x3
 2223 0035 08        		.uleb128 0x8
 2224 0036 00        		.byte	0
 2225 0037 00        		.byte	0
 2226 0038 05        		.uleb128 0x5
 2227 0039 13        		.uleb128 0x13
 2228 003a 01        		.byte	0x1
 2229 003b 03        		.uleb128 0x3
 2230 003c 0E        		.uleb128 0xe
 2231 003d 0B        		.uleb128 0xb
 2232 003e 0B        		.uleb128 0xb
 2233 003f 3A        		.uleb128 0x3a
 2234 0040 0B        		.uleb128 0xb
 2235 0041 3B        		.uleb128 0x3b
 2236 0042 0B        		.uleb128 0xb
 2237 0043 01        		.uleb128 0x1
 2238 0044 13        		.uleb128 0x13
 2239 0045 00        		.byte	0
 2240 0046 00        		.byte	0
 2241 0047 06        		.uleb128 0x6
 2242 0048 0D        		.uleb128 0xd
 2243 0049 00        		.byte	0
 2244 004a 03        		.uleb128 0x3
 2245 004b 08        		.uleb128 0x8
 2246 004c 3A        		.uleb128 0x3a
 2247 004d 0B        		.uleb128 0xb
 2248 004e 3B        		.uleb128 0x3b
 2249 004f 0B        		.uleb128 0xb
 2250 0050 49        		.uleb128 0x49
 2251 0051 13        		.uleb128 0x13
 2252 0052 38        		.uleb128 0x38
 2253 0053 0A        		.uleb128 0xa
 2254 0054 00        		.byte	0
 2255 0055 00        		.byte	0
 2256 0056 07        		.uleb128 0x7
 2257 0057 0D        		.uleb128 0xd
 2258 0058 00        		.byte	0
 2259 0059 03        		.uleb128 0x3
 2260 005a 0E        		.uleb128 0xe
 2261 005b 3A        		.uleb128 0x3a
 2262 005c 0B        		.uleb128 0xb
 2263 005d 3B        		.uleb128 0x3b
 2264 005e 0B        		.uleb128 0xb
 2265 005f 49        		.uleb128 0x49
 2266 0060 13        		.uleb128 0x13
 2267 0061 38        		.uleb128 0x38
 2268 0062 0A        		.uleb128 0xa
 2269 0063 00        		.byte	0
 2270 0064 00        		.byte	0
 2271 0065 08        		.uleb128 0x8
 2272 0066 0D        		.uleb128 0xd
 2273 0067 00        		.byte	0
 2274 0068 03        		.uleb128 0x3
 2275 0069 0E        		.uleb128 0xe
 2276 006a 3A        		.uleb128 0x3a
 2277 006b 0B        		.uleb128 0xb
 2278 006c 3B        		.uleb128 0x3b
 2279 006d 05        		.uleb128 0x5
 2280 006e 49        		.uleb128 0x49
 2281 006f 13        		.uleb128 0x13
 2282 0070 38        		.uleb128 0x38
 2283 0071 0A        		.uleb128 0xa
 2284 0072 00        		.byte	0
 2285 0073 00        		.byte	0
 2286 0074 09        		.uleb128 0x9
 2287 0075 0D        		.uleb128 0xd
 2288 0076 00        		.byte	0
 2289 0077 03        		.uleb128 0x3
 2290 0078 08        		.uleb128 0x8
 2291 0079 3A        		.uleb128 0x3a
 2292 007a 0B        		.uleb128 0xb
 2293 007b 3B        		.uleb128 0x3b
 2294 007c 05        		.uleb128 0x5
 2295 007d 49        		.uleb128 0x49
 2296 007e 13        		.uleb128 0x13
 2297 007f 38        		.uleb128 0x38
 2298 0080 0A        		.uleb128 0xa
 2299 0081 00        		.byte	0
 2300 0082 00        		.byte	0
 2301 0083 0A        		.uleb128 0xa
 2302 0084 0F        		.uleb128 0xf
 2303 0085 00        		.byte	0
 2304 0086 0B        		.uleb128 0xb
 2305 0087 0B        		.uleb128 0xb
 2306 0088 49        		.uleb128 0x49
 2307 0089 13        		.uleb128 0x13
 2308 008a 00        		.byte	0
 2309 008b 00        		.byte	0
 2310 008c 0B        		.uleb128 0xb
 2311 008d 15        		.uleb128 0x15
 2312 008e 01        		.byte	0x1
 2313 008f 27        		.uleb128 0x27
 2314 0090 0C        		.uleb128 0xc
 2315 0091 49        		.uleb128 0x49
 2316 0092 13        		.uleb128 0x13
 2317 0093 01        		.uleb128 0x1
 2318 0094 13        		.uleb128 0x13
 2319 0095 00        		.byte	0
 2320 0096 00        		.byte	0
 2321 0097 0C        		.uleb128 0xc
 2322 0098 05        		.uleb128 0x5
 2323 0099 00        		.byte	0
 2324 009a 49        		.uleb128 0x49
 2325 009b 13        		.uleb128 0x13
 2326 009c 00        		.byte	0
 2327 009d 00        		.byte	0
 2328 009e 0D        		.uleb128 0xd
 2329 009f 0F        		.uleb128 0xf
 2330 00a0 00        		.byte	0
 2331 00a1 0B        		.uleb128 0xb
 2332 00a2 0B        		.uleb128 0xb
 2333 00a3 00        		.byte	0
 2334 00a4 00        		.byte	0
 2335 00a5 0E        		.uleb128 0xe
 2336 00a6 16        		.uleb128 0x16
 2337 00a7 00        		.byte	0
 2338 00a8 03        		.uleb128 0x3
 2339 00a9 0E        		.uleb128 0xe
 2340 00aa 3A        		.uleb128 0x3a
 2341 00ab 0B        		.uleb128 0xb
 2342 00ac 3B        		.uleb128 0x3b
 2343 00ad 05        		.uleb128 0x5
 2344 00ae 49        		.uleb128 0x49
 2345 00af 13        		.uleb128 0x13
 2346 00b0 00        		.byte	0
 2347 00b1 00        		.byte	0
 2348 00b2 0F        		.uleb128 0xf
 2349 00b3 04        		.uleb128 0x4
 2350 00b4 01        		.byte	0x1
 2351 00b5 0B        		.uleb128 0xb
 2352 00b6 0B        		.uleb128 0xb
 2353 00b7 49        		.uleb128 0x49
 2354 00b8 13        		.uleb128 0x13
 2355 00b9 3A        		.uleb128 0x3a
 2356 00ba 0B        		.uleb128 0xb
 2357 00bb 3B        		.uleb128 0x3b
 2358 00bc 05        		.uleb128 0x5
 2359 00bd 01        		.uleb128 0x1
 2360 00be 13        		.uleb128 0x13
 2361 00bf 00        		.byte	0
 2362 00c0 00        		.byte	0
 2363 00c1 10        		.uleb128 0x10
 2364 00c2 28        		.uleb128 0x28
 2365 00c3 00        		.byte	0
 2366 00c4 03        		.uleb128 0x3
 2367 00c5 0E        		.uleb128 0xe
 2368 00c6 1C        		.uleb128 0x1c
 2369 00c7 0B        		.uleb128 0xb
 2370 00c8 00        		.byte	0
 2371 00c9 00        		.byte	0
 2372 00ca 11        		.uleb128 0x11
 2373 00cb 13        		.uleb128 0x13
 2374 00cc 01        		.byte	0x1
 2375 00cd 03        		.uleb128 0x3
 2376 00ce 0E        		.uleb128 0xe
 2377 00cf 0B        		.uleb128 0xb
 2378 00d0 0B        		.uleb128 0xb
 2379 00d1 3A        		.uleb128 0x3a
 2380 00d2 0B        		.uleb128 0xb
 2381 00d3 3B        		.uleb128 0x3b
 2382 00d4 05        		.uleb128 0x5
 2383 00d5 01        		.uleb128 0x1
 2384 00d6 13        		.uleb128 0x13
 2385 00d7 00        		.byte	0
 2386 00d8 00        		.byte	0
 2387 00d9 12        		.uleb128 0x12
 2388 00da 35        		.uleb128 0x35
 2389 00db 00        		.byte	0
 2390 00dc 49        		.uleb128 0x49
 2391 00dd 13        		.uleb128 0x13
 2392 00de 00        		.byte	0
 2393 00df 00        		.byte	0
 2394 00e0 13        		.uleb128 0x13
 2395 00e1 01        		.uleb128 0x1
 2396 00e2 01        		.byte	0x1
 2397 00e3 49        		.uleb128 0x49
 2398 00e4 13        		.uleb128 0x13
 2399 00e5 01        		.uleb128 0x1
 2400 00e6 13        		.uleb128 0x13
 2401 00e7 00        		.byte	0
 2402 00e8 00        		.byte	0
 2403 00e9 14        		.uleb128 0x14
 2404 00ea 21        		.uleb128 0x21
 2405 00eb 00        		.byte	0
 2406 00ec 49        		.uleb128 0x49
 2407 00ed 13        		.uleb128 0x13
 2408 00ee 2F        		.uleb128 0x2f
 2409 00ef 0B        		.uleb128 0xb
 2410 00f0 00        		.byte	0
 2411 00f1 00        		.byte	0
 2412 00f2 15        		.uleb128 0x15
 2413 00f3 17        		.uleb128 0x17
 2414 00f4 01        		.byte	0x1
 2415 00f5 03        		.uleb128 0x3
 2416 00f6 0E        		.uleb128 0xe
 2417 00f7 0B        		.uleb128 0xb
 2418 00f8 0B        		.uleb128 0xb
 2419 00f9 3A        		.uleb128 0x3a
 2420 00fa 0B        		.uleb128 0xb
 2421 00fb 3B        		.uleb128 0x3b
 2422 00fc 05        		.uleb128 0x5
 2423 00fd 01        		.uleb128 0x1
 2424 00fe 13        		.uleb128 0x13
 2425 00ff 00        		.byte	0
 2426 0100 00        		.byte	0
 2427 0101 16        		.uleb128 0x16
 2428 0102 0D        		.uleb128 0xd
 2429 0103 00        		.byte	0
 2430 0104 03        		.uleb128 0x3
 2431 0105 0E        		.uleb128 0xe
 2432 0106 3A        		.uleb128 0x3a
 2433 0107 0B        		.uleb128 0xb
 2434 0108 3B        		.uleb128 0x3b
 2435 0109 05        		.uleb128 0x5
 2436 010a 49        		.uleb128 0x49
 2437 010b 13        		.uleb128 0x13
 2438 010c 00        		.byte	0
 2439 010d 00        		.byte	0
 2440 010e 17        		.uleb128 0x17
 2441 010f 04        		.uleb128 0x4
 2442 0110 01        		.byte	0x1
 2443 0111 0B        		.uleb128 0xb
 2444 0112 0B        		.uleb128 0xb
 2445 0113 49        		.uleb128 0x49
 2446 0114 13        		.uleb128 0x13
 2447 0115 3A        		.uleb128 0x3a
 2448 0116 0B        		.uleb128 0xb
 2449 0117 3B        		.uleb128 0x3b
 2450 0118 0B        		.uleb128 0xb
 2451 0119 01        		.uleb128 0x1
 2452 011a 13        		.uleb128 0x13
 2453 011b 00        		.byte	0
 2454 011c 00        		.byte	0
 2455 011d 18        		.uleb128 0x18
 2456 011e 13        		.uleb128 0x13
 2457 011f 01        		.byte	0x1
 2458 0120 0B        		.uleb128 0xb
 2459 0121 0B        		.uleb128 0xb
 2460 0122 3A        		.uleb128 0x3a
 2461 0123 0B        		.uleb128 0xb
 2462 0124 3B        		.uleb128 0x3b
 2463 0125 0B        		.uleb128 0xb
 2464 0126 01        		.uleb128 0x1
 2465 0127 13        		.uleb128 0x13
 2466 0128 00        		.byte	0
 2467 0129 00        		.byte	0
 2468 012a 19        		.uleb128 0x19
 2469 012b 2E        		.uleb128 0x2e
 2470 012c 01        		.byte	0x1
 2471 012d 03        		.uleb128 0x3
 2472 012e 0E        		.uleb128 0xe
 2473 012f 3A        		.uleb128 0x3a
 2474 0130 0B        		.uleb128 0xb
 2475 0131 3B        		.uleb128 0x3b
 2476 0132 05        		.uleb128 0x5
 2477 0133 27        		.uleb128 0x27
 2478 0134 0C        		.uleb128 0xc
 2479 0135 20        		.uleb128 0x20
 2480 0136 0B        		.uleb128 0xb
 2481 0137 01        		.uleb128 0x1
 2482 0138 13        		.uleb128 0x13
 2483 0139 00        		.byte	0
 2484 013a 00        		.byte	0
 2485 013b 1A        		.uleb128 0x1a
 2486 013c 05        		.uleb128 0x5
 2487 013d 00        		.byte	0
 2488 013e 03        		.uleb128 0x3
 2489 013f 0E        		.uleb128 0xe
 2490 0140 3A        		.uleb128 0x3a
 2491 0141 0B        		.uleb128 0xb
 2492 0142 3B        		.uleb128 0x3b
 2493 0143 05        		.uleb128 0x5
 2494 0144 49        		.uleb128 0x49
 2495 0145 13        		.uleb128 0x13
 2496 0146 00        		.byte	0
 2497 0147 00        		.byte	0
 2498 0148 1B        		.uleb128 0x1b
 2499 0149 26        		.uleb128 0x26
 2500 014a 00        		.byte	0
 2501 014b 49        		.uleb128 0x49
 2502 014c 13        		.uleb128 0x13
 2503 014d 00        		.byte	0
 2504 014e 00        		.byte	0
 2505 014f 1C        		.uleb128 0x1c
 2506 0150 2E        		.uleb128 0x2e
 2507 0151 01        		.byte	0x1
 2508 0152 3F        		.uleb128 0x3f
 2509 0153 0C        		.uleb128 0xc
 2510 0154 03        		.uleb128 0x3
 2511 0155 0E        		.uleb128 0xe
 2512 0156 3A        		.uleb128 0x3a
 2513 0157 0B        		.uleb128 0xb
 2514 0158 3B        		.uleb128 0x3b
 2515 0159 0B        		.uleb128 0xb
 2516 015a 27        		.uleb128 0x27
 2517 015b 0C        		.uleb128 0xc
 2518 015c 49        		.uleb128 0x49
 2519 015d 13        		.uleb128 0x13
 2520 015e 11        		.uleb128 0x11
 2521 015f 01        		.uleb128 0x1
 2522 0160 12        		.uleb128 0x12
 2523 0161 01        		.uleb128 0x1
 2524 0162 40        		.uleb128 0x40
 2525 0163 06        		.uleb128 0x6
 2526 0164 9642      		.uleb128 0x2116
 2527 0166 0C        		.uleb128 0xc
 2528 0167 01        		.uleb128 0x1
 2529 0168 13        		.uleb128 0x13
 2530 0169 00        		.byte	0
 2531 016a 00        		.byte	0
 2532 016b 1D        		.uleb128 0x1d
 2533 016c 05        		.uleb128 0x5
 2534 016d 00        		.byte	0
 2535 016e 03        		.uleb128 0x3
 2536 016f 0E        		.uleb128 0xe
 2537 0170 3A        		.uleb128 0x3a
 2538 0171 0B        		.uleb128 0xb
 2539 0172 3B        		.uleb128 0x3b
 2540 0173 0B        		.uleb128 0xb
 2541 0174 49        		.uleb128 0x49
 2542 0175 13        		.uleb128 0x13
 2543 0176 02        		.uleb128 0x2
 2544 0177 06        		.uleb128 0x6
 2545 0178 00        		.byte	0
 2546 0179 00        		.byte	0
 2547 017a 1E        		.uleb128 0x1e
 2548 017b 05        		.uleb128 0x5
 2549 017c 00        		.byte	0
 2550 017d 03        		.uleb128 0x3
 2551 017e 08        		.uleb128 0x8
 2552 017f 3A        		.uleb128 0x3a
 2553 0180 0B        		.uleb128 0xb
 2554 0181 3B        		.uleb128 0x3b
 2555 0182 0B        		.uleb128 0xb
 2556 0183 49        		.uleb128 0x49
 2557 0184 13        		.uleb128 0x13
 2558 0185 02        		.uleb128 0x2
 2559 0186 06        		.uleb128 0x6
 2560 0187 00        		.byte	0
 2561 0188 00        		.byte	0
 2562 0189 1F        		.uleb128 0x1f
 2563 018a 34        		.uleb128 0x34
 2564 018b 00        		.byte	0
 2565 018c 03        		.uleb128 0x3
 2566 018d 08        		.uleb128 0x8
 2567 018e 3A        		.uleb128 0x3a
 2568 018f 0B        		.uleb128 0xb
 2569 0190 3B        		.uleb128 0x3b
 2570 0191 0B        		.uleb128 0xb
 2571 0192 49        		.uleb128 0x49
 2572 0193 13        		.uleb128 0x13
 2573 0194 1C        		.uleb128 0x1c
 2574 0195 0B        		.uleb128 0xb
 2575 0196 00        		.byte	0
 2576 0197 00        		.byte	0
 2577 0198 20        		.uleb128 0x20
 2578 0199 34        		.uleb128 0x34
 2579 019a 00        		.byte	0
 2580 019b 03        		.uleb128 0x3
 2581 019c 0E        		.uleb128 0xe
 2582 019d 3A        		.uleb128 0x3a
 2583 019e 0B        		.uleb128 0xb
 2584 019f 3B        		.uleb128 0x3b
 2585 01a0 0B        		.uleb128 0xb
 2586 01a1 49        		.uleb128 0x49
 2587 01a2 13        		.uleb128 0x13
 2588 01a3 1C        		.uleb128 0x1c
 2589 01a4 05        		.uleb128 0x5
 2590 01a5 00        		.byte	0
 2591 01a6 00        		.byte	0
 2592 01a7 21        		.uleb128 0x21
 2593 01a8 34        		.uleb128 0x34
 2594 01a9 00        		.byte	0
 2595 01aa 03        		.uleb128 0x3
 2596 01ab 08        		.uleb128 0x8
 2597 01ac 3A        		.uleb128 0x3a
 2598 01ad 0B        		.uleb128 0xb
 2599 01ae 3B        		.uleb128 0x3b
 2600 01af 0B        		.uleb128 0xb
 2601 01b0 49        		.uleb128 0x49
 2602 01b1 13        		.uleb128 0x13
 2603 01b2 1C        		.uleb128 0x1c
 2604 01b3 05        		.uleb128 0x5
 2605 01b4 00        		.byte	0
 2606 01b5 00        		.byte	0
 2607 01b6 22        		.uleb128 0x22
 2608 01b7 34        		.uleb128 0x34
 2609 01b8 00        		.byte	0
 2610 01b9 03        		.uleb128 0x3
 2611 01ba 08        		.uleb128 0x8
 2612 01bb 3A        		.uleb128 0x3a
 2613 01bc 0B        		.uleb128 0xb
 2614 01bd 3B        		.uleb128 0x3b
 2615 01be 0B        		.uleb128 0xb
 2616 01bf 49        		.uleb128 0x49
 2617 01c0 13        		.uleb128 0x13
 2618 01c1 1C        		.uleb128 0x1c
 2619 01c2 0D        		.uleb128 0xd
 2620 01c3 00        		.byte	0
 2621 01c4 00        		.byte	0
 2622 01c5 23        		.uleb128 0x23
 2623 01c6 34        		.uleb128 0x34
 2624 01c7 00        		.byte	0
 2625 01c8 03        		.uleb128 0x3
 2626 01c9 08        		.uleb128 0x8
 2627 01ca 3A        		.uleb128 0x3a
 2628 01cb 0B        		.uleb128 0xb
 2629 01cc 3B        		.uleb128 0x3b
 2630 01cd 0B        		.uleb128 0xb
 2631 01ce 49        		.uleb128 0x49
 2632 01cf 13        		.uleb128 0x13
 2633 01d0 02        		.uleb128 0x2
 2634 01d1 0A        		.uleb128 0xa
 2635 01d2 00        		.byte	0
 2636 01d3 00        		.byte	0
 2637 01d4 24        		.uleb128 0x24
 2638 01d5 2E        		.uleb128 0x2e
 2639 01d6 00        		.byte	0
 2640 01d7 3F        		.uleb128 0x3f
 2641 01d8 0C        		.uleb128 0xc
 2642 01d9 03        		.uleb128 0x3
 2643 01da 0E        		.uleb128 0xe
 2644 01db 3A        		.uleb128 0x3a
 2645 01dc 0B        		.uleb128 0xb
 2646 01dd 3B        		.uleb128 0x3b
 2647 01de 0B        		.uleb128 0xb
 2648 01df 27        		.uleb128 0x27
 2649 01e0 0C        		.uleb128 0xc
 2650 01e1 11        		.uleb128 0x11
 2651 01e2 01        		.uleb128 0x1
 2652 01e3 12        		.uleb128 0x12
 2653 01e4 01        		.uleb128 0x1
 2654 01e5 40        		.uleb128 0x40
 2655 01e6 06        		.uleb128 0x6
 2656 01e7 9742      		.uleb128 0x2117
 2657 01e9 0C        		.uleb128 0xc
 2658 01ea 00        		.byte	0
 2659 01eb 00        		.byte	0
 2660 01ec 25        		.uleb128 0x25
 2661 01ed 2E        		.uleb128 0x2e
 2662 01ee 01        		.byte	0x1
 2663 01ef 3F        		.uleb128 0x3f
 2664 01f0 0C        		.uleb128 0xc
 2665 01f1 03        		.uleb128 0x3
 2666 01f2 0E        		.uleb128 0xe
 2667 01f3 3A        		.uleb128 0x3a
 2668 01f4 0B        		.uleb128 0xb
 2669 01f5 3B        		.uleb128 0x3b
 2670 01f6 0B        		.uleb128 0xb
 2671 01f7 27        		.uleb128 0x27
 2672 01f8 0C        		.uleb128 0xc
 2673 01f9 49        		.uleb128 0x49
 2674 01fa 13        		.uleb128 0x13
 2675 01fb 11        		.uleb128 0x11
 2676 01fc 01        		.uleb128 0x1
 2677 01fd 12        		.uleb128 0x12
 2678 01fe 01        		.uleb128 0x1
 2679 01ff 40        		.uleb128 0x40
 2680 0200 0A        		.uleb128 0xa
 2681 0201 9742      		.uleb128 0x2117
 2682 0203 0C        		.uleb128 0xc
 2683 0204 01        		.uleb128 0x1
 2684 0205 13        		.uleb128 0x13
 2685 0206 00        		.byte	0
 2686 0207 00        		.byte	0
 2687 0208 26        		.uleb128 0x26
 2688 0209 34        		.uleb128 0x34
 2689 020a 00        		.byte	0
 2690 020b 03        		.uleb128 0x3
 2691 020c 08        		.uleb128 0x8
 2692 020d 3A        		.uleb128 0x3a
 2693 020e 0B        		.uleb128 0xb
 2694 020f 3B        		.uleb128 0x3b
 2695 0210 0B        		.uleb128 0xb
 2696 0211 49        		.uleb128 0x49
 2697 0212 13        		.uleb128 0x13
 2698 0213 02        		.uleb128 0x2
 2699 0214 06        		.uleb128 0x6
 2700 0215 00        		.byte	0
 2701 0216 00        		.byte	0
 2702 0217 27        		.uleb128 0x27
 2703 0218 2E        		.uleb128 0x2e
 2704 0219 00        		.byte	0
 2705 021a 03        		.uleb128 0x3
 2706 021b 0E        		.uleb128 0xe
 2707 021c 3A        		.uleb128 0x3a
 2708 021d 0B        		.uleb128 0xb
 2709 021e 3B        		.uleb128 0x3b
 2710 021f 0B        		.uleb128 0xb
 2711 0220 27        		.uleb128 0x27
 2712 0221 0C        		.uleb128 0xc
 2713 0222 20        		.uleb128 0x20
 2714 0223 0B        		.uleb128 0xb
 2715 0224 00        		.byte	0
 2716 0225 00        		.byte	0
 2717 0226 28        		.uleb128 0x28
 2718 0227 2E        		.uleb128 0x2e
 2719 0228 01        		.byte	0x1
 2720 0229 03        		.uleb128 0x3
 2721 022a 0E        		.uleb128 0xe
 2722 022b 3A        		.uleb128 0x3a
 2723 022c 0B        		.uleb128 0xb
 2724 022d 3B        		.uleb128 0x3b
 2725 022e 0B        		.uleb128 0xb
 2726 022f 27        		.uleb128 0x27
 2727 0230 0C        		.uleb128 0xc
 2728 0231 49        		.uleb128 0x49
 2729 0232 13        		.uleb128 0x13
 2730 0233 20        		.uleb128 0x20
 2731 0234 0B        		.uleb128 0xb
 2732 0235 01        		.uleb128 0x1
 2733 0236 13        		.uleb128 0x13
 2734 0237 00        		.byte	0
 2735 0238 00        		.byte	0
 2736 0239 29        		.uleb128 0x29
 2737 023a 34        		.uleb128 0x34
 2738 023b 00        		.byte	0
 2739 023c 03        		.uleb128 0x3
 2740 023d 0E        		.uleb128 0xe
 2741 023e 3A        		.uleb128 0x3a
 2742 023f 0B        		.uleb128 0xb
 2743 0240 3B        		.uleb128 0x3b
 2744 0241 0B        		.uleb128 0xb
 2745 0242 49        		.uleb128 0x49
 2746 0243 13        		.uleb128 0x13
 2747 0244 00        		.byte	0
 2748 0245 00        		.byte	0
 2749 0246 2A        		.uleb128 0x2a
 2750 0247 2E        		.uleb128 0x2e
 2751 0248 01        		.byte	0x1
 2752 0249 3F        		.uleb128 0x3f
 2753 024a 0C        		.uleb128 0xc
 2754 024b 03        		.uleb128 0x3
 2755 024c 0E        		.uleb128 0xe
 2756 024d 3A        		.uleb128 0x3a
 2757 024e 0B        		.uleb128 0xb
 2758 024f 3B        		.uleb128 0x3b
 2759 0250 0B        		.uleb128 0xb
 2760 0251 27        		.uleb128 0x27
 2761 0252 0C        		.uleb128 0xc
 2762 0253 49        		.uleb128 0x49
 2763 0254 13        		.uleb128 0x13
 2764 0255 8701      		.uleb128 0x87
 2765 0257 0C        		.uleb128 0xc
 2766 0258 11        		.uleb128 0x11
 2767 0259 01        		.uleb128 0x1
 2768 025a 12        		.uleb128 0x12
 2769 025b 01        		.uleb128 0x1
 2770 025c 40        		.uleb128 0x40
 2771 025d 06        		.uleb128 0x6
 2772 025e 9642      		.uleb128 0x2116
 2773 0260 0C        		.uleb128 0xc
 2774 0261 01        		.uleb128 0x1
 2775 0262 13        		.uleb128 0x13
 2776 0263 00        		.byte	0
 2777 0264 00        		.byte	0
 2778 0265 2B        		.uleb128 0x2b
 2779 0266 34        		.uleb128 0x34
 2780 0267 00        		.byte	0
 2781 0268 03        		.uleb128 0x3
 2782 0269 0E        		.uleb128 0xe
 2783 026a 3A        		.uleb128 0x3a
 2784 026b 0B        		.uleb128 0xb
 2785 026c 3B        		.uleb128 0x3b
 2786 026d 0B        		.uleb128 0xb
 2787 026e 49        		.uleb128 0x49
 2788 026f 13        		.uleb128 0x13
 2789 0270 02        		.uleb128 0x2
 2790 0271 06        		.uleb128 0x6
 2791 0272 00        		.byte	0
 2792 0273 00        		.byte	0
 2793 0274 2C        		.uleb128 0x2c
 2794 0275 34        		.uleb128 0x34
 2795 0276 00        		.byte	0
 2796 0277 03        		.uleb128 0x3
 2797 0278 0E        		.uleb128 0xe
 2798 0279 3A        		.uleb128 0x3a
 2799 027a 0B        		.uleb128 0xb
 2800 027b 3B        		.uleb128 0x3b
 2801 027c 0B        		.uleb128 0xb
 2802 027d 49        		.uleb128 0x49
 2803 027e 13        		.uleb128 0x13
 2804 027f 1C        		.uleb128 0x1c
 2805 0280 0B        		.uleb128 0xb
 2806 0281 00        		.byte	0
 2807 0282 00        		.byte	0
 2808 0283 2D        		.uleb128 0x2d
 2809 0284 34        		.uleb128 0x34
 2810 0285 00        		.byte	0
 2811 0286 03        		.uleb128 0x3
 2812 0287 0E        		.uleb128 0xe
 2813 0288 3A        		.uleb128 0x3a
 2814 0289 0B        		.uleb128 0xb
 2815 028a 3B        		.uleb128 0x3b
 2816 028b 0B        		.uleb128 0xb
 2817 028c 49        		.uleb128 0x49
 2818 028d 13        		.uleb128 0x13
 2819 028e 02        		.uleb128 0x2
 2820 028f 0A        		.uleb128 0xa
 2821 0290 00        		.byte	0
 2822 0291 00        		.byte	0
 2823 0292 2E        		.uleb128 0x2e
 2824 0293 34        		.uleb128 0x34
 2825 0294 00        		.byte	0
 2826 0295 03        		.uleb128 0x3
 2827 0296 0E        		.uleb128 0xe
 2828 0297 3A        		.uleb128 0x3a
 2829 0298 0B        		.uleb128 0xb
 2830 0299 3B        		.uleb128 0x3b
 2831 029a 05        		.uleb128 0x5
 2832 029b 49        		.uleb128 0x49
 2833 029c 13        		.uleb128 0x13
 2834 029d 02        		.uleb128 0x2
 2835 029e 06        		.uleb128 0x6
 2836 029f 00        		.byte	0
 2837 02a0 00        		.byte	0
 2838 02a1 2F        		.uleb128 0x2f
 2839 02a2 34        		.uleb128 0x34
 2840 02a3 00        		.byte	0
 2841 02a4 03        		.uleb128 0x3
 2842 02a5 0E        		.uleb128 0xe
 2843 02a6 3A        		.uleb128 0x3a
 2844 02a7 0B        		.uleb128 0xb
 2845 02a8 3B        		.uleb128 0x3b
 2846 02a9 05        		.uleb128 0x5
 2847 02aa 49        		.uleb128 0x49
 2848 02ab 13        		.uleb128 0x13
 2849 02ac 02        		.uleb128 0x2
 2850 02ad 0A        		.uleb128 0xa
 2851 02ae 00        		.byte	0
 2852 02af 00        		.byte	0
 2853 02b0 30        		.uleb128 0x30
 2854 02b1 34        		.uleb128 0x34
 2855 02b2 00        		.byte	0
 2856 02b3 03        		.uleb128 0x3
 2857 02b4 0E        		.uleb128 0xe
 2858 02b5 3A        		.uleb128 0x3a
 2859 02b6 0B        		.uleb128 0xb
 2860 02b7 3B        		.uleb128 0x3b
 2861 02b8 05        		.uleb128 0x5
 2862 02b9 49        		.uleb128 0x49
 2863 02ba 13        		.uleb128 0x13
 2864 02bb 00        		.byte	0
 2865 02bc 00        		.byte	0
 2866 02bd 31        		.uleb128 0x31
 2867 02be 34        		.uleb128 0x34
 2868 02bf 00        		.byte	0
 2869 02c0 03        		.uleb128 0x3
 2870 02c1 08        		.uleb128 0x8
 2871 02c2 3A        		.uleb128 0x3a
 2872 02c3 0B        		.uleb128 0xb
 2873 02c4 3B        		.uleb128 0x3b
 2874 02c5 05        		.uleb128 0x5
 2875 02c6 49        		.uleb128 0x49
 2876 02c7 13        		.uleb128 0x13
 2877 02c8 00        		.byte	0
 2878 02c9 00        		.byte	0
 2879 02ca 32        		.uleb128 0x32
 2880 02cb 34        		.uleb128 0x34
 2881 02cc 00        		.byte	0
 2882 02cd 03        		.uleb128 0x3
 2883 02ce 08        		.uleb128 0x8
 2884 02cf 3A        		.uleb128 0x3a
 2885 02d0 0B        		.uleb128 0xb
 2886 02d1 3B        		.uleb128 0x3b
 2887 02d2 05        		.uleb128 0x5
 2888 02d3 49        		.uleb128 0x49
 2889 02d4 13        		.uleb128 0x13
 2890 02d5 1C        		.uleb128 0x1c
 2891 02d6 0D        		.uleb128 0xd
 2892 02d7 00        		.byte	0
 2893 02d8 00        		.byte	0
 2894 02d9 33        		.uleb128 0x33
 2895 02da 1D        		.uleb128 0x1d
 2896 02db 00        		.byte	0
 2897 02dc 31        		.uleb128 0x31
 2898 02dd 13        		.uleb128 0x13
 2899 02de 11        		.uleb128 0x11
 2900 02df 01        		.uleb128 0x1
 2901 02e0 12        		.uleb128 0x12
 2902 02e1 01        		.uleb128 0x1
 2903 02e2 58        		.uleb128 0x58
 2904 02e3 0B        		.uleb128 0xb
 2905 02e4 59        		.uleb128 0x59
 2906 02e5 05        		.uleb128 0x5
 2907 02e6 00        		.byte	0
 2908 02e7 00        		.byte	0
 2909 02e8 34        		.uleb128 0x34
 2910 02e9 1D        		.uleb128 0x1d
 2911 02ea 01        		.byte	0x1
 2912 02eb 31        		.uleb128 0x31
 2913 02ec 13        		.uleb128 0x13
 2914 02ed 11        		.uleb128 0x11
 2915 02ee 01        		.uleb128 0x1
 2916 02ef 12        		.uleb128 0x12
 2917 02f0 01        		.uleb128 0x1
 2918 02f1 58        		.uleb128 0x58
 2919 02f2 0B        		.uleb128 0xb
 2920 02f3 59        		.uleb128 0x59
 2921 02f4 05        		.uleb128 0x5
 2922 02f5 01        		.uleb128 0x1
 2923 02f6 13        		.uleb128 0x13
 2924 02f7 00        		.byte	0
 2925 02f8 00        		.byte	0
 2926 02f9 35        		.uleb128 0x35
 2927 02fa 05        		.uleb128 0x5
 2928 02fb 00        		.byte	0
 2929 02fc 31        		.uleb128 0x31
 2930 02fd 13        		.uleb128 0x13
 2931 02fe 02        		.uleb128 0x2
 2932 02ff 06        		.uleb128 0x6
 2933 0300 00        		.byte	0
 2934 0301 00        		.byte	0
 2935 0302 36        		.uleb128 0x36
 2936 0303 0B        		.uleb128 0xb
 2937 0304 01        		.byte	0x1
 2938 0305 11        		.uleb128 0x11
 2939 0306 01        		.uleb128 0x1
 2940 0307 12        		.uleb128 0x12
 2941 0308 01        		.uleb128 0x1
 2942 0309 01        		.uleb128 0x1
 2943 030a 13        		.uleb128 0x13
 2944 030b 00        		.byte	0
 2945 030c 00        		.byte	0
 2946 030d 37        		.uleb128 0x37
 2947 030e 0B        		.uleb128 0xb
 2948 030f 01        		.byte	0x1
 2949 0310 11        		.uleb128 0x11
 2950 0311 01        		.uleb128 0x1
 2951 0312 12        		.uleb128 0x12
 2952 0313 01        		.uleb128 0x1
 2953 0314 00        		.byte	0
 2954 0315 00        		.byte	0
 2955 0316 38        		.uleb128 0x38
 2956 0317 34        		.uleb128 0x34
 2957 0318 00        		.byte	0
 2958 0319 31        		.uleb128 0x31
 2959 031a 13        		.uleb128 0x13
 2960 031b 02        		.uleb128 0x2
 2961 031c 0A        		.uleb128 0xa
 2962 031d 00        		.byte	0
 2963 031e 00        		.byte	0
 2964 031f 39        		.uleb128 0x39
 2965 0320 34        		.uleb128 0x34
 2966 0321 00        		.byte	0
 2967 0322 03        		.uleb128 0x3
 2968 0323 08        		.uleb128 0x8
 2969 0324 3A        		.uleb128 0x3a
 2970 0325 0B        		.uleb128 0xb
 2971 0326 3B        		.uleb128 0x3b
 2972 0327 05        		.uleb128 0x5
 2973 0328 49        		.uleb128 0x49
 2974 0329 13        		.uleb128 0x13
 2975 032a 02        		.uleb128 0x2
 2976 032b 06        		.uleb128 0x6
 2977 032c 00        		.byte	0
 2978 032d 00        		.byte	0
 2979 032e 3A        		.uleb128 0x3a
 2980 032f 8982 01   		.uleb128 0x4109
 2981 0332 01        		.byte	0x1
 2982 0333 11        		.uleb128 0x11
 2983 0334 01        		.uleb128 0x1
 2984 0335 31        		.uleb128 0x31
 2985 0336 13        		.uleb128 0x13
 2986 0337 00        		.byte	0
 2987 0338 00        		.byte	0
 2988 0339 3B        		.uleb128 0x3b
 2989 033a 8A82 01   		.uleb128 0x410a
 2990 033d 00        		.byte	0
 2991 033e 02        		.uleb128 0x2
 2992 033f 0A        		.uleb128 0xa
 2993 0340 9142      		.uleb128 0x2111
 2994 0342 0A        		.uleb128 0xa
 2995 0343 00        		.byte	0
 2996 0344 00        		.byte	0
 2997 0345 3C        		.uleb128 0x3c
 2998 0346 34        		.uleb128 0x34
 2999 0347 00        		.byte	0
 3000 0348 03        		.uleb128 0x3
 3001 0349 0E        		.uleb128 0xe
 3002 034a 3A        		.uleb128 0x3a
 3003 034b 0B        		.uleb128 0xb
 3004 034c 3B        		.uleb128 0x3b
 3005 034d 05        		.uleb128 0x5
 3006 034e 49        		.uleb128 0x49
 3007 034f 13        		.uleb128 0x13
 3008 0350 1C        		.uleb128 0x1c
 3009 0351 0B        		.uleb128 0xb
 3010 0352 00        		.byte	0
 3011 0353 00        		.byte	0
 3012 0354 3D        		.uleb128 0x3d
 3013 0355 8982 01   		.uleb128 0x4109
 3014 0358 00        		.byte	0
 3015 0359 11        		.uleb128 0x11
 3016 035a 01        		.uleb128 0x1
 3017 035b 9342      		.uleb128 0x2113
 3018 035d 0A        		.uleb128 0xa
 3019 035e 00        		.byte	0
 3020 035f 00        		.byte	0
 3021 0360 3E        		.uleb128 0x3e
 3022 0361 8982 01   		.uleb128 0x4109
 3023 0364 00        		.byte	0
 3024 0365 11        		.uleb128 0x11
 3025 0366 01        		.uleb128 0x1
 3026 0367 31        		.uleb128 0x31
 3027 0368 13        		.uleb128 0x13
 3028 0369 00        		.byte	0
 3029 036a 00        		.byte	0
 3030 036b 3F        		.uleb128 0x3f
 3031 036c 8982 01   		.uleb128 0x4109
 3032 036f 01        		.byte	0x1
 3033 0370 11        		.uleb128 0x11
 3034 0371 01        		.uleb128 0x1
 3035 0372 31        		.uleb128 0x31
 3036 0373 13        		.uleb128 0x13
 3037 0374 01        		.uleb128 0x1
 3038 0375 13        		.uleb128 0x13
 3039 0376 00        		.byte	0
 3040 0377 00        		.byte	0
 3041 0378 40        		.uleb128 0x40
 3042 0379 15        		.uleb128 0x15
 3043 037a 00        		.byte	0
 3044 037b 27        		.uleb128 0x27
 3045 037c 0C        		.uleb128 0xc
 3046 037d 00        		.byte	0
 3047 037e 00        		.byte	0
 3048 037f 41        		.uleb128 0x41
 3049 0380 21        		.uleb128 0x21
 3050 0381 00        		.byte	0
 3051 0382 00        		.byte	0
 3052 0383 00        		.byte	0
 3053 0384 42        		.uleb128 0x42
 3054 0385 34        		.uleb128 0x34
 3055 0386 00        		.byte	0
 3056 0387 03        		.uleb128 0x3
 3057 0388 0E        		.uleb128 0xe
 3058 0389 3A        		.uleb128 0x3a
 3059 038a 0B        		.uleb128 0xb
 3060 038b 3B        		.uleb128 0x3b
 3061 038c 05        		.uleb128 0x5
 3062 038d 49        		.uleb128 0x49
 3063 038e 13        		.uleb128 0x13
 3064 038f 3F        		.uleb128 0x3f
 3065 0390 0C        		.uleb128 0xc
 3066 0391 3C        		.uleb128 0x3c
 3067 0392 0C        		.uleb128 0xc
 3068 0393 00        		.byte	0
 3069 0394 00        		.byte	0
 3070 0395 43        		.uleb128 0x43
 3071 0396 34        		.uleb128 0x34
 3072 0397 00        		.byte	0
 3073 0398 03        		.uleb128 0x3
 3074 0399 0E        		.uleb128 0xe
 3075 039a 3A        		.uleb128 0x3a
 3076 039b 0B        		.uleb128 0xb
 3077 039c 3B        		.uleb128 0x3b
 3078 039d 0B        		.uleb128 0xb
 3079 039e 49        		.uleb128 0x49
 3080 039f 13        		.uleb128 0x13
 3081 03a0 3F        		.uleb128 0x3f
 3082 03a1 0C        		.uleb128 0xc
 3083 03a2 02        		.uleb128 0x2
 3084 03a3 0A        		.uleb128 0xa
 3085 03a4 00        		.byte	0
 3086 03a5 00        		.byte	0
 3087 03a6 44        		.uleb128 0x44
 3088 03a7 34        		.uleb128 0x34
 3089 03a8 00        		.byte	0
 3090 03a9 03        		.uleb128 0x3
 3091 03aa 0E        		.uleb128 0xe
 3092 03ab 3A        		.uleb128 0x3a
 3093 03ac 0B        		.uleb128 0xb
 3094 03ad 3B        		.uleb128 0x3b
 3095 03ae 0B        		.uleb128 0xb
 3096 03af 49        		.uleb128 0x49
 3097 03b0 13        		.uleb128 0x13
 3098 03b1 3F        		.uleb128 0x3f
 3099 03b2 0C        		.uleb128 0xc
 3100 03b3 3C        		.uleb128 0x3c
 3101 03b4 0C        		.uleb128 0xc
 3102 03b5 00        		.byte	0
 3103 03b6 00        		.byte	0
 3104 03b7 45        		.uleb128 0x45
 3105 03b8 2E        		.uleb128 0x2e
 3106 03b9 00        		.byte	0
 3107 03ba 3F        		.uleb128 0x3f
 3108 03bb 0C        		.uleb128 0xc
 3109 03bc 3C        		.uleb128 0x3c
 3110 03bd 0C        		.uleb128 0xc
 3111 03be 8740      		.uleb128 0x2007
 3112 03c0 0E        		.uleb128 0xe
 3113 03c1 03        		.uleb128 0x3
 3114 03c2 0E        		.uleb128 0xe
 3115 03c3 3A        		.uleb128 0x3a
 3116 03c4 0B        		.uleb128 0xb
 3117 03c5 3B        		.uleb128 0x3b
 3118 03c6 05        		.uleb128 0x5
 3119 03c7 00        		.byte	0
 3120 03c8 00        		.byte	0
 3121 03c9 46        		.uleb128 0x46
 3122 03ca 2E        		.uleb128 0x2e
 3123 03cb 00        		.byte	0
 3124 03cc 3F        		.uleb128 0x3f
 3125 03cd 0C        		.uleb128 0xc
 3126 03ce 3C        		.uleb128 0x3c
 3127 03cf 0C        		.uleb128 0xc
 3128 03d0 8740      		.uleb128 0x2007
 3129 03d2 0E        		.uleb128 0xe
 3130 03d3 03        		.uleb128 0x3
 3131 03d4 0E        		.uleb128 0xe
 3132 03d5 3A        		.uleb128 0x3a
 3133 03d6 0B        		.uleb128 0xb
 3134 03d7 3B        		.uleb128 0x3b
 3135 03d8 0B        		.uleb128 0xb
 3136 03d9 00        		.byte	0
 3137 03da 00        		.byte	0
 3138 03db 00        		.byte	0
 3139               		.section	.debug_loc,"",@progbits
 3140               	.Ldebug_loc0:
 3141               	.LLST0:
 3142 0000 0000 0000 		.long	.LFB21
 3143 0004 0000 0000 		.long	.LCFI0
 3144 0008 0300      		.word	0x3
 3145 000a 92        		.byte	0x92
 3146 000b 20        		.uleb128 0x20
 3147 000c 02        		.sleb128 2
 3148 000d 0000 0000 		.long	.LCFI0
 3149 0011 0000 0000 		.long	.LFE21
 3150 0015 0300      		.word	0x3
 3151 0017 92        		.byte	0x92
 3152 0018 20        		.uleb128 0x20
 3153 0019 12        		.sleb128 18
 3154 001a 0000 0000 		.long	0
 3155 001e 0000 0000 		.long	0
 3156               	.LLST1:
 3157 0022 0000 0000 		.long	.LVL0
 3158 0026 0000 0000 		.long	.LVL3-1
 3159 002a 0600      		.word	0x6
 3160 002c 68        		.byte	0x68
 3161 002d 93        		.byte	0x93
 3162 002e 01        		.uleb128 0x1
 3163 002f 69        		.byte	0x69
 3164 0030 93        		.byte	0x93
 3165 0031 01        		.uleb128 0x1
 3166 0032 0000 0000 		.long	.LVL3-1
 3167 0036 0000 0000 		.long	.LVL9
 3168 003a 0600      		.word	0x6
 3169 003c 6C        		.byte	0x6c
 3170 003d 93        		.byte	0x93
 3171 003e 01        		.uleb128 0x1
 3172 003f 6D        		.byte	0x6d
 3173 0040 93        		.byte	0x93
 3174 0041 01        		.uleb128 0x1
 3175 0042 0000 0000 		.long	.LVL9
 3176 0046 0000 0000 		.long	.LFE21
 3177 004a 0400      		.word	0x4
 3178 004c F3        		.byte	0xf3
 3179 004d 01        		.uleb128 0x1
 3180 004e 68        		.byte	0x68
 3181 004f 9F        		.byte	0x9f
 3182 0050 0000 0000 		.long	0
 3183 0054 0000 0000 		.long	0
 3184               	.LLST2:
 3185 0058 0000 0000 		.long	.LVL0
 3186 005c 0000 0000 		.long	.LVL2
 3187 0060 0600      		.word	0x6
 3188 0062 66        		.byte	0x66
 3189 0063 93        		.byte	0x93
 3190 0064 01        		.uleb128 0x1
 3191 0065 67        		.byte	0x67
 3192 0066 93        		.byte	0x93
 3193 0067 01        		.uleb128 0x1
 3194 0068 0000 0000 		.long	.LVL2
 3195 006c 0000 0000 		.long	.LFE21
 3196 0070 0600      		.word	0x6
 3197 0072 60        		.byte	0x60
 3198 0073 93        		.byte	0x93
 3199 0074 01        		.uleb128 0x1
 3200 0075 61        		.byte	0x61
 3201 0076 93        		.byte	0x93
 3202 0077 01        		.uleb128 0x1
 3203 0078 0000 0000 		.long	0
 3204 007c 0000 0000 		.long	0
 3205               	.LLST3:
 3206 0080 0000 0000 		.long	.LFB22
 3207 0084 0000 0000 		.long	.LCFI1
 3208 0088 0300      		.word	0x3
 3209 008a 92        		.byte	0x92
 3210 008b 20        		.uleb128 0x20
 3211 008c 02        		.sleb128 2
 3212 008d 0000 0000 		.long	.LCFI1
 3213 0091 0000 0000 		.long	.LCFI2
 3214 0095 0300      		.word	0x3
 3215 0097 92        		.byte	0x92
 3216 0098 20        		.uleb128 0x20
 3217 0099 03        		.sleb128 3
 3218 009a 0000 0000 		.long	.LCFI2
 3219 009e 0000 0000 		.long	.LFE22
 3220 00a2 0300      		.word	0x3
 3221 00a4 92        		.byte	0x92
 3222 00a5 20        		.uleb128 0x20
 3223 00a6 04        		.sleb128 4
 3224 00a7 0000 0000 		.long	0
 3225 00ab 0000 0000 		.long	0
 3226               	.LLST4:
 3227 00af 0000 0000 		.long	.LVL10
 3228 00b3 0000 0000 		.long	.LVL11
 3229 00b7 0600      		.word	0x6
 3230 00b9 68        		.byte	0x68
 3231 00ba 93        		.byte	0x93
 3232 00bb 01        		.uleb128 0x1
 3233 00bc 69        		.byte	0x69
 3234 00bd 93        		.byte	0x93
 3235 00be 01        		.uleb128 0x1
 3236 00bf 0000 0000 		.long	.LVL11
 3237 00c3 0000 0000 		.long	.LFE23
 3238 00c7 0400      		.word	0x4
 3239 00c9 F3        		.byte	0xf3
 3240 00ca 01        		.uleb128 0x1
 3241 00cb 68        		.byte	0x68
 3242 00cc 9F        		.byte	0x9f
 3243 00cd 0000 0000 		.long	0
 3244 00d1 0000 0000 		.long	0
 3245               	.LLST5:
 3246 00d5 0000 0000 		.long	.LVL10
 3247 00d9 0000 0000 		.long	.LVL11
 3248 00dd 0600      		.word	0x6
 3249 00df 68        		.byte	0x68
 3250 00e0 93        		.byte	0x93
 3251 00e1 01        		.uleb128 0x1
 3252 00e2 69        		.byte	0x69
 3253 00e3 93        		.byte	0x93
 3254 00e4 01        		.uleb128 0x1
 3255 00e5 0000 0000 		.long	.LVL11
 3256 00e9 0000 0000 		.long	.LFE23
 3257 00ed 0400      		.word	0x4
 3258 00ef F3        		.byte	0xf3
 3259 00f0 01        		.uleb128 0x1
 3260 00f1 68        		.byte	0x68
 3261 00f2 9F        		.byte	0x9f
 3262 00f3 0000 0000 		.long	0
 3263 00f7 0000 0000 		.long	0
 3264               	.LLST6:
 3265 00fb 0000 0000 		.long	.LFB24
 3266 00ff 0000 0000 		.long	.LCFI3
 3267 0103 0300      		.word	0x3
 3268 0105 92        		.byte	0x92
 3269 0106 20        		.uleb128 0x20
 3270 0107 02        		.sleb128 2
 3271 0108 0000 0000 		.long	.LCFI3
 3272 010c 0000 0000 		.long	.LFE24
 3273 0110 0200      		.word	0x2
 3274 0112 8C        		.byte	0x8c
 3275 0113 27        		.sleb128 39
 3276 0114 0000 0000 		.long	0
 3277 0118 0000 0000 		.long	0
 3278               	.LLST7:
 3279 011c 0000 0000 		.long	.LVL12
 3280 0120 0000 0000 		.long	.LVL23
 3281 0124 0200      		.word	0x2
 3282 0126 30        		.byte	0x30
 3283 0127 9F        		.byte	0x9f
 3284 0128 0000 0000 		.long	0
 3285 012c 0000 0000 		.long	0
 3286               	.LLST8:
 3287 0130 0000 0000 		.long	.LVL12
 3288 0134 0000 0000 		.long	.LVL23
 3289 0138 0200      		.word	0x2
 3290 013a 30        		.byte	0x30
 3291 013b 9F        		.byte	0x9f
 3292 013c 0000 0000 		.long	.LVL23
 3293 0140 0000 0000 		.long	.LFE24
 3294 0144 0100      		.word	0x1
 3295 0146 5A        		.byte	0x5a
 3296 0147 0000 0000 		.long	0
 3297 014b 0000 0000 		.long	0
 3298               	.LLST9:
 3299 014f 0000 0000 		.long	.LVL13
 3300 0153 0000 0000 		.long	.LVL22
 3301 0157 0200      		.word	0x2
 3302 0159 30        		.byte	0x30
 3303 015a 9F        		.byte	0x9f
 3304 015b 0000 0000 		.long	.LVL22
 3305 015f 0000 0000 		.long	.LVL23
 3306 0163 0600      		.word	0x6
 3307 0165 58        		.byte	0x58
 3308 0166 93        		.byte	0x93
 3309 0167 01        		.uleb128 0x1
 3310 0168 69        		.byte	0x69
 3311 0169 93        		.byte	0x93
 3312 016a 01        		.uleb128 0x1
 3313 016b 0000 0000 		.long	.LVL23
 3314 016f 0000 0000 		.long	.LVL26
 3315 0173 0700      		.word	0x7
 3316 0175 58        		.byte	0x58
 3317 0176 93        		.byte	0x93
 3318 0177 01        		.uleb128 0x1
 3319 0178 8C        		.byte	0x8c
 3320 0179 13        		.sleb128 19
 3321 017a 93        		.byte	0x93
 3322 017b 01        		.uleb128 0x1
 3323 017c 0000 0000 		.long	.LVL52
 3324 0180 0000 0000 		.long	.LFE24
 3325 0184 0700      		.word	0x7
 3326 0186 58        		.byte	0x58
 3327 0187 93        		.byte	0x93
 3328 0188 01        		.uleb128 0x1
 3329 0189 8C        		.byte	0x8c
 3330 018a 13        		.sleb128 19
 3331 018b 93        		.byte	0x93
 3332 018c 01        		.uleb128 0x1
 3333 018d 0000 0000 		.long	0
 3334 0191 0000 0000 		.long	0
 3335               	.LLST10:
 3336 0195 0000 0000 		.long	.LVL13
 3337 0199 0000 0000 		.long	.LVL23
 3338 019d 0200      		.word	0x2
 3339 019f 30        		.byte	0x30
 3340 01a0 9F        		.byte	0x9f
 3341 01a1 0000 0000 		.long	.LVL23
 3342 01a5 0000 0000 		.long	.LVL36
 3343 01a9 0100      		.word	0x1
 3344 01ab 60        		.byte	0x60
 3345 01ac 0000 0000 		.long	.LVL46
 3346 01b0 0000 0000 		.long	.LFE24
 3347 01b4 0100      		.word	0x1
 3348 01b6 60        		.byte	0x60
 3349 01b7 0000 0000 		.long	0
 3350 01bb 0000 0000 		.long	0
 3351               	.LLST11:
 3352 01bf 0000 0000 		.long	.LVL13
 3353 01c3 0000 0000 		.long	.LVL23
 3354 01c7 0200      		.word	0x2
 3355 01c9 30        		.byte	0x30
 3356 01ca 9F        		.byte	0x9f
 3357 01cb 0000 0000 		.long	.LVL23
 3358 01cf 0000 0000 		.long	.LVL45
 3359 01d3 0600      		.word	0x6
 3360 01d5 5E        		.byte	0x5e
 3361 01d6 93        		.byte	0x93
 3362 01d7 01        		.uleb128 0x1
 3363 01d8 5F        		.byte	0x5f
 3364 01d9 93        		.byte	0x93
 3365 01da 01        		.uleb128 0x1
 3366 01db 0000 0000 		.long	.LVL45
 3367 01df 0000 0000 		.long	.LVL46
 3368 01e3 0200      		.word	0x2
 3369 01e5 30        		.byte	0x30
 3370 01e6 9F        		.byte	0x9f
 3371 01e7 0000 0000 		.long	.LVL46
 3372 01eb 0000 0000 		.long	.LFE24
 3373 01ef 0600      		.word	0x6
 3374 01f1 5E        		.byte	0x5e
 3375 01f2 93        		.byte	0x93
 3376 01f3 01        		.uleb128 0x1
 3377 01f4 5F        		.byte	0x5f
 3378 01f5 93        		.byte	0x93
 3379 01f6 01        		.uleb128 0x1
 3380 01f7 0000 0000 		.long	0
 3381 01fb 0000 0000 		.long	0
 3382               	.LLST12:
 3383 01ff 0000 0000 		.long	.LVL13
 3384 0203 0000 0000 		.long	.LVL23
 3385 0207 0200      		.word	0x2
 3386 0209 30        		.byte	0x30
 3387 020a 9F        		.byte	0x9f
 3388 020b 0000 0000 		.long	.LVL23
 3389 020f 0000 0000 		.long	.LVL24
 3390 0213 0100      		.word	0x1
 3391 0215 68        		.byte	0x68
 3392 0216 0000 0000 		.long	.LVL25
 3393 021a 0000 0000 		.long	.LFE24
 3394 021e 0100      		.word	0x1
 3395 0220 59        		.byte	0x59
 3396 0221 0000 0000 		.long	0
 3397 0225 0000 0000 		.long	0
 3398               	.LLST13:
 3399 0229 0000 0000 		.long	.LVL13
 3400 022d 0000 0000 		.long	.LVL23
 3401 0231 0200      		.word	0x2
 3402 0233 30        		.byte	0x30
 3403 0234 9F        		.byte	0x9f
 3404 0235 0000 0000 		.long	.LVL23
 3405 0239 0000 0000 		.long	.LVL45
 3406 023d 0100      		.word	0x1
 3407 023f 61        		.byte	0x61
 3408 0240 0000 0000 		.long	.LVL45
 3409 0244 0000 0000 		.long	.LVL46
 3410 0248 0200      		.word	0x2
 3411 024a 30        		.byte	0x30
 3412 024b 9F        		.byte	0x9f
 3413 024c 0000 0000 		.long	.LVL46
 3414 0250 0000 0000 		.long	.LFE24
 3415 0254 0100      		.word	0x1
 3416 0256 61        		.byte	0x61
 3417 0257 0000 0000 		.long	0
 3418 025b 0000 0000 		.long	0
 3419               	.LLST14:
 3420 025f 0000 0000 		.long	.LVL13
 3421 0263 0000 0000 		.long	.LVL23
 3422 0267 0200      		.word	0x2
 3423 0269 30        		.byte	0x30
 3424 026a 9F        		.byte	0x9f
 3425 026b 0000 0000 		.long	.LVL23
 3426 026f 0000 0000 		.long	.LVL39
 3427 0273 0600      		.word	0x6
 3428 0275 5C        		.byte	0x5c
 3429 0276 93        		.byte	0x93
 3430 0277 01        		.uleb128 0x1
 3431 0278 5D        		.byte	0x5d
 3432 0279 93        		.byte	0x93
 3433 027a 01        		.uleb128 0x1
 3434 027b 0000 0000 		.long	.LVL39
 3435 027f 0000 0000 		.long	.LVL40
 3436 0283 0600      		.word	0x6
 3437 0285 7C        		.byte	0x7c
 3438 0286 00        		.sleb128 0
 3439 0287 82        		.byte	0x82
 3440 0288 00        		.sleb128 0
 3441 0289 1C        		.byte	0x1c
 3442 028a 9F        		.byte	0x9f
 3443 028b 0000 0000 		.long	.LVL41
 3444 028f 0000 0000 		.long	.LFE24
 3445 0293 0600      		.word	0x6
 3446 0295 5C        		.byte	0x5c
 3447 0296 93        		.byte	0x93
 3448 0297 01        		.uleb128 0x1
 3449 0298 5D        		.byte	0x5d
 3450 0299 93        		.byte	0x93
 3451 029a 01        		.uleb128 0x1
 3452 029b 0000 0000 		.long	0
 3453 029f 0000 0000 		.long	0
 3454               	.LLST15:
 3455 02a3 0000 0000 		.long	.LVL13
 3456 02a7 0000 0000 		.long	.LVL23
 3457 02ab 0200      		.word	0x2
 3458 02ad 30        		.byte	0x30
 3459 02ae 9F        		.byte	0x9f
 3460 02af 0000 0000 		.long	.LVL23
 3461 02b3 0000 0000 		.long	.LFE24
 3462 02b7 0100      		.word	0x1
 3463 02b9 5B        		.byte	0x5b
 3464 02ba 0000 0000 		.long	0
 3465 02be 0000 0000 		.long	0
 3466               	.LLST16:
 3467 02c2 0000 0000 		.long	.LVL15
 3468 02c6 0000 0000 		.long	.LVL16
 3469 02ca 0200      		.word	0x2
 3470 02cc 37        		.byte	0x37
 3471 02cd 9F        		.byte	0x9f
 3472 02ce 0000 0000 		.long	0
 3473 02d2 0000 0000 		.long	0
 3474               	.LLST17:
 3475 02d6 0000 0000 		.long	.LVL49
 3476 02da 0000 0000 		.long	.LVL51-1
 3477 02de 0600      		.word	0x6
 3478 02e0 66        		.byte	0x66
 3479 02e1 93        		.byte	0x93
 3480 02e2 01        		.uleb128 0x1
 3481 02e3 67        		.byte	0x67
 3482 02e4 93        		.byte	0x93
 3483 02e5 01        		.uleb128 0x1
 3484 02e6 0000 0000 		.long	0
 3485 02ea 0000 0000 		.long	0
 3486               		.section	.debug_aranges,"",@progbits
 3487 0000 2400 0000 		.long	0x24
 3488 0004 0200      		.word	0x2
 3489 0006 0000 0000 		.long	.Ldebug_info0
 3490 000a 04        		.byte	0x4
 3491 000b 00        		.byte	0
 3492 000c 0000      		.word	0
 3493 000e 0000      		.word	0
 3494 0010 0000 0000 		.long	.Ltext0
 3495 0014 0801 0000 		.long	.Letext0-.Ltext0
 3496 0018 0000 0000 		.long	.LFB24
 3497 001c BC02 0000 		.long	.LFE24-.LFB24
 3498 0020 0000 0000 		.long	0
 3499 0024 0000 0000 		.long	0
 3500               		.section	.debug_ranges,"",@progbits
 3501               	.Ldebug_ranges0:
 3502 0000 0000 0000 		.long	.Ltext0
 3503 0004 0000 0000 		.long	.Letext0
 3504 0008 0000 0000 		.long	.LFB24
 3505 000c 0000 0000 		.long	.LFE24
 3506 0010 0000 0000 		.long	0
 3507 0014 0000 0000 		.long	0
 3508               		.section	.debug_line,"",@progbits
 3509               	.Ldebug_line0:
 3510 0000 B203 0000 		.section	.debug_str,"MS",@progbits,1
 3510      0200 FC00 
 3510      0000 0201 
 3510      FB0E 0A00 
 3510      0101 0101 
 3511               	.LASF29:
 3512 0000 776F 7264 		.string	"word"
 3512      00
 3513               	.LASF75:
 3514 0005 6C66 7372 		.string	"lfsr"
 3514      00
 3515               	.LASF79:
 3516 000a 6361 7074 		.string	"capture_diff"
 3516      7572 655F 
 3516      6469 6666 
 3516      00
 3517               	.LASF90:
 3518 0017 5469 6D65 		.string	"Timer_Set"
 3518      725F 5365 
 3518      7400 
 3519               	.LASF18:
 3520 0021 7265 706F 		.string	"report_id_mouse"
 3520      7274 5F69 
 3520      645F 6D6F 
 3520      7573 6500 
 3521               	.LASF67:
 3522 0031 6C65 645F 		.string	"led_sensor_trig_time"
 3522      7365 6E73 
 3522      6F72 5F74 
 3522      7269 675F 
 3522      7469 6D65 
 3523               	.LASF0:
 3524 0046 696E 7438 		.string	"int8_t"
 3524      5F74 00
 3525               	.LASF34:
 3526 004d 6252 6571 		.string	"bRequest"
 3526      7565 7374 
 3526      00
 3527               	.LASF77:
 3528 0056 7465 6D70 		.string	"temp"
 3528      00
 3529               	.LASF63:
 3530 005b 6669 6C74 		.string	"filter_iir2_data"
 3530      6572 5F69 
 3530      6972 325F 
 3530      6461 7461 
 3530      00
 3531               	.LASF24:
 3532 006c 7369 7A65 		.string	"sizetype"
 3532      7479 7065 
 3532      00
 3533               	.LASF69:
 3534 0075 6C65 645F 		.string	"led_sensor_values"
 3534      7365 6E73 
 3534      6F72 5F76 
 3534      616C 7565 
 3534      7300 
 3535               	.LASF80:
 3536 0087 6361 7074 		.string	"capture_diff_max"
 3536      7572 655F 
 3536      6469 6666 
 3536      5F6D 6178 
 3536      00
 3537               	.LASF105:
 3538 0098 6D61 696E 		.string	"main"
 3538      00
 3539               	.LASF87:
 3540 009d 7573 625F 		.string	"usb_in_stream"
 3540      696E 5F73 
 3540      7472 6561 
 3540      6D00 
 3541               	.LASF21:
 3542 00ab 7265 706F 		.string	"report_id_buf_in_getwritepos"
 3542      7274 5F69 
 3542      645F 6275 
 3542      665F 696E 
 3542      5F67 6574 
 3543               	.LASF32:
 3544 00c8 7573 6252 		.string	"usbRequest"
 3544      6571 7565 
 3544      7374 00
 3545               	.LASF62:
 3546 00d3 6C65 645F 		.string	"led_sensor_blink"
 3546      7365 6E73 
 3546      6F72 5F62 
 3546      6C69 6E6B 
 3546      00
 3547               	.LASF101:
 3548 00e4 7661 6C75 		.string	"value"
 3548      6500 
 3549               	.LASF73:
 3550 00ea 6C65 645F 		.string	"led_sensor_weigthed_sum"
 3550      7365 6E73 
 3550      6F72 5F77 
 3550      6569 6774 
 3550      6865 645F 
 3551               	.LASF92:
 3552 0102 7573 6250 		.string	"usbPoll"
 3552      6F6C 6C00 
 3553               	.LASF23:
 3554 010a 7265 706F 		.string	"report_id_buf_in_data"
 3554      7274 5F69 
 3554      645F 6275 
 3554      665F 696E 
 3554      5F64 6174 
 3555               	.LASF40:
 3556 0120 5449 4D45 		.string	"TIMER_LED_SENSOR_BLINK"
 3556      525F 4C45 
 3556      445F 5345 
 3556      4E53 4F52 
 3556      5F42 4C49 
 3557               	.LASF81:
 3558 0137 6361 7074 		.string	"captured"
 3558      7572 6564 
 3558      00
 3559               	.LASF1:
 3560 0140 7569 6E74 		.string	"uint8_t"
 3560      385F 7400 
 3561               	.LASF96:
 3562 0148 474E 5520 		.string	"GNU C99 5.4.0 -mn-flash=1 -mno-skip-bug -mcall-prologues -mmcu=avr25 -gdwarf-2 -Os -std=c
 3562      4339 3920 
 3562      352E 342E 
 3562      3020 2D6D 
 3562      6E2D 666C 
 3563               	.LASF43:
 3564 01e5 5449 4D45 		.string	"TIMER_SEND_KEY_DOWN"
 3564      525F 5345 
 3564      4E44 5F4B 
 3564      4559 5F44 
 3564      4F57 4E00 
 3565               	.LASF51:
 3566 01f9 6275 7474 		.string	"buttonMask"
 3566      6F6E 4D61 
 3566      736B 00
 3567               	.LASF44:
 3568 0204 5449 4D45 		.string	"TIMER_MEASURE_POT"
 3568      525F 4D45 
 3568      4153 5552 
 3568      455F 504F 
 3568      5400 
 3569               	.LASF48:
 3570 0216 7137 5F38 		.string	"q7_8_t"
 3570      5F74 00
 3571               	.LASF88:
 3572 021d 7072 696E 		.string	"printf_P"
 3572      7466 5F50 
 3572      00
 3573               	.LASF89:
 3574 0226 7573 6249 		.string	"usbInit"
 3574      6E69 7400 
 3575               	.LASF49:
 3576 022e 6669 6C74 		.string	"filter_iir2_t"
 3576      6572 5F69 
 3576      6972 325F 
 3576      7400 
 3577               	.LASF10:
 3578 023c 6C6F 6E67 		.string	"long long int"
 3578      206C 6F6E 
 3578      6720 696E 
 3578      7400 
 3579               	.LASF93:
 3580 024a 7573 6253 		.string	"usbSetInterrupt"
 3580      6574 496E 
 3580      7465 7272 
 3580      7570 7400 
 3581               	.LASF56:
 3582 025a 6969 7232 		.string	"iir2"
 3582      00
 3583               	.LASF61:
 3584 025f 6275 7474 		.string	"buttonPressed"
 3584      6F6E 5072 
 3584      6573 7365 
 3584      6400 
 3585               	.LASF8:
 3586 026d 6C6F 6E67 		.string	"long int"
 3586      2069 6E74 
 3586      00
 3587               	.LASF76:
 3588 0276 7374 6469 		.string	"stdin_get_string_buffer"
 3588      6E5F 6765 
 3588      745F 7374 
 3588      7269 6E67 
 3588      5F62 7566 
 3589               	.LASF95:
 3590 028e 7072 696E 		.string	"printf"
 3590      7466 00
 3591               	.LASF41:
 3592 0295 5449 4D45 		.string	"TIMER_LED_BUTTON_BLINK"
 3592      525F 4C45 
 3592      445F 4255 
 3592      5454 4F4E 
 3592      5F42 4C49 
 3593               	.LASF22:
 3594 02ac 7265 706F 		.string	"report_id_buf_out_data"
 3594      7274 5F69 
 3594      645F 6275 
 3594      665F 6F75 
 3594      745F 6461 
 3595               	.LASF47:
 3596 02c3 5449 4D45 		.string	"TIMER_LAST"
 3596      525F 4C41 
 3596      5354 00
 3597               	.LASF55:
 3598 02ce 7374 6469 		.string	"stdin_get_string_t"
 3598      6E5F 6765 
 3598      745F 7374 
 3598      7269 6E67 
 3598      5F74 00
 3599               	.LASF19:
 3600 02e1 7265 706F 		.string	"report_id_keyboard"
 3600      7274 5F69 
 3600      645F 6B65 
 3600      7962 6F61 
 3600      7264 00
 3601               	.LASF91:
 3602 02f4 5469 6D65 		.string	"Timers_DecreaseAll"
 3602      7273 5F44 
 3602      6563 7265 
 3602      6173 6541 
 3602      6C6C 00
 3603               	.LASF98:
 3604 0307 2F68 6F6D 		.string	"/home/birkler/src/birkler/avrtinybootloader/app_hid"
 3604      652F 6269 
 3604      726B 6C65 
 3604      722F 7372 
 3604      632F 6269 
 3605               	.LASF35:
 3606 033b 7756 616C 		.string	"wValue"
 3606      7565 00
 3607               	.LASF100:
 3608 0342 7764 745F 		.string	"wdt_enable"
 3608      656E 6162 
 3608      6C65 00
 3609               	.LASF85:
 3610 034d 7573 6254 		.string	"usbTxStatus1"
 3610      7853 7461 
 3610      7475 7331 
 3610      00
 3611               	.LASF3:
 3612 035a 756E 7369 		.string	"unsigned char"
 3612      676E 6564 
 3612      2063 6861 
 3612      7200 
 3613               	.LASF25:
 3614 0368 5F5F 6669 		.string	"__file"
 3614      6C65 00
 3615               	.LASF2:
 3616 036f 7369 676E 		.string	"signed char"
 3616      6564 2063 
 3616      6861 7200 
 3617               	.LASF13:
 3618 037b 666C 6167 		.string	"flags"
 3618      7300 
 3619               	.LASF11:
 3620 0381 6C6F 6E67 		.string	"long long unsigned int"
 3620      206C 6F6E 
 3620      6720 756E 
 3620      7369 676E 
 3620      6564 2069 
 3621               	.LASF26:
 3622 0398 7573 6254 		.string	"usbTxStatus"
 3622      7853 7461 
 3622      7475 7300 
 3623               	.LASF6:
 3624 03a4 756E 7369 		.string	"unsigned int"
 3624      676E 6564 
 3624      2069 6E74 
 3624      00
 3625               	.LASF5:
 3626 03b1 7569 6E74 		.string	"uint16_t"
 3626      3136 5F74 
 3626      00
 3627               	.LASF84:
 3628 03ba 7573 6244 		.string	"usbDescriptorHidReport"
 3628      6573 6372 
 3628      6970 746F 
 3628      7248 6964 
 3628      5265 706F 
 3629               	.LASF12:
 3630 03d1 756E 6765 		.string	"unget"
 3630      7400 
 3631               	.LASF52:
 3632 03d7 6D6F 7573 		.string	"mouse"
 3632      6500 
 3633               	.LASF70:
 3634 03dd 6C65 645F 		.string	"led_sensor_nvalues"
 3634      7365 6E73 
 3634      6F72 5F6E 
 3634      7661 6C75 
 3634      6573 00
 3635               	.LASF99:
 3636 03f0 7573 6257 		.string	"usbWord"
 3636      6F72 6400 
 3637               	.LASF57:
 3638 03f8 696E 765F 		.string	"inv_b0"
 3638      6230 00
 3639               	.LASF15:
 3640 03ff 7564 6174 		.string	"udata"
 3640      6100 
 3641               	.LASF82:
 3642 0405 7265 706F 		.string	"reportBuffer"
 3642      7274 4275 
 3642      6666 6572 
 3642      00
 3643               	.LASF16:
 3644 0412 6368 6172 		.string	"char"
 3644      00
 3645               	.LASF68:
 3646 0417 6C65 645F 		.string	"led_sensor_prev_time"
 3646      7365 6E73 
 3646      6F72 5F70 
 3646      7265 765F 
 3646      7469 6D65 
 3647               	.LASF7:
 3648 042c 696E 7433 		.string	"int32_t"
 3648      325F 7400 
 3649               	.LASF71:
 3650 0434 6C65 645F 		.string	"led_sensor_nsample"
 3650      7365 6E73 
 3650      6F72 5F6E 
 3650      7361 6D70 
 3650      6C65 00
 3651               	.LASF28:
 3652 0447 7573 6254 		.string	"usbTxStatus_t"
 3652      7853 7461 
 3652      7475 735F 
 3652      7400 
 3653               	.LASF46:
 3654 0455 5449 4D45 		.string	"TIMER_SELF_TEST"
 3654      525F 5345 
 3654      4C46 5F54 
 3654      4553 5400 
 3655               	.LASF4:
 3656 0465 696E 7431 		.string	"int16_t"
 3656      365F 7400 
 3657               	.LASF86:
 3658 046d 7573 625F 		.string	"usb_out_stream"
 3658      6F75 745F 
 3658      7374 7265 
 3658      616D 00
 3659               	.LASF33:
 3660 047c 626D 5265 		.string	"bmRequestType"
 3660      7175 6573 
 3660      7454 7970 
 3660      6500 
 3661               	.LASF103:
 3662 048a 6861 7264 		.string	"hardwareInit"
 3662      7761 7265 
 3662      496E 6974 
 3662      00
 3663               	.LASF20:
 3664 0497 7265 706F 		.string	"report_id_buf_out_setreadpos"
 3664      7274 5F69 
 3664      645F 6275 
 3664      665F 6F75 
 3664      745F 7365 
 3665               	.LASF60:
 3666 04b4 6461 7461 		.string	"data"
 3666      00
 3667               	.LASF53:
 3668 04b9 7265 706F 		.string	"report_t"
 3668      7274 5F74 
 3668      00
 3669               	.LASF27:
 3670 04c2 6275 6666 		.string	"buffer"
 3670      6572 00
 3671               	.LASF58:
 3672 04c9 6669 6C74 		.string	"filter_iir2"
 3672      6572 5F69 
 3672      6972 3200 
 3673               	.LASF97:
 3674 04d5 6D61 696E 		.string	"main.c"
 3674      2E63 00
 3675               	.LASF9:
 3676 04dc 6C6F 6E67 		.string	"long unsigned int"
 3676      2075 6E73 
 3676      6967 6E65 
 3676      6420 696E 
 3676      7400 
 3677               	.LASF30:
 3678 04ee 6279 7465 		.string	"bytes"
 3678      7300 
 3679               	.LASF94:
 3680 04f4 5469 6D65 		.string	"Timer_HasExpired"
 3680      725F 4861 
 3680      7345 7870 
 3680      6972 6564 
 3680      00
 3681               	.LASF42:
 3682 0505 5449 4D45 		.string	"TIMER_SEND_KEY_UP"
 3682      525F 5345 
 3682      4E44 5F4B 
 3682      4559 5F55 
 3682      5000 
 3683               	.LASF65:
 3684 0517 6C65 645F 		.string	"led_sensor_last_random"
 3684      7365 6E73 
 3684      6F72 5F6C 
 3684      6173 745F 
 3684      7261 6E64 
 3685               	.LASF14:
 3686 052e 7369 7A65 		.string	"size"
 3686      00
 3687               	.LASF45:
 3688 0533 5449 4D45 		.string	"TIMER_DATA_CHANGE"
 3688      525F 4441 
 3688      5441 5F43 
 3688      4841 4E47 
 3688      4500 
 3689               	.LASF38:
 3690 0545 7573 6252 		.string	"usbRequest_t"
 3690      6571 7565 
 3690      7374 5F74 
 3690      00
 3691               	.LASF74:
 3692 0552 6C65 645F 		.string	"led_sensor_weigthed_sum_idx"
 3692      7365 6E73 
 3692      6F72 5F77 
 3692      6569 6774 
 3692      6865 645F 
 3693               	.LASF83:
 3694 056e 5F5F 696F 		.string	"__iob"
 3694      6200 
 3695               	.LASF31:
 3696 0574 7573 6257 		.string	"usbWord_t"
 3696      6F72 645F 
 3696      7400 
 3697               	.LASF78:
 3698 057e 7265 7365 		.string	"reset_vec"
 3698      745F 7665 
 3698      6300 
 3699               	.LASF50:
 3700 0588 7265 706F 		.string	"report_id"
 3700      7274 5F69 
 3700      6400 
 3701               	.LASF64:
 3702 0592 6669 6C74 		.string	"filtered_val"
 3702      6572 6564 
 3702      5F76 616C 
 3702      00
 3703               	.LASF66:
 3704 059f 6C65 645F 		.string	"led_sensor_delta_time"
 3704      7365 6E73 
 3704      6F72 5F64 
 3704      656C 7461 
 3704      5F74 696D 
 3705               	.LASF72:
 3706 05b5 6C65 645F 		.string	"led_sensor_weigthed_sum_data"
 3706      7365 6E73 
 3706      6F72 5F77 
 3706      6569 6774 
 3706      6865 645F 
 3707               	.LASF102:
 3708 05d2 5F5F 7665 		.string	"__vector_16"
 3708      6374 6F72 
 3708      5F31 3600 
 3709               	.LASF17:
 3710 05de 4649 4C45 		.string	"FILE"
 3710      00
 3711               	.LASF37:
 3712 05e3 774C 656E 		.string	"wLength"
 3712      6774 6800 
 3713               	.LASF54:
 3714 05eb 6275 664C 		.string	"bufLen"
 3714      656E 00
 3715               	.LASF36:
 3716 05f2 7749 6E64 		.string	"wIndex"
 3716      6578 00
 3717               	.LASF104:
 3718 05f9 7072 6E67 		.string	"prng_lfsr1_1"
 3718      5F6C 6673 
 3718      7231 5F31 
 3718      00
 3719               	.LASF59:
 3720 0606 7573 6246 		.string	"usbFunctionSetup2"
 3720      756E 6374 
 3720      696F 6E53 
 3720      6574 7570 
 3720      3200 
 3721               	.LASF39:
 3722 0618 5449 4D45 		.string	"TIMER_LED_BLINK"
 3722      525F 4C45 
 3722      445F 424C 
 3722      494E 4B00 
 3723               		.ident	"GCC: (GNU) 5.4.0"
 3724               	.global __do_copy_data
 3725               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccZIkVFH.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccZIkVFH.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccZIkVFH.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccZIkVFH.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZIkVFH.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZIkVFH.s:13     .text:0000000000000000 filter_iir2
     /tmp/ccZIkVFH.s:182    .text:00000000000000ee __vector_16
     /tmp/ccZIkVFH.s:215    .text:0000000000000104 usbFunctionSetup2
     /tmp/ccZIkVFH.s:237    .text.startup:0000000000000000 main
     /tmp/ccZIkVFH.s:808    .progmem.data:0000000000000000 __c.2386
     /tmp/ccZIkVFH.s:802    .bss:0000000000000028 led_sensor_delta_time.2376
     /tmp/ccZIkVFH.s:804    .bss:000000000000002a reportBuffer
     /tmp/ccZIkVFH.s:795    .data:0000000000000000 lfsr.2294
                             .bss:0000000000000000 led_sensor_weigthed_sum_data.2382
     /tmp/ccZIkVFH.s:799    .data:0000000000000001 led_sensor_nsample.2381
     /tmp/ccZIkVFH.s:815    .progmem.data:0000000000000004 usbDescriptorHidReport
     /tmp/ccZIkVFH.s:811    .bss:000000000000002c captured
     /tmp/ccZIkVFH.s:897    .bss:000000000000002e capture_diff_max
     /tmp/ccZIkVFH.s:899    .bss:0000000000000030 capture_diff

UNDEFINED SYMBOLS
__mulsi3
__prologue_saves__
__epilogue_restores__
usb_out_stream
__iob
usb_in_stream
printf_P
usbInit
Timer_Set
Timers_DecreaseAll
usbPoll
usbTxStatus1
usbSetInterrupt
Timer_HasExpired
__udivmodhi4
printf
__do_copy_data
__do_clear_bss
