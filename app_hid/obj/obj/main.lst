   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__mulsi3
  11               	.global	filter_iir2
  12               		.type	filter_iir2, @function
  13               	filter_iir2:
  14               	.LFB21:
  15               		.file 1 "../util/iir_filter.h"
   1:../util/iir_filter.h **** /*
   2:../util/iir_filter.h ****  * iir_filter.h
   3:../util/iir_filter.h ****  *
   4:../util/iir_filter.h ****  *  Created on: Jan 25, 2011
   5:../util/iir_filter.h ****  *      Author: jorgen
   6:../util/iir_filter.h ****  *
   7:../util/iir_filter.h ****  *
   8:../util/iir_filter.h ****  *
   9:../util/iir_filter.h ****  *
  10:../util/iir_filter.h ****  *
  11:../util/iir_filter.h ****  *      http://faculty.cua.edu/regalia/regalia-perso_files/sp-sep-91.pdf
  12:../util/iir_filter.h ****  *
  13:../util/iir_filter.h ****  *      http://www.dsptutor.freeuk.com/IIRFilterDesign/IIRFilterDesign.html
  14:../util/iir_filter.h ****  *
  15:../util/iir_filter.h ****  *      http://ntur.lib.ntu.edu.tw/bitstream/246246/142473/1/63.pdf
  16:../util/iir_filter.h ****  */
  17:../util/iir_filter.h **** 
  18:../util/iir_filter.h **** #ifndef IIR_FILTER_H_
  19:../util/iir_filter.h **** #define IIR_FILTER_H_
  20:../util/iir_filter.h **** 
  21:../util/iir_filter.h **** #include "q7_8_t.h"
  22:../util/iir_filter.h **** #include "q2_13_t.h"
  23:../util/iir_filter.h **** 
  24:../util/iir_filter.h **** typedef struct {
  25:../util/iir_filter.h **** 	q7_8_t y_1;
  26:../util/iir_filter.h **** 	q7_8_t y_2;
  27:../util/iir_filter.h **** 	q7_8_t x_1;
  28:../util/iir_filter.h **** 	q7_8_t x_2;
  29:../util/iir_filter.h **** } filter_iir2_t;
  30:../util/iir_filter.h **** 
  31:../util/iir_filter.h **** 
  32:../util/iir_filter.h **** //Chebyshev IIR filter
  33:../util/iir_filter.h **** //
  34:../util/iir_filter.h **** //Filter type: HP
  35:../util/iir_filter.h **** //Passband: 400 - 4000 Hz
  36:../util/iir_filter.h **** //Passband ripple: 1.0 dB
  37:../util/iir_filter.h **** //Order: 2
  38:../util/iir_filter.h **** //
  39:../util/iir_filter.h **** //Coefficients
  40:../util/iir_filter.h **** //
  41:../util/iir_filter.h **** //a[0] = 0.7550102     	b[0] = 1.0
  42:../util/iir_filter.h **** //a[1] = -1.5100204     	b[1] = -1.655717
  43:../util/iir_filter.h **** //a[2] = 0.7550102     	b[2] = 0.73281693
  44:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_90per_HP(filter_iir2_t* iir2,q2_13_t in)
  45:../util/iir_filter.h **** {
  46:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.7550102);
  47:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(-1.5100204);
  48:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float( 0.7550102);
  49:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
  50:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.655717);
  51:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float(0.73281693);
  52:../util/iir_filter.h **** 
  53:../util/iir_filter.h **** 	q2_13_t res;
  54:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
  55:../util/iir_filter.h **** 			q2_13_mul(a0,in),
  56:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
  57:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
  58:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
  59:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
  60:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
  61:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
  62:../util/iir_filter.h **** 	iir2->y_1 = res;
  63:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
  64:../util/iir_filter.h **** 	iir2->x_1 = in;
  65:../util/iir_filter.h **** 	return res;
  66:../util/iir_filter.h **** }
  67:../util/iir_filter.h **** 
  68:../util/iir_filter.h **** 
  69:../util/iir_filter.h **** 
  70:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_50_BP(filter_iir2_t* iir2,q2_13_t in)
  71:../util/iir_filter.h **** {
  72:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.037804753 );
  73:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.0  );
  74:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(-0.037804753 );
  75:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
  76:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.1792585E-16);
  77:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float( 0.9243905);
  78:../util/iir_filter.h **** 
  79:../util/iir_filter.h **** 	q2_13_t res;
  80:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
  81:../util/iir_filter.h **** 			q2_13_mul(a0,in),
  82:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
  83:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
  84:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
  85:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
  86:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
  87:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
  88:../util/iir_filter.h **** 	iir2->y_1 = res;
  89:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
  90:../util/iir_filter.h **** 	iir2->x_1 = in;
  91:../util/iir_filter.h **** 	return res;
  92:../util/iir_filter.h **** }
  93:../util/iir_filter.h **** 
  94:../util/iir_filter.h **** /*
  95:../util/iir_filter.h **** 
  96:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_2_10_LP(filter_iir2_t* iir2,q2_13_t in)
  97:../util/iir_filter.h **** {
  98:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.0014603166);
  99:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.0029206332 );
 100:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(0.0014603166);
 101:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
 102:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.8890331);
 103:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float( 0.89487433);
 104:../util/iir_filter.h **** 
 105:../util/iir_filter.h **** 	q2_13_t res;
 106:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
 107:../util/iir_filter.h **** 			q2_13_mul(a0,in),
 108:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
 109:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
 110:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
 111:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
 112:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 113:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 114:../util/iir_filter.h **** 	iir2->y_1 = res;
 115:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 116:../util/iir_filter.h **** 	iir2->x_1 = in;
 117:../util/iir_filter.h **** 	return res;
 118:../util/iir_filter.h **** }
 119:../util/iir_filter.h **** */
 120:../util/iir_filter.h **** /*
 121:../util/iir_filter.h **** q2_13_t q2_13_filter_iir2(filter_iir2_t* iir2,q2_13_t in)
 122:../util/iir_filter.h **** {
 123:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.020517392);
 124:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.041034784);
 125:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(0.020517392);
 126:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
 127:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.6185197);
 128:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float(0.71059346);
 129:../util/iir_filter.h **** 
 130:../util/iir_filter.h **** 	q2_13_t res;
 131:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
 132:../util/iir_filter.h **** 			q2_13_mul(a0,in),
 133:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
 134:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
 135:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
 136:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
 137:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 138:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 139:../util/iir_filter.h **** 	iir2->y_1 = res;
 140:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 141:../util/iir_filter.h **** 	iir2->x_1 = in;
 142:../util/iir_filter.h **** 	return res;
 143:../util/iir_filter.h **** }
 144:../util/iir_filter.h **** */
 145:../util/iir_filter.h **** 
 146:../util/iir_filter.h **** q7_8_t filter_iir2(filter_iir2_t* iir2,q7_8_t in)
 147:../util/iir_filter.h **** {
  16               		.loc 1 147 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 A0E0      		ldi r26,0
  20 0002 B0E0      		ldi r27,0
  21 0004 E0E0      		ldi r30,lo8(gs(1f))
  22 0006 F0E0      		ldi r31,hi8(gs(1f))
  23 0008 00C0      		rjmp __prologue_saves__+((18 - 16) * 2)
  24               	1:
  25               	.LCFI0:
  26               		.cfi_offset 4, -2
  27               		.cfi_offset 5, -3
  28               		.cfi_offset 6, -4
  29               		.cfi_offset 7, -5
  30               		.cfi_offset 8, -6
  31               		.cfi_offset 9, -7
  32               		.cfi_offset 10, -8
  33               		.cfi_offset 11, -9
  34               		.cfi_offset 12, -10
  35               		.cfi_offset 13, -11
  36               		.cfi_offset 14, -12
  37               		.cfi_offset 15, -13
  38               		.cfi_offset 16, -14
  39               		.cfi_offset 17, -15
  40               		.cfi_offset 28, -16
  41               		.cfi_offset 29, -17
  42               		.cfi_def_cfa_offset 18
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 16 */
  46               	.L__stack_usage = 16
  47 000a EC01      		movw r28,r24
  48 000c 8B01      		movw r16,r22
  49               	.LVL1:
 148:../util/iir_filter.h **** 	const q7_8_t a0 = q7_8_float(0.020517392);
 149:../util/iir_filter.h **** 	const q7_8_t a1 = q7_8_float(0.041034784);
 150:../util/iir_filter.h **** 	const q7_8_t a2 = q7_8_float(0.020517392);
 151:../util/iir_filter.h **** 	const q7_8_t inv_b0 = q7_8_float(1/1.0);
 152:../util/iir_filter.h **** 	const q7_8_t _b1 = -q7_8_float(-1.6185197);
 153:../util/iir_filter.h **** 	const q7_8_t _b2 = -q7_8_float(0.71059346);
 154:../util/iir_filter.h **** 
 155:../util/iir_filter.h **** 	q7_8_t res;
 156:../util/iir_filter.h **** 	res =  q7_8_mul(inv_b0,q7_8_sum(
  50               		.loc 1 156 0
  51 000e EC80      		ldd r14,Y+4
  52 0010 FD80      		ldd r15,Y+5
  53 0012 C880      		ld r12,Y
  54 0014 D980      		ldd r13,Y+1
  55 0016 072E      		mov __tmp_reg__,r23
  56 0018 000C      		lsl r0
  57 001a 880B      		sbc r24,r24
  58 001c 990B      		sbc r25,r25
  59               	.LVL2:
  60 001e 25E0      		ldi r18,lo8(5)
  61 0020 30E0      		ldi r19,0
  62 0022 40E0      		ldi r20,0
  63 0024 50E0      		ldi r21,0
  64 0026 00D0      		rcall __mulsi3
  65               	.LVL3:
  66 0028 472E      		mov r4,r23
  67 002a 582E      		mov r5,r24
  68 002c 692E      		mov r6,r25
  69 002e 7724      		clr r7
  70 0030 67FC      		sbrc r6,7
  71 0032 7A94      		dec r7
  72 0034 B701      		movw r22,r14
  73 0036 0F2C      		mov __tmp_reg__,r15
  74 0038 000C      		lsl r0
  75 003a 880B      		sbc r24,r24
  76 003c 990B      		sbc r25,r25
  77 003e 2AE0      		ldi r18,lo8(10)
  78 0040 30E0      		ldi r19,0
  79 0042 40E0      		ldi r20,0
  80 0044 50E0      		ldi r21,0
  81 0046 00D0      		rcall __mulsi3
  82               	.LVL4:
  83 0048 BB27      		clr r27
  84 004a 97FD      		sbrc r25,7
  85 004c BA95      		dec r27
  86 004e A92F      		mov r26,r25
  87 0050 982F      		mov r25,r24
  88 0052 872F      		mov r24,r23
  89 0054 3201      		movw r6,r4
  90 0056 680E      		add r6,r24
  91 0058 791E      		adc r7,r25
  92 005a 6E81      		ldd r22,Y+6
  93 005c 7F81      		ldd r23,Y+7
  94 005e 072E      		mov __tmp_reg__,r23
  95 0060 000C      		lsl r0
  96 0062 880B      		sbc r24,r24
  97 0064 990B      		sbc r25,r25
  98 0066 25E0      		ldi r18,lo8(5)
  99 0068 30E0      		ldi r19,0
 100 006a 40E0      		ldi r20,0
 101 006c 50E0      		ldi r21,0
 102 006e 00D0      		rcall __mulsi3
 103               	.LVL5:
 104 0070 BB27      		clr r27
 105 0072 97FD      		sbrc r25,7
 106 0074 BA95      		dec r27
 107 0076 A92F      		mov r26,r25
 108 0078 982F      		mov r25,r24
 109 007a 872F      		mov r24,r23
 110 007c 4301      		movw r8,r6
 111 007e 880E      		add r8,r24
 112 0080 991E      		adc r9,r25
 113 0082 B601      		movw r22,r12
 114 0084 0D2C      		mov __tmp_reg__,r13
 115 0086 000C      		lsl r0
 116 0088 880B      		sbc r24,r24
 117 008a 990B      		sbc r25,r25
 118 008c 2EE9      		ldi r18,lo8(-98)
 119 008e 31E0      		ldi r19,lo8(1)
 120 0090 40E0      		ldi r20,0
 121 0092 50E0      		ldi r21,0
 122 0094 00D0      		rcall __mulsi3
 123               	.LVL6:
 124 0096 BB27      		clr r27
 125 0098 97FD      		sbrc r25,7
 126 009a BA95      		dec r27
 127 009c A92F      		mov r26,r25
 128 009e 982F      		mov r25,r24
 129 00a0 872F      		mov r24,r23
 130 00a2 5401      		movw r10,r8
 131 00a4 A80E      		add r10,r24
 132 00a6 B91E      		adc r11,r25
 133 00a8 6A81      		ldd r22,Y+2
 134 00aa 7B81      		ldd r23,Y+3
 135 00ac 072E      		mov __tmp_reg__,r23
 136 00ae 000C      		lsl r0
 137 00b0 880B      		sbc r24,r24
 138 00b2 990B      		sbc r25,r25
 139 00b4 2BE4      		ldi r18,lo8(75)
 140 00b6 3FEF      		ldi r19,lo8(-1)
 141 00b8 4FEF      		ldi r20,lo8(-1)
 142 00ba 5FEF      		ldi r21,lo8(-1)
 143 00bc 00D0      		rcall __mulsi3
 144               	.LVL7:
 145 00be BB27      		clr r27
 146 00c0 97FD      		sbrc r25,7
 147 00c2 BA95      		dec r27
 148 00c4 A92F      		mov r26,r25
 149 00c6 982F      		mov r25,r24
 150 00c8 872F      		mov r24,r23
 151 00ca 8A0D      		add r24,r10
 152 00cc 9B1D      		adc r25,r11
 153 00ce 092E      		mov __tmp_reg__,r25
 154 00d0 000C      		lsl r0
 155 00d2 AA0B      		sbc r26,r26
 156 00d4 BB0B      		sbc r27,r27
 157               	.LVL8:
 157:../util/iir_filter.h **** 			q7_8_mul(a0,in),
 158:../util/iir_filter.h **** 			q7_8_mul(a1,iir2->x_1),
 159:../util/iir_filter.h **** 			q7_8_mul(a2,iir2->x_2),
 160:../util/iir_filter.h **** 			q7_8_mul(_b1,iir2->y_1),
 161:../util/iir_filter.h **** 			q7_8_mul(_b2,iir2->y_2)));
 162:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 163:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 158               		.loc 1 163 0
 159 00d6 DB82      		std Y+3,r13
 160 00d8 CA82      		std Y+2,r12
 164:../util/iir_filter.h **** 	iir2->y_1 = res;
 161               		.loc 1 164 0
 162 00da 9983      		std Y+1,r25
 163 00dc 8883      		st Y,r24
 165:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 164               		.loc 1 165 0
 165 00de FF82      		std Y+7,r15
 166 00e0 EE82      		std Y+6,r14
 166:../util/iir_filter.h **** 	iir2->x_1 = in;
 167               		.loc 1 166 0
 168 00e2 1D83      		std Y+5,r17
 169 00e4 0C83      		std Y+4,r16
 170               	/* epilogue start */
 167:../util/iir_filter.h **** 	return res;
 168:../util/iir_filter.h **** }
 171               		.loc 1 168 0
 172 00e6 CDB7      		in r28,__SP_L__
 173 00e8 DEB7      		in r29,__SP_H__
 174               	.LVL9:
 175 00ea E0E1      		ldi r30, lo8(16)
 176 00ec 00C0      		rjmp __epilogue_restores__ + ((18 - 16) * 2)
 177               		.cfi_endproc
 178               	.LFE21:
 179               		.size	filter_iir2, .-filter_iir2
 180               	.global	__vector_16
 181               		.type	__vector_16, @function
 182               	__vector_16:
 183               	.LFB22:
 184               		.file 2 "main.c"
   1:main.c        **** 
   2:main.c        **** /*
   3:main.c        ****  * jorgen.birkler)a(gmail.com
   4:main.c        ****  */
   5:main.c        **** 
   6:main.c        **** /**
   7:main.c        ****  * @mainpage
   8:main.c        ****  *
   9:main.c        ****  * \section implementation_guide Implementation
  10:main.c        ****  * - \ref software
  11:main.c        ****  * - \ref hardware
  12:main.c        ****  * .
  13:main.c        ****  *
  14:main.c        ****  * (c) 2010 Jorgen Birkler (jorgen.birkler)a(gmail.com)
  15:main.c        ****  *
  16:main.c        ****  * USB driver
  17:main.c        ****  *
  18:main.c        ****  * (c) 2006 by OBJECTIVE DEVELOPMENT Software GmbH
  19:main.c        ****  */
  20:main.c        **** /**
  21:main.c        ****  * \page software Software
  22:main.c        ****  * Uses the firmware only USB low speed driver from http://obdev.at.
  23:main.c        ****  * The USB device is configured as a Mouse HID device.
  24:main.c        ****  *
  25:main.c        ****  * \section tips Tips about HID development
  26:main.c        ****  * General tips about HID development:
  27:main.c        ****  *
  28:main.c        ****  * 1. HID device class is cached by Windows; change USB_CFG_DEVICE_ID if you change USAGE_PAGE
  29:main.c        ****  *    class to another. It took me several weeks to find this info. I copied the use page for the
  30:main.c        ****  *    remote but it never work until I changed the USB_CFG_DEVICE_ID to another number so that the
  31:main.c        ****  *    device was rediscovered by Windows.
  32:main.c        ****  *
  33:main.c        ****  * 2. Added usbconfig.h manually to the dependencies in the make file to all .o files.
  34:main.c        ****  *    WinAVR .d files doesn't seem to work for subdirs
  35:main.c        ****  *
  36:main.c        ****  *
  37:main.c        ****  */
  38:main.c        **** /**
  39:main.c        ****  * \page hardware Hardware
  40:main.c        ****  *
  41:main.c        ****  */
  42:main.c        **** 
  43:main.c        **** #include <avr/io.h>
  44:main.c        **** #include <avr/interrupt.h>
  45:main.c        **** #include <avr/pgmspace.h>
  46:main.c        **** #include <avr/eeprom.h>
  47:main.c        **** #include <avr/wdt.h>
  48:main.c        **** #include <util/delay.h>
  49:main.c        **** #include <util/atomic.h>
  50:main.c        **** 
  51:main.c        **** #include <stdio.h>
  52:main.c        **** #include <string.h>
  53:main.c        **** #include <stdint.h>
  54:main.c        **** #define USB_GET_REPORT_IDS
  55:main.c        **** #include "usbdrv.h"
  56:main.c        **** #include "oddebug.h"
  57:main.c        **** #include "hw.h"
  58:main.c        **** #include "timers.h"
  59:main.c        **** #include "usbstream.h"
  60:main.c        **** #include "lfsr8.h"
  61:main.c        **** #include "iir_filter.h"
  62:main.c        **** 
  63:main.c        **** /*
  64:main.c        ****  * help macros
  65:main.c        ****  */
  66:main.c        **** #ifndef STATIC_ASSERT
  67:main.c        **** #define STATIC_ASSERT(expr) extern char static_assert[ (!!(expr))*2 - 1]
  68:main.c        **** #endif //#ifndef STATIC_ASSERT
  69:main.c        **** #define elements_of(array) (sizeof(array) / sizeof(array[0]))
  70:main.c        **** 
  71:main.c        **** STATIC_ASSERT(((int8_t)(-8))>>1 < 0);
  72:main.c        **** 
  73:main.c        **** /* ------------------------------------------------------------------------- */
  74:main.c        **** /* ------------------------------------------------------------------------- */
  75:main.c        **** /* ----------------------------- USB interface ----------------------------- */
  76:main.c        **** /* ------------------------------------------------------------------------- */
  77:main.c        **** 
  78:main.c        **** /*
  79:main.c        **** ISR(TIMER0_OVF_vect,ISR_NOBLOCK )
  80:main.c        **** {
  81:main.c        **** }
  82:main.c        ****  */
  83:main.c        **** 
  84:main.c        **** STATIC_ASSERT(TIMER0_OVERFLOW_PERIOD_MS_X256 > 2);
  85:main.c        **** STATIC_ASSERT(TIMER0_OVERFLOW_PERIOD_MS_X256 < 60000);
  86:main.c        **** 
  87:main.c        **** #define us_to_ticks(_us_) (((_us_)*F_TIMER1) / 1000000L)
  88:main.c        **** 
  89:main.c        **** STATIC_ASSERT(us_to_ticks(100) > 0);
  90:main.c        **** 
  91:main.c        **** 
  92:main.c        **** static volatile uint16_t capture_diff;
  93:main.c        **** static volatile uint16_t capture_diff_max;
  94:main.c        **** static volatile uint16_t captured;
  95:main.c        **** 
  96:main.c        **** 
  97:main.c        **** ISR(TIMER0_CAPT_vect,ISR_NOBLOCK )
  98:main.c        **** {
 185               		.loc 2 98 0
 186               		.cfi_startproc
 187 00ee 7894      		sei
 188 00f0 1F92      		push r1
 189               	.LCFI1:
 190               		.cfi_def_cfa_offset 3
 191               		.cfi_offset 1, -2
 192 00f2 0F92      		push r0
 193               	.LCFI2:
 194               		.cfi_def_cfa_offset 4
 195               		.cfi_offset 0, -3
 196 00f4 0FB6      		in r0,__SREG__
 197 00f6 0F92      		push r0
 198 00f8 1124      		clr __zero_reg__
 199               	/* prologue: Interrupt */
 200               	/* frame size = 0 */
 201               	/* stack size = 3 */
 202               	.L__stack_usage = 3
 203               	/* epilogue start */
  99:main.c        **** 	/*
 100:main.c        **** 	uint16_t capture_time;
 101:main.c        **** 	uint16_t service_time;
 102:main.c        **** 	service_time = TCNT0L;
 103:main.c        **** 	service_time |= ((unsigned int)TCNT0H << 8);
 104:main.c        **** 	capture_time = OCR0A;
 105:main.c        **** 	capture_time |= ((unsigned int)OCR0B << 8);
 106:main.c        **** 	capture_diff = service_time - capture_time;
 107:main.c        **** 	if (capture_diff > capture_diff_max) {
 108:main.c        **** 		capture_diff_max = capture_diff;
 109:main.c        **** 	}
 110:main.c        **** 	captured++;
 111:main.c        **** */
 112:main.c        **** }
 204               		.loc 2 112 0
 205 00fa 0F90      		pop r0
 206 00fc 0FBE      		out __SREG__,r0
 207 00fe 0F90      		pop r0
 208 0100 1F90      		pop r1
 209 0102 1895      		reti
 210               		.cfi_endproc
 211               	.LFE22:
 212               		.size	__vector_16, .-__vector_16
 213               	.global	usbFunctionSetup2
 214               		.type	usbFunctionSetup2, @function
 215               	usbFunctionSetup2:
 216               	.LFB23:
 113:main.c        **** 
 114:main.c        **** 
 115:main.c        **** 
 116:main.c        **** /*
 117:main.c        **** ISR(TIMER1_OVF_vect,ISR_NOBLOCK)
 118:main.c        **** {
 119:main.c        **** 	timer1_ticks_major++;
 120:main.c        **** }
 121:main.c        **** static uint32_t gettimer1ticks(void)
 122:main.c        **** {
 123:main.c        **** 	uint32_t res;
 124:main.c        **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 125:main.c        **** 	{
 126:main.c        **** 		res = TCNT1;
 127:main.c        **** 		res |= timer1_ticks_major<<8;
 128:main.c        **** 	}
 129:main.c        **** 	return res;
 130:main.c        **** }
 131:main.c        **** */
 132:main.c        **** 
 133:main.c        **** 
 134:main.c        **** #define ReportDescriptor usbHidReportDescriptor
 135:main.c        **** 
 136:main.c        **** PROGMEM
 137:main.c        **** #include "hid.h"
 138:main.c        **** 
 139:main.c        **** STATIC_ASSERT(sizeof(usbHidReportDescriptor) == USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH);
 140:main.c        **** 
 141:main.c        **** typedef struct{
 142:main.c        **** 	struct {
 143:main.c        **** 		unsigned char report_id;
 144:main.c        **** 		uchar   buttonMask;
 145:main.c        **** 	} mouse;
 146:main.c        **** }report_t;
 147:main.c        **** 
 148:main.c        **** 
 149:main.c        **** static report_t reportBuffer;
 150:main.c        **** 
 151:main.c        **** 
 152:main.c        **** usbMsgLen_t usbFunctionSetup2(uchar data[8])
 153:main.c        **** {
 217               		.loc 2 153 0
 218               		.cfi_startproc
 219               	.LVL10:
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 0 */
 223               	.L__stack_usage = 0
 154:main.c        **** 	usbRequest_t    *rq = (void *)data;
 155:main.c        **** 
 156:main.c        **** 	/* The following requests are never used. But since they are required by
 157:main.c        **** 	 * the specification, we implement them in this example.
 158:main.c        **** 	 *
 159:main.c        **** 	 */
 160:main.c        **** 	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 161:main.c        **** 		DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
 162:main.c        **** 		if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) *
 163:main.c        **** 			switch (rq->wValue.bytes[0]) {
 164:main.c        **** 			default:
 165:main.c        **** 				break;
 166:main.c        **** 			}
 167:main.c        **** 
 168:main.c        **** 		}
 169:main.c        **** 	}else{
 170:main.c        **** 		/* no vendor specific requests implemented */
 171:main.c        **** 	}
 172:main.c        **** 	return 0;   /* default for not implemented requests: return no data back to host */
 173:main.c        **** }
 224               		.loc 2 173 0
 225 0104 80E0      		ldi r24,0
 226               	.LVL11:
 227 0106 0895      		ret
 228               		.cfi_endproc
 229               	.LFE23:
 230               		.size	usbFunctionSetup2, .-usbFunctionSetup2
 231               	.global	unpack_color_red
 232               		.type	unpack_color_red, @function
 233               	unpack_color_red:
 234               	.LFB24:
 174:main.c        **** 
 175:main.c        **** 
 176:main.c        **** typedef struct {
 177:main.c        **** 	char buffer[64];
 178:main.c        **** 	uchar bufLen;
 179:main.c        **** } stdin_get_string_t;
 180:main.c        **** 
 181:main.c        **** 
 182:main.c        **** 
 183:main.c        **** typedef uint8_t rgb332_t;
 184:main.c        **** 
 185:main.c        **** /*
 186:main.c        **** static inline
 187:main.c        **** #define RGB888_RGB332(r,g,b)
 188:main.c        **** */
 189:main.c        **** 
 190:main.c        **** enum {
 191:main.c        **** 	RED,GREEN,BLUE,COLORS
 192:main.c        **** };
 193:main.c        **** 
 194:main.c        **** typedef struct RGB888_ {
 195:main.c        **** 	uint8_t color_[COLORS];
 196:main.c        **** } RGB888;
 197:main.c        **** 
 198:main.c        **** uint8_t unpack_color_red(rgb332_t rgb) {
 235               		.loc 2 198 0
 236               		.cfi_startproc
 237               	.LVL12:
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
 199:main.c        **** 	uint8_t base = rgb >> 5;
 200:main.c        **** 	base &= ~0b111;
 201:main.c        **** 	uint8_t res = base << 5;
 202:main.c        **** 	res |= base << 2;
 203:main.c        **** 	res |= base >> 1;
 204:main.c        **** 	return res;
 205:main.c        **** }
 242               		.loc 2 205 0
 243 0108 80E0      		ldi r24,0
 244               	.LVL13:
 245 010a 0895      		ret
 246               		.cfi_endproc
 247               	.LFE24:
 248               		.size	unpack_color_red, .-unpack_color_red
 249               	.global	unpack_color_green
 250               		.type	unpack_color_green, @function
 251               	unpack_color_green:
 252               	.LFB25:
 206:main.c        **** 
 207:main.c        **** 
 208:main.c        **** uint8_t unpack_color_green(rgb332_t rgb) {
 253               		.loc 2 208 0
 254               		.cfi_startproc
 255               	.LVL14:
 256               	/* prologue: function */
 257               	/* frame size = 0 */
 258               	/* stack size = 0 */
 259               	.L__stack_usage = 0
 209:main.c        **** 	uint8_t base = rgb >> 2;
 260               		.loc 2 209 0
 261 010c 8695      		lsr r24
 262 010e 8695      		lsr r24
 263               	.LVL15:
 210:main.c        **** 	base &= ~0b111;
 264               		.loc 2 210 0
 265 0110 982F      		mov r25,r24
 266 0112 987F      		andi r25,lo8(-8)
 267               	.LVL16:
 211:main.c        **** 	uint8_t res = base << 5;
 212:main.c        **** 	res |= base << 2;
 268               		.loc 2 212 0
 269 0114 892F      		mov r24,r25
 270 0116 880F      		lsl r24
 271 0118 880F      		lsl r24
 272               	.LVL17:
 213:main.c        **** 	res |= base >> 1;
 214:main.c        **** 	return res;
 273               		.loc 2 214 0
 274 011a 9695      		lsr r25
 275               	.LVL18:
 215:main.c        **** }
 276               		.loc 2 215 0
 277 011c 892B      		or r24,r25
 278               	.LVL19:
 279 011e 0895      		ret
 280               		.cfi_endproc
 281               	.LFE25:
 282               		.size	unpack_color_green, .-unpack_color_green
 283               	.global	unpack_color_blue
 284               		.type	unpack_color_blue, @function
 285               	unpack_color_blue:
 286               	.LFB26:
 216:main.c        **** 
 217:main.c        **** uint8_t unpack_color_blue(rgb332_t rgb) {
 287               		.loc 2 217 0
 288               		.cfi_startproc
 289               	.LVL20:
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 218:main.c        **** 	uint8_t base = rgb;
 219:main.c        **** 	base &= ~0b11;
 294               		.loc 2 219 0
 295 0120 8C7F      		andi r24,lo8(-4)
 296               	.LVL21:
 220:main.c        **** 	uint8_t res = base << 6;
 221:main.c        **** 	res |= base << 4;
 297               		.loc 2 221 0
 298 0122 282F      		mov r18,r24
 299 0124 30E0      		ldi r19,0
 300               	.LVL22:
 222:main.c        **** 	res |= base << 2;
 301               		.loc 2 222 0
 302 0126 A901      		movw r20,r18
 303 0128 94E0      		ldi r25,4
 304               		1:
 305 012a 440F      		lsl r20
 306 012c 551F      		rol r21
 307 012e 9A95      		dec r25
 308 0130 01F4      		brne 1b
 309               	.LVL23:
 310 0132 220F      		lsl r18
 311 0134 331F      		rol r19
 312 0136 220F      		lsl r18
 313 0138 331F      		rol r19
 314 013a 242B      		or r18,r20
 315               	.LVL24:
 223:main.c        **** 	res |= base << 0;
 224:main.c        **** 	return res;
 225:main.c        **** }
 316               		.loc 2 225 0
 317 013c 822B      		or r24,r18
 318               	.LVL25:
 319 013e 0895      		ret
 320               		.cfi_endproc
 321               	.LFE26:
 322               		.size	unpack_color_blue, .-unpack_color_blue
 323               	.global	send_strip_byte
 324               		.type	send_strip_byte, @function
 325               	send_strip_byte:
 326               	.LFB27:
 226:main.c        **** #define nop() __builtin_avr_nop()  //asm volatile(" nop \n\t")
 227:main.c        **** 
 228:main.c        **** 
 229:main.c        **** void send_strip_byte(uint8_t byteval) {
 327               		.loc 2 229 0
 328               		.cfi_startproc
 329               	.LVL26:
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
 334               		.loc 2 229 0
 335 0140 98E0      		ldi r25,lo8(8)
 336               	.LVL27:
 337               	.L10:
 338               	.LBB15:
 230:main.c        **** 	uint8_t temp = byteval;
 231:main.c        **** 	for (uint8_t i=0;i<8;++i) {
 232:main.c        **** 		if (temp & 0b10000000) {
 339               		.loc 2 232 0
 340 0142 87FF      		sbrs r24,7
 341 0144 00C0      		rjmp .L8
 233:main.c        **** 			STRIP_DATA_1();
 342               		.loc 2 233 0
 343 0146 DE9A      		sbi 0x1b,6
 344 0148 00C0      		rjmp .L9
 345               	.L8:
 234:main.c        **** 		} else {
 235:main.c        **** 			STRIP_DATA_0();
 346               		.loc 2 235 0
 347 014a DE98      		cbi 0x1b,6
 348               	.L9:
 236:main.c        **** 		}
 237:main.c        **** 		STRIP_CLK_HIGH();
 349               		.loc 2 237 0 discriminator 2
 350 014c DF9A      		sbi 0x1b,7
 238:main.c        **** 		temp <<=1;
 351               		.loc 2 238 0 discriminator 2
 352 014e 880F      		lsl r24
 353               	.LVL28:
 239:main.c        **** 		STRIP_CLK_LOW();
 354               		.loc 2 239 0 discriminator 2
 355 0150 DF98      		cbi 0x1b,7
 356               	.LVL29:
 357 0152 9150      		subi r25,lo8(-(-1))
 358               	.LVL30:
 231:main.c        **** 		if (temp & 0b10000000) {
 359               		.loc 2 231 0 discriminator 2
 360 0154 01F4      		brne .L10
 361               	/* epilogue start */
 362               	.LBE15:
 240:main.c        **** 	}
 241:main.c        **** }
 363               		.loc 2 241 0
 364 0156 0895      		ret
 365               		.cfi_endproc
 366               	.LFE27:
 367               		.size	send_strip_byte, .-send_strip_byte
 368               	.global	send_color
 369               		.type	send_color, @function
 370               	send_color:
 371               	.LFB28:
 242:main.c        **** 
 243:main.c        **** 
 244:main.c        **** 
 245:main.c        **** void send_color(uint8_t r,uint8_t g,uint8_t b) {
 372               		.loc 2 245 0
 373               		.cfi_startproc
 374               	.LVL31:
 375 0158 1F93      		push r17
 376               	.LCFI3:
 377               		.cfi_def_cfa_offset 3
 378               		.cfi_offset 17, -2
 379 015a CF93      		push r28
 380               	.LCFI4:
 381               		.cfi_def_cfa_offset 4
 382               		.cfi_offset 28, -3
 383 015c DF93      		push r29
 384               	.LCFI5:
 385               		.cfi_def_cfa_offset 5
 386               		.cfi_offset 29, -4
 387               	/* prologue: function */
 388               	/* frame size = 0 */
 389               	/* stack size = 3 */
 390               	.L__stack_usage = 3
 391 015e 182F      		mov r17,r24
 392 0160 D62F      		mov r29,r22
 393 0162 C42F      		mov r28,r20
 394               	.LVL32:
 246:main.c        **** 	const uint8_t start_byte = 0xFF;
 247:main.c        **** 	send_strip_byte(start_byte);
 395               		.loc 2 247 0
 396 0164 8FEF      		ldi r24,lo8(-1)
 397               	.LVL33:
 398 0166 00D0      		rcall send_strip_byte
 399               	.LVL34:
 248:main.c        **** 	send_strip_byte(r);
 400               		.loc 2 248 0
 401 0168 812F      		mov r24,r17
 402 016a 00D0      		rcall send_strip_byte
 403               	.LVL35:
 249:main.c        **** 	send_strip_byte(g);
 404               		.loc 2 249 0
 405 016c 8D2F      		mov r24,r29
 406 016e 00D0      		rcall send_strip_byte
 407               	.LVL36:
 250:main.c        **** 	send_strip_byte(b);
 408               		.loc 2 250 0
 409 0170 8C2F      		mov r24,r28
 410 0172 00D0      		rcall send_strip_byte
 411               	.LVL37:
 412               	/* epilogue start */
 251:main.c        **** }
 413               		.loc 2 251 0
 414 0174 DF91      		pop r29
 415               	.LVL38:
 416 0176 CF91      		pop r28
 417               	.LVL39:
 418 0178 1F91      		pop r17
 419               	.LVL40:
 420 017a 0895      		ret
 421               		.cfi_endproc
 422               	.LFE28:
 423               		.size	send_color, .-send_color
 424               	.global	getRainbowColor
 425               		.type	getRainbowColor, @function
 426               	getRainbowColor:
 427               	.LFB29:
 252:main.c        **** 
 253:main.c        **** 
 254:main.c        **** /* ------------------------------------------------------------------------- */
 255:main.c        **** 
 256:main.c        **** 
 257:main.c        **** RGB888 rainbow_colors[7] = {
 258:main.c        **** 		{{200,0,200}},
 259:main.c        **** 		{{200,0,0}},
 260:main.c        **** 		{{200,200,0}},
 261:main.c        **** 		{{0,200,0}},
 262:main.c        **** 		{{0,200,200}},
 263:main.c        **** 		{{0,0,200}},
 264:main.c        **** 		{{200,0,200}}
 265:main.c        **** };
 266:main.c        **** 
 267:main.c        **** 
 268:main.c        **** RGB888 getRainbowColor(int index) {
 428               		.loc 2 268 0
 429               		.cfi_startproc
 430               	.LVL41:
 431 017c A9E0      		ldi r26,lo8(9)
 432 017e B0E0      		ldi r27,0
 433 0180 E0E0      		ldi r30,lo8(gs(1f))
 434 0182 F0E0      		ldi r31,hi8(gs(1f))
 435 0184 00C0      		rjmp __prologue_saves__+((18 - 12) * 2)
 436               	1:
 437               	.LCFI6:
 438               		.cfi_offset 8, -2
 439               		.cfi_offset 9, -3
 440               		.cfi_offset 10, -4
 441               		.cfi_offset 11, -5
 442               		.cfi_offset 12, -6
 443               		.cfi_offset 13, -7
 444               		.cfi_offset 14, -8
 445               		.cfi_offset 15, -9
 446               		.cfi_offset 16, -10
 447               		.cfi_offset 17, -11
 448               		.cfi_offset 28, -12
 449               		.cfi_offset 29, -13
 450               		.cfi_def_cfa 28, 23
 451               	/* prologue: function */
 452               	/* frame size = 9 */
 453               	/* stack size = 21 */
 454               	.L__stack_usage = 21
 455 0186 9C01      		movw r18,r24
 456               	.LVL42:
 269:main.c        **** 	//300/6 = 50 ~ 64
 270:main.c        **** 	const int steps = 32;
 271:main.c        **** 
 272:main.c        **** 
 273:main.c        **** 	int rainbow_index = index / steps;
 457               		.loc 2 273 0
 458 0188 97FD      		sbrc r25,7
 459 018a 4F96      		adiw r24,31
 460               	.LVL43:
 461               	.L15:
 462 018c 45E0      		ldi r20,5
 463               		1:
 464 018e 9595      		asr r25
 465 0190 8795      		ror r24
 466 0192 4A95      		dec r20
 467 0194 01F4      		brne 1b
 468               	.LVL44:
 274:main.c        **** 	rainbow_index %= 6;
 469               		.loc 2 274 0
 470 0196 66E0      		ldi r22,lo8(6)
 471 0198 70E0      		ldi r23,0
 472 019a 00D0      		rcall __divmodhi4
 473               	.LVL45:
 474 019c FC01      		movw r30,r24
 475               	.LVL46:
 275:main.c        **** 	int interpolate_index = index % steps;
 476               		.loc 2 275 0
 477 019e C901      		movw r24,r18
 478               	.LVL47:
 479 01a0 60E2      		ldi r22,lo8(32)
 480 01a2 70E0      		ldi r23,0
 481 01a4 00D0      		rcall __divmodhi4
 482 01a6 7C01      		movw r14,r24
 483               	.LVL48:
 276:main.c        **** 	int weight_from = 64-interpolate_index;
 484               		.loc 2 276 0
 485 01a8 A0E4      		ldi r26,lo8(64)
 486 01aa B0E0      		ldi r27,0
 487 01ac 4D01      		movw r8,r26
 488 01ae 881A      		sub r8,r24
 489 01b0 990A      		sbc r9,r25
 490               	.LVL49:
 277:main.c        **** 	int weight_to = interpolate_index;
 278:main.c        **** 
 279:main.c        **** 	RGB888 from = rainbow_colors[rainbow_index];
 491               		.loc 2 279 0
 492 01b2 CF01      		movw r24,r30
 493 01b4 63E0      		ldi r22,lo8(3)
 494 01b6 70E0      		ldi r23,0
 495 01b8 00D0      		rcall __mulhi3
 496 01ba 8050      		subi r24,lo8(-(rainbow_colors))
 497 01bc 9040      		sbci r25,hi8(-(rainbow_colors))
 498 01be DC01      		movw r26,r24
 499 01c0 2D91      		ld r18,X+
 500 01c2 3D91      		ld r19,X+
 501 01c4 4C91      		ld r20,X
 502               	.LVL50:
 503 01c6 2F83      		std Y+7,r18
 504 01c8 3887      		std Y+8,r19
 505 01ca 4987      		std Y+9,r20
 280:main.c        **** 	RGB888 to = rainbow_colors[rainbow_index+1];
 506               		.loc 2 280 0
 507 01cc CF01      		movw r24,r30
 508 01ce 0196      		adiw r24,1
 509 01d0 63E0      		ldi r22,lo8(3)
 510 01d2 70E0      		ldi r23,0
 511 01d4 00D0      		rcall __mulhi3
 512 01d6 8050      		subi r24,lo8(-(rainbow_colors))
 513 01d8 9040      		sbci r25,hi8(-(rainbow_colors))
 514 01da FC01      		movw r30,r24
 515               	.LVL51:
 516 01dc 2081      		ld  r18,Z
 517 01de 3181      		ldd r19,Z+1
 518 01e0 4281      		ldd r20,Z+2
 519 01e2 2C83      		std Y+4,r18
 520 01e4 3D83      		std Y+5,r19
 521 01e6 4E83      		std Y+6,r20
 522               	.LVL52:
 523 01e8 FE01      		movw r30,r28
 524 01ea 3796      		adiw r30,7
 525 01ec 6E01      		movw r12,r28
 526 01ee 84E0      		ldi r24,4
 527 01f0 C80E      		add r12,r24
 528 01f2 D11C      		adc r13,__zero_reg__
 529 01f4 8E01      		movw r16,r28
 530 01f6 0F5F      		subi r16,-1
 531 01f8 1F4F      		sbci r17,-1
 532 01fa 5E01      		movw r10,r28
 533 01fc AAE0      		ldi r26,10
 534 01fe AA0E      		add r10,r26
 535 0200 B11C      		adc r11,__zero_reg__
 536               	.LVL53:
 537               	.L16:
 538               	.LBB16:
 539               	.LBB17:
 281:main.c        **** 
 282:main.c        **** 	RGB888 res;
 283:main.c        **** 	for (int c=0;c<COLORS;c++) {
 284:main.c        **** 		uint16_t temp = from.color_[c] * weight_from + to.color_[c] * weight_to;
 540               		.loc 2 284 0 discriminator 3
 541 0202 8191      		ld r24,Z+
 542 0204 D601      		movw r26,r12
 543 0206 4D91      		ld r20,X+
 544 0208 6D01      		movw r12,r26
 545 020a 90E0      		ldi r25,0
 546 020c B401      		movw r22,r8
 547 020e 00D0      		rcall __mulhi3
 548 0210 9C01      		movw r18,r24
 549 0212 842F      		mov r24,r20
 550 0214 90E0      		ldi r25,0
 551 0216 B701      		movw r22,r14
 552 0218 00D0      		rcall __mulhi3
 553 021a 820F      		add r24,r18
 554 021c 931F      		adc r25,r19
 555               	.LVL54:
 285:main.c        **** 		temp /= steps;
 286:main.c        **** 		temp /= 2;
 287:main.c        **** 		res.color_[c] = temp;
 556               		.loc 2 287 0 discriminator 3
 557 021e 26E0      		ldi r18,6
 558               		1:
 559 0220 9695      		lsr r25
 560 0222 8795      		ror r24
 561 0224 2A95      		dec r18
 562 0226 01F4      		brne 1b
 563               	.LVL55:
 564 0228 D801      		movw r26,r16
 565 022a 8D93      		st X+,r24
 566 022c 8D01      		movw r16,r26
 567               	.LBE17:
 283:main.c        **** 		uint16_t temp = from.color_[c] * weight_from + to.color_[c] * weight_to;
 568               		.loc 2 283 0 discriminator 3
 569 022e AE16      		cp r10,r30
 570 0230 BF06      		cpc r11,r31
 571 0232 01F4      		brne .L16
 572               	.LBE16:
 288:main.c        **** 	}
 289:main.c        **** 	return res;
 573               		.loc 2 289 0
 574 0234 6981      		ldd r22,Y+1
 575 0236 7A81      		ldd r23,Y+2
 576 0238 8B81      		ldd r24,Y+3
 577               	/* epilogue start */
 290:main.c        **** }
 578               		.loc 2 290 0
 579 023a 2996      		adiw r28,9
 580 023c ECE0      		ldi r30, lo8(12)
 581 023e 00C0      		rjmp __epilogue_restores__ + ((18 - 12) * 2)
 582               		.cfi_endproc
 583               	.LFE29:
 584               		.size	getRainbowColor, .-getRainbowColor
 585               		.section	.text.startup,"ax",@progbits
 586               	.global	main
 587               		.type	main, @function
 588               	main:
 589               	.LFB32:
 291:main.c        **** 
 292:main.c        **** 
 293:main.c        **** 
 294:main.c        **** 
 295:main.c        **** 
 296:main.c        **** static void setColor(int numLedsOn, uint8_t r,uint8_t g,uint8_t b) {
 297:main.c        **** 	const int totalLeds = 400;
 298:main.c        **** 	send_strip_byte(0);
 299:main.c        **** 	send_strip_byte(0);
 300:main.c        **** 	send_strip_byte(0);
 301:main.c        **** 	send_strip_byte(0);
 302:main.c        **** 	send_strip_byte(0);
 303:main.c        **** 
 304:main.c        **** 	send_strip_byte(0);
 305:main.c        **** 
 306:main.c        **** 
 307:main.c        **** //	send_color(0,255,0);
 308:main.c        **** //	send_color(0,0,255);
 309:main.c        **** //	send_color(255,0,0);
 310:main.c        **** //	send_color(0,255,255);
 311:main.c        **** 
 312:main.c        **** 	for (int i=0;i<numLedsOn;i++) {
 313:main.c        **** 		send_color(b,g,r);
 314:main.c        **** 		send_color(0,0,0);
 315:main.c        **** 		send_color(0,0,0);
 316:main.c        **** 		send_color(0,0,0);
 317:main.c        **** 		send_color(0,0,0);
 318:main.c        **** 		send_color(0,0,0);
 319:main.c        **** 	}
 320:main.c        **** 	for (int i=0;i<totalLeds;i++) {
 321:main.c        **** 		send_color(0,0,0);
 322:main.c        **** 	}
 323:main.c        **** 	for (int i=0;i<totalLeds;i++) {
 324:main.c        **** 		send_strip_byte(0xFF);
 325:main.c        **** 	}
 326:main.c        **** }
 327:main.c        **** 
 328:main.c        **** 
 329:main.c        **** static void setColorOneLed(int numLedOn, uint8_t r,uint8_t g,uint8_t b) {
 330:main.c        **** 	const int totalLeds = 300;
 331:main.c        **** 	send_strip_byte(0);
 332:main.c        **** 	send_strip_byte(0);
 333:main.c        **** 	send_strip_byte(0);
 334:main.c        **** 	send_strip_byte(0);
 335:main.c        **** 	send_strip_byte(0);
 336:main.c        **** 
 337:main.c        **** //	send_color(0,255,0);
 338:main.c        **** //	send_color(0,0,255);
 339:main.c        **** //	send_color(255,0,0);
 340:main.c        **** //	send_color(0,255,255);
 341:main.c        **** 
 342:main.c        **** 	/*
 343:main.c        **** 	for (int i=0;i<numLedOn;i++) {
 344:main.c        **** 		send_color(b,g,r);
 345:main.c        **** 		send_color(0,0,0);
 346:main.c        **** 		send_color(0,0,0);
 347:main.c        **** 		send_color(0,0,0);
 348:main.c        **** 		send_color(0,0,0);
 349:main.c        **** 	}*/
 350:main.c        **** 	//send_color(b,g,r);
 351:main.c        **** 	//send_color(b,g,r);
 352:main.c        **** 	//send_color(b,g,r);
 353:main.c        **** 	//send_color(b,g,r);
 354:main.c        **** 	for (int i=0;i<totalLeds;i++) {
 355:main.c        **** 		RGB888 rgb;
 356:main.c        **** 		
 357:main.c        **** 		if (i < numLedOn) {
 358:main.c        **** 			rgb = getRainbowColor(i);
 359:main.c        **** 		} else {
 360:main.c        **** 			rgb.color_[0] = 0;
 361:main.c        **** 			rgb.color_[1] = 0;
 362:main.c        **** 			rgb.color_[2] = 0;
 363:main.c        **** 		}
 364:main.c        **** 		send_color(rgb.color_[RED],rgb.color_[GREEN],rgb.color_[BLUE]);
 365:main.c        **** 	}
 366:main.c        **** 	for (int i=0;i<totalLeds/2;i++) {
 367:main.c        **** 		send_strip_byte(0x00);
 368:main.c        **** 	}
 369:main.c        **** }
 370:main.c        **** 
 371:main.c        **** 
 372:main.c        **** 
 373:main.c        **** int main(void)
 374:main.c        **** {
 590               		.loc 2 374 0
 591               		.cfi_startproc
 592 0000 A8E0      		ldi r26,lo8(8)
 593 0002 B0E0      		ldi r27,0
 594 0004 E0E0      		ldi r30,lo8(gs(1f))
 595 0006 F0E0      		ldi r31,hi8(gs(1f))
 596 0008 00C0      		rjmp __prologue_saves__+((18 - 18) * 2)
 597               	1:
 598               	.LCFI7:
 599               		.cfi_offset 2, -2
 600               		.cfi_offset 3, -3
 601               		.cfi_offset 4, -4
 602               		.cfi_offset 5, -5
 603               		.cfi_offset 6, -6
 604               		.cfi_offset 7, -7
 605               		.cfi_offset 8, -8
 606               		.cfi_offset 9, -9
 607               		.cfi_offset 10, -10
 608               		.cfi_offset 11, -11
 609               		.cfi_offset 12, -12
 610               		.cfi_offset 13, -13
 611               		.cfi_offset 14, -14
 612               		.cfi_offset 15, -15
 613               		.cfi_offset 16, -16
 614               		.cfi_offset 17, -17
 615               		.cfi_offset 28, -18
 616               		.cfi_offset 29, -19
 617               		.cfi_def_cfa 28, 28
 618               	/* prologue: function */
 619               	/* frame size = 8 */
 620               	/* stack size = 26 */
 621               	.L__stack_usage = 26
 622               	.LVL56:
 375:main.c        **** 	unsigned char buttonPressed = 0;
 376:main.c        **** 	unsigned char buttonMask = 0;
 377:main.c        **** 	unsigned char led_sensor_blink = 0;
 378:main.c        **** 	filter_iir2_t filter_iir2_data = {0,0,0,0};
 623               		.loc 2 378 0
 624 000a 88E0      		ldi r24,lo8(8)
 625 000c 9E01      		movw r18,r28
 626 000e 2F5F      		subi r18,-1
 627 0010 3F4F      		sbci r19,-1
 628 0012 6901      		movw r12,r18
 629 0014 F901      		movw r30,r18
 630 0016 282F      		mov r18,r24
 631               		0:
 632 0018 1192      		st Z+,__zero_reg__
 633 001a 2A95      		dec r18
 634 001c 01F4      		brne 0b
 635               	.LVL57:
 636               	.LBB32:
 637               	.LBB33:
 638               		.file 3 "../hw.h"
   1:../hw.h       **** /**
   2:../hw.h       ****  * Copyright 2007 Jorgen Birkler
   3:../hw.h       ****  * jorgen.birkler)a(gmail.com
   4:../hw.h       ****  * USB HID device for current monitoring and battery switch on-off
   5:../hw.h       ****  * License: GNU GPL v2 (see License.txt) or proprietary (contact author)
   6:../hw.h       ****  */
   7:../hw.h       **** 
   8:../hw.h       **** #ifndef __hw_h_included__
   9:../hw.h       **** #define __hw_h_included__
  10:../hw.h       **** #include <avr/io.h>
  11:../hw.h       **** 
  12:../hw.h       **** #define BOOTLOADER_CONDITION_INIT()   DDRA &= ~_BV(PA3);PORTA |= _BV(PA3)
  13:../hw.h       **** #define BOOTLOADER_CONDITION (bit_is_clear(PINA,PA3))
  14:../hw.h       **** 
  15:../hw.h       **** 
  16:../hw.h       **** #define LED_RED_CHANGE() PORTB ^= _BV(PB3)
  17:../hw.h       **** #define LED_RED_ON() PORTB |= _BV(PB3)
  18:../hw.h       **** #define LED_RED_OFF() PORTB &= ~_BV(PB3)
  19:../hw.h       **** #define LED_RED_INIT() DDRB |= _BV(PB3);PORTB &= ~_BV(PB3);LED_RED_OFF()
  20:../hw.h       **** 
  21:../hw.h       **** #define LED_SENSOR_CHANGE() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB ^= _BV(PB0);PORTA &= ~_BV(PA2)
  22:../hw.h       **** #define LED_SENSOR_ON() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB |= _BV(PB0); PORTA &= ~_BV(PA2)
  23:../hw.h       **** #define LED_SENSOR_OFF() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_BV(PB0); PORTA &= ~_BV(PA2)
  24:../hw.h       **** #define LED_SENSOR_INIT() LED_SENSOR_OFF()
  25:../hw.h       **** #define LED_SENSOR_REVERSE_BIAS()  PORTA |= _BV(PA2);DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_B
  26:../hw.h       **** #define LED_SENSOR_INPUT() DDRA &= ~_BV(PA2);PORTA &= ~_BV(PA2)
  27:../hw.h       **** #define LED_SENSOR_IS_HIGH() (PINA & _BV(PA2))
  28:../hw.h       **** 
  29:../hw.h       **** #define STRIP_DATA_1() PORTA |= _BV(PA6)
  30:../hw.h       **** #define STRIP_DATA_0() PORTA &= ~_BV(PA6)
  31:../hw.h       **** #define STRIP_CLK_HIGH() PORTA |= _BV(PA7)
  32:../hw.h       **** #define STRIP_CLK_LOW() PORTA &= ~_BV(PA7)
  33:../hw.h       **** 
  34:../hw.h       **** //#define STRIP_CHANGE() PORTA ^= _BV(PA7) | _BV(PA6)
  35:../hw.h       **** 
  36:../hw.h       **** #define STRIP_INIT() DDRA |= _BV(PA6) | _BV(PA7);PORTB &= ~(_BV(PA6) | _BV(PA7))
  37:../hw.h       **** 
  38:../hw.h       **** 
  39:../hw.h       **** 
  40:../hw.h       **** 
  41:../hw.h       **** //#define LED_SENSOR_CHANGE() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB ^= _BV(PB0);PORTA &= ~_BV(PA2
  42:../hw.h       **** //#define LED_SENSOR_ON() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB |= _BV(PB0); PORTA &= ~_BV(PA2)
  43:../hw.h       **** //#define LED_SENSOR_OFF() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_BV(PB0); PORTA &= ~_BV(PA2)
  44:../hw.h       **** //#define LED_SENSOR_INIT() LED_SENSOR_OFF()
  45:../hw.h       **** //#define LED_SENSOR_REVERSE_BIAS()  PORTA |= _BV(PA2);DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~
  46:../hw.h       **** //#define LED_SENSOR_INPUT() DDRB &= ~_BV(PB0)
  47:../hw.h       **** //#define LED_SENSOR_IS_HIGH() (PINB & _BV(PB0))
  48:../hw.h       **** 
  49:../hw.h       **** 
  50:../hw.h       **** 
  51:../hw.h       **** #define LED_BUTTON_CHANGE() PORTB ^= _BV(PB1)
  52:../hw.h       **** #define LED_BUTTON_ON() PORTB |= _BV(PB1)
  53:../hw.h       **** #define LED_BUTTON_OFF() PORTB &= ~_BV(PB1)
  54:../hw.h       **** #define LED_BUTTON_INIT() DDRB |= _BV(PB1);PORTB &= ~_BV(PB1);LED_BUTTON_OFF()
  55:../hw.h       **** 
  56:../hw.h       **** #define BUTTON_INIT() DDRA &= ~_BV(PA4);PORTA |= _BV(PA4)
  57:../hw.h       **** #define BUTTON_IS_PRESSED() (!(PINA & _BV(PA4)))
  58:../hw.h       **** 
  59:../hw.h       **** #define POT_ON() PORTA |= _BV(PA0)
  60:../hw.h       **** #define POT_OFF() PORTA &= ~_BV(PA0)
  61:../hw.h       **** #define POT_INIT() DDRA |= _BV(PA0);DDRA &= ~_BV(PA1);PORTA &= ~_BV(PA1);POT_OFF()
  62:../hw.h       **** #define POT_ADC_SETUP() ADCSRA = _BV(ADEN) | _BV(ADIF) | _BV(ADPS1) | _BV(ADPS0);ADCSRB = 0x00
  63:../hw.h       **** 
  64:../hw.h       **** #define POT_ADC_START() ADMUX = 0x1;ADCSRA |= _BV(ADSC)
  65:../hw.h       **** #define POT_ADC_DONE() ADCSRA |= _BV(ADIF)
  66:../hw.h       **** 
  67:../hw.h       **** #define POT_ADC_IS_POT_CHANNEL() ((ADMUX & 0x3F) == 0x1)
  68:../hw.h       **** 
  69:../hw.h       **** #define POT_ADC_IS_COMPLETED() (!(!(ADCSRA | _BV(ADIF))))
  70:../hw.h       **** 
  71:../hw.h       **** //Channel =ADC2
  72:../hw.h       **** //#define LED_SENSOR_ADC_CH 0x02
  73:../hw.h       **** 
  74:../hw.h       **** 
  75:../hw.h       **** // Channel= (ADC2-ADC1) x 20
  76:../hw.h       **** #define LED_SENSOR_ADC_CH 0x0E
  77:../hw.h       **** 
  78:../hw.h       **** 
  79:../hw.h       **** #define LED_SENSOR_ADC_SETUP() POT_OFF();ADCSRA = _BV(ADEN) | _BV(ADIF) | _BV(ADPS1) | _BV(ADPS0);A
  80:../hw.h       **** 
  81:../hw.h       **** #define LED_SENSOR_ADC_START() ADMUX = _BV(REFS1) | LED_SENSOR_ADC_CH;ADCSRA |= _BV(ADSC)
  82:../hw.h       **** #define LED_SENSOR_ADC_DONE() ADCSRA |= _BV(ADIF)
  83:../hw.h       **** 
  84:../hw.h       **** #define LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() ((ADMUX & 0x3F) == LED_SENSOR_ADC_CH)
  85:../hw.h       **** 
  86:../hw.h       **** #define LED_SENSOR_ADC_IS_COMPLETED() (!(!(ADCSRA & _BV(ADIF))))
  87:../hw.h       **** 
  88:../hw.h       **** 
  89:../hw.h       **** 
  90:../hw.h       **** //Timer0
  91:../hw.h       **** ////////////////////////////////////
  92:../hw.h       **** 
  93:../hw.h       **** 
  94:../hw.h       **** //16bit mode. clk/1. Input capture on. noise canceler on. Negative edge (ICES0 cleared).
  95:../hw.h       **** #define TIMER0_INIT() {TCCR0A = _BV(TCW0)|_BV(ICEN0)|_BV(ICNC0); TCCR0B = _BV(CS00);}
  96:../hw.h       **** #define F_TIMER0 (F_CPU / 1)
  97:../hw.h       **** #define TIMER0_ENABLE_OVERFLOW_INTERRUPT() TIMSK |= _BV(TOIE0);
  98:../hw.h       **** #define TIMER0_DISABLE_OVERFLOW_INTERRUPT() TIMSK &= ~_BV(TOIE0);
  99:../hw.h       **** #define TIMER0_ENABLE_INPUTCAPT_INTERRUPT() TIMSK |= _BV(TICIE0);
 100:../hw.h       **** #define TIMER0_DISABLE_INPUTCAPT_INTERRUPT() TIMSK &= ~_BV(TICIE0);
 101:../hw.h       **** #define TIMER0_OVERFLOW_PERIOD_MS ((256L * 256L * 1000L) / F_CPU)
 102:../hw.h       **** #define TIMER0_OVERFLOW_PERIOD_MS_X256 ((256L * 256L *256L) / (F_CPU / 1000L))
 103:../hw.h       **** 
 104:../hw.h       **** 
 105:../hw.h       **** 
 106:../hw.h       **** //Normal mode. clk/128
 107:../hw.h       **** #define TIMER1_INIT() {TCCR1A = 0; TCCR1B = _BV(CS13); TCCR1C = 0; TCCR1D = 0; TCCR1E = 0; PLLCSR =
 108:../hw.h       **** #define F_TIMER1 (F_CPU/128)
 109:../hw.h       **** #define TIMER1_ENABLE_OVERFLOW_INTERRUPT() TIMSK |= _BV(TOIE1);
 110:../hw.h       **** #define TIMER1_DISABLE_OVERFLOW_INTERRUPT() TIMSK &= ~_BV(TOIE1);
 111:../hw.h       **** #define TIMER1_OVERFLOW_PERIOD_MS ((256L * 1000L) / F_TIMER1)
 112:../hw.h       **** #define TIMER1_OVERFLOW_PERIOD_MS_X256 ((256L *256L) / (F_TIMER1 / 1000L))
 113:../hw.h       **** 
 114:../hw.h       **** #define UARTSW_1_TX_ENABLE 1
 115:../hw.h       **** #define UARTSW_1_RX_ENABLE 0
 116:../hw.h       **** #define UARTSW_2_TX_ENABLE 0
 117:../hw.h       **** #define UARTSW_2_RX_ENABLE 1
 118:../hw.h       **** #define UARTSW_2_INVERT 1
 119:../hw.h       **** #define UARTSW_1_INVERT 1
 120:../hw.h       **** 
 121:../hw.h       **** #define UARTSW_1_BAUDRATE 9600
 122:../hw.h       **** #define UARTSW_2_BAUDRATE 9600
 123:../hw.h       **** #define UARTSW_1_RXD_PINNAME
 124:../hw.h       **** #define UARTSW_1_RXD_PINPORT
 125:../hw.h       **** #define UARTSW_1_TXD_PINNAME A
 126:../hw.h       **** #define UARTSW_1_TXD_PINPORT PA6
 127:../hw.h       **** #define UARTSW_2_RXD_PINNAME A
 128:../hw.h       **** #define UARTSW_2_RXD_PINPORT PA6
 129:../hw.h       **** #define UARTSW_2_TXD_PINNAME
 130:../hw.h       **** #define UARTSW_2_TXD_PINPORT
 131:../hw.h       **** 
 132:../hw.h       **** 
 133:../hw.h       **** #ifndef __ASSEMBLER__
 134:../hw.h       **** 
 135:../hw.h       **** static inline void hardwareInit(void) {
 136:../hw.h       **** 	BOOTLOADER_CONDITION_INIT();
 639               		.loc 3 136 0
 640 001e D398      		cbi 0x1a,3
 641 0020 DB9A      		sbi 0x1b,3
 137:../hw.h       **** 	LED_RED_INIT();
 642               		.loc 3 137 0
 643 0022 BB9A      		sbi 0x17,3
 644 0024 C398      		cbi 0x18,3
 645 0026 C398      		cbi 0x18,3
 138:../hw.h       **** 	LED_BUTTON_INIT();
 646               		.loc 3 138 0
 647 0028 B99A      		sbi 0x17,1
 648 002a C198      		cbi 0x18,1
 649 002c C198      		cbi 0x18,1
 139:../hw.h       **** 	TIMER0_INIT();
 650               		.loc 3 139 0
 651 002e 90EE      		ldi r25,lo8(-32)
 652 0030 95BB      		out 0x15,r25
 653 0032 91E0      		ldi r25,lo8(1)
 654 0034 93BF      		out 0x33,r25
 140:../hw.h       **** 	TIMER1_INIT();
 655               		.loc 3 140 0
 656 0036 10BE      		out 0x30,__zero_reg__
 657 0038 8FBD      		out 0x2f,r24
 658 003a 17BC      		out 0x27,__zero_reg__
 659 003c 16BC      		out 0x26,__zero_reg__
 660 003e 10B8      		out 0,__zero_reg__
 661 0040 19BC      		out 0x29,__zero_reg__
 141:../hw.h       **** 	BUTTON_INIT();
 662               		.loc 3 141 0
 663 0042 D498      		cbi 0x1a,4
 664 0044 DC9A      		sbi 0x1b,4
 142:../hw.h       **** 	POT_INIT();
 665               		.loc 3 142 0
 666 0046 D09A      		sbi 0x1a,0
 667 0048 D198      		cbi 0x1a,1
 668 004a D998      		cbi 0x1b,1
 669 004c D898      		cbi 0x1b,0
 143:../hw.h       **** 	STRIP_INIT();
 670               		.loc 3 143 0
 671 004e 8AB3      		in r24,0x1a
 672 0050 806C      		ori r24,lo8(-64)
 673 0052 8ABB      		out 0x1a,r24
 674 0054 88B3      		in r24,0x18
 675 0056 8F73      		andi r24,lo8(63)
 676 0058 88BB      		out 0x18,r24
 677               	.LBE33:
 678               	.LBE32:
 379:main.c        **** 	q7_8_t filtered_val = 0;
 380:main.c        **** 	uint8_t led_sensor_last_random = 0;
 381:main.c        **** 	static uint16_t led_sensor_delta_time = 0;
 382:main.c        **** 	uint16_t led_sensor_trig_time = 0;
 383:main.c        **** 	uint8_t led_sensor_prev_time=0;
 384:main.c        **** 	uint16_t led_sensor_values[5];
 385:main.c        **** 	uint8_t led_sensor_nvalues = 0;
 386:main.c        **** 	static uint8_t led_sensor_nsample = 5;
 387:main.c        **** 	static uint16_t led_sensor_weigthed_sum_data[20];
 388:main.c        **** 	uint16_t led_sensor_weigthed_sum = 0;
 389:main.c        **** 	uint8_t led_sensor_weigthed_sum_idx = 0;
 390:main.c        **** 
 391:main.c        **** 	hardwareInit();
 392:main.c        **** 	stdout = &usb_out_stream;
 679               		.loc 2 392 0
 680 005a 80E0      		ldi r24,lo8(usb_out_stream)
 681 005c 90E0      		ldi r25,hi8(usb_out_stream)
 682 005e 9093 0000 		sts __iob+2+1,r25
 683 0062 8093 0000 		sts __iob+2,r24
 393:main.c        **** 	stdin = &usb_in_stream;
 684               		.loc 2 393 0
 685 0066 80E0      		ldi r24,lo8(usb_in_stream)
 686 0068 90E0      		ldi r25,hi8(usb_in_stream)
 687 006a 9093 0000 		sts __iob+1,r25
 688 006e 8093 0000 		sts __iob,r24
 394:main.c        **** 	stdin_get_string_t stdin_get_string_buffer;
 395:main.c        **** 	stdin_get_string_buffer.bufLen = 0;
 396:main.c        **** 	//const char* stdin_str;
 397:main.c        **** 
 398:main.c        **** 	printf_P(PSTR("B!\n"));
 689               		.loc 2 398 0
 690 0072 80E0      		ldi r24,lo8(__c.2476)
 691 0074 90E0      		ldi r25,hi8(__c.2476)
 692 0076 9F93      		push r25
 693 0078 8F93      		push r24
 694 007a 00D0      		rcall printf_P
 695               	.LVL58:
 399:main.c        **** 	usbDeviceDisconnect();
 696               		.loc 2 399 0
 697 007c BC98      		cbi 0x17,4
 698 007e C498      		cbi 0x18,4
 699               	.LVL59:
 700               	.LBB34:
 701               	.LBB35:
 702               		.file 4 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/lib/avr/include/avr/wdt.h **** 
 103:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/lib/avr/include/avr/wdt.h **** #else
 106:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/lib/avr/include/avr/wdt.h **** #endif
 108:/usr/lib/avr/include/avr/wdt.h **** 
 109:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/lib/avr/include/avr/wdt.h **** #else
 114:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/lib/avr/include/avr/wdt.h **** #endif
 116:/usr/lib/avr/include/avr/wdt.h **** 
 117:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/lib/avr/include/avr/wdt.h **** #else
 120:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/lib/avr/include/avr/wdt.h **** #endif
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/lib/avr/include/avr/wdt.h **** 
 125:/usr/lib/avr/include/avr/wdt.h **** 
 126:/usr/lib/avr/include/avr/wdt.h **** /**
 127:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/lib/avr/include/avr/wdt.h **** */
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** 
 138:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/lib/avr/include/avr/wdt.h **** 
 140:/usr/lib/avr/include/avr/wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:/usr/lib/avr/include/avr/wdt.h **** 
 142:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 143:/usr/lib/avr/include/avr/wdt.h **** do { \
 144:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 145:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 146:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"									"\n\t" \
 147:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:/usr/lib/avr/include/avr/wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:/usr/lib/avr/include/avr/wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:/usr/lib/avr/include/avr/wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:/usr/lib/avr/include/avr/wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h **** 	: [tmp]					"=r" (temp) \
 155:/usr/lib/avr/include/avr/wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:/usr/lib/avr/include/avr/wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:/usr/lib/avr/include/avr/wdt.h **** ); \
 162:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 163:/usr/lib/avr/include/avr/wdt.h **** 
 164:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 165:/usr/lib/avr/include/avr/wdt.h **** do { \
 166:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 167:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 168:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"								"\n\t" \
 169:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:/usr/lib/avr/include/avr/wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]            "=r" (temp) \
 174:/usr/lib/avr/include/avr/wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:/usr/lib/avr/include/avr/wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:/usr/lib/avr/include/avr/wdt.h **** ); \
 179:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 180:/usr/lib/avr/include/avr/wdt.h **** 
 181:/usr/lib/avr/include/avr/wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:/usr/lib/avr/include/avr/wdt.h **** 
 183:/usr/lib/avr/include/avr/wdt.h **** /*
 184:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 185:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 187:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 188:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 191:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 194:/usr/lib/avr/include/avr/wdt.h **** */
 195:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 196:/usr/lib/avr/include/avr/wdt.h **** do { \
 197:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 198:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 199:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 208:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 216:/usr/lib/avr/include/avr/wdt.h **** ); \
 217:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 218:/usr/lib/avr/include/avr/wdt.h **** 
 219:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 220:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 221:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:/usr/lib/avr/include/avr/wdt.h ****     : \
 227:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 233:/usr/lib/avr/include/avr/wdt.h **** );
 234:/usr/lib/avr/include/avr/wdt.h **** 
 235:/usr/lib/avr/include/avr/wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:/usr/lib/avr/include/avr/wdt.h **** 
 237:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 238:/usr/lib/avr/include/avr/wdt.h **** 
 239:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 240:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 241:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 243:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 244:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 248:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 254:/usr/lib/avr/include/avr/wdt.h **** )
 255:/usr/lib/avr/include/avr/wdt.h **** 
 256:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 257:/usr/lib/avr/include/avr/wdt.h **** do { \
 258:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 259:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 260:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 262:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 263:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 269:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 275:/usr/lib/avr/include/avr/wdt.h **** ); \
 276:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 277:/usr/lib/avr/include/avr/wdt.h **** 
 278:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 279:/usr/lib/avr/include/avr/wdt.h **** 
 280:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 281:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 282:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 283:/usr/lib/avr/include/avr/wdt.h **** {
 284:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:/usr/lib/avr/include/avr/wdt.h **** 	{
 286:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 287:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 289:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 290:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 294:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 300:/usr/lib/avr/include/avr/wdt.h **** 			);
 301:/usr/lib/avr/include/avr/wdt.h **** 	}
 302:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:/usr/lib/avr/include/avr/wdt.h **** 	{
 304:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 305:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 307:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 308:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 312:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 318:/usr/lib/avr/include/avr/wdt.h **** 			);
 319:/usr/lib/avr/include/avr/wdt.h **** 	}
 320:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:/usr/lib/avr/include/avr/wdt.h **** 	{
 322:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 323:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 330:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 336:/usr/lib/avr/include/avr/wdt.h **** 			);
 337:/usr/lib/avr/include/avr/wdt.h **** 	}
 338:/usr/lib/avr/include/avr/wdt.h **** 	else
 339:/usr/lib/avr/include/avr/wdt.h ****  	{
 340:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 341:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 348:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 			);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** }
 357:/usr/lib/avr/include/avr/wdt.h **** 
 358:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 359:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 360:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 361:/usr/lib/avr/include/avr/wdt.h **** {
 362:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:/usr/lib/avr/include/avr/wdt.h **** 	{
 364:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 365:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 366:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 369:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 375:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 381:/usr/lib/avr/include/avr/wdt.h **** 				);
 382:/usr/lib/avr/include/avr/wdt.h **** 	}
 383:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:/usr/lib/avr/include/avr/wdt.h **** 	{
 385:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 386:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 387:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 390:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 396:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 402:/usr/lib/avr/include/avr/wdt.h **** 				);
 403:/usr/lib/avr/include/avr/wdt.h **** 	}
 404:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:/usr/lib/avr/include/avr/wdt.h **** 	{
 406:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 407:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 408:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 417:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 423:/usr/lib/avr/include/avr/wdt.h **** 				);
 424:/usr/lib/avr/include/avr/wdt.h **** 	}
 425:/usr/lib/avr/include/avr/wdt.h **** 	else
 426:/usr/lib/avr/include/avr/wdt.h **** 	{
 427:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 428:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 429:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 438:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 444:/usr/lib/avr/include/avr/wdt.h **** 				);
 445:/usr/lib/avr/include/avr/wdt.h **** 	}
 446:/usr/lib/avr/include/avr/wdt.h **** }
 447:/usr/lib/avr/include/avr/wdt.h **** 
 448:/usr/lib/avr/include/avr/wdt.h **** #else
 449:/usr/lib/avr/include/avr/wdt.h **** 
 450:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 451:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 452:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 453:/usr/lib/avr/include/avr/wdt.h **** {
 454:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:/usr/lib/avr/include/avr/wdt.h **** 	{
 456:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 703               		.loc 4 456 0
 704 0080 9FE0      		ldi r25,lo8(15)
 705 0082 88E1      		ldi r24,lo8(24)
 706               	/* #APP */
 707               	 ;  456 "/usr/lib/avr/include/avr/wdt.h" 1
 708 0084 0FB6      		in __tmp_reg__,__SREG__
 709 0086 F894      		cli
 710 0088 A895      		wdr
 711 008a 81BD      		out 33, r24
 712 008c 0FBE      		out __SREG__,__tmp_reg__
 713 008e 91BD      		out 33, r25
 714               	 	
 715               	 ;  0 "" 2
 716               	.LVL60:
 717               	/* #NOAPP */
 718               	.LBE35:
 719               	.LBE34:
 400:main.c        **** 	uchar i, j;
 401:main.c        **** 	j = 0;
 402:main.c        **** 	while (--j)
 403:main.c        **** 	{ /* USB Reset by device only required on Watchdog Reset */
 404:main.c        **** 		i = 0;
 405:main.c        **** 		while (--i)
 406:main.c        **** 			; /* delay >10ms for USB reset */
 407:main.c        **** 	}
 408:main.c        **** 
 409:main.c        **** 	wdt_enable(WDTO_2S);
 410:main.c        **** 	odDebugInit();
 411:main.c        **** 	usbInit();
 720               		.loc 2 411 0
 721 0090 00D0      		rcall usbInit
 722               	.LVL61:
 412:main.c        **** 	TIMER0_ENABLE_INPUTCAPT_INTERRUPT();
 723               		.loc 2 412 0
 724 0092 89B7      		in r24,0x39
 725 0094 8160      		ori r24,lo8(1)
 726 0096 89BF      		out 0x39,r24
 413:main.c        **** 	sei();
 727               		.loc 2 413 0
 728               	/* #APP */
 729               	 ;  413 "main.c" 1
 730 0098 7894      		sei
 731               	 ;  0 "" 2
 414:main.c        **** 	usbDeviceConnect();
 732               		.loc 2 414 0
 733               	/* #NOAPP */
 734 009a BC9A      		sbi 0x17,4
 735 009c C49A      		sbi 0x18,4
 415:main.c        **** 	LED_RED_ON();
 736               		.loc 2 415 0
 737 009e C39A      		sbi 0x18,3
 416:main.c        **** 	LED_SENSOR_INIT();
 738               		.loc 2 416 0
 739 00a0 D29A      		sbi 0x1a,2
 740 00a2 B89A      		sbi 0x17,0
 741 00a4 C098      		cbi 0x18,0
 742 00a6 DA98      		cbi 0x1b,2
 417:main.c        **** 	LED_BUTTON_OFF();
 743               		.loc 2 417 0
 744 00a8 C198      		cbi 0x18,1
 418:main.c        **** 	Timer_Set(TIMER_LED_BLINK,TIMER_LED_STARTUP_TIMEOUT);
 745               		.loc 2 418 0
 746 00aa 60ED      		ldi r22,lo8(-48)
 747 00ac 77E0      		ldi r23,lo8(7)
 748 00ae 80E0      		ldi r24,0
 749 00b0 00D0      		rcall Timer_Set
 750               	.LVL62:
 419:main.c        **** 	Timer_Set(TIMER_LED_SENSOR_BLINK,2);
 751               		.loc 2 419 0
 752 00b2 62E0      		ldi r22,lo8(2)
 753 00b4 70E0      		ldi r23,0
 754 00b6 81E0      		ldi r24,lo8(1)
 755 00b8 00D0      		rcall Timer_Set
 756               	.LVL63:
 420:main.c        **** 	Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_STARTUP_TIMEOUT);
 757               		.loc 2 420 0
 758 00ba 60ED      		ldi r22,lo8(-48)
 759 00bc 77E0      		ldi r23,lo8(7)
 760 00be 82E0      		ldi r24,lo8(2)
 761 00c0 00D0      		rcall Timer_Set
 762               	.LVL64:
 421:main.c        **** 	filtered_val = filter_iir2(&filter_iir2_data,1000);
 763               		.loc 2 421 0
 764 00c2 68EE      		ldi r22,lo8(-24)
 765 00c4 73E0      		ldi r23,lo8(3)
 766 00c6 C601      		movw r24,r12
 767 00c8 00D0      		rcall filter_iir2
 768               	.LVL65:
 769 00ca 0F90      		pop __tmp_reg__
 770 00cc 0F90      		pop __tmp_reg__
 385:main.c        **** 	static uint8_t led_sensor_nsample = 5;
 771               		.loc 2 385 0
 772 00ce 00E0      		ldi r16,0
 383:main.c        **** 	uint16_t led_sensor_values[5];
 773               		.loc 2 383 0
 774 00d0 80E0      		ldi r24,0
 375:main.c        **** 	unsigned char buttonMask = 0;
 775               		.loc 2 375 0
 776 00d2 10E0      		ldi r17,0
 422:main.c        **** 	// main event loop
 423:main.c        **** 	for (;;)
 424:main.c        **** 	{
 425:main.c        **** 		//update delta time
 426:main.c        **** 		{
 427:main.c        **** 			uint8_t temp = TCNT1;
 428:main.c        **** 			led_sensor_delta_time += (temp - led_sensor_prev_time) & 0xFF;
 429:main.c        **** 			led_sensor_prev_time = temp;
 430:main.c        **** 		}
 431:main.c        **** 
 432:main.c        **** 		//Watchdog
 433:main.c        **** 		wdt_reset();
 434:main.c        **** 
 435:main.c        **** 		//Timers
 436:main.c        **** 		/////////////////////////////////////////////////////
 437:main.c        **** 		if (TIFR & _BV(TOV1)) {
 438:main.c        **** 			TIFR |= _BV(TOV1);
 439:main.c        **** 			Timers_DecreaseAll(TIMER1_OVERFLOW_PERIOD_MS_X256);
 440:main.c        **** 		}
 441:main.c        **** 
 442:main.c        **** 		//usb
 443:main.c        **** 		/////////////////////////////////////////////////////
 444:main.c        **** 		usbPoll();
 445:main.c        **** 
 446:main.c        **** 		//
 447:main.c        **** 		/////////////////////////////////////////////////////
 448:main.c        **** 		if (BUTTON_IS_PRESSED()) {
 449:main.c        **** 			LED_BUTTON_ON();
 450:main.c        **** 			if (!(buttonPressed)) {
 451:main.c        **** 				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
 452:main.c        **** 				//uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
 453:main.c        **** 				printf_P(PSTR("Button!\r\n"));
 454:main.c        **** 				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,ca
 455:main.c        **** 			}
 456:main.c        **** 			buttonPressed = 1;
 777               		.loc 2 456 0
 778 00d4 6624      		clr r6
 779 00d6 6394      		inc r6
 453:main.c        **** 				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,ca
 780               		.loc 2 453 0
 781 00d8 90E0      		ldi r25,lo8(__c.2487)
 782 00da A92E      		mov r10,r25
 783 00dc 90E0      		ldi r25,hi8(__c.2487)
 784 00de B92E      		mov r11,r25
 785               	.LBB36:
 457:main.c        **** 			buttonMask |= 0x1;
 458:main.c        **** 		}
 459:main.c        **** 		else {
 460:main.c        **** 			//LED_BUTTON_OFF();
 461:main.c        **** 			buttonMask &= ~0x1;
 462:main.c        **** 			buttonPressed = 0;
 463:main.c        **** 		}
 464:main.c        **** 
 465:main.c        **** 		//USB interrupt
 466:main.c        **** 		/////////////////////////////////////////////////////
 467:main.c        **** 		if (usbInterruptIsReady())
 468:main.c        **** 		{
 469:main.c        **** 			if (buttonMask != reportBuffer.mouse.buttonMask) {
 470:main.c        **** 				reportBuffer.mouse.report_id = report_id_mouse;
 471:main.c        **** 				reportBuffer.mouse.buttonMask = buttonMask;
 472:main.c        **** 				usbSetInterrupt((uchar*)&reportBuffer.mouse, sizeof(reportBuffer.mouse));
 473:main.c        **** 
 474:main.c        **** 			}
 475:main.c        **** 			else if (1) {
 476:main.c        **** 
 477:main.c        **** 			}
 478:main.c        **** 
 479:main.c        **** 		}
 480:main.c        **** 
 481:main.c        **** 		//LED Timer
 482:main.c        **** 		/////////////////////////////////////////////////////
 483:main.c        **** 		if (Timer_HasExpired(TIMER_LED_BLINK)) {
 484:main.c        **** 			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT*4);
 485:main.c        **** 			//LED_RED_CHANGE();
 486:main.c        **** 			setColorOneLed(260,100,100,100);
 487:main.c        **** 		}
 488:main.c        **** 		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
 489:main.c        **** 			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT);
 490:main.c        **** 			LED_BUTTON_CHANGE();
 491:main.c        **** 		}
 492:main.c        **** 
 493:main.c        **** 
 494:main.c        **** 		//ADC measurement of led sensor
 495:main.c        **** 		{
 496:main.c        **** 			if (led_sensor_delta_time >= us_to_ticks(4000) * led_sensor_nsample)
 497:main.c        **** 			{
 498:main.c        **** 				LED_SENSOR_ADC_START();
 499:main.c        **** 				led_sensor_nsample++;
 500:main.c        **** 			}
 501:main.c        **** 			if (LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() && LED_SENSOR_ADC_IS_COMPLETED()) {
 502:main.c        **** 				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
 503:main.c        **** 					led_sensor_values[led_sensor_nvalues] = ADC;
 504:main.c        **** 					if (led_sensor_nvalues == 4) {
 505:main.c        **** 						int16_t val = led_sensor_values[led_sensor_nvalues];
 506:main.c        **** 						if ((led_sensor_last_random & 0x1)) {
 507:main.c        **** 							val = -val;
 508:main.c        **** 						}
 509:main.c        **** 						filtered_val = filter_iir2(&filter_iir2_data,val);
 510:main.c        **** 					}
 511:main.c        **** 				}
 512:main.c        **** 				led_sensor_nvalues++;
 513:main.c        **** 				LED_SENSOR_ADC_DONE();
 514:main.c        **** 			}
 515:main.c        **** 		}
 516:main.c        **** 
 517:main.c        **** 
 518:main.c        **** 		if (BOOTLOADER_CONDITION) {
 519:main.c        **** 			cli();
 520:main.c        **** 			BOOTLOADER_CONDITION_INIT();
 521:main.c        **** 			void (*reset_vec)(void) = 0;
 522:main.c        **** 			reset_vec();
 786               		.loc 2 522 0
 787 00e0 812C      		mov r8,__zero_reg__
 788 00e2 912C      		mov r9,__zero_reg__
 789               	.LVL66:
 790               	.L19:
 791               	.LBE36:
 792               	.LBB37:
 427:main.c        **** 			led_sensor_delta_time += (temp - led_sensor_prev_time) & 0xFF;
 793               		.loc 2 427 0
 794 00e4 7EB4      		in r7,0x2e
 795               	.LVL67:
 428:main.c        **** 			led_sensor_prev_time = temp;
 796               		.loc 2 428 0
 797 00e6 272D      		mov r18,r7
 798 00e8 281B      		sub r18,r24
 799 00ea 8091 0000 		lds r24,led_sensor_delta_time.2466
 800 00ee 9091 0000 		lds r25,led_sensor_delta_time.2466+1
 801 00f2 820F      		add r24,r18
 802 00f4 911D      		adc r25,__zero_reg__
 803 00f6 9093 0000 		sts led_sensor_delta_time.2466+1,r25
 804 00fa 8093 0000 		sts led_sensor_delta_time.2466,r24
 805               	.LVL68:
 806               	.LBE37:
 433:main.c        **** 
 807               		.loc 2 433 0
 808               	/* #APP */
 809               	 ;  433 "main.c" 1
 810 00fe A895      		wdr
 811               	 ;  0 "" 2
 437:main.c        **** 			TIFR |= _BV(TOV1);
 812               		.loc 2 437 0
 813               	/* #NOAPP */
 814 0100 08B6      		in __tmp_reg__,0x38
 815 0102 02FE      		sbrs __tmp_reg__,2
 816 0104 00C0      		rjmp .L20
 438:main.c        **** 			Timers_DecreaseAll(TIMER1_OVERFLOW_PERIOD_MS_X256);
 817               		.loc 2 438 0
 818 0106 88B7      		in r24,0x38
 819 0108 8460      		ori r24,lo8(4)
 820 010a 88BF      		out 0x38,r24
 439:main.c        **** 		}
 821               		.loc 2 439 0
 822 010c 80E0      		ldi r24,0
 823 010e 92E0      		ldi r25,lo8(2)
 824 0110 00D0      		rcall Timers_DecreaseAll
 825               	.LVL69:
 826               	.L20:
 444:main.c        **** 
 827               		.loc 2 444 0
 828 0112 00D0      		rcall usbPoll
 829               	.LVL70:
 448:main.c        **** 			LED_BUTTON_ON();
 830               		.loc 2 448 0
 831 0114 CC99      		sbic 0x19,4
 832 0116 00C0      		rjmp .L34
 449:main.c        **** 			if (!(buttonPressed)) {
 833               		.loc 2 449 0
 834 0118 C19A      		sbi 0x18,1
 450:main.c        **** 				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
 835               		.loc 2 450 0
 836 011a 1111      		cpse r17,__zero_reg__
 837 011c 00C0      		rjmp .L35
 453:main.c        **** 				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,ca
 838               		.loc 2 453 0
 839 011e BF92      		push r11
 840 0120 AF92      		push r10
 841 0122 00D0      		rcall printf_P
 842               	.LVL71:
 843 0124 0F90      		pop __tmp_reg__
 844 0126 0F90      		pop __tmp_reg__
 845 0128 00C0      		rjmp .L35
 846               	.L34:
 462:main.c        **** 		}
 847               		.loc 2 462 0
 848 012a 10E0      		ldi r17,0
 849               	.LVL72:
 850 012c 00C0      		rjmp .L21
 851               	.LVL73:
 852               	.L35:
 456:main.c        **** 			buttonMask |= 0x1;
 853               		.loc 2 456 0
 854 012e 11E0      		ldi r17,lo8(1)
 855               	.LVL74:
 856               	.L21:
 467:main.c        **** 		{
 857               		.loc 2 467 0
 858 0130 8091 0000 		lds r24,usbTxStatus1
 859 0134 84FF      		sbrs r24,4
 860 0136 00C0      		rjmp .L22
 469:main.c        **** 				reportBuffer.mouse.report_id = report_id_mouse;
 861               		.loc 2 469 0
 862 0138 8091 0000 		lds r24,reportBuffer+1
 863 013c 1817      		cp r17,r24
 864 013e 01F0      		breq .L22
 470:main.c        **** 				reportBuffer.mouse.buttonMask = buttonMask;
 865               		.loc 2 470 0
 866 0140 6092 0000 		sts reportBuffer,r6
 471:main.c        **** 				usbSetInterrupt((uchar*)&reportBuffer.mouse, sizeof(reportBuffer.mouse));
 867               		.loc 2 471 0
 868 0144 1093 0000 		sts reportBuffer+1,r17
 472:main.c        **** 
 869               		.loc 2 472 0
 870 0148 62E0      		ldi r22,lo8(2)
 871 014a 80E0      		ldi r24,lo8(reportBuffer)
 872 014c 90E0      		ldi r25,hi8(reportBuffer)
 873 014e 00D0      		rcall usbSetInterrupt
 874               	.LVL75:
 875               	.L22:
 483:main.c        **** 			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT*4);
 876               		.loc 2 483 0
 877 0150 80E0      		ldi r24,0
 878 0152 00D0      		rcall Timer_HasExpired
 879               	.LVL76:
 880 0154 892B      		or r24,r25
 881 0156 01F4      		brne .L23
 882               	.L29:
 488:main.c        **** 			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT);
 883               		.loc 2 488 0
 884 0158 82E0      		ldi r24,lo8(2)
 885 015a 00D0      		rcall Timer_HasExpired
 886               	.LVL77:
 887 015c 892B      		or r24,r25
 888 015e 01F0      		breq .L25
 489:main.c        **** 			LED_BUTTON_CHANGE();
 889               		.loc 2 489 0
 890 0160 64EF      		ldi r22,lo8(-12)
 891 0162 71E0      		ldi r23,lo8(1)
 892 0164 82E0      		ldi r24,lo8(2)
 893 0166 00D0      		rcall Timer_Set
 894               	.LVL78:
 490:main.c        **** 		}
 895               		.loc 2 490 0
 896 0168 98B3      		in r25,0x18
 897 016a 82E0      		ldi r24,lo8(2)
 898 016c 8927      		eor r24,r25
 899 016e 88BB      		out 0x18,r24
 900 0170 00C0      		rjmp .L25
 901               	.L23:
 484:main.c        **** 			//LED_RED_CHANGE();
 902               		.loc 2 484 0
 903 0172 60ED      		ldi r22,lo8(-48)
 904 0174 77E0      		ldi r23,lo8(7)
 905 0176 80E0      		ldi r24,0
 906 0178 00D0      		rcall Timer_Set
 907               	.LVL79:
 908               	.LBB38:
 909               	.LBB39:
 331:main.c        **** 	send_strip_byte(0);
 910               		.loc 2 331 0
 911 017a 80E0      		ldi r24,0
 912 017c 00D0      		rcall send_strip_byte
 913               	.LVL80:
 332:main.c        **** 	send_strip_byte(0);
 914               		.loc 2 332 0
 915 017e 80E0      		ldi r24,0
 916 0180 00D0      		rcall send_strip_byte
 917               	.LVL81:
 333:main.c        **** 	send_strip_byte(0);
 918               		.loc 2 333 0
 919 0182 80E0      		ldi r24,0
 920 0184 00D0      		rcall send_strip_byte
 921               	.LVL82:
 334:main.c        **** 	send_strip_byte(0);
 922               		.loc 2 334 0
 923 0186 80E0      		ldi r24,0
 924 0188 00D0      		rcall send_strip_byte
 925               	.LVL83:
 335:main.c        **** 
 926               		.loc 2 335 0
 927 018a 80E0      		ldi r24,0
 928 018c 00D0      		rcall send_strip_byte
 929               	.LVL84:
 930               	.LBB40:
 354:main.c        **** 		RGB888 rgb;
 931               		.loc 2 354 0
 932 018e E12C      		mov r14,__zero_reg__
 933 0190 F12C      		mov r15,__zero_reg__
 934               	.LVL85:
 935               	.L27:
 936               	.LBB41:
 357:main.c        **** 			rgb = getRainbowColor(i);
 937               		.loc 2 357 0
 938 0192 34E0      		ldi r19,4
 939 0194 E316      		cp r14,r19
 940 0196 31E0      		ldi r19,1
 941 0198 F306      		cpc r15,r19
 942 019a 04F4      		brge .L36
 358:main.c        **** 		} else {
 943               		.loc 2 358 0
 944 019c C701      		movw r24,r14
 945 019e 00D0      		rcall getRainbowColor
 946               	.LVL86:
 947 01a0 962F      		mov r25,r22
 948               	.LVL87:
 949 01a2 672F      		mov r22,r23
 950               	.LVL88:
 951 01a4 00C0      		rjmp .L26
 952               	.LVL89:
 953               	.L36:
 362:main.c        **** 		}
 954               		.loc 2 362 0
 955 01a6 80E0      		ldi r24,0
 361:main.c        **** 			rgb.color_[2] = 0;
 956               		.loc 2 361 0
 957 01a8 60E0      		ldi r22,0
 360:main.c        **** 			rgb.color_[1] = 0;
 958               		.loc 2 360 0
 959 01aa 90E0      		ldi r25,0
 960               	.LVL90:
 961               	.L26:
 364:main.c        **** 	}
 962               		.loc 2 364 0
 963 01ac 482F      		mov r20,r24
 964 01ae 892F      		mov r24,r25
 965               	.LVL91:
 966 01b0 00D0      		rcall send_color
 967               	.LVL92:
 968               	.LBE41:
 354:main.c        **** 		RGB888 rgb;
 969               		.loc 2 354 0
 970 01b2 8FEF      		ldi r24,-1
 971 01b4 E81A      		sub r14,r24
 972 01b6 F80A      		sbc r15,r24
 973               	.LVL93:
 974 01b8 9CE2      		ldi r25,44
 975 01ba E916      		cp r14,r25
 976 01bc 91E0      		ldi r25,1
 977 01be F906      		cpc r15,r25
 978 01c0 01F4      		brne .L27
 979 01c2 86E9      		ldi r24,lo8(-106)
 980 01c4 E82E      		mov r14,r24
 981 01c6 F12C      		mov r15,__zero_reg__
 982               	.LVL94:
 983               	.L28:
 984               	.LBE40:
 985               	.LBB42:
 367:main.c        **** 	}
 986               		.loc 2 367 0
 987 01c8 80E0      		ldi r24,0
 988 01ca 00D0      		rcall send_strip_byte
 989               	.LVL95:
 990 01cc E1E0      		ldi r30,1
 991 01ce EE1A      		sub r14,r30
 992 01d0 F108      		sbc r15,__zero_reg__
 993               	.LVL96:
 366:main.c        **** 		send_strip_byte(0x00);
 994               		.loc 2 366 0
 995 01d2 01F4      		brne .L28
 996 01d4 00C0      		rjmp .L29
 997               	.LVL97:
 998               	.L25:
 999               	.LBE42:
 1000               	.LBE39:
 1001               	.LBE38:
 496:main.c        **** 			{
 1002               		.loc 2 496 0
 1003 01d6 8091 0000 		lds r24,led_sensor_delta_time.2466
 1004 01da 9091 0000 		lds r25,led_sensor_delta_time.2466+1
 1005 01de 1C01      		movw r2,r24
 1006 01e0 412C      		mov r4,__zero_reg__
 1007 01e2 512C      		mov r5,__zero_reg__
 1008 01e4 6091 0000 		lds r22,led_sensor_nsample.2471
 1009 01e8 70E0      		ldi r23,0
 1010 01ea 80E0      		ldi r24,0
 1011 01ec 90E0      		ldi r25,0
 1012 01ee 23E0      		ldi r18,lo8(3)
 1013 01f0 32E0      		ldi r19,lo8(2)
 1014 01f2 40E0      		ldi r20,0
 1015 01f4 50E0      		ldi r21,0
 1016 01f6 00D0      		rcall __mulsi3
 1017               	.LVL98:
 1018 01f8 2616      		cp r2,r22
 1019 01fa 3706      		cpc r3,r23
 1020 01fc 4806      		cpc r4,r24
 1021 01fe 5906      		cpc r5,r25
 1022 0200 00F0      		brlo .L30
 498:main.c        **** 				led_sensor_nsample++;
 1023               		.loc 2 498 0
 1024 0202 FEE8      		ldi r31,lo8(-114)
 1025 0204 F7B9      		out 0x7,r31
 1026 0206 369A      		sbi 0x6,6
 499:main.c        **** 			}
 1027               		.loc 2 499 0
 1028 0208 8091 0000 		lds r24,led_sensor_nsample.2471
 1029 020c 8F5F      		subi r24,lo8(-(1))
 1030 020e 8093 0000 		sts led_sensor_nsample.2471,r24
 1031               	.L30:
 501:main.c        **** 				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
 1032               		.loc 2 501 0
 1033 0212 87B1      		in r24,0x7
 1034 0214 8F73      		andi r24,lo8(63)
 1035 0216 8E30      		cpi r24,lo8(14)
 1036 0218 01F4      		brne .L31
 501:main.c        **** 				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
 1037               		.loc 2 501 0 is_stmt 0 discriminator 1
 1038 021a 349B      		sbis 0x6,4
 1039 021c 00C0      		rjmp .L31
 502:main.c        **** 					led_sensor_values[led_sensor_nvalues] = ADC;
 1040               		.loc 2 502 0 is_stmt 1
 1041 021e 0530      		cpi r16,lo8(5)
 1042 0220 00F4      		brsh .L32
 503:main.c        **** 					if (led_sensor_nvalues == 4) {
 1043               		.loc 2 503 0
 1044 0222 64B1      		in r22,0x4
 1045 0224 75B1      		in r23,0x4+1
 504:main.c        **** 						int16_t val = led_sensor_values[led_sensor_nvalues];
 1046               		.loc 2 504 0
 1047 0226 0430      		cpi r16,lo8(4)
 1048 0228 01F4      		brne .L32
 1049               	.LVL99:
 1050               	.LBB43:
 509:main.c        **** 					}
 1051               		.loc 2 509 0
 1052 022a C601      		movw r24,r12
 1053 022c 00D0      		rcall filter_iir2
 1054               	.LVL100:
 1055               	.L32:
 1056               	.LBE43:
 512:main.c        **** 				LED_SENSOR_ADC_DONE();
 1057               		.loc 2 512 0
 1058 022e 0F5F      		subi r16,lo8(-(1))
 1059               	.LVL101:
 513:main.c        **** 			}
 1060               		.loc 2 513 0
 1061 0230 349A      		sbi 0x6,4
 1062               	.L31:
 518:main.c        **** 			cli();
 1063               		.loc 2 518 0
 1064 0232 CB9B      		sbis 0x19,3
 1065 0234 00C0      		rjmp .L48
 1066               	.L33:
 374:main.c        **** 	unsigned char buttonPressed = 0;
 1067               		.loc 2 374 0
 1068 0236 872D      		mov r24,r7
 1069 0238 00C0      		rjmp .L19
 1070               	.L48:
 1071               	.LBB44:
 519:main.c        **** 			BOOTLOADER_CONDITION_INIT();
 1072               		.loc 2 519 0
 1073               	/* #APP */
 1074               	 ;  519 "main.c" 1
 1075 023a F894      		cli
 1076               	 ;  0 "" 2
 520:main.c        **** 			void (*reset_vec)(void) = 0;
 1077               		.loc 2 520 0
 1078               	/* #NOAPP */
 1079 023c D398      		cbi 0x1a,3
 1080 023e DB9A      		sbi 0x1b,3
 1081               	.LVL102:
 1082               		.loc 2 522 0
 1083 0240 F401      		movw r30,r8
 1084 0242 0995      		icall
 1085               	.LVL103:
 1086 0244 00C0      		rjmp .L33
 1087               	.LBE44:
 1088               		.cfi_endproc
 1089               	.LFE32:
 1090               		.size	main, .-main
 1091               		.data
 1092               		.type	led_sensor_nsample.2471, @object
 1093               		.size	led_sensor_nsample.2471, 1
 1094               	led_sensor_nsample.2471:
 1095 0000 05        		.byte	5
 1096               		.section	.progmem.data,"a",@progbits
 1097               		.type	__c.2487, @object
 1098               		.size	__c.2487, 10
 1099               	__c.2487:
 1100 0000 4275 7474 		.string	"Button!\r\n"
 1100      6F6E 210D 
 1100      0A00 
 1101               		.local	led_sensor_delta_time.2466
 1102               		.comm	led_sensor_delta_time.2466,2,1
 1103               		.type	__c.2476, @object
 1104               		.size	__c.2476, 4
 1105               	__c.2476:
 1106 000a 4221 0A00 		.string	"B!\n"
 1107               	.global	rainbow_colors
 1108               		.data
 1109               		.type	rainbow_colors, @object
 1110               		.size	rainbow_colors, 21
 1111               	rainbow_colors:
 1112 0001 C8        		.byte	-56
 1113 0002 00        		.byte	0
 1114 0003 C8        		.byte	-56
 1115 0004 C8        		.byte	-56
 1116 0005 00        		.byte	0
 1117 0006 00        		.byte	0
 1118 0007 C8        		.byte	-56
 1119 0008 C8        		.byte	-56
 1120 0009 00        		.byte	0
 1121 000a 00        		.byte	0
 1122 000b C8        		.byte	-56
 1123 000c 00        		.byte	0
 1124 000d 00        		.byte	0
 1125 000e C8        		.byte	-56
 1126 000f C8        		.byte	-56
 1127 0010 00        		.byte	0
 1128 0011 00        		.byte	0
 1129 0012 C8        		.byte	-56
 1130 0013 C8        		.byte	-56
 1131 0014 00        		.byte	0
 1132 0015 C8        		.byte	-56
 1133               		.local	reportBuffer
 1134               		.comm	reportBuffer,2,1
 1135               	.global	usbDescriptorHidReport
 1136               		.section	.progmem.data,"a",@progbits
 1137               		.type	usbDescriptorHidReport, @object
 1138               		.size	usbDescriptorHidReport, 80
 1139               	usbDescriptorHidReport:
 1140 000e 05        		.byte	5
 1141 000f 01        		.byte	1
 1142 0010 09        		.byte	9
 1143 0011 02        		.byte	2
 1144 0012 A1        		.byte	-95
 1145 0013 01        		.byte	1
 1146 0014 09        		.byte	9
 1147 0015 01        		.byte	1
 1148 0016 A1        		.byte	-95
 1149 0017 00        		.byte	0
 1150 0018 05        		.byte	5
 1151 0019 09        		.byte	9
 1152 001a 19        		.byte	25
 1153 001b 01        		.byte	1
 1154 001c 29        		.byte	41
 1155 001d 03        		.byte	3
 1156 001e 15        		.byte	21
 1157 001f 00        		.byte	0
 1158 0020 25        		.byte	37
 1159 0021 01        		.byte	1
 1160 0022 95        		.byte	-107
 1161 0023 03        		.byte	3
 1162 0024 75        		.byte	117
 1163 0025 01        		.byte	1
 1164 0026 85        		.byte	-123
 1165 0027 01        		.byte	1
 1166 0028 81        		.byte	-127
 1167 0029 02        		.byte	2
 1168 002a 95        		.byte	-107
 1169 002b 01        		.byte	1
 1170 002c 75        		.byte	117
 1171 002d 05        		.byte	5
 1172 002e 81        		.byte	-127
 1173 002f 03        		.byte	3
 1174 0030 C0        		.byte	-64
 1175 0031 C0        		.byte	-64
 1176 0032 0B        		.byte	11
 1177 0033 00        		.byte	0
 1178 0034 00        		.byte	0
 1179 0035 01        		.byte	1
 1180 0036 00        		.byte	0
 1181 0037 A1        		.byte	-95
 1182 0038 00        		.byte	0
 1183 0039 05        		.byte	5
 1184 003a 01        		.byte	1
 1185 003b 75        		.byte	117
 1186 003c 10        		.byte	16
 1187 003d 95        		.byte	-107
 1188 003e 01        		.byte	1
 1189 003f 09        		.byte	9
 1190 0040 00        		.byte	0
 1191 0041 85        		.byte	-123
 1192 0042 7C        		.byte	124
 1193 0043 B1        		.byte	-79
 1194 0044 02        		.byte	2
 1195 0045 09        		.byte	9
 1196 0046 00        		.byte	0
 1197 0047 85        		.byte	-123
 1198 0048 7D        		.byte	125
 1199 0049 B1        		.byte	-79
 1200 004a 02        		.byte	2
 1201 004b 75        		.byte	117
 1202 004c 08        		.byte	8
 1203 004d 95        		.byte	-107
 1204 004e 44        		.byte	68
 1205 004f 09        		.byte	9
 1206 0050 00        		.byte	0
 1207 0051 85        		.byte	-123
 1208 0052 7E        		.byte	126
 1209 0053 B1        		.byte	-79
 1210 0054 00        		.byte	0
 1211 0055 09        		.byte	9
 1212 0056 00        		.byte	0
 1213 0057 95        		.byte	-107
 1214 0058 09        		.byte	9
 1215 0059 85        		.byte	-123
 1216 005a 7F        		.byte	127
 1217 005b B1        		.byte	-79
 1218 005c 00        		.byte	0
 1219 005d C0        		.byte	-64
 1220               		.local	captured
 1221               		.comm	captured,2,1
 1222               		.local	capture_diff_max
 1223               		.comm	capture_diff_max,2,1
 1224               		.local	capture_diff
 1225               		.comm	capture_diff,2,1
 1226               		.text
 1227               	.Letext0:
 1228               		.file 5 "/usr/lib/avr/include/stdint.h"
 1229               		.file 6 "/usr/lib/avr/include/stdio.h"
 1230               		.file 7 "../usbdrv/usbdrv.h"
 1231               		.file 8 "./usbconfig.h"
 1232               		.file 9 "./timer_ids.h"
 1233               		.file 10 "../util/q7_8_t.h"
 1234               		.file 11 "hid.h"
 1235               		.file 12 "../util/usbstream.h"
 1236               		.file 13 "../util/timers.h"
 1237               		.section	.debug_info,"",@progbits
 1238               	.Ldebug_info0:
 1239 0000 D20D 0000 		.long	0xdd2
 1240 0004 0200      		.word	0x2
 1241 0006 0000 0000 		.long	.Ldebug_abbrev0
 1242 000a 04        		.byte	0x4
 1243 000b 01        		.uleb128 0x1
 1244 000c 0000 0000 		.long	.LASF123
 1245 0010 0C        		.byte	0xc
 1246 0011 0000 0000 		.long	.LASF124
 1247 0015 0000 0000 		.long	.LASF125
 1248 0019 0000 0000 		.long	.Ldebug_ranges0+0x18
 1249 001d 0000 0000 		.long	0
 1250 0021 0000 0000 		.long	0
 1251 0025 0000 0000 		.long	.Ldebug_line0
 1252 0029 02        		.uleb128 0x2
 1253 002a 0000 0000 		.long	.LASF0
 1254 002e 05        		.byte	0x5
 1255 002f 7D        		.byte	0x7d
 1256 0030 3400 0000 		.long	0x34
 1257 0034 03        		.uleb128 0x3
 1258 0035 01        		.byte	0x1
 1259 0036 06        		.byte	0x6
 1260 0037 0000 0000 		.long	.LASF2
 1261 003b 02        		.uleb128 0x2
 1262 003c 0000 0000 		.long	.LASF1
 1263 0040 05        		.byte	0x5
 1264 0041 7E        		.byte	0x7e
 1265 0042 4600 0000 		.long	0x46
 1266 0046 03        		.uleb128 0x3
 1267 0047 01        		.byte	0x1
 1268 0048 08        		.byte	0x8
 1269 0049 0000 0000 		.long	.LASF3
 1270 004d 02        		.uleb128 0x2
 1271 004e 0000 0000 		.long	.LASF4
 1272 0052 05        		.byte	0x5
 1273 0053 7F        		.byte	0x7f
 1274 0054 5800 0000 		.long	0x58
 1275 0058 04        		.uleb128 0x4
 1276 0059 02        		.byte	0x2
 1277 005a 05        		.byte	0x5
 1278 005b 696E 7400 		.string	"int"
 1279 005f 02        		.uleb128 0x2
 1280 0060 0000 0000 		.long	.LASF5
 1281 0064 05        		.byte	0x5
 1282 0065 80        		.byte	0x80
 1283 0066 6A00 0000 		.long	0x6a
 1284 006a 03        		.uleb128 0x3
 1285 006b 02        		.byte	0x2
 1286 006c 07        		.byte	0x7
 1287 006d 0000 0000 		.long	.LASF6
 1288 0071 02        		.uleb128 0x2
 1289 0072 0000 0000 		.long	.LASF7
 1290 0076 05        		.byte	0x5
 1291 0077 81        		.byte	0x81
 1292 0078 7C00 0000 		.long	0x7c
 1293 007c 03        		.uleb128 0x3
 1294 007d 04        		.byte	0x4
 1295 007e 05        		.byte	0x5
 1296 007f 0000 0000 		.long	.LASF8
 1297 0083 03        		.uleb128 0x3
 1298 0084 04        		.byte	0x4
 1299 0085 07        		.byte	0x7
 1300 0086 0000 0000 		.long	.LASF9
 1301 008a 03        		.uleb128 0x3
 1302 008b 08        		.byte	0x8
 1303 008c 05        		.byte	0x5
 1304 008d 0000 0000 		.long	.LASF10
 1305 0091 03        		.uleb128 0x3
 1306 0092 08        		.byte	0x8
 1307 0093 07        		.byte	0x7
 1308 0094 0000 0000 		.long	.LASF11
 1309 0098 05        		.uleb128 0x5
 1310 0099 0000 0000 		.long	.LASF25
 1311 009d 0E        		.byte	0xe
 1312 009e 06        		.byte	0x6
 1313 009f F4        		.byte	0xf4
 1314 00a0 1A01 0000 		.long	0x11a
 1315 00a4 06        		.uleb128 0x6
 1316 00a5 6275 6600 		.string	"buf"
 1317 00a9 06        		.byte	0x6
 1318 00aa F5        		.byte	0xf5
 1319 00ab 1A01 0000 		.long	0x11a
 1320 00af 02        		.byte	0x2
 1321 00b0 23        		.byte	0x23
 1322 00b1 00        		.uleb128 0
 1323 00b2 07        		.uleb128 0x7
 1324 00b3 0000 0000 		.long	.LASF12
 1325 00b7 06        		.byte	0x6
 1326 00b8 F6        		.byte	0xf6
 1327 00b9 4600 0000 		.long	0x46
 1328 00bd 02        		.byte	0x2
 1329 00be 23        		.byte	0x23
 1330 00bf 02        		.uleb128 0x2
 1331 00c0 07        		.uleb128 0x7
 1332 00c1 0000 0000 		.long	.LASF13
 1333 00c5 06        		.byte	0x6
 1334 00c6 F7        		.byte	0xf7
 1335 00c7 3B00 0000 		.long	0x3b
 1336 00cb 02        		.byte	0x2
 1337 00cc 23        		.byte	0x23
 1338 00cd 03        		.uleb128 0x3
 1339 00ce 08        		.uleb128 0x8
 1340 00cf 0000 0000 		.long	.LASF14
 1341 00d3 06        		.byte	0x6
 1342 00d4 0701      		.word	0x107
 1343 00d6 5800 0000 		.long	0x58
 1344 00da 02        		.byte	0x2
 1345 00db 23        		.byte	0x23
 1346 00dc 04        		.uleb128 0x4
 1347 00dd 09        		.uleb128 0x9
 1348 00de 6C65 6E00 		.string	"len"
 1349 00e2 06        		.byte	0x6
 1350 00e3 0801      		.word	0x108
 1351 00e5 5800 0000 		.long	0x58
 1352 00e9 02        		.byte	0x2
 1353 00ea 23        		.byte	0x23
 1354 00eb 06        		.uleb128 0x6
 1355 00ec 09        		.uleb128 0x9
 1356 00ed 7075 7400 		.string	"put"
 1357 00f1 06        		.byte	0x6
 1358 00f2 0901      		.word	0x109
 1359 00f4 4201 0000 		.long	0x142
 1360 00f8 02        		.byte	0x2
 1361 00f9 23        		.byte	0x23
 1362 00fa 08        		.uleb128 0x8
 1363 00fb 09        		.uleb128 0x9
 1364 00fc 6765 7400 		.string	"get"
 1365 0100 06        		.byte	0x6
 1366 0101 0A01      		.word	0x10a
 1367 0103 5801 0000 		.long	0x158
 1368 0107 02        		.byte	0x2
 1369 0108 23        		.byte	0x23
 1370 0109 0A        		.uleb128 0xa
 1371 010a 08        		.uleb128 0x8
 1372 010b 0000 0000 		.long	.LASF15
 1373 010f 06        		.byte	0x6
 1374 0110 0B01      		.word	0x10b
 1375 0112 5E01 0000 		.long	0x15e
 1376 0116 02        		.byte	0x2
 1377 0117 23        		.byte	0x23
 1378 0118 0C        		.uleb128 0xc
 1379 0119 00        		.byte	0
 1380 011a 0A        		.uleb128 0xa
 1381 011b 02        		.byte	0x2
 1382 011c 2001 0000 		.long	0x120
 1383 0120 03        		.uleb128 0x3
 1384 0121 01        		.byte	0x1
 1385 0122 08        		.byte	0x8
 1386 0123 0000 0000 		.long	.LASF16
 1387 0127 0B        		.uleb128 0xb
 1388 0128 01        		.byte	0x1
 1389 0129 5800 0000 		.long	0x58
 1390 012d 3C01 0000 		.long	0x13c
 1391 0131 0C        		.uleb128 0xc
 1392 0132 2001 0000 		.long	0x120
 1393 0136 0C        		.uleb128 0xc
 1394 0137 3C01 0000 		.long	0x13c
 1395 013b 00        		.byte	0
 1396 013c 0A        		.uleb128 0xa
 1397 013d 02        		.byte	0x2
 1398 013e 9800 0000 		.long	0x98
 1399 0142 0A        		.uleb128 0xa
 1400 0143 02        		.byte	0x2
 1401 0144 2701 0000 		.long	0x127
 1402 0148 0B        		.uleb128 0xb
 1403 0149 01        		.byte	0x1
 1404 014a 5800 0000 		.long	0x58
 1405 014e 5801 0000 		.long	0x158
 1406 0152 0C        		.uleb128 0xc
 1407 0153 3C01 0000 		.long	0x13c
 1408 0157 00        		.byte	0
 1409 0158 0A        		.uleb128 0xa
 1410 0159 02        		.byte	0x2
 1411 015a 4801 0000 		.long	0x148
 1412 015e 0D        		.uleb128 0xd
 1413 015f 02        		.byte	0x2
 1414 0160 0E        		.uleb128 0xe
 1415 0161 0000 0000 		.long	.LASF17
 1416 0165 06        		.byte	0x6
 1417 0166 1501      		.word	0x115
 1418 0168 9800 0000 		.long	0x98
 1419 016c 0F        		.uleb128 0xf
 1420 016d 01        		.byte	0x1
 1421 016e 4600 0000 		.long	0x46
 1422 0172 08        		.byte	0x8
 1423 0173 7601      		.word	0x176
 1424 0175 9E01 0000 		.long	0x19e
 1425 0179 10        		.uleb128 0x10
 1426 017a 0000 0000 		.long	.LASF18
 1427 017e 01        		.byte	0x1
 1428 017f 10        		.uleb128 0x10
 1429 0180 0000 0000 		.long	.LASF19
 1430 0184 02        		.byte	0x2
 1431 0185 10        		.uleb128 0x10
 1432 0186 0000 0000 		.long	.LASF20
 1433 018a 7C        		.byte	0x7c
 1434 018b 10        		.uleb128 0x10
 1435 018c 0000 0000 		.long	.LASF21
 1436 0190 7D        		.byte	0x7d
 1437 0191 10        		.uleb128 0x10
 1438 0192 0000 0000 		.long	.LASF22
 1439 0196 7E        		.byte	0x7e
 1440 0197 10        		.uleb128 0x10
 1441 0198 0000 0000 		.long	.LASF23
 1442 019c 7F        		.byte	0x7f
 1443 019d 00        		.byte	0
 1444 019e 03        		.uleb128 0x3
 1445 019f 02        		.byte	0x2
 1446 01a0 07        		.byte	0x7
 1447 01a1 0000 0000 		.long	.LASF24
 1448 01a5 11        		.uleb128 0x11
 1449 01a6 0000 0000 		.long	.LASF26
 1450 01aa 0C        		.byte	0xc
 1451 01ab 07        		.byte	0x7
 1452 01ac 8702      		.word	0x287
 1453 01ae D101 0000 		.long	0x1d1
 1454 01b2 09        		.uleb128 0x9
 1455 01b3 6C65 6E00 		.string	"len"
 1456 01b7 07        		.byte	0x7
 1457 01b8 8802      		.word	0x288
 1458 01ba D101 0000 		.long	0x1d1
 1459 01be 02        		.byte	0x2
 1460 01bf 23        		.byte	0x23
 1461 01c0 00        		.uleb128 0
 1462 01c1 08        		.uleb128 0x8
 1463 01c2 0000 0000 		.long	.LASF27
 1464 01c6 07        		.byte	0x7
 1465 01c7 8902      		.word	0x289
 1466 01c9 D601 0000 		.long	0x1d6
 1467 01cd 02        		.byte	0x2
 1468 01ce 23        		.byte	0x23
 1469 01cf 01        		.uleb128 0x1
 1470 01d0 00        		.byte	0
 1471 01d1 12        		.uleb128 0x12
 1472 01d2 4600 0000 		.long	0x46
 1473 01d6 13        		.uleb128 0x13
 1474 01d7 4600 0000 		.long	0x46
 1475 01db E601 0000 		.long	0x1e6
 1476 01df 14        		.uleb128 0x14
 1477 01e0 9E01 0000 		.long	0x19e
 1478 01e4 0A        		.byte	0xa
 1479 01e5 00        		.byte	0
 1480 01e6 0E        		.uleb128 0xe
 1481 01e7 0000 0000 		.long	.LASF28
 1482 01eb 07        		.byte	0x7
 1483 01ec 8A02      		.word	0x28a
 1484 01ee A501 0000 		.long	0x1a5
 1485 01f2 15        		.uleb128 0x15
 1486 01f3 0000 0000 		.long	.LASF126
 1487 01f7 02        		.byte	0x2
 1488 01f8 07        		.byte	0x7
 1489 01f9 9302      		.word	0x293
 1490 01fb 1802 0000 		.long	0x218
 1491 01ff 16        		.uleb128 0x16
 1492 0200 0000 0000 		.long	.LASF29
 1493 0204 07        		.byte	0x7
 1494 0205 9402      		.word	0x294
 1495 0207 6A00 0000 		.long	0x6a
 1496 020b 16        		.uleb128 0x16
 1497 020c 0000 0000 		.long	.LASF30
 1498 0210 07        		.byte	0x7
 1499 0211 9502      		.word	0x295
 1500 0213 1802 0000 		.long	0x218
 1501 0217 00        		.byte	0
 1502 0218 13        		.uleb128 0x13
 1503 0219 4600 0000 		.long	0x46
 1504 021d 2802 0000 		.long	0x228
 1505 0221 14        		.uleb128 0x14
 1506 0222 9E01 0000 		.long	0x19e
 1507 0226 01        		.byte	0x1
 1508 0227 00        		.byte	0
 1509 0228 0E        		.uleb128 0xe
 1510 0229 0000 0000 		.long	.LASF31
 1511 022d 07        		.byte	0x7
 1512 022e 9602      		.word	0x296
 1513 0230 F201 0000 		.long	0x1f2
 1514 0234 11        		.uleb128 0x11
 1515 0235 0000 0000 		.long	.LASF32
 1516 0239 08        		.byte	0x8
 1517 023a 07        		.byte	0x7
 1518 023b 9802      		.word	0x298
 1519 023d 8D02 0000 		.long	0x28d
 1520 0241 08        		.uleb128 0x8
 1521 0242 0000 0000 		.long	.LASF33
 1522 0246 07        		.byte	0x7
 1523 0247 9902      		.word	0x299
 1524 0249 4600 0000 		.long	0x46
 1525 024d 02        		.byte	0x2
 1526 024e 23        		.byte	0x23
 1527 024f 00        		.uleb128 0
 1528 0250 08        		.uleb128 0x8
 1529 0251 0000 0000 		.long	.LASF34
 1530 0255 07        		.byte	0x7
 1531 0256 9A02      		.word	0x29a
 1532 0258 4600 0000 		.long	0x46
 1533 025c 02        		.byte	0x2
 1534 025d 23        		.byte	0x23
 1535 025e 01        		.uleb128 0x1
 1536 025f 08        		.uleb128 0x8
 1537 0260 0000 0000 		.long	.LASF35
 1538 0264 07        		.byte	0x7
 1539 0265 9B02      		.word	0x29b
 1540 0267 2802 0000 		.long	0x228
 1541 026b 02        		.byte	0x2
 1542 026c 23        		.byte	0x23
 1543 026d 02        		.uleb128 0x2
 1544 026e 08        		.uleb128 0x8
 1545 026f 0000 0000 		.long	.LASF36
 1546 0273 07        		.byte	0x7
 1547 0274 9C02      		.word	0x29c
 1548 0276 2802 0000 		.long	0x228
 1549 027a 02        		.byte	0x2
 1550 027b 23        		.byte	0x23
 1551 027c 04        		.uleb128 0x4
 1552 027d 08        		.uleb128 0x8
 1553 027e 0000 0000 		.long	.LASF37
 1554 0282 07        		.byte	0x7
 1555 0283 9D02      		.word	0x29d
 1556 0285 2802 0000 		.long	0x228
 1557 0289 02        		.byte	0x2
 1558 028a 23        		.byte	0x23
 1559 028b 06        		.uleb128 0x6
 1560 028c 00        		.byte	0
 1561 028d 0E        		.uleb128 0xe
 1562 028e 0000 0000 		.long	.LASF38
 1563 0292 07        		.byte	0x7
 1564 0293 9E02      		.word	0x29e
 1565 0295 3402 0000 		.long	0x234
 1566 0299 17        		.uleb128 0x17
 1567 029a 01        		.byte	0x1
 1568 029b 4600 0000 		.long	0x46
 1569 029f 09        		.byte	0x9
 1570 02a0 12        		.byte	0x12
 1571 02a1 DC02 0000 		.long	0x2dc
 1572 02a5 10        		.uleb128 0x10
 1573 02a6 0000 0000 		.long	.LASF39
 1574 02aa 00        		.byte	0
 1575 02ab 10        		.uleb128 0x10
 1576 02ac 0000 0000 		.long	.LASF40
 1577 02b0 01        		.byte	0x1
 1578 02b1 10        		.uleb128 0x10
 1579 02b2 0000 0000 		.long	.LASF41
 1580 02b6 02        		.byte	0x2
 1581 02b7 10        		.uleb128 0x10
 1582 02b8 0000 0000 		.long	.LASF42
 1583 02bc 03        		.byte	0x3
 1584 02bd 10        		.uleb128 0x10
 1585 02be 0000 0000 		.long	.LASF43
 1586 02c2 04        		.byte	0x4
 1587 02c3 10        		.uleb128 0x10
 1588 02c4 0000 0000 		.long	.LASF44
 1589 02c8 05        		.byte	0x5
 1590 02c9 10        		.uleb128 0x10
 1591 02ca 0000 0000 		.long	.LASF45
 1592 02ce 06        		.byte	0x6
 1593 02cf 10        		.uleb128 0x10
 1594 02d0 0000 0000 		.long	.LASF46
 1595 02d4 07        		.byte	0x7
 1596 02d5 10        		.uleb128 0x10
 1597 02d6 0000 0000 		.long	.LASF47
 1598 02da 08        		.byte	0x8
 1599 02db 00        		.byte	0
 1600 02dc 02        		.uleb128 0x2
 1601 02dd 0000 0000 		.long	.LASF48
 1602 02e1 0A        		.byte	0xa
 1603 02e2 0B        		.byte	0xb
 1604 02e3 4D00 0000 		.long	0x4d
 1605 02e7 18        		.uleb128 0x18
 1606 02e8 08        		.byte	0x8
 1607 02e9 01        		.byte	0x1
 1608 02ea 18        		.byte	0x18
 1609 02eb 2803 0000 		.long	0x328
 1610 02ef 06        		.uleb128 0x6
 1611 02f0 795F 3100 		.string	"y_1"
 1612 02f4 01        		.byte	0x1
 1613 02f5 19        		.byte	0x19
 1614 02f6 DC02 0000 		.long	0x2dc
 1615 02fa 02        		.byte	0x2
 1616 02fb 23        		.byte	0x23
 1617 02fc 00        		.uleb128 0
 1618 02fd 06        		.uleb128 0x6
 1619 02fe 795F 3200 		.string	"y_2"
 1620 0302 01        		.byte	0x1
 1621 0303 1A        		.byte	0x1a
 1622 0304 DC02 0000 		.long	0x2dc
 1623 0308 02        		.byte	0x2
 1624 0309 23        		.byte	0x23
 1625 030a 02        		.uleb128 0x2
 1626 030b 06        		.uleb128 0x6
 1627 030c 785F 3100 		.string	"x_1"
 1628 0310 01        		.byte	0x1
 1629 0311 1B        		.byte	0x1b
 1630 0312 DC02 0000 		.long	0x2dc
 1631 0316 02        		.byte	0x2
 1632 0317 23        		.byte	0x23
 1633 0318 04        		.uleb128 0x4
 1634 0319 06        		.uleb128 0x6
 1635 031a 785F 3200 		.string	"x_2"
 1636 031e 01        		.byte	0x1
 1637 031f 1C        		.byte	0x1c
 1638 0320 DC02 0000 		.long	0x2dc
 1639 0324 02        		.byte	0x2
 1640 0325 23        		.byte	0x23
 1641 0326 06        		.uleb128 0x6
 1642 0327 00        		.byte	0
 1643 0328 02        		.uleb128 0x2
 1644 0329 0000 0000 		.long	.LASF49
 1645 032d 01        		.byte	0x1
 1646 032e 1D        		.byte	0x1d
 1647 032f E702 0000 		.long	0x2e7
 1648 0333 18        		.uleb128 0x18
 1649 0334 02        		.byte	0x2
 1650 0335 02        		.byte	0x2
 1651 0336 8E        		.byte	0x8e
 1652 0337 5803 0000 		.long	0x358
 1653 033b 07        		.uleb128 0x7
 1654 033c 0000 0000 		.long	.LASF50
 1655 0340 02        		.byte	0x2
 1656 0341 8F        		.byte	0x8f
 1657 0342 4600 0000 		.long	0x46
 1658 0346 02        		.byte	0x2
 1659 0347 23        		.byte	0x23
 1660 0348 00        		.uleb128 0
 1661 0349 07        		.uleb128 0x7
 1662 034a 0000 0000 		.long	.LASF51
 1663 034e 02        		.byte	0x2
 1664 034f 90        		.byte	0x90
 1665 0350 4600 0000 		.long	0x46
 1666 0354 02        		.byte	0x2
 1667 0355 23        		.byte	0x23
 1668 0356 01        		.uleb128 0x1
 1669 0357 00        		.byte	0
 1670 0358 18        		.uleb128 0x18
 1671 0359 02        		.byte	0x2
 1672 035a 02        		.byte	0x2
 1673 035b 8D        		.byte	0x8d
 1674 035c 6F03 0000 		.long	0x36f
 1675 0360 07        		.uleb128 0x7
 1676 0361 0000 0000 		.long	.LASF52
 1677 0365 02        		.byte	0x2
 1678 0366 91        		.byte	0x91
 1679 0367 3303 0000 		.long	0x333
 1680 036b 02        		.byte	0x2
 1681 036c 23        		.byte	0x23
 1682 036d 00        		.uleb128 0
 1683 036e 00        		.byte	0
 1684 036f 02        		.uleb128 0x2
 1685 0370 0000 0000 		.long	.LASF53
 1686 0374 02        		.byte	0x2
 1687 0375 92        		.byte	0x92
 1688 0376 5803 0000 		.long	0x358
 1689 037a 18        		.uleb128 0x18
 1690 037b 41        		.byte	0x41
 1691 037c 02        		.byte	0x2
 1692 037d B0        		.byte	0xb0
 1693 037e 9F03 0000 		.long	0x39f
 1694 0382 07        		.uleb128 0x7
 1695 0383 0000 0000 		.long	.LASF27
 1696 0387 02        		.byte	0x2
 1697 0388 B1        		.byte	0xb1
 1698 0389 9F03 0000 		.long	0x39f
 1699 038d 02        		.byte	0x2
 1700 038e 23        		.byte	0x23
 1701 038f 00        		.uleb128 0
 1702 0390 07        		.uleb128 0x7
 1703 0391 0000 0000 		.long	.LASF54
 1704 0395 02        		.byte	0x2
 1705 0396 B2        		.byte	0xb2
 1706 0397 4600 0000 		.long	0x46
 1707 039b 02        		.byte	0x2
 1708 039c 23        		.byte	0x23
 1709 039d 40        		.uleb128 0x40
 1710 039e 00        		.byte	0
 1711 039f 13        		.uleb128 0x13
 1712 03a0 2001 0000 		.long	0x120
 1713 03a4 AF03 0000 		.long	0x3af
 1714 03a8 14        		.uleb128 0x14
 1715 03a9 9E01 0000 		.long	0x19e
 1716 03ad 3F        		.byte	0x3f
 1717 03ae 00        		.byte	0
 1718 03af 02        		.uleb128 0x2
 1719 03b0 0000 0000 		.long	.LASF55
 1720 03b4 02        		.byte	0x2
 1721 03b5 B3        		.byte	0xb3
 1722 03b6 7A03 0000 		.long	0x37a
 1723 03ba 02        		.uleb128 0x2
 1724 03bb 0000 0000 		.long	.LASF56
 1725 03bf 02        		.byte	0x2
 1726 03c0 B7        		.byte	0xb7
 1727 03c1 3B00 0000 		.long	0x3b
 1728 03c5 17        		.uleb128 0x17
 1729 03c6 01        		.byte	0x1
 1730 03c7 4600 0000 		.long	0x46
 1731 03cb 02        		.byte	0x2
 1732 03cc BE        		.byte	0xbe
 1733 03cd EA03 0000 		.long	0x3ea
 1734 03d1 19        		.uleb128 0x19
 1735 03d2 5245 4400 		.string	"RED"
 1736 03d6 00        		.byte	0
 1737 03d7 10        		.uleb128 0x10
 1738 03d8 0000 0000 		.long	.LASF57
 1739 03dc 01        		.byte	0x1
 1740 03dd 10        		.uleb128 0x10
 1741 03de 0000 0000 		.long	.LASF58
 1742 03e2 02        		.byte	0x2
 1743 03e3 10        		.uleb128 0x10
 1744 03e4 0000 0000 		.long	.LASF59
 1745 03e8 03        		.byte	0x3
 1746 03e9 00        		.byte	0
 1747 03ea 05        		.uleb128 0x5
 1748 03eb 0000 0000 		.long	.LASF60
 1749 03ef 03        		.byte	0x3
 1750 03f0 02        		.byte	0x2
 1751 03f1 C2        		.byte	0xc2
 1752 03f2 0504 0000 		.long	0x405
 1753 03f6 07        		.uleb128 0x7
 1754 03f7 0000 0000 		.long	.LASF61
 1755 03fb 02        		.byte	0x2
 1756 03fc C3        		.byte	0xc3
 1757 03fd 0504 0000 		.long	0x405
 1758 0401 02        		.byte	0x2
 1759 0402 23        		.byte	0x23
 1760 0403 00        		.uleb128 0
 1761 0404 00        		.byte	0
 1762 0405 13        		.uleb128 0x13
 1763 0406 3B00 0000 		.long	0x3b
 1764 040a 1504 0000 		.long	0x415
 1765 040e 14        		.uleb128 0x14
 1766 040f 9E01 0000 		.long	0x19e
 1767 0413 02        		.byte	0x2
 1768 0414 00        		.byte	0
 1769 0415 02        		.uleb128 0x2
 1770 0416 0000 0000 		.long	.LASF62
 1771 041a 02        		.byte	0x2
 1772 041b C4        		.byte	0xc4
 1773 041c EA03 0000 		.long	0x3ea
 1774 0420 1A        		.uleb128 0x1a
 1775 0421 0000 0000 		.long	.LASF65
 1776 0425 02        		.byte	0x2
 1777 0426 4901      		.word	0x149
 1778 0428 01        		.byte	0x1
 1779 0429 01        		.byte	0x1
 1780 042a 8F04 0000 		.long	0x48f
 1781 042e 1B        		.uleb128 0x1b
 1782 042f 0000 0000 		.long	.LASF63
 1783 0433 02        		.byte	0x2
 1784 0434 4901      		.word	0x149
 1785 0436 5800 0000 		.long	0x58
 1786 043a 1C        		.uleb128 0x1c
 1787 043b 7200      		.string	"r"
 1788 043d 02        		.byte	0x2
 1789 043e 4901      		.word	0x149
 1790 0440 3B00 0000 		.long	0x3b
 1791 0444 1C        		.uleb128 0x1c
 1792 0445 6700      		.string	"g"
 1793 0447 02        		.byte	0x2
 1794 0448 4901      		.word	0x149
 1795 044a 3B00 0000 		.long	0x3b
 1796 044e 1C        		.uleb128 0x1c
 1797 044f 6200      		.string	"b"
 1798 0451 02        		.byte	0x2
 1799 0452 4901      		.word	0x149
 1800 0454 3B00 0000 		.long	0x3b
 1801 0458 1D        		.uleb128 0x1d
 1802 0459 0000 0000 		.long	.LASF64
 1803 045d 02        		.byte	0x2
 1804 045e 4A01      		.word	0x14a
 1805 0460 8F04 0000 		.long	0x48f
 1806 0464 1E        		.uleb128 0x1e
 1807 0465 8204 0000 		.long	0x482
 1808 0469 1F        		.uleb128 0x1f
 1809 046a 6900      		.string	"i"
 1810 046c 02        		.byte	0x2
 1811 046d 6201      		.word	0x162
 1812 046f 5800 0000 		.long	0x58
 1813 0473 20        		.uleb128 0x20
 1814 0474 1F        		.uleb128 0x1f
 1815 0475 7267 6200 		.string	"rgb"
 1816 0479 02        		.byte	0x2
 1817 047a 6301      		.word	0x163
 1818 047c 1504 0000 		.long	0x415
 1819 0480 00        		.byte	0
 1820 0481 00        		.byte	0
 1821 0482 20        		.uleb128 0x20
 1822 0483 1F        		.uleb128 0x1f
 1823 0484 6900      		.string	"i"
 1824 0486 02        		.byte	0x2
 1825 0487 6E01      		.word	0x16e
 1826 0489 5800 0000 		.long	0x58
 1827 048d 00        		.byte	0
 1828 048e 00        		.byte	0
 1829 048f 21        		.uleb128 0x21
 1830 0490 5800 0000 		.long	0x58
 1831 0494 1A        		.uleb128 0x1a
 1832 0495 0000 0000 		.long	.LASF66
 1833 0499 04        		.byte	0x4
 1834 049a C401      		.word	0x1c4
 1835 049c 01        		.byte	0x1
 1836 049d 03        		.byte	0x3
 1837 049e AF04 0000 		.long	0x4af
 1838 04a2 1B        		.uleb128 0x1b
 1839 04a3 0000 0000 		.long	.LASF67
 1840 04a7 04        		.byte	0x4
 1841 04a8 C401      		.word	0x1c4
 1842 04aa AF04 0000 		.long	0x4af
 1843 04ae 00        		.byte	0
 1844 04af 21        		.uleb128 0x21
 1845 04b0 3B00 0000 		.long	0x3b
 1846 04b4 22        		.uleb128 0x22
 1847 04b5 01        		.byte	0x1
 1848 04b6 0000 0000 		.long	.LASF70
 1849 04ba 01        		.byte	0x1
 1850 04bb 92        		.byte	0x92
 1851 04bc 01        		.byte	0x1
 1852 04bd DC02 0000 		.long	0x2dc
 1853 04c1 0000 0000 		.long	.LFB21
 1854 04c5 0000 0000 		.long	.LFE21
 1855 04c9 0000 0000 		.long	.LLST0
 1856 04cd 01        		.byte	0x1
 1857 04ce 4A05 0000 		.long	0x54a
 1858 04d2 23        		.uleb128 0x23
 1859 04d3 0000 0000 		.long	.LASF68
 1860 04d7 01        		.byte	0x1
 1861 04d8 92        		.byte	0x92
 1862 04d9 4A05 0000 		.long	0x54a
 1863 04dd 0000 0000 		.long	.LLST1
 1864 04e1 24        		.uleb128 0x24
 1865 04e2 696E 00   		.string	"in"
 1866 04e5 01        		.byte	0x1
 1867 04e6 92        		.byte	0x92
 1868 04e7 DC02 0000 		.long	0x2dc
 1869 04eb 0000 0000 		.long	.LLST2
 1870 04ef 25        		.uleb128 0x25
 1871 04f0 6130 00   		.string	"a0"
 1872 04f3 01        		.byte	0x1
 1873 04f4 94        		.byte	0x94
 1874 04f5 5005 0000 		.long	0x550
 1875 04f9 05        		.byte	0x5
 1876 04fa 25        		.uleb128 0x25
 1877 04fb 6131 00   		.string	"a1"
 1878 04fe 01        		.byte	0x1
 1879 04ff 95        		.byte	0x95
 1880 0500 5005 0000 		.long	0x550
 1881 0504 0A        		.byte	0xa
 1882 0505 25        		.uleb128 0x25
 1883 0506 6132 00   		.string	"a2"
 1884 0509 01        		.byte	0x1
 1885 050a 96        		.byte	0x96
 1886 050b 5005 0000 		.long	0x550
 1887 050f 05        		.byte	0x5
 1888 0510 26        		.uleb128 0x26
 1889 0511 0000 0000 		.long	.LASF69
 1890 0515 01        		.byte	0x1
 1891 0516 97        		.byte	0x97
 1892 0517 5005 0000 		.long	0x550
 1893 051b 0001      		.word	0x100
 1894 051d 27        		.uleb128 0x27
 1895 051e 5F62 3100 		.string	"_b1"
 1896 0522 01        		.byte	0x1
 1897 0523 98        		.byte	0x98
 1898 0524 5005 0000 		.long	0x550
 1899 0528 9E01      		.word	0x19e
 1900 052a 28        		.uleb128 0x28
 1901 052b 5F62 3200 		.string	"_b2"
 1902 052f 01        		.byte	0x1
 1903 0530 99        		.byte	0x99
 1904 0531 5005 0000 		.long	0x550
 1905 0535 CB7E      		.sleb128 -181
 1906 0537 29        		.uleb128 0x29
 1907 0538 7265 7300 		.string	"res"
 1908 053c 01        		.byte	0x1
 1909 053d 9B        		.byte	0x9b
 1910 053e DC02 0000 		.long	0x2dc
 1911 0542 06        		.byte	0x6
 1912 0543 68        		.byte	0x68
 1913 0544 93        		.byte	0x93
 1914 0545 01        		.uleb128 0x1
 1915 0546 69        		.byte	0x69
 1916 0547 93        		.byte	0x93
 1917 0548 01        		.uleb128 0x1
 1918 0549 00        		.byte	0
 1919 054a 0A        		.uleb128 0xa
 1920 054b 02        		.byte	0x2
 1921 054c 2803 0000 		.long	0x328
 1922 0550 21        		.uleb128 0x21
 1923 0551 DC02 0000 		.long	0x2dc
 1924 0555 2A        		.uleb128 0x2a
 1925 0556 01        		.byte	0x1
 1926 0557 0000 0000 		.long	.LASF127
 1927 055b 02        		.byte	0x2
 1928 055c 61        		.byte	0x61
 1929 055d 01        		.byte	0x1
 1930 055e 0000 0000 		.long	.LFB22
 1931 0562 0000 0000 		.long	.LFE22
 1932 0566 0000 0000 		.long	.LLST3
 1933 056a 01        		.byte	0x1
 1934 056b 2B        		.uleb128 0x2b
 1935 056c 01        		.byte	0x1
 1936 056d 0000 0000 		.long	.LASF71
 1937 0571 02        		.byte	0x2
 1938 0572 98        		.byte	0x98
 1939 0573 01        		.byte	0x1
 1940 0574 4600 0000 		.long	0x46
 1941 0578 0000 0000 		.long	.LFB23
 1942 057c 0000 0000 		.long	.LFE23
 1943 0580 03        		.byte	0x3
 1944 0581 92        		.byte	0x92
 1945 0582 20        		.uleb128 0x20
 1946 0583 02        		.sleb128 2
 1947 0584 01        		.byte	0x1
 1948 0585 A705 0000 		.long	0x5a7
 1949 0589 23        		.uleb128 0x23
 1950 058a 0000 0000 		.long	.LASF72
 1951 058e 02        		.byte	0x2
 1952 058f 98        		.byte	0x98
 1953 0590 A705 0000 		.long	0x5a7
 1954 0594 0000 0000 		.long	.LLST4
 1955 0598 2C        		.uleb128 0x2c
 1956 0599 7271 00   		.string	"rq"
 1957 059c 02        		.byte	0x2
 1958 059d 9A        		.byte	0x9a
 1959 059e AD05 0000 		.long	0x5ad
 1960 05a2 0000 0000 		.long	.LLST5
 1961 05a6 00        		.byte	0
 1962 05a7 0A        		.uleb128 0xa
 1963 05a8 02        		.byte	0x2
 1964 05a9 4600 0000 		.long	0x46
 1965 05ad 0A        		.uleb128 0xa
 1966 05ae 02        		.byte	0x2
 1967 05af 8D02 0000 		.long	0x28d
 1968 05b3 2B        		.uleb128 0x2b
 1969 05b4 01        		.byte	0x1
 1970 05b5 0000 0000 		.long	.LASF73
 1971 05b9 02        		.byte	0x2
 1972 05ba C6        		.byte	0xc6
 1973 05bb 01        		.byte	0x1
 1974 05bc 3B00 0000 		.long	0x3b
 1975 05c0 0000 0000 		.long	.LFB24
 1976 05c4 0000 0000 		.long	.LFE24
 1977 05c8 03        		.byte	0x3
 1978 05c9 92        		.byte	0x92
 1979 05ca 20        		.uleb128 0x20
 1980 05cb 02        		.sleb128 2
 1981 05cc 01        		.byte	0x1
 1982 05cd F905 0000 		.long	0x5f9
 1983 05d1 24        		.uleb128 0x24
 1984 05d2 7267 6200 		.string	"rgb"
 1985 05d6 02        		.byte	0x2
 1986 05d7 C6        		.byte	0xc6
 1987 05d8 BA03 0000 		.long	0x3ba
 1988 05dc 0000 0000 		.long	.LLST6
 1989 05e0 2D        		.uleb128 0x2d
 1990 05e1 0000 0000 		.long	.LASF74
 1991 05e5 02        		.byte	0x2
 1992 05e6 C7        		.byte	0xc7
 1993 05e7 3B00 0000 		.long	0x3b
 1994 05eb 00        		.byte	0
 1995 05ec 25        		.uleb128 0x25
 1996 05ed 7265 7300 		.string	"res"
 1997 05f1 02        		.byte	0x2
 1998 05f2 C9        		.byte	0xc9
 1999 05f3 3B00 0000 		.long	0x3b
 2000 05f7 00        		.byte	0
 2001 05f8 00        		.byte	0
 2002 05f9 2B        		.uleb128 0x2b
 2003 05fa 01        		.byte	0x1
 2004 05fb 0000 0000 		.long	.LASF75
 2005 05ff 02        		.byte	0x2
 2006 0600 D0        		.byte	0xd0
 2007 0601 01        		.byte	0x1
 2008 0602 3B00 0000 		.long	0x3b
 2009 0606 0000 0000 		.long	.LFB25
 2010 060a 0000 0000 		.long	.LFE25
 2011 060e 03        		.byte	0x3
 2012 060f 92        		.byte	0x92
 2013 0610 20        		.uleb128 0x20
 2014 0611 02        		.sleb128 2
 2015 0612 01        		.byte	0x1
 2016 0613 4506 0000 		.long	0x645
 2017 0617 24        		.uleb128 0x24
 2018 0618 7267 6200 		.string	"rgb"
 2019 061c 02        		.byte	0x2
 2020 061d D0        		.byte	0xd0
 2021 061e BA03 0000 		.long	0x3ba
 2022 0622 0000 0000 		.long	.LLST7
 2023 0626 2E        		.uleb128 0x2e
 2024 0627 0000 0000 		.long	.LASF74
 2025 062b 02        		.byte	0x2
 2026 062c D1        		.byte	0xd1
 2027 062d 3B00 0000 		.long	0x3b
 2028 0631 0000 0000 		.long	.LLST8
 2029 0635 2C        		.uleb128 0x2c
 2030 0636 7265 7300 		.string	"res"
 2031 063a 02        		.byte	0x2
 2032 063b D3        		.byte	0xd3
 2033 063c 3B00 0000 		.long	0x3b
 2034 0640 0000 0000 		.long	.LLST9
 2035 0644 00        		.byte	0
 2036 0645 2B        		.uleb128 0x2b
 2037 0646 01        		.byte	0x1
 2038 0647 0000 0000 		.long	.LASF76
 2039 064b 02        		.byte	0x2
 2040 064c D9        		.byte	0xd9
 2041 064d 01        		.byte	0x1
 2042 064e 3B00 0000 		.long	0x3b
 2043 0652 0000 0000 		.long	.LFB26
 2044 0656 0000 0000 		.long	.LFE26
 2045 065a 03        		.byte	0x3
 2046 065b 92        		.byte	0x92
 2047 065c 20        		.uleb128 0x20
 2048 065d 02        		.sleb128 2
 2049 065e 01        		.byte	0x1
 2050 065f 9106 0000 		.long	0x691
 2051 0663 24        		.uleb128 0x24
 2052 0664 7267 6200 		.string	"rgb"
 2053 0668 02        		.byte	0x2
 2054 0669 D9        		.byte	0xd9
 2055 066a BA03 0000 		.long	0x3ba
 2056 066e 0000 0000 		.long	.LLST10
 2057 0672 2E        		.uleb128 0x2e
 2058 0673 0000 0000 		.long	.LASF74
 2059 0677 02        		.byte	0x2
 2060 0678 DA        		.byte	0xda
 2061 0679 3B00 0000 		.long	0x3b
 2062 067d 0000 0000 		.long	.LLST11
 2063 0681 2C        		.uleb128 0x2c
 2064 0682 7265 7300 		.string	"res"
 2065 0686 02        		.byte	0x2
 2066 0687 DC        		.byte	0xdc
 2067 0688 3B00 0000 		.long	0x3b
 2068 068c 0000 0000 		.long	.LLST12
 2069 0690 00        		.byte	0
 2070 0691 2F        		.uleb128 0x2f
 2071 0692 01        		.byte	0x1
 2072 0693 0000 0000 		.long	.LASF79
 2073 0697 02        		.byte	0x2
 2074 0698 E5        		.byte	0xe5
 2075 0699 01        		.byte	0x1
 2076 069a 0000 0000 		.long	.LFB27
 2077 069e 0000 0000 		.long	.LFE27
 2078 06a2 03        		.byte	0x3
 2079 06a3 92        		.byte	0x92
 2080 06a4 20        		.uleb128 0x20
 2081 06a5 02        		.sleb128 2
 2082 06a6 01        		.byte	0x1
 2083 06a7 DF06 0000 		.long	0x6df
 2084 06ab 23        		.uleb128 0x23
 2085 06ac 0000 0000 		.long	.LASF77
 2086 06b0 02        		.byte	0x2
 2087 06b1 E5        		.byte	0xe5
 2088 06b2 3B00 0000 		.long	0x3b
 2089 06b6 0000 0000 		.long	.LLST13
 2090 06ba 30        		.uleb128 0x30
 2091 06bb 0000 0000 		.long	.LASF78
 2092 06bf 02        		.byte	0x2
 2093 06c0 E6        		.byte	0xe6
 2094 06c1 3B00 0000 		.long	0x3b
 2095 06c5 01        		.byte	0x1
 2096 06c6 68        		.byte	0x68
 2097 06c7 31        		.uleb128 0x31
 2098 06c8 0000 0000 		.long	.LBB15
 2099 06cc 0000 0000 		.long	.LBE15
 2100 06d0 2C        		.uleb128 0x2c
 2101 06d1 6900      		.string	"i"
 2102 06d3 02        		.byte	0x2
 2103 06d4 E7        		.byte	0xe7
 2104 06d5 3B00 0000 		.long	0x3b
 2105 06d9 0000 0000 		.long	.LLST14
 2106 06dd 00        		.byte	0
 2107 06de 00        		.byte	0
 2108 06df 32        		.uleb128 0x32
 2109 06e0 01        		.byte	0x1
 2110 06e1 0000 0000 		.long	.LASF80
 2111 06e5 02        		.byte	0x2
 2112 06e6 F5        		.byte	0xf5
 2113 06e7 01        		.byte	0x1
 2114 06e8 0000 0000 		.long	.LFB28
 2115 06ec 0000 0000 		.long	.LFE28
 2116 06f0 0000 0000 		.long	.LLST15
 2117 06f4 01        		.byte	0x1
 2118 06f5 7907 0000 		.long	0x779
 2119 06f9 24        		.uleb128 0x24
 2120 06fa 7200      		.string	"r"
 2121 06fc 02        		.byte	0x2
 2122 06fd F5        		.byte	0xf5
 2123 06fe 3B00 0000 		.long	0x3b
 2124 0702 0000 0000 		.long	.LLST16
 2125 0706 24        		.uleb128 0x24
 2126 0707 6700      		.string	"g"
 2127 0709 02        		.byte	0x2
 2128 070a F5        		.byte	0xf5
 2129 070b 3B00 0000 		.long	0x3b
 2130 070f 0000 0000 		.long	.LLST17
 2131 0713 24        		.uleb128 0x24
 2132 0714 6200      		.string	"b"
 2133 0716 02        		.byte	0x2
 2134 0717 F5        		.byte	0xf5
 2135 0718 3B00 0000 		.long	0x3b
 2136 071c 0000 0000 		.long	.LLST18
 2137 0720 33        		.uleb128 0x33
 2138 0721 0000 0000 		.long	.LASF81
 2139 0725 02        		.byte	0x2
 2140 0726 F6        		.byte	0xf6
 2141 0727 AF04 0000 		.long	0x4af
 2142 072b 7F        		.sleb128 -1
 2143 072c 34        		.uleb128 0x34
 2144 072d 0000 0000 		.long	.LVL34
 2145 0731 9106 0000 		.long	0x691
 2146 0735 4007 0000 		.long	0x740
 2147 0739 35        		.uleb128 0x35
 2148 073a 01        		.byte	0x1
 2149 073b 68        		.byte	0x68
 2150 073c 02        		.byte	0x2
 2151 073d 09        		.byte	0x9
 2152 073e FF        		.byte	0xff
 2153 073f 00        		.byte	0
 2154 0740 34        		.uleb128 0x34
 2155 0741 0000 0000 		.long	.LVL35
 2156 0745 9106 0000 		.long	0x691
 2157 0749 5407 0000 		.long	0x754
 2158 074d 35        		.uleb128 0x35
 2159 074e 01        		.byte	0x1
 2160 074f 68        		.byte	0x68
 2161 0750 02        		.byte	0x2
 2162 0751 81        		.byte	0x81
 2163 0752 00        		.sleb128 0
 2164 0753 00        		.byte	0
 2165 0754 34        		.uleb128 0x34
 2166 0755 0000 0000 		.long	.LVL36
 2167 0759 9106 0000 		.long	0x691
 2168 075d 6807 0000 		.long	0x768
 2169 0761 35        		.uleb128 0x35
 2170 0762 01        		.byte	0x1
 2171 0763 68        		.byte	0x68
 2172 0764 02        		.byte	0x2
 2173 0765 8D        		.byte	0x8d
 2174 0766 00        		.sleb128 0
 2175 0767 00        		.byte	0
 2176 0768 36        		.uleb128 0x36
 2177 0769 0000 0000 		.long	.LVL37
 2178 076d 9106 0000 		.long	0x691
 2179 0771 35        		.uleb128 0x35
 2180 0772 01        		.byte	0x1
 2181 0773 68        		.byte	0x68
 2182 0774 02        		.byte	0x2
 2183 0775 8C        		.byte	0x8c
 2184 0776 00        		.sleb128 0
 2185 0777 00        		.byte	0
 2186 0778 00        		.byte	0
 2187 0779 37        		.uleb128 0x37
 2188 077a 01        		.byte	0x1
 2189 077b 0000 0000 		.long	.LASF82
 2190 077f 02        		.byte	0x2
 2191 0780 0C01      		.word	0x10c
 2192 0782 01        		.byte	0x1
 2193 0783 1504 0000 		.long	0x415
 2194 0787 0000 0000 		.long	.LFB29
 2195 078b 0000 0000 		.long	.LFE29
 2196 078f 0000 0000 		.long	.LLST19
 2197 0793 01        		.byte	0x1
 2198 0794 5D08 0000 		.long	0x85d
 2199 0798 38        		.uleb128 0x38
 2200 0799 0000 0000 		.long	.LASF83
 2201 079d 02        		.byte	0x2
 2202 079e 0C01      		.word	0x10c
 2203 07a0 5800 0000 		.long	0x58
 2204 07a4 0000 0000 		.long	.LLST20
 2205 07a8 39        		.uleb128 0x39
 2206 07a9 0000 0000 		.long	.LASF84
 2207 07ad 02        		.byte	0x2
 2208 07ae 0E01      		.word	0x10e
 2209 07b0 8F04 0000 		.long	0x48f
 2210 07b4 20        		.byte	0x20
 2211 07b5 3A        		.uleb128 0x3a
 2212 07b6 0000 0000 		.long	.LASF85
 2213 07ba 02        		.byte	0x2
 2214 07bb 1101      		.word	0x111
 2215 07bd 5800 0000 		.long	0x58
 2216 07c1 0000 0000 		.long	.LLST21
 2217 07c5 3B        		.uleb128 0x3b
 2218 07c6 0000 0000 		.long	.LASF86
 2219 07ca 02        		.byte	0x2
 2220 07cb 1301      		.word	0x113
 2221 07cd 5800 0000 		.long	0x58
 2222 07d1 06        		.byte	0x6
 2223 07d2 5E        		.byte	0x5e
 2224 07d3 93        		.byte	0x93
 2225 07d4 01        		.uleb128 0x1
 2226 07d5 5F        		.byte	0x5f
 2227 07d6 93        		.byte	0x93
 2228 07d7 01        		.uleb128 0x1
 2229 07d8 3B        		.uleb128 0x3b
 2230 07d9 0000 0000 		.long	.LASF87
 2231 07dd 02        		.byte	0x2
 2232 07de 1401      		.word	0x114
 2233 07e0 5800 0000 		.long	0x58
 2234 07e4 06        		.byte	0x6
 2235 07e5 58        		.byte	0x58
 2236 07e6 93        		.byte	0x93
 2237 07e7 01        		.uleb128 0x1
 2238 07e8 59        		.byte	0x59
 2239 07e9 93        		.byte	0x93
 2240 07ea 01        		.uleb128 0x1
 2241 07eb 3B        		.uleb128 0x3b
 2242 07ec 0000 0000 		.long	.LASF88
 2243 07f0 02        		.byte	0x2
 2244 07f1 1501      		.word	0x115
 2245 07f3 5800 0000 		.long	0x58
 2246 07f7 06        		.byte	0x6
 2247 07f8 5E        		.byte	0x5e
 2248 07f9 93        		.byte	0x93
 2249 07fa 01        		.uleb128 0x1
 2250 07fb 5F        		.byte	0x5f
 2251 07fc 93        		.byte	0x93
 2252 07fd 01        		.uleb128 0x1
 2253 07fe 3B        		.uleb128 0x3b
 2254 07ff 0000 0000 		.long	.LASF89
 2255 0803 02        		.byte	0x2
 2256 0804 1701      		.word	0x117
 2257 0806 1504 0000 		.long	0x415
 2258 080a 02        		.byte	0x2
 2259 080b 8C        		.byte	0x8c
 2260 080c 07        		.sleb128 7
 2261 080d 3C        		.uleb128 0x3c
 2262 080e 746F 00   		.string	"to"
 2263 0811 02        		.byte	0x2
 2264 0812 1801      		.word	0x118
 2265 0814 1504 0000 		.long	0x415
 2266 0818 02        		.byte	0x2
 2267 0819 8C        		.byte	0x8c
 2268 081a 04        		.sleb128 4
 2269 081b 3C        		.uleb128 0x3c
 2270 081c 7265 7300 		.string	"res"
 2271 0820 02        		.byte	0x2
 2272 0821 1A01      		.word	0x11a
 2273 0823 1504 0000 		.long	0x415
 2274 0827 02        		.byte	0x2
 2275 0828 8C        		.byte	0x8c
 2276 0829 01        		.sleb128 1
 2277 082a 31        		.uleb128 0x31
 2278 082b 0000 0000 		.long	.LBB16
 2279 082f 0000 0000 		.long	.LBE16
 2280 0833 3D        		.uleb128 0x3d
 2281 0834 6300      		.string	"c"
 2282 0836 02        		.byte	0x2
 2283 0837 1B01      		.word	0x11b
 2284 0839 5800 0000 		.long	0x58
 2285 083d 0000 0000 		.long	.LLST22
 2286 0841 31        		.uleb128 0x31
 2287 0842 0000 0000 		.long	.LBB17
 2288 0846 0000 0000 		.long	.LBE17
 2289 084a 3A        		.uleb128 0x3a
 2290 084b 0000 0000 		.long	.LASF78
 2291 084f 02        		.byte	0x2
 2292 0850 1C01      		.word	0x11c
 2293 0852 5F00 0000 		.long	0x5f
 2294 0856 0000 0000 		.long	.LLST23
 2295 085a 00        		.byte	0
 2296 085b 00        		.byte	0
 2297 085c 00        		.byte	0
 2298 085d 3E        		.uleb128 0x3e
 2299 085e 0000 0000 		.long	.LASF128
 2300 0862 03        		.byte	0x3
 2301 0863 87        		.byte	0x87
 2302 0864 01        		.byte	0x1
 2303 0865 03        		.byte	0x3
 2304 0866 3F        		.uleb128 0x3f
 2305 0867 01        		.byte	0x1
 2306 0868 0000 0000 		.long	.LASF129
 2307 086c 02        		.byte	0x2
 2308 086d 7501      		.word	0x175
 2309 086f 01        		.byte	0x1
 2310 0870 5800 0000 		.long	0x58
 2311 0874 01        		.byte	0x1
 2312 0875 0000 0000 		.long	.LFB32
 2313 0879 0000 0000 		.long	.LFE32
 2314 087d 0000 0000 		.long	.LLST24
 2315 0881 01        		.byte	0x1
 2316 0882 780C 0000 		.long	0xc78
 2317 0886 3A        		.uleb128 0x3a
 2318 0887 0000 0000 		.long	.LASF90
 2319 088b 02        		.byte	0x2
 2320 088c 7701      		.word	0x177
 2321 088e 4600 0000 		.long	0x46
 2322 0892 0000 0000 		.long	.LLST25
 2323 0896 3A        		.uleb128 0x3a
 2324 0897 0000 0000 		.long	.LASF51
 2325 089b 02        		.byte	0x2
 2326 089c 7801      		.word	0x178
 2327 089e 4600 0000 		.long	0x46
 2328 08a2 0000 0000 		.long	.LLST26
 2329 08a6 39        		.uleb128 0x39
 2330 08a7 0000 0000 		.long	.LASF91
 2331 08ab 02        		.byte	0x2
 2332 08ac 7901      		.word	0x179
 2333 08ae 4600 0000 		.long	0x46
 2334 08b2 00        		.byte	0
 2335 08b3 3B        		.uleb128 0x3b
 2336 08b4 0000 0000 		.long	.LASF92
 2337 08b8 02        		.byte	0x2
 2338 08b9 7A01      		.word	0x17a
 2339 08bb 2803 0000 		.long	0x328
 2340 08bf 02        		.byte	0x2
 2341 08c0 8C        		.byte	0x8c
 2342 08c1 01        		.sleb128 1
 2343 08c2 3A        		.uleb128 0x3a
 2344 08c3 0000 0000 		.long	.LASF93
 2345 08c7 02        		.byte	0x2
 2346 08c8 7B01      		.word	0x17b
 2347 08ca DC02 0000 		.long	0x2dc
 2348 08ce 0000 0000 		.long	.LLST27
 2349 08d2 39        		.uleb128 0x39
 2350 08d3 0000 0000 		.long	.LASF94
 2351 08d7 02        		.byte	0x2
 2352 08d8 7C01      		.word	0x17c
 2353 08da 3B00 0000 		.long	0x3b
 2354 08de 00        		.byte	0
 2355 08df 3B        		.uleb128 0x3b
 2356 08e0 0000 0000 		.long	.LASF95
 2357 08e4 02        		.byte	0x2
 2358 08e5 7D01      		.word	0x17d
 2359 08e7 5F00 0000 		.long	0x5f
 2360 08eb 05        		.byte	0x5
 2361 08ec 03        		.byte	0x3
 2362 08ed 0000 0000 		.long	led_sensor_delta_time.2466
 2363 08f1 39        		.uleb128 0x39
 2364 08f2 0000 0000 		.long	.LASF96
 2365 08f6 02        		.byte	0x2
 2366 08f7 7E01      		.word	0x17e
 2367 08f9 5F00 0000 		.long	0x5f
 2368 08fd 00        		.byte	0
 2369 08fe 3A        		.uleb128 0x3a
 2370 08ff 0000 0000 		.long	.LASF97
 2371 0903 02        		.byte	0x2
 2372 0904 7F01      		.word	0x17f
 2373 0906 3B00 0000 		.long	0x3b
 2374 090a 0000 0000 		.long	.LLST28
 2375 090e 1D        		.uleb128 0x1d
 2376 090f 0000 0000 		.long	.LASF98
 2377 0913 02        		.byte	0x2
 2378 0914 8001      		.word	0x180
 2379 0916 780C 0000 		.long	0xc78
 2380 091a 3A        		.uleb128 0x3a
 2381 091b 0000 0000 		.long	.LASF99
 2382 091f 02        		.byte	0x2
 2383 0920 8101      		.word	0x181
 2384 0922 3B00 0000 		.long	0x3b
 2385 0926 0000 0000 		.long	.LLST29
 2386 092a 3B        		.uleb128 0x3b
 2387 092b 0000 0000 		.long	.LASF100
 2388 092f 02        		.byte	0x2
 2389 0930 8201      		.word	0x182
 2390 0932 3B00 0000 		.long	0x3b
 2391 0936 05        		.byte	0x5
 2392 0937 03        		.byte	0x3
 2393 0938 0000 0000 		.long	led_sensor_nsample.2471
 2394 093c 1D        		.uleb128 0x1d
 2395 093d 0000 0000 		.long	.LASF101
 2396 0941 02        		.byte	0x2
 2397 0942 8301      		.word	0x183
 2398 0944 880C 0000 		.long	0xc88
 2399 0948 39        		.uleb128 0x39
 2400 0949 0000 0000 		.long	.LASF102
 2401 094d 02        		.byte	0x2
 2402 094e 8401      		.word	0x184
 2403 0950 5F00 0000 		.long	0x5f
 2404 0954 00        		.byte	0
 2405 0955 39        		.uleb128 0x39
 2406 0956 0000 0000 		.long	.LASF103
 2407 095a 02        		.byte	0x2
 2408 095b 8501      		.word	0x185
 2409 095d 3B00 0000 		.long	0x3b
 2410 0961 00        		.byte	0
 2411 0962 1D        		.uleb128 0x1d
 2412 0963 0000 0000 		.long	.LASF104
 2413 0967 02        		.byte	0x2
 2414 0968 8A01      		.word	0x18a
 2415 096a AF03 0000 		.long	0x3af
 2416 096e 1F        		.uleb128 0x1f
 2417 096f 6900      		.string	"i"
 2418 0971 02        		.byte	0x2
 2419 0972 9001      		.word	0x190
 2420 0974 4600 0000 		.long	0x46
 2421 0978 40        		.uleb128 0x40
 2422 0979 6A00      		.string	"j"
 2423 097b 02        		.byte	0x2
 2424 097c 9001      		.word	0x190
 2425 097e 4600 0000 		.long	0x46
 2426 0982 7F        		.sleb128 -1
 2427 0983 41        		.uleb128 0x41
 2428 0984 5D08 0000 		.long	0x85d
 2429 0988 0000 0000 		.long	.LBB32
 2430 098c 0000 0000 		.long	.LBE32
 2431 0990 02        		.byte	0x2
 2432 0991 8701      		.word	0x187
 2433 0993 42        		.uleb128 0x42
 2434 0994 9404 0000 		.long	0x494
 2435 0998 0000 0000 		.long	.LBB34
 2436 099c 0000 0000 		.long	.LBE34
 2437 09a0 02        		.byte	0x2
 2438 09a1 9901      		.word	0x199
 2439 09a3 B109 0000 		.long	0x9b1
 2440 09a7 43        		.uleb128 0x43
 2441 09a8 A204 0000 		.long	0x4a2
 2442 09ac 0000 0000 		.long	.LLST30
 2443 09b0 00        		.byte	0
 2444 09b1 44        		.uleb128 0x44
 2445 09b2 0000 0000 		.long	.Ldebug_ranges0+0
 2446 09b6 D009 0000 		.long	0x9d0
 2447 09ba 39        		.uleb128 0x39
 2448 09bb 0000 0000 		.long	.LASF105
 2449 09bf 02        		.byte	0x2
 2450 09c0 0902      		.word	0x209
 2451 09c2 9A0C 0000 		.long	0xc9a
 2452 09c6 00        		.byte	0
 2453 09c7 45        		.uleb128 0x45
 2454 09c8 0000 0000 		.long	.LVL103
 2455 09cc 02        		.byte	0x2
 2456 09cd 74        		.byte	0x74
 2457 09ce 00        		.sleb128 0
 2458 09cf 00        		.byte	0
 2459 09d0 46        		.uleb128 0x46
 2460 09d1 0000 0000 		.long	.LBB37
 2461 09d5 0000 0000 		.long	.LBE37
 2462 09d9 EC09 0000 		.long	0x9ec
 2463 09dd 3B        		.uleb128 0x3b
 2464 09de 0000 0000 		.long	.LASF78
 2465 09e2 02        		.byte	0x2
 2466 09e3 AB01      		.word	0x1ab
 2467 09e5 3B00 0000 		.long	0x3b
 2468 09e9 01        		.byte	0x1
 2469 09ea 57        		.byte	0x57
 2470 09eb 00        		.byte	0
 2471 09ec 42        		.uleb128 0x42
 2472 09ed 2004 0000 		.long	0x420
 2473 09f1 0000 0000 		.long	.LBB38
 2474 09f5 0000 0000 		.long	.LBE38
 2475 09f9 02        		.byte	0x2
 2476 09fa E601      		.word	0x1e6
 2477 09fc 050B 0000 		.long	0xb05
 2478 0a00 43        		.uleb128 0x43
 2479 0a01 2E04 0000 		.long	0x42e
 2480 0a05 0000 0000 		.long	.LLST31
 2481 0a09 43        		.uleb128 0x43
 2482 0a0a 3A04 0000 		.long	0x43a
 2483 0a0e 0000 0000 		.long	.LLST32
 2484 0a12 43        		.uleb128 0x43
 2485 0a13 4404 0000 		.long	0x444
 2486 0a17 0000 0000 		.long	.LLST32
 2487 0a1b 43        		.uleb128 0x43
 2488 0a1c 4E04 0000 		.long	0x44e
 2489 0a20 0000 0000 		.long	.LLST32
 2490 0a24 31        		.uleb128 0x31
 2491 0a25 0000 0000 		.long	.LBB39
 2492 0a29 0000 0000 		.long	.LBE39
 2493 0a2d 47        		.uleb128 0x47
 2494 0a2e 5804 0000 		.long	0x458
 2495 0a32 0000 0000 		.long	.LLST35
 2496 0a36 46        		.uleb128 0x46
 2497 0a37 0000 0000 		.long	.LBB40
 2498 0a3b 0000 0000 		.long	.LBE40
 2499 0a3f 820A 0000 		.long	0xa82
 2500 0a43 47        		.uleb128 0x47
 2501 0a44 6904 0000 		.long	0x469
 2502 0a48 0000 0000 		.long	.LLST36
 2503 0a4c 31        		.uleb128 0x31
 2504 0a4d 0000 0000 		.long	.LBB41
 2505 0a51 0000 0000 		.long	.LBE41
 2506 0a55 47        		.uleb128 0x47
 2507 0a56 7404 0000 		.long	0x474
 2508 0a5a 0000 0000 		.long	.LLST37
 2509 0a5e 34        		.uleb128 0x34
 2510 0a5f 0000 0000 		.long	.LVL86
 2511 0a63 7907 0000 		.long	0x779
 2512 0a67 770A 0000 		.long	0xa77
 2513 0a6b 35        		.uleb128 0x35
 2514 0a6c 06        		.byte	0x6
 2515 0a6d 68        		.byte	0x68
 2516 0a6e 93        		.byte	0x93
 2517 0a6f 01        		.uleb128 0x1
 2518 0a70 69        		.byte	0x69
 2519 0a71 93        		.byte	0x93
 2520 0a72 01        		.uleb128 0x1
 2521 0a73 02        		.byte	0x2
 2522 0a74 7E        		.byte	0x7e
 2523 0a75 00        		.sleb128 0
 2524 0a76 00        		.byte	0
 2525 0a77 48        		.uleb128 0x48
 2526 0a78 0000 0000 		.long	.LVL92
 2527 0a7c DF06 0000 		.long	0x6df
 2528 0a80 00        		.byte	0
 2529 0a81 00        		.byte	0
 2530 0a82 46        		.uleb128 0x46
 2531 0a83 0000 0000 		.long	.LBB42
 2532 0a87 0000 0000 		.long	.LBE42
 2533 0a8b A80A 0000 		.long	0xaa8
 2534 0a8f 47        		.uleb128 0x47
 2535 0a90 8304 0000 		.long	0x483
 2536 0a94 0000 0000 		.long	.LLST38
 2537 0a98 36        		.uleb128 0x36
 2538 0a99 0000 0000 		.long	.LVL95
 2539 0a9d 9106 0000 		.long	0x691
 2540 0aa1 35        		.uleb128 0x35
 2541 0aa2 01        		.byte	0x1
 2542 0aa3 68        		.byte	0x68
 2543 0aa4 01        		.byte	0x1
 2544 0aa5 30        		.byte	0x30
 2545 0aa6 00        		.byte	0
 2546 0aa7 00        		.byte	0
 2547 0aa8 34        		.uleb128 0x34
 2548 0aa9 0000 0000 		.long	.LVL80
 2549 0aad 9106 0000 		.long	0x691
 2550 0ab1 BB0A 0000 		.long	0xabb
 2551 0ab5 35        		.uleb128 0x35
 2552 0ab6 01        		.byte	0x1
 2553 0ab7 68        		.byte	0x68
 2554 0ab8 01        		.byte	0x1
 2555 0ab9 30        		.byte	0x30
 2556 0aba 00        		.byte	0
 2557 0abb 34        		.uleb128 0x34
 2558 0abc 0000 0000 		.long	.LVL81
 2559 0ac0 9106 0000 		.long	0x691
 2560 0ac4 CE0A 0000 		.long	0xace
 2561 0ac8 35        		.uleb128 0x35
 2562 0ac9 01        		.byte	0x1
 2563 0aca 68        		.byte	0x68
 2564 0acb 01        		.byte	0x1
 2565 0acc 30        		.byte	0x30
 2566 0acd 00        		.byte	0
 2567 0ace 34        		.uleb128 0x34
 2568 0acf 0000 0000 		.long	.LVL82
 2569 0ad3 9106 0000 		.long	0x691
 2570 0ad7 E10A 0000 		.long	0xae1
 2571 0adb 35        		.uleb128 0x35
 2572 0adc 01        		.byte	0x1
 2573 0add 68        		.byte	0x68
 2574 0ade 01        		.byte	0x1
 2575 0adf 30        		.byte	0x30
 2576 0ae0 00        		.byte	0
 2577 0ae1 34        		.uleb128 0x34
 2578 0ae2 0000 0000 		.long	.LVL83
 2579 0ae6 9106 0000 		.long	0x691
 2580 0aea F40A 0000 		.long	0xaf4
 2581 0aee 35        		.uleb128 0x35
 2582 0aef 01        		.byte	0x1
 2583 0af0 68        		.byte	0x68
 2584 0af1 01        		.byte	0x1
 2585 0af2 30        		.byte	0x30
 2586 0af3 00        		.byte	0
 2587 0af4 36        		.uleb128 0x36
 2588 0af5 0000 0000 		.long	.LVL84
 2589 0af9 9106 0000 		.long	0x691
 2590 0afd 35        		.uleb128 0x35
 2591 0afe 01        		.byte	0x1
 2592 0aff 68        		.byte	0x68
 2593 0b00 01        		.byte	0x1
 2594 0b01 30        		.byte	0x30
 2595 0b02 00        		.byte	0
 2596 0b03 00        		.byte	0
 2597 0b04 00        		.byte	0
 2598 0b05 46        		.uleb128 0x46
 2599 0b06 0000 0000 		.long	.LBB43
 2600 0b0a 0000 0000 		.long	.LBE43
 2601 0b0e 380B 0000 		.long	0xb38
 2602 0b12 3D        		.uleb128 0x3d
 2603 0b13 7661 6C00 		.string	"val"
 2604 0b17 02        		.byte	0x2
 2605 0b18 F901      		.word	0x1f9
 2606 0b1a 4D00 0000 		.long	0x4d
 2607 0b1e 0000 0000 		.long	.LLST39
 2608 0b22 36        		.uleb128 0x36
 2609 0b23 0000 0000 		.long	.LVL100
 2610 0b27 B404 0000 		.long	0x4b4
 2611 0b2b 35        		.uleb128 0x35
 2612 0b2c 06        		.byte	0x6
 2613 0b2d 68        		.byte	0x68
 2614 0b2e 93        		.byte	0x93
 2615 0b2f 01        		.uleb128 0x1
 2616 0b30 69        		.byte	0x69
 2617 0b31 93        		.byte	0x93
 2618 0b32 01        		.uleb128 0x1
 2619 0b33 02        		.byte	0x2
 2620 0b34 7C        		.byte	0x7c
 2621 0b35 00        		.sleb128 0
 2622 0b36 00        		.byte	0
 2623 0b37 00        		.byte	0
 2624 0b38 48        		.uleb128 0x48
 2625 0b39 0000 0000 		.long	.LVL58
 2626 0b3d 790D 0000 		.long	0xd79
 2627 0b41 48        		.uleb128 0x48
 2628 0b42 0000 0000 		.long	.LVL61
 2629 0b46 870D 0000 		.long	0xd87
 2630 0b4a 34        		.uleb128 0x34
 2631 0b4b 0000 0000 		.long	.LVL62
 2632 0b4f 940D 0000 		.long	0xd94
 2633 0b53 690B 0000 		.long	0xb69
 2634 0b57 35        		.uleb128 0x35
 2635 0b58 01        		.byte	0x1
 2636 0b59 68        		.byte	0x68
 2637 0b5a 01        		.byte	0x1
 2638 0b5b 30        		.byte	0x30
 2639 0b5c 35        		.uleb128 0x35
 2640 0b5d 06        		.byte	0x6
 2641 0b5e 66        		.byte	0x66
 2642 0b5f 93        		.byte	0x93
 2643 0b60 01        		.uleb128 0x1
 2644 0b61 67        		.byte	0x67
 2645 0b62 93        		.byte	0x93
 2646 0b63 01        		.uleb128 0x1
 2647 0b64 03        		.byte	0x3
 2648 0b65 0A        		.byte	0xa
 2649 0b66 D007      		.word	0x7d0
 2650 0b68 00        		.byte	0
 2651 0b69 34        		.uleb128 0x34
 2652 0b6a 0000 0000 		.long	.LVL63
 2653 0b6e 940D 0000 		.long	0xd94
 2654 0b72 860B 0000 		.long	0xb86
 2655 0b76 35        		.uleb128 0x35
 2656 0b77 01        		.byte	0x1
 2657 0b78 68        		.byte	0x68
 2658 0b79 01        		.byte	0x1
 2659 0b7a 31        		.byte	0x31
 2660 0b7b 35        		.uleb128 0x35
 2661 0b7c 06        		.byte	0x6
 2662 0b7d 66        		.byte	0x66
 2663 0b7e 93        		.byte	0x93
 2664 0b7f 01        		.uleb128 0x1
 2665 0b80 67        		.byte	0x67
 2666 0b81 93        		.byte	0x93
 2667 0b82 01        		.uleb128 0x1
 2668 0b83 01        		.byte	0x1
 2669 0b84 32        		.byte	0x32
 2670 0b85 00        		.byte	0
 2671 0b86 34        		.uleb128 0x34
 2672 0b87 0000 0000 		.long	.LVL64
 2673 0b8b 940D 0000 		.long	0xd94
 2674 0b8f A50B 0000 		.long	0xba5
 2675 0b93 35        		.uleb128 0x35
 2676 0b94 01        		.byte	0x1
 2677 0b95 68        		.byte	0x68
 2678 0b96 01        		.byte	0x1
 2679 0b97 32        		.byte	0x32
 2680 0b98 35        		.uleb128 0x35
 2681 0b99 06        		.byte	0x6
 2682 0b9a 66        		.byte	0x66
 2683 0b9b 93        		.byte	0x93
 2684 0b9c 01        		.uleb128 0x1
 2685 0b9d 67        		.byte	0x67
 2686 0b9e 93        		.byte	0x93
 2687 0b9f 01        		.uleb128 0x1
 2688 0ba0 03        		.byte	0x3
 2689 0ba1 0A        		.byte	0xa
 2690 0ba2 D007      		.word	0x7d0
 2691 0ba4 00        		.byte	0
 2692 0ba5 34        		.uleb128 0x34
 2693 0ba6 0000 0000 		.long	.LVL65
 2694 0baa B404 0000 		.long	0x4b4
 2695 0bae CA0B 0000 		.long	0xbca
 2696 0bb2 35        		.uleb128 0x35
 2697 0bb3 06        		.byte	0x6
 2698 0bb4 68        		.byte	0x68
 2699 0bb5 93        		.byte	0x93
 2700 0bb6 01        		.uleb128 0x1
 2701 0bb7 69        		.byte	0x69
 2702 0bb8 93        		.byte	0x93
 2703 0bb9 01        		.uleb128 0x1
 2704 0bba 02        		.byte	0x2
 2705 0bbb 7C        		.byte	0x7c
 2706 0bbc 00        		.sleb128 0
 2707 0bbd 35        		.uleb128 0x35
 2708 0bbe 06        		.byte	0x6
 2709 0bbf 66        		.byte	0x66
 2710 0bc0 93        		.byte	0x93
 2711 0bc1 01        		.uleb128 0x1
 2712 0bc2 67        		.byte	0x67
 2713 0bc3 93        		.byte	0x93
 2714 0bc4 01        		.uleb128 0x1
 2715 0bc5 03        		.byte	0x3
 2716 0bc6 0A        		.byte	0xa
 2717 0bc7 E803      		.word	0x3e8
 2718 0bc9 00        		.byte	0
 2719 0bca 34        		.uleb128 0x34
 2720 0bcb 0000 0000 		.long	.LVL69
 2721 0bcf A10D 0000 		.long	0xda1
 2722 0bd3 E40B 0000 		.long	0xbe4
 2723 0bd7 35        		.uleb128 0x35
 2724 0bd8 06        		.byte	0x6
 2725 0bd9 68        		.byte	0x68
 2726 0bda 93        		.byte	0x93
 2727 0bdb 01        		.uleb128 0x1
 2728 0bdc 69        		.byte	0x69
 2729 0bdd 93        		.byte	0x93
 2730 0bde 01        		.uleb128 0x1
 2731 0bdf 03        		.byte	0x3
 2732 0be0 0A        		.byte	0xa
 2733 0be1 0002      		.word	0x200
 2734 0be3 00        		.byte	0
 2735 0be4 48        		.uleb128 0x48
 2736 0be5 0000 0000 		.long	.LVL70
 2737 0be9 AE0D 0000 		.long	0xdae
 2738 0bed 48        		.uleb128 0x48
 2739 0bee 0000 0000 		.long	.LVL71
 2740 0bf2 790D 0000 		.long	0xd79
 2741 0bf6 34        		.uleb128 0x34
 2742 0bf7 0000 0000 		.long	.LVL75
 2743 0bfb BB0D 0000 		.long	0xdbb
 2744 0bff 170C 0000 		.long	0xc17
 2745 0c03 35        		.uleb128 0x35
 2746 0c04 06        		.byte	0x6
 2747 0c05 68        		.byte	0x68
 2748 0c06 93        		.byte	0x93
 2749 0c07 01        		.uleb128 0x1
 2750 0c08 69        		.byte	0x69
 2751 0c09 93        		.byte	0x93
 2752 0c0a 01        		.uleb128 0x1
 2753 0c0b 05        		.byte	0x5
 2754 0c0c 03        		.byte	0x3
 2755 0c0d 0000 0000 		.long	reportBuffer
 2756 0c11 35        		.uleb128 0x35
 2757 0c12 01        		.byte	0x1
 2758 0c13 66        		.byte	0x66
 2759 0c14 01        		.byte	0x1
 2760 0c15 32        		.byte	0x32
 2761 0c16 00        		.byte	0
 2762 0c17 34        		.uleb128 0x34
 2763 0c18 0000 0000 		.long	.LVL76
 2764 0c1c C80D 0000 		.long	0xdc8
 2765 0c20 2A0C 0000 		.long	0xc2a
 2766 0c24 35        		.uleb128 0x35
 2767 0c25 01        		.byte	0x1
 2768 0c26 68        		.byte	0x68
 2769 0c27 01        		.byte	0x1
 2770 0c28 30        		.byte	0x30
 2771 0c29 00        		.byte	0
 2772 0c2a 34        		.uleb128 0x34
 2773 0c2b 0000 0000 		.long	.LVL77
 2774 0c2f C80D 0000 		.long	0xdc8
 2775 0c33 3D0C 0000 		.long	0xc3d
 2776 0c37 35        		.uleb128 0x35
 2777 0c38 01        		.byte	0x1
 2778 0c39 68        		.byte	0x68
 2779 0c3a 01        		.byte	0x1
 2780 0c3b 32        		.byte	0x32
 2781 0c3c 00        		.byte	0
 2782 0c3d 34        		.uleb128 0x34
 2783 0c3e 0000 0000 		.long	.LVL78
 2784 0c42 940D 0000 		.long	0xd94
 2785 0c46 5C0C 0000 		.long	0xc5c
 2786 0c4a 35        		.uleb128 0x35
 2787 0c4b 01        		.byte	0x1
 2788 0c4c 68        		.byte	0x68
 2789 0c4d 01        		.byte	0x1
 2790 0c4e 32        		.byte	0x32
 2791 0c4f 35        		.uleb128 0x35
 2792 0c50 06        		.byte	0x6
 2793 0c51 66        		.byte	0x66
 2794 0c52 93        		.byte	0x93
 2795 0c53 01        		.uleb128 0x1
 2796 0c54 67        		.byte	0x67
 2797 0c55 93        		.byte	0x93
 2798 0c56 01        		.uleb128 0x1
 2799 0c57 03        		.byte	0x3
 2800 0c58 0A        		.byte	0xa
 2801 0c59 F401      		.word	0x1f4
 2802 0c5b 00        		.byte	0
 2803 0c5c 36        		.uleb128 0x36
 2804 0c5d 0000 0000 		.long	.LVL79
 2805 0c61 940D 0000 		.long	0xd94
 2806 0c65 35        		.uleb128 0x35
 2807 0c66 01        		.byte	0x1
 2808 0c67 68        		.byte	0x68
 2809 0c68 01        		.byte	0x1
 2810 0c69 30        		.byte	0x30
 2811 0c6a 35        		.uleb128 0x35
 2812 0c6b 06        		.byte	0x6
 2813 0c6c 66        		.byte	0x66
 2814 0c6d 93        		.byte	0x93
 2815 0c6e 01        		.uleb128 0x1
 2816 0c6f 67        		.byte	0x67
 2817 0c70 93        		.byte	0x93
 2818 0c71 01        		.uleb128 0x1
 2819 0c72 03        		.byte	0x3
 2820 0c73 0A        		.byte	0xa
 2821 0c74 D007      		.word	0x7d0
 2822 0c76 00        		.byte	0
 2823 0c77 00        		.byte	0
 2824 0c78 13        		.uleb128 0x13
 2825 0c79 5F00 0000 		.long	0x5f
 2826 0c7d 880C 0000 		.long	0xc88
 2827 0c81 14        		.uleb128 0x14
 2828 0c82 9E01 0000 		.long	0x19e
 2829 0c86 04        		.byte	0x4
 2830 0c87 00        		.byte	0
 2831 0c88 13        		.uleb128 0x13
 2832 0c89 5F00 0000 		.long	0x5f
 2833 0c8d 980C 0000 		.long	0xc98
 2834 0c91 14        		.uleb128 0x14
 2835 0c92 9E01 0000 		.long	0x19e
 2836 0c96 13        		.byte	0x13
 2837 0c97 00        		.byte	0
 2838 0c98 49        		.uleb128 0x49
 2839 0c99 01        		.byte	0x1
 2840 0c9a 0A        		.uleb128 0xa
 2841 0c9b 02        		.byte	0x2
 2842 0c9c 980C 0000 		.long	0xc98
 2843 0ca0 30        		.uleb128 0x30
 2844 0ca1 0000 0000 		.long	.LASF106
 2845 0ca5 02        		.byte	0x2
 2846 0ca6 5C        		.byte	0x5c
 2847 0ca7 B10C 0000 		.long	0xcb1
 2848 0cab 05        		.byte	0x5
 2849 0cac 03        		.byte	0x3
 2850 0cad 0000 0000 		.long	capture_diff
 2851 0cb1 12        		.uleb128 0x12
 2852 0cb2 5F00 0000 		.long	0x5f
 2853 0cb6 30        		.uleb128 0x30
 2854 0cb7 0000 0000 		.long	.LASF107
 2855 0cbb 02        		.byte	0x2
 2856 0cbc 5D        		.byte	0x5d
 2857 0cbd B10C 0000 		.long	0xcb1
 2858 0cc1 05        		.byte	0x5
 2859 0cc2 03        		.byte	0x3
 2860 0cc3 0000 0000 		.long	capture_diff_max
 2861 0cc7 30        		.uleb128 0x30
 2862 0cc8 0000 0000 		.long	.LASF108
 2863 0ccc 02        		.byte	0x2
 2864 0ccd 5E        		.byte	0x5e
 2865 0cce B10C 0000 		.long	0xcb1
 2866 0cd2 05        		.byte	0x5
 2867 0cd3 03        		.byte	0x3
 2868 0cd4 0000 0000 		.long	captured
 2869 0cd8 30        		.uleb128 0x30
 2870 0cd9 0000 0000 		.long	.LASF109
 2871 0cdd 02        		.byte	0x2
 2872 0cde 95        		.byte	0x95
 2873 0cdf 6F03 0000 		.long	0x36f
 2874 0ce3 05        		.byte	0x5
 2875 0ce4 03        		.byte	0x3
 2876 0ce5 0000 0000 		.long	reportBuffer
 2877 0ce9 13        		.uleb128 0x13
 2878 0cea 3C01 0000 		.long	0x13c
 2879 0cee F40C 0000 		.long	0xcf4
 2880 0cf2 4A        		.uleb128 0x4a
 2881 0cf3 00        		.byte	0
 2882 0cf4 4B        		.uleb128 0x4b
 2883 0cf5 0000 0000 		.long	.LASF110
 2884 0cf9 06        		.byte	0x6
 2885 0cfa 9701      		.word	0x197
 2886 0cfc E90C 0000 		.long	0xce9
 2887 0d00 01        		.byte	0x1
 2888 0d01 01        		.byte	0x1
 2889 0d02 13        		.uleb128 0x13
 2890 0d03 120D 0000 		.long	0xd12
 2891 0d07 120D 0000 		.long	0xd12
 2892 0d0b 14        		.uleb128 0x14
 2893 0d0c 9E01 0000 		.long	0x19e
 2894 0d10 4F        		.byte	0x4f
 2895 0d11 00        		.byte	0
 2896 0d12 21        		.uleb128 0x21
 2897 0d13 2001 0000 		.long	0x120
 2898 0d17 4C        		.uleb128 0x4c
 2899 0d18 0000 0000 		.long	.LASF111
 2900 0d1c 0B        		.byte	0xb
 2901 0d1d 03        		.byte	0x3
 2902 0d1e 290D 0000 		.long	0xd29
 2903 0d22 01        		.byte	0x1
 2904 0d23 05        		.byte	0x5
 2905 0d24 03        		.byte	0x3
 2906 0d25 0000 0000 		.long	usbDescriptorHidReport
 2907 0d29 21        		.uleb128 0x21
 2908 0d2a 020D 0000 		.long	0xd02
 2909 0d2e 4B        		.uleb128 0x4b
 2910 0d2f 0000 0000 		.long	.LASF112
 2911 0d33 07        		.byte	0x7
 2912 0d34 8C02      		.word	0x28c
 2913 0d36 E601 0000 		.long	0x1e6
 2914 0d3a 01        		.byte	0x1
 2915 0d3b 01        		.byte	0x1
 2916 0d3c 4D        		.uleb128 0x4d
 2917 0d3d 0000 0000 		.long	.LASF113
 2918 0d41 0C        		.byte	0xc
 2919 0d42 0D        		.byte	0xd
 2920 0d43 6001 0000 		.long	0x160
 2921 0d47 01        		.byte	0x1
 2922 0d48 01        		.byte	0x1
 2923 0d49 4D        		.uleb128 0x4d
 2924 0d4a 0000 0000 		.long	.LASF114
 2925 0d4e 0C        		.byte	0xc
 2926 0d4f 0E        		.byte	0xe
 2927 0d50 6001 0000 		.long	0x160
 2928 0d54 01        		.byte	0x1
 2929 0d55 01        		.byte	0x1
 2930 0d56 13        		.uleb128 0x13
 2931 0d57 1504 0000 		.long	0x415
 2932 0d5b 660D 0000 		.long	0xd66
 2933 0d5f 14        		.uleb128 0x14
 2934 0d60 9E01 0000 		.long	0x19e
 2935 0d64 06        		.byte	0x6
 2936 0d65 00        		.byte	0
 2937 0d66 4E        		.uleb128 0x4e
 2938 0d67 0000 0000 		.long	.LASF115
 2939 0d6b 02        		.byte	0x2
 2940 0d6c 0101      		.word	0x101
 2941 0d6e 560D 0000 		.long	0xd56
 2942 0d72 01        		.byte	0x1
 2943 0d73 05        		.byte	0x5
 2944 0d74 03        		.byte	0x3
 2945 0d75 0000 0000 		.long	rainbow_colors
 2946 0d79 4F        		.uleb128 0x4f
 2947 0d7a 01        		.byte	0x1
 2948 0d7b 01        		.byte	0x1
 2949 0d7c 0000 0000 		.long	.LASF116
 2950 0d80 0000 0000 		.long	.LASF116
 2951 0d84 06        		.byte	0x6
 2952 0d85 9102      		.word	0x291
 2953 0d87 50        		.uleb128 0x50
 2954 0d88 01        		.byte	0x1
 2955 0d89 01        		.byte	0x1
 2956 0d8a 0000 0000 		.long	.LASF117
 2957 0d8e 0000 0000 		.long	.LASF117
 2958 0d92 07        		.byte	0x7
 2959 0d93 A8        		.byte	0xa8
 2960 0d94 50        		.uleb128 0x50
 2961 0d95 01        		.byte	0x1
 2962 0d96 01        		.byte	0x1
 2963 0d97 0000 0000 		.long	.LASF118
 2964 0d9b 0000 0000 		.long	.LASF118
 2965 0d9f 0D        		.byte	0xd
 2966 0da0 20        		.byte	0x20
 2967 0da1 50        		.uleb128 0x50
 2968 0da2 01        		.byte	0x1
 2969 0da3 01        		.byte	0x1
 2970 0da4 0000 0000 		.long	.LASF119
 2971 0da8 0000 0000 		.long	.LASF119
 2972 0dac 0D        		.byte	0xd
 2973 0dad 19        		.byte	0x19
 2974 0dae 50        		.uleb128 0x50
 2975 0daf 01        		.byte	0x1
 2976 0db0 01        		.byte	0x1
 2977 0db1 0000 0000 		.long	.LASF120
 2978 0db5 0000 0000 		.long	.LASF120
 2979 0db9 07        		.byte	0x7
 2980 0dba AE        		.byte	0xae
 2981 0dbb 50        		.uleb128 0x50
 2982 0dbc 01        		.byte	0x1
 2983 0dbd 01        		.byte	0x1
 2984 0dbe 0000 0000 		.long	.LASF121
 2985 0dc2 0000 0000 		.long	.LASF121
 2986 0dc6 07        		.byte	0x7
 2987 0dc7 DC        		.byte	0xdc
 2988 0dc8 50        		.uleb128 0x50
 2989 0dc9 01        		.byte	0x1
 2990 0dca 01        		.byte	0x1
 2991 0dcb 0000 0000 		.long	.LASF122
 2992 0dcf 0000 0000 		.long	.LASF122
 2993 0dd3 0D        		.byte	0xd
 2994 0dd4 1C        		.byte	0x1c
 2995 0dd5 00        		.byte	0
 2996               		.section	.debug_abbrev,"",@progbits
 2997               	.Ldebug_abbrev0:
 2998 0000 01        		.uleb128 0x1
 2999 0001 11        		.uleb128 0x11
 3000 0002 01        		.byte	0x1
 3001 0003 25        		.uleb128 0x25
 3002 0004 0E        		.uleb128 0xe
 3003 0005 13        		.uleb128 0x13
 3004 0006 0B        		.uleb128 0xb
 3005 0007 03        		.uleb128 0x3
 3006 0008 0E        		.uleb128 0xe
 3007 0009 1B        		.uleb128 0x1b
 3008 000a 0E        		.uleb128 0xe
 3009 000b 55        		.uleb128 0x55
 3010 000c 06        		.uleb128 0x6
 3011 000d 11        		.uleb128 0x11
 3012 000e 01        		.uleb128 0x1
 3013 000f 52        		.uleb128 0x52
 3014 0010 01        		.uleb128 0x1
 3015 0011 10        		.uleb128 0x10
 3016 0012 06        		.uleb128 0x6
 3017 0013 00        		.byte	0
 3018 0014 00        		.byte	0
 3019 0015 02        		.uleb128 0x2
 3020 0016 16        		.uleb128 0x16
 3021 0017 00        		.byte	0
 3022 0018 03        		.uleb128 0x3
 3023 0019 0E        		.uleb128 0xe
 3024 001a 3A        		.uleb128 0x3a
 3025 001b 0B        		.uleb128 0xb
 3026 001c 3B        		.uleb128 0x3b
 3027 001d 0B        		.uleb128 0xb
 3028 001e 49        		.uleb128 0x49
 3029 001f 13        		.uleb128 0x13
 3030 0020 00        		.byte	0
 3031 0021 00        		.byte	0
 3032 0022 03        		.uleb128 0x3
 3033 0023 24        		.uleb128 0x24
 3034 0024 00        		.byte	0
 3035 0025 0B        		.uleb128 0xb
 3036 0026 0B        		.uleb128 0xb
 3037 0027 3E        		.uleb128 0x3e
 3038 0028 0B        		.uleb128 0xb
 3039 0029 03        		.uleb128 0x3
 3040 002a 0E        		.uleb128 0xe
 3041 002b 00        		.byte	0
 3042 002c 00        		.byte	0
 3043 002d 04        		.uleb128 0x4
 3044 002e 24        		.uleb128 0x24
 3045 002f 00        		.byte	0
 3046 0030 0B        		.uleb128 0xb
 3047 0031 0B        		.uleb128 0xb
 3048 0032 3E        		.uleb128 0x3e
 3049 0033 0B        		.uleb128 0xb
 3050 0034 03        		.uleb128 0x3
 3051 0035 08        		.uleb128 0x8
 3052 0036 00        		.byte	0
 3053 0037 00        		.byte	0
 3054 0038 05        		.uleb128 0x5
 3055 0039 13        		.uleb128 0x13
 3056 003a 01        		.byte	0x1
 3057 003b 03        		.uleb128 0x3
 3058 003c 0E        		.uleb128 0xe
 3059 003d 0B        		.uleb128 0xb
 3060 003e 0B        		.uleb128 0xb
 3061 003f 3A        		.uleb128 0x3a
 3062 0040 0B        		.uleb128 0xb
 3063 0041 3B        		.uleb128 0x3b
 3064 0042 0B        		.uleb128 0xb
 3065 0043 01        		.uleb128 0x1
 3066 0044 13        		.uleb128 0x13
 3067 0045 00        		.byte	0
 3068 0046 00        		.byte	0
 3069 0047 06        		.uleb128 0x6
 3070 0048 0D        		.uleb128 0xd
 3071 0049 00        		.byte	0
 3072 004a 03        		.uleb128 0x3
 3073 004b 08        		.uleb128 0x8
 3074 004c 3A        		.uleb128 0x3a
 3075 004d 0B        		.uleb128 0xb
 3076 004e 3B        		.uleb128 0x3b
 3077 004f 0B        		.uleb128 0xb
 3078 0050 49        		.uleb128 0x49
 3079 0051 13        		.uleb128 0x13
 3080 0052 38        		.uleb128 0x38
 3081 0053 0A        		.uleb128 0xa
 3082 0054 00        		.byte	0
 3083 0055 00        		.byte	0
 3084 0056 07        		.uleb128 0x7
 3085 0057 0D        		.uleb128 0xd
 3086 0058 00        		.byte	0
 3087 0059 03        		.uleb128 0x3
 3088 005a 0E        		.uleb128 0xe
 3089 005b 3A        		.uleb128 0x3a
 3090 005c 0B        		.uleb128 0xb
 3091 005d 3B        		.uleb128 0x3b
 3092 005e 0B        		.uleb128 0xb
 3093 005f 49        		.uleb128 0x49
 3094 0060 13        		.uleb128 0x13
 3095 0061 38        		.uleb128 0x38
 3096 0062 0A        		.uleb128 0xa
 3097 0063 00        		.byte	0
 3098 0064 00        		.byte	0
 3099 0065 08        		.uleb128 0x8
 3100 0066 0D        		.uleb128 0xd
 3101 0067 00        		.byte	0
 3102 0068 03        		.uleb128 0x3
 3103 0069 0E        		.uleb128 0xe
 3104 006a 3A        		.uleb128 0x3a
 3105 006b 0B        		.uleb128 0xb
 3106 006c 3B        		.uleb128 0x3b
 3107 006d 05        		.uleb128 0x5
 3108 006e 49        		.uleb128 0x49
 3109 006f 13        		.uleb128 0x13
 3110 0070 38        		.uleb128 0x38
 3111 0071 0A        		.uleb128 0xa
 3112 0072 00        		.byte	0
 3113 0073 00        		.byte	0
 3114 0074 09        		.uleb128 0x9
 3115 0075 0D        		.uleb128 0xd
 3116 0076 00        		.byte	0
 3117 0077 03        		.uleb128 0x3
 3118 0078 08        		.uleb128 0x8
 3119 0079 3A        		.uleb128 0x3a
 3120 007a 0B        		.uleb128 0xb
 3121 007b 3B        		.uleb128 0x3b
 3122 007c 05        		.uleb128 0x5
 3123 007d 49        		.uleb128 0x49
 3124 007e 13        		.uleb128 0x13
 3125 007f 38        		.uleb128 0x38
 3126 0080 0A        		.uleb128 0xa
 3127 0081 00        		.byte	0
 3128 0082 00        		.byte	0
 3129 0083 0A        		.uleb128 0xa
 3130 0084 0F        		.uleb128 0xf
 3131 0085 00        		.byte	0
 3132 0086 0B        		.uleb128 0xb
 3133 0087 0B        		.uleb128 0xb
 3134 0088 49        		.uleb128 0x49
 3135 0089 13        		.uleb128 0x13
 3136 008a 00        		.byte	0
 3137 008b 00        		.byte	0
 3138 008c 0B        		.uleb128 0xb
 3139 008d 15        		.uleb128 0x15
 3140 008e 01        		.byte	0x1
 3141 008f 27        		.uleb128 0x27
 3142 0090 0C        		.uleb128 0xc
 3143 0091 49        		.uleb128 0x49
 3144 0092 13        		.uleb128 0x13
 3145 0093 01        		.uleb128 0x1
 3146 0094 13        		.uleb128 0x13
 3147 0095 00        		.byte	0
 3148 0096 00        		.byte	0
 3149 0097 0C        		.uleb128 0xc
 3150 0098 05        		.uleb128 0x5
 3151 0099 00        		.byte	0
 3152 009a 49        		.uleb128 0x49
 3153 009b 13        		.uleb128 0x13
 3154 009c 00        		.byte	0
 3155 009d 00        		.byte	0
 3156 009e 0D        		.uleb128 0xd
 3157 009f 0F        		.uleb128 0xf
 3158 00a0 00        		.byte	0
 3159 00a1 0B        		.uleb128 0xb
 3160 00a2 0B        		.uleb128 0xb
 3161 00a3 00        		.byte	0
 3162 00a4 00        		.byte	0
 3163 00a5 0E        		.uleb128 0xe
 3164 00a6 16        		.uleb128 0x16
 3165 00a7 00        		.byte	0
 3166 00a8 03        		.uleb128 0x3
 3167 00a9 0E        		.uleb128 0xe
 3168 00aa 3A        		.uleb128 0x3a
 3169 00ab 0B        		.uleb128 0xb
 3170 00ac 3B        		.uleb128 0x3b
 3171 00ad 05        		.uleb128 0x5
 3172 00ae 49        		.uleb128 0x49
 3173 00af 13        		.uleb128 0x13
 3174 00b0 00        		.byte	0
 3175 00b1 00        		.byte	0
 3176 00b2 0F        		.uleb128 0xf
 3177 00b3 04        		.uleb128 0x4
 3178 00b4 01        		.byte	0x1
 3179 00b5 0B        		.uleb128 0xb
 3180 00b6 0B        		.uleb128 0xb
 3181 00b7 49        		.uleb128 0x49
 3182 00b8 13        		.uleb128 0x13
 3183 00b9 3A        		.uleb128 0x3a
 3184 00ba 0B        		.uleb128 0xb
 3185 00bb 3B        		.uleb128 0x3b
 3186 00bc 05        		.uleb128 0x5
 3187 00bd 01        		.uleb128 0x1
 3188 00be 13        		.uleb128 0x13
 3189 00bf 00        		.byte	0
 3190 00c0 00        		.byte	0
 3191 00c1 10        		.uleb128 0x10
 3192 00c2 28        		.uleb128 0x28
 3193 00c3 00        		.byte	0
 3194 00c4 03        		.uleb128 0x3
 3195 00c5 0E        		.uleb128 0xe
 3196 00c6 1C        		.uleb128 0x1c
 3197 00c7 0B        		.uleb128 0xb
 3198 00c8 00        		.byte	0
 3199 00c9 00        		.byte	0
 3200 00ca 11        		.uleb128 0x11
 3201 00cb 13        		.uleb128 0x13
 3202 00cc 01        		.byte	0x1
 3203 00cd 03        		.uleb128 0x3
 3204 00ce 0E        		.uleb128 0xe
 3205 00cf 0B        		.uleb128 0xb
 3206 00d0 0B        		.uleb128 0xb
 3207 00d1 3A        		.uleb128 0x3a
 3208 00d2 0B        		.uleb128 0xb
 3209 00d3 3B        		.uleb128 0x3b
 3210 00d4 05        		.uleb128 0x5
 3211 00d5 01        		.uleb128 0x1
 3212 00d6 13        		.uleb128 0x13
 3213 00d7 00        		.byte	0
 3214 00d8 00        		.byte	0
 3215 00d9 12        		.uleb128 0x12
 3216 00da 35        		.uleb128 0x35
 3217 00db 00        		.byte	0
 3218 00dc 49        		.uleb128 0x49
 3219 00dd 13        		.uleb128 0x13
 3220 00de 00        		.byte	0
 3221 00df 00        		.byte	0
 3222 00e0 13        		.uleb128 0x13
 3223 00e1 01        		.uleb128 0x1
 3224 00e2 01        		.byte	0x1
 3225 00e3 49        		.uleb128 0x49
 3226 00e4 13        		.uleb128 0x13
 3227 00e5 01        		.uleb128 0x1
 3228 00e6 13        		.uleb128 0x13
 3229 00e7 00        		.byte	0
 3230 00e8 00        		.byte	0
 3231 00e9 14        		.uleb128 0x14
 3232 00ea 21        		.uleb128 0x21
 3233 00eb 00        		.byte	0
 3234 00ec 49        		.uleb128 0x49
 3235 00ed 13        		.uleb128 0x13
 3236 00ee 2F        		.uleb128 0x2f
 3237 00ef 0B        		.uleb128 0xb
 3238 00f0 00        		.byte	0
 3239 00f1 00        		.byte	0
 3240 00f2 15        		.uleb128 0x15
 3241 00f3 17        		.uleb128 0x17
 3242 00f4 01        		.byte	0x1
 3243 00f5 03        		.uleb128 0x3
 3244 00f6 0E        		.uleb128 0xe
 3245 00f7 0B        		.uleb128 0xb
 3246 00f8 0B        		.uleb128 0xb
 3247 00f9 3A        		.uleb128 0x3a
 3248 00fa 0B        		.uleb128 0xb
 3249 00fb 3B        		.uleb128 0x3b
 3250 00fc 05        		.uleb128 0x5
 3251 00fd 01        		.uleb128 0x1
 3252 00fe 13        		.uleb128 0x13
 3253 00ff 00        		.byte	0
 3254 0100 00        		.byte	0
 3255 0101 16        		.uleb128 0x16
 3256 0102 0D        		.uleb128 0xd
 3257 0103 00        		.byte	0
 3258 0104 03        		.uleb128 0x3
 3259 0105 0E        		.uleb128 0xe
 3260 0106 3A        		.uleb128 0x3a
 3261 0107 0B        		.uleb128 0xb
 3262 0108 3B        		.uleb128 0x3b
 3263 0109 05        		.uleb128 0x5
 3264 010a 49        		.uleb128 0x49
 3265 010b 13        		.uleb128 0x13
 3266 010c 00        		.byte	0
 3267 010d 00        		.byte	0
 3268 010e 17        		.uleb128 0x17
 3269 010f 04        		.uleb128 0x4
 3270 0110 01        		.byte	0x1
 3271 0111 0B        		.uleb128 0xb
 3272 0112 0B        		.uleb128 0xb
 3273 0113 49        		.uleb128 0x49
 3274 0114 13        		.uleb128 0x13
 3275 0115 3A        		.uleb128 0x3a
 3276 0116 0B        		.uleb128 0xb
 3277 0117 3B        		.uleb128 0x3b
 3278 0118 0B        		.uleb128 0xb
 3279 0119 01        		.uleb128 0x1
 3280 011a 13        		.uleb128 0x13
 3281 011b 00        		.byte	0
 3282 011c 00        		.byte	0
 3283 011d 18        		.uleb128 0x18
 3284 011e 13        		.uleb128 0x13
 3285 011f 01        		.byte	0x1
 3286 0120 0B        		.uleb128 0xb
 3287 0121 0B        		.uleb128 0xb
 3288 0122 3A        		.uleb128 0x3a
 3289 0123 0B        		.uleb128 0xb
 3290 0124 3B        		.uleb128 0x3b
 3291 0125 0B        		.uleb128 0xb
 3292 0126 01        		.uleb128 0x1
 3293 0127 13        		.uleb128 0x13
 3294 0128 00        		.byte	0
 3295 0129 00        		.byte	0
 3296 012a 19        		.uleb128 0x19
 3297 012b 28        		.uleb128 0x28
 3298 012c 00        		.byte	0
 3299 012d 03        		.uleb128 0x3
 3300 012e 08        		.uleb128 0x8
 3301 012f 1C        		.uleb128 0x1c
 3302 0130 0B        		.uleb128 0xb
 3303 0131 00        		.byte	0
 3304 0132 00        		.byte	0
 3305 0133 1A        		.uleb128 0x1a
 3306 0134 2E        		.uleb128 0x2e
 3307 0135 01        		.byte	0x1
 3308 0136 03        		.uleb128 0x3
 3309 0137 0E        		.uleb128 0xe
 3310 0138 3A        		.uleb128 0x3a
 3311 0139 0B        		.uleb128 0xb
 3312 013a 3B        		.uleb128 0x3b
 3313 013b 05        		.uleb128 0x5
 3314 013c 27        		.uleb128 0x27
 3315 013d 0C        		.uleb128 0xc
 3316 013e 20        		.uleb128 0x20
 3317 013f 0B        		.uleb128 0xb
 3318 0140 01        		.uleb128 0x1
 3319 0141 13        		.uleb128 0x13
 3320 0142 00        		.byte	0
 3321 0143 00        		.byte	0
 3322 0144 1B        		.uleb128 0x1b
 3323 0145 05        		.uleb128 0x5
 3324 0146 00        		.byte	0
 3325 0147 03        		.uleb128 0x3
 3326 0148 0E        		.uleb128 0xe
 3327 0149 3A        		.uleb128 0x3a
 3328 014a 0B        		.uleb128 0xb
 3329 014b 3B        		.uleb128 0x3b
 3330 014c 05        		.uleb128 0x5
 3331 014d 49        		.uleb128 0x49
 3332 014e 13        		.uleb128 0x13
 3333 014f 00        		.byte	0
 3334 0150 00        		.byte	0
 3335 0151 1C        		.uleb128 0x1c
 3336 0152 05        		.uleb128 0x5
 3337 0153 00        		.byte	0
 3338 0154 03        		.uleb128 0x3
 3339 0155 08        		.uleb128 0x8
 3340 0156 3A        		.uleb128 0x3a
 3341 0157 0B        		.uleb128 0xb
 3342 0158 3B        		.uleb128 0x3b
 3343 0159 05        		.uleb128 0x5
 3344 015a 49        		.uleb128 0x49
 3345 015b 13        		.uleb128 0x13
 3346 015c 00        		.byte	0
 3347 015d 00        		.byte	0
 3348 015e 1D        		.uleb128 0x1d
 3349 015f 34        		.uleb128 0x34
 3350 0160 00        		.byte	0
 3351 0161 03        		.uleb128 0x3
 3352 0162 0E        		.uleb128 0xe
 3353 0163 3A        		.uleb128 0x3a
 3354 0164 0B        		.uleb128 0xb
 3355 0165 3B        		.uleb128 0x3b
 3356 0166 05        		.uleb128 0x5
 3357 0167 49        		.uleb128 0x49
 3358 0168 13        		.uleb128 0x13
 3359 0169 00        		.byte	0
 3360 016a 00        		.byte	0
 3361 016b 1E        		.uleb128 0x1e
 3362 016c 0B        		.uleb128 0xb
 3363 016d 01        		.byte	0x1
 3364 016e 01        		.uleb128 0x1
 3365 016f 13        		.uleb128 0x13
 3366 0170 00        		.byte	0
 3367 0171 00        		.byte	0
 3368 0172 1F        		.uleb128 0x1f
 3369 0173 34        		.uleb128 0x34
 3370 0174 00        		.byte	0
 3371 0175 03        		.uleb128 0x3
 3372 0176 08        		.uleb128 0x8
 3373 0177 3A        		.uleb128 0x3a
 3374 0178 0B        		.uleb128 0xb
 3375 0179 3B        		.uleb128 0x3b
 3376 017a 05        		.uleb128 0x5
 3377 017b 49        		.uleb128 0x49
 3378 017c 13        		.uleb128 0x13
 3379 017d 00        		.byte	0
 3380 017e 00        		.byte	0
 3381 017f 20        		.uleb128 0x20
 3382 0180 0B        		.uleb128 0xb
 3383 0181 01        		.byte	0x1
 3384 0182 00        		.byte	0
 3385 0183 00        		.byte	0
 3386 0184 21        		.uleb128 0x21
 3387 0185 26        		.uleb128 0x26
 3388 0186 00        		.byte	0
 3389 0187 49        		.uleb128 0x49
 3390 0188 13        		.uleb128 0x13
 3391 0189 00        		.byte	0
 3392 018a 00        		.byte	0
 3393 018b 22        		.uleb128 0x22
 3394 018c 2E        		.uleb128 0x2e
 3395 018d 01        		.byte	0x1
 3396 018e 3F        		.uleb128 0x3f
 3397 018f 0C        		.uleb128 0xc
 3398 0190 03        		.uleb128 0x3
 3399 0191 0E        		.uleb128 0xe
 3400 0192 3A        		.uleb128 0x3a
 3401 0193 0B        		.uleb128 0xb
 3402 0194 3B        		.uleb128 0x3b
 3403 0195 0B        		.uleb128 0xb
 3404 0196 27        		.uleb128 0x27
 3405 0197 0C        		.uleb128 0xc
 3406 0198 49        		.uleb128 0x49
 3407 0199 13        		.uleb128 0x13
 3408 019a 11        		.uleb128 0x11
 3409 019b 01        		.uleb128 0x1
 3410 019c 12        		.uleb128 0x12
 3411 019d 01        		.uleb128 0x1
 3412 019e 40        		.uleb128 0x40
 3413 019f 06        		.uleb128 0x6
 3414 01a0 9642      		.uleb128 0x2116
 3415 01a2 0C        		.uleb128 0xc
 3416 01a3 01        		.uleb128 0x1
 3417 01a4 13        		.uleb128 0x13
 3418 01a5 00        		.byte	0
 3419 01a6 00        		.byte	0
 3420 01a7 23        		.uleb128 0x23
 3421 01a8 05        		.uleb128 0x5
 3422 01a9 00        		.byte	0
 3423 01aa 03        		.uleb128 0x3
 3424 01ab 0E        		.uleb128 0xe
 3425 01ac 3A        		.uleb128 0x3a
 3426 01ad 0B        		.uleb128 0xb
 3427 01ae 3B        		.uleb128 0x3b
 3428 01af 0B        		.uleb128 0xb
 3429 01b0 49        		.uleb128 0x49
 3430 01b1 13        		.uleb128 0x13
 3431 01b2 02        		.uleb128 0x2
 3432 01b3 06        		.uleb128 0x6
 3433 01b4 00        		.byte	0
 3434 01b5 00        		.byte	0
 3435 01b6 24        		.uleb128 0x24
 3436 01b7 05        		.uleb128 0x5
 3437 01b8 00        		.byte	0
 3438 01b9 03        		.uleb128 0x3
 3439 01ba 08        		.uleb128 0x8
 3440 01bb 3A        		.uleb128 0x3a
 3441 01bc 0B        		.uleb128 0xb
 3442 01bd 3B        		.uleb128 0x3b
 3443 01be 0B        		.uleb128 0xb
 3444 01bf 49        		.uleb128 0x49
 3445 01c0 13        		.uleb128 0x13
 3446 01c1 02        		.uleb128 0x2
 3447 01c2 06        		.uleb128 0x6
 3448 01c3 00        		.byte	0
 3449 01c4 00        		.byte	0
 3450 01c5 25        		.uleb128 0x25
 3451 01c6 34        		.uleb128 0x34
 3452 01c7 00        		.byte	0
 3453 01c8 03        		.uleb128 0x3
 3454 01c9 08        		.uleb128 0x8
 3455 01ca 3A        		.uleb128 0x3a
 3456 01cb 0B        		.uleb128 0xb
 3457 01cc 3B        		.uleb128 0x3b
 3458 01cd 0B        		.uleb128 0xb
 3459 01ce 49        		.uleb128 0x49
 3460 01cf 13        		.uleb128 0x13
 3461 01d0 1C        		.uleb128 0x1c
 3462 01d1 0B        		.uleb128 0xb
 3463 01d2 00        		.byte	0
 3464 01d3 00        		.byte	0
 3465 01d4 26        		.uleb128 0x26
 3466 01d5 34        		.uleb128 0x34
 3467 01d6 00        		.byte	0
 3468 01d7 03        		.uleb128 0x3
 3469 01d8 0E        		.uleb128 0xe
 3470 01d9 3A        		.uleb128 0x3a
 3471 01da 0B        		.uleb128 0xb
 3472 01db 3B        		.uleb128 0x3b
 3473 01dc 0B        		.uleb128 0xb
 3474 01dd 49        		.uleb128 0x49
 3475 01de 13        		.uleb128 0x13
 3476 01df 1C        		.uleb128 0x1c
 3477 01e0 05        		.uleb128 0x5
 3478 01e1 00        		.byte	0
 3479 01e2 00        		.byte	0
 3480 01e3 27        		.uleb128 0x27
 3481 01e4 34        		.uleb128 0x34
 3482 01e5 00        		.byte	0
 3483 01e6 03        		.uleb128 0x3
 3484 01e7 08        		.uleb128 0x8
 3485 01e8 3A        		.uleb128 0x3a
 3486 01e9 0B        		.uleb128 0xb
 3487 01ea 3B        		.uleb128 0x3b
 3488 01eb 0B        		.uleb128 0xb
 3489 01ec 49        		.uleb128 0x49
 3490 01ed 13        		.uleb128 0x13
 3491 01ee 1C        		.uleb128 0x1c
 3492 01ef 05        		.uleb128 0x5
 3493 01f0 00        		.byte	0
 3494 01f1 00        		.byte	0
 3495 01f2 28        		.uleb128 0x28
 3496 01f3 34        		.uleb128 0x34
 3497 01f4 00        		.byte	0
 3498 01f5 03        		.uleb128 0x3
 3499 01f6 08        		.uleb128 0x8
 3500 01f7 3A        		.uleb128 0x3a
 3501 01f8 0B        		.uleb128 0xb
 3502 01f9 3B        		.uleb128 0x3b
 3503 01fa 0B        		.uleb128 0xb
 3504 01fb 49        		.uleb128 0x49
 3505 01fc 13        		.uleb128 0x13
 3506 01fd 1C        		.uleb128 0x1c
 3507 01fe 0D        		.uleb128 0xd
 3508 01ff 00        		.byte	0
 3509 0200 00        		.byte	0
 3510 0201 29        		.uleb128 0x29
 3511 0202 34        		.uleb128 0x34
 3512 0203 00        		.byte	0
 3513 0204 03        		.uleb128 0x3
 3514 0205 08        		.uleb128 0x8
 3515 0206 3A        		.uleb128 0x3a
 3516 0207 0B        		.uleb128 0xb
 3517 0208 3B        		.uleb128 0x3b
 3518 0209 0B        		.uleb128 0xb
 3519 020a 49        		.uleb128 0x49
 3520 020b 13        		.uleb128 0x13
 3521 020c 02        		.uleb128 0x2
 3522 020d 0A        		.uleb128 0xa
 3523 020e 00        		.byte	0
 3524 020f 00        		.byte	0
 3525 0210 2A        		.uleb128 0x2a
 3526 0211 2E        		.uleb128 0x2e
 3527 0212 00        		.byte	0
 3528 0213 3F        		.uleb128 0x3f
 3529 0214 0C        		.uleb128 0xc
 3530 0215 03        		.uleb128 0x3
 3531 0216 0E        		.uleb128 0xe
 3532 0217 3A        		.uleb128 0x3a
 3533 0218 0B        		.uleb128 0xb
 3534 0219 3B        		.uleb128 0x3b
 3535 021a 0B        		.uleb128 0xb
 3536 021b 27        		.uleb128 0x27
 3537 021c 0C        		.uleb128 0xc
 3538 021d 11        		.uleb128 0x11
 3539 021e 01        		.uleb128 0x1
 3540 021f 12        		.uleb128 0x12
 3541 0220 01        		.uleb128 0x1
 3542 0221 40        		.uleb128 0x40
 3543 0222 06        		.uleb128 0x6
 3544 0223 9742      		.uleb128 0x2117
 3545 0225 0C        		.uleb128 0xc
 3546 0226 00        		.byte	0
 3547 0227 00        		.byte	0
 3548 0228 2B        		.uleb128 0x2b
 3549 0229 2E        		.uleb128 0x2e
 3550 022a 01        		.byte	0x1
 3551 022b 3F        		.uleb128 0x3f
 3552 022c 0C        		.uleb128 0xc
 3553 022d 03        		.uleb128 0x3
 3554 022e 0E        		.uleb128 0xe
 3555 022f 3A        		.uleb128 0x3a
 3556 0230 0B        		.uleb128 0xb
 3557 0231 3B        		.uleb128 0x3b
 3558 0232 0B        		.uleb128 0xb
 3559 0233 27        		.uleb128 0x27
 3560 0234 0C        		.uleb128 0xc
 3561 0235 49        		.uleb128 0x49
 3562 0236 13        		.uleb128 0x13
 3563 0237 11        		.uleb128 0x11
 3564 0238 01        		.uleb128 0x1
 3565 0239 12        		.uleb128 0x12
 3566 023a 01        		.uleb128 0x1
 3567 023b 40        		.uleb128 0x40
 3568 023c 0A        		.uleb128 0xa
 3569 023d 9742      		.uleb128 0x2117
 3570 023f 0C        		.uleb128 0xc
 3571 0240 01        		.uleb128 0x1
 3572 0241 13        		.uleb128 0x13
 3573 0242 00        		.byte	0
 3574 0243 00        		.byte	0
 3575 0244 2C        		.uleb128 0x2c
 3576 0245 34        		.uleb128 0x34
 3577 0246 00        		.byte	0
 3578 0247 03        		.uleb128 0x3
 3579 0248 08        		.uleb128 0x8
 3580 0249 3A        		.uleb128 0x3a
 3581 024a 0B        		.uleb128 0xb
 3582 024b 3B        		.uleb128 0x3b
 3583 024c 0B        		.uleb128 0xb
 3584 024d 49        		.uleb128 0x49
 3585 024e 13        		.uleb128 0x13
 3586 024f 02        		.uleb128 0x2
 3587 0250 06        		.uleb128 0x6
 3588 0251 00        		.byte	0
 3589 0252 00        		.byte	0
 3590 0253 2D        		.uleb128 0x2d
 3591 0254 34        		.uleb128 0x34
 3592 0255 00        		.byte	0
 3593 0256 03        		.uleb128 0x3
 3594 0257 0E        		.uleb128 0xe
 3595 0258 3A        		.uleb128 0x3a
 3596 0259 0B        		.uleb128 0xb
 3597 025a 3B        		.uleb128 0x3b
 3598 025b 0B        		.uleb128 0xb
 3599 025c 49        		.uleb128 0x49
 3600 025d 13        		.uleb128 0x13
 3601 025e 1C        		.uleb128 0x1c
 3602 025f 0B        		.uleb128 0xb
 3603 0260 00        		.byte	0
 3604 0261 00        		.byte	0
 3605 0262 2E        		.uleb128 0x2e
 3606 0263 34        		.uleb128 0x34
 3607 0264 00        		.byte	0
 3608 0265 03        		.uleb128 0x3
 3609 0266 0E        		.uleb128 0xe
 3610 0267 3A        		.uleb128 0x3a
 3611 0268 0B        		.uleb128 0xb
 3612 0269 3B        		.uleb128 0x3b
 3613 026a 0B        		.uleb128 0xb
 3614 026b 49        		.uleb128 0x49
 3615 026c 13        		.uleb128 0x13
 3616 026d 02        		.uleb128 0x2
 3617 026e 06        		.uleb128 0x6
 3618 026f 00        		.byte	0
 3619 0270 00        		.byte	0
 3620 0271 2F        		.uleb128 0x2f
 3621 0272 2E        		.uleb128 0x2e
 3622 0273 01        		.byte	0x1
 3623 0274 3F        		.uleb128 0x3f
 3624 0275 0C        		.uleb128 0xc
 3625 0276 03        		.uleb128 0x3
 3626 0277 0E        		.uleb128 0xe
 3627 0278 3A        		.uleb128 0x3a
 3628 0279 0B        		.uleb128 0xb
 3629 027a 3B        		.uleb128 0x3b
 3630 027b 0B        		.uleb128 0xb
 3631 027c 27        		.uleb128 0x27
 3632 027d 0C        		.uleb128 0xc
 3633 027e 11        		.uleb128 0x11
 3634 027f 01        		.uleb128 0x1
 3635 0280 12        		.uleb128 0x12
 3636 0281 01        		.uleb128 0x1
 3637 0282 40        		.uleb128 0x40
 3638 0283 0A        		.uleb128 0xa
 3639 0284 9742      		.uleb128 0x2117
 3640 0286 0C        		.uleb128 0xc
 3641 0287 01        		.uleb128 0x1
 3642 0288 13        		.uleb128 0x13
 3643 0289 00        		.byte	0
 3644 028a 00        		.byte	0
 3645 028b 30        		.uleb128 0x30
 3646 028c 34        		.uleb128 0x34
 3647 028d 00        		.byte	0
 3648 028e 03        		.uleb128 0x3
 3649 028f 0E        		.uleb128 0xe
 3650 0290 3A        		.uleb128 0x3a
 3651 0291 0B        		.uleb128 0xb
 3652 0292 3B        		.uleb128 0x3b
 3653 0293 0B        		.uleb128 0xb
 3654 0294 49        		.uleb128 0x49
 3655 0295 13        		.uleb128 0x13
 3656 0296 02        		.uleb128 0x2
 3657 0297 0A        		.uleb128 0xa
 3658 0298 00        		.byte	0
 3659 0299 00        		.byte	0
 3660 029a 31        		.uleb128 0x31
 3661 029b 0B        		.uleb128 0xb
 3662 029c 01        		.byte	0x1
 3663 029d 11        		.uleb128 0x11
 3664 029e 01        		.uleb128 0x1
 3665 029f 12        		.uleb128 0x12
 3666 02a0 01        		.uleb128 0x1
 3667 02a1 00        		.byte	0
 3668 02a2 00        		.byte	0
 3669 02a3 32        		.uleb128 0x32
 3670 02a4 2E        		.uleb128 0x2e
 3671 02a5 01        		.byte	0x1
 3672 02a6 3F        		.uleb128 0x3f
 3673 02a7 0C        		.uleb128 0xc
 3674 02a8 03        		.uleb128 0x3
 3675 02a9 0E        		.uleb128 0xe
 3676 02aa 3A        		.uleb128 0x3a
 3677 02ab 0B        		.uleb128 0xb
 3678 02ac 3B        		.uleb128 0x3b
 3679 02ad 0B        		.uleb128 0xb
 3680 02ae 27        		.uleb128 0x27
 3681 02af 0C        		.uleb128 0xc
 3682 02b0 11        		.uleb128 0x11
 3683 02b1 01        		.uleb128 0x1
 3684 02b2 12        		.uleb128 0x12
 3685 02b3 01        		.uleb128 0x1
 3686 02b4 40        		.uleb128 0x40
 3687 02b5 06        		.uleb128 0x6
 3688 02b6 9742      		.uleb128 0x2117
 3689 02b8 0C        		.uleb128 0xc
 3690 02b9 01        		.uleb128 0x1
 3691 02ba 13        		.uleb128 0x13
 3692 02bb 00        		.byte	0
 3693 02bc 00        		.byte	0
 3694 02bd 33        		.uleb128 0x33
 3695 02be 34        		.uleb128 0x34
 3696 02bf 00        		.byte	0
 3697 02c0 03        		.uleb128 0x3
 3698 02c1 0E        		.uleb128 0xe
 3699 02c2 3A        		.uleb128 0x3a
 3700 02c3 0B        		.uleb128 0xb
 3701 02c4 3B        		.uleb128 0x3b
 3702 02c5 0B        		.uleb128 0xb
 3703 02c6 49        		.uleb128 0x49
 3704 02c7 13        		.uleb128 0x13
 3705 02c8 1C        		.uleb128 0x1c
 3706 02c9 0D        		.uleb128 0xd
 3707 02ca 00        		.byte	0
 3708 02cb 00        		.byte	0
 3709 02cc 34        		.uleb128 0x34
 3710 02cd 8982 01   		.uleb128 0x4109
 3711 02d0 01        		.byte	0x1
 3712 02d1 11        		.uleb128 0x11
 3713 02d2 01        		.uleb128 0x1
 3714 02d3 31        		.uleb128 0x31
 3715 02d4 13        		.uleb128 0x13
 3716 02d5 01        		.uleb128 0x1
 3717 02d6 13        		.uleb128 0x13
 3718 02d7 00        		.byte	0
 3719 02d8 00        		.byte	0
 3720 02d9 35        		.uleb128 0x35
 3721 02da 8A82 01   		.uleb128 0x410a
 3722 02dd 00        		.byte	0
 3723 02de 02        		.uleb128 0x2
 3724 02df 0A        		.uleb128 0xa
 3725 02e0 9142      		.uleb128 0x2111
 3726 02e2 0A        		.uleb128 0xa
 3727 02e3 00        		.byte	0
 3728 02e4 00        		.byte	0
 3729 02e5 36        		.uleb128 0x36
 3730 02e6 8982 01   		.uleb128 0x4109
 3731 02e9 01        		.byte	0x1
 3732 02ea 11        		.uleb128 0x11
 3733 02eb 01        		.uleb128 0x1
 3734 02ec 31        		.uleb128 0x31
 3735 02ed 13        		.uleb128 0x13
 3736 02ee 00        		.byte	0
 3737 02ef 00        		.byte	0
 3738 02f0 37        		.uleb128 0x37
 3739 02f1 2E        		.uleb128 0x2e
 3740 02f2 01        		.byte	0x1
 3741 02f3 3F        		.uleb128 0x3f
 3742 02f4 0C        		.uleb128 0xc
 3743 02f5 03        		.uleb128 0x3
 3744 02f6 0E        		.uleb128 0xe
 3745 02f7 3A        		.uleb128 0x3a
 3746 02f8 0B        		.uleb128 0xb
 3747 02f9 3B        		.uleb128 0x3b
 3748 02fa 05        		.uleb128 0x5
 3749 02fb 27        		.uleb128 0x27
 3750 02fc 0C        		.uleb128 0xc
 3751 02fd 49        		.uleb128 0x49
 3752 02fe 13        		.uleb128 0x13
 3753 02ff 11        		.uleb128 0x11
 3754 0300 01        		.uleb128 0x1
 3755 0301 12        		.uleb128 0x12
 3756 0302 01        		.uleb128 0x1
 3757 0303 40        		.uleb128 0x40
 3758 0304 06        		.uleb128 0x6
 3759 0305 9742      		.uleb128 0x2117
 3760 0307 0C        		.uleb128 0xc
 3761 0308 01        		.uleb128 0x1
 3762 0309 13        		.uleb128 0x13
 3763 030a 00        		.byte	0
 3764 030b 00        		.byte	0
 3765 030c 38        		.uleb128 0x38
 3766 030d 05        		.uleb128 0x5
 3767 030e 00        		.byte	0
 3768 030f 03        		.uleb128 0x3
 3769 0310 0E        		.uleb128 0xe
 3770 0311 3A        		.uleb128 0x3a
 3771 0312 0B        		.uleb128 0xb
 3772 0313 3B        		.uleb128 0x3b
 3773 0314 05        		.uleb128 0x5
 3774 0315 49        		.uleb128 0x49
 3775 0316 13        		.uleb128 0x13
 3776 0317 02        		.uleb128 0x2
 3777 0318 06        		.uleb128 0x6
 3778 0319 00        		.byte	0
 3779 031a 00        		.byte	0
 3780 031b 39        		.uleb128 0x39
 3781 031c 34        		.uleb128 0x34
 3782 031d 00        		.byte	0
 3783 031e 03        		.uleb128 0x3
 3784 031f 0E        		.uleb128 0xe
 3785 0320 3A        		.uleb128 0x3a
 3786 0321 0B        		.uleb128 0xb
 3787 0322 3B        		.uleb128 0x3b
 3788 0323 05        		.uleb128 0x5
 3789 0324 49        		.uleb128 0x49
 3790 0325 13        		.uleb128 0x13
 3791 0326 1C        		.uleb128 0x1c
 3792 0327 0B        		.uleb128 0xb
 3793 0328 00        		.byte	0
 3794 0329 00        		.byte	0
 3795 032a 3A        		.uleb128 0x3a
 3796 032b 34        		.uleb128 0x34
 3797 032c 00        		.byte	0
 3798 032d 03        		.uleb128 0x3
 3799 032e 0E        		.uleb128 0xe
 3800 032f 3A        		.uleb128 0x3a
 3801 0330 0B        		.uleb128 0xb
 3802 0331 3B        		.uleb128 0x3b
 3803 0332 05        		.uleb128 0x5
 3804 0333 49        		.uleb128 0x49
 3805 0334 13        		.uleb128 0x13
 3806 0335 02        		.uleb128 0x2
 3807 0336 06        		.uleb128 0x6
 3808 0337 00        		.byte	0
 3809 0338 00        		.byte	0
 3810 0339 3B        		.uleb128 0x3b
 3811 033a 34        		.uleb128 0x34
 3812 033b 00        		.byte	0
 3813 033c 03        		.uleb128 0x3
 3814 033d 0E        		.uleb128 0xe
 3815 033e 3A        		.uleb128 0x3a
 3816 033f 0B        		.uleb128 0xb
 3817 0340 3B        		.uleb128 0x3b
 3818 0341 05        		.uleb128 0x5
 3819 0342 49        		.uleb128 0x49
 3820 0343 13        		.uleb128 0x13
 3821 0344 02        		.uleb128 0x2
 3822 0345 0A        		.uleb128 0xa
 3823 0346 00        		.byte	0
 3824 0347 00        		.byte	0
 3825 0348 3C        		.uleb128 0x3c
 3826 0349 34        		.uleb128 0x34
 3827 034a 00        		.byte	0
 3828 034b 03        		.uleb128 0x3
 3829 034c 08        		.uleb128 0x8
 3830 034d 3A        		.uleb128 0x3a
 3831 034e 0B        		.uleb128 0xb
 3832 034f 3B        		.uleb128 0x3b
 3833 0350 05        		.uleb128 0x5
 3834 0351 49        		.uleb128 0x49
 3835 0352 13        		.uleb128 0x13
 3836 0353 02        		.uleb128 0x2
 3837 0354 0A        		.uleb128 0xa
 3838 0355 00        		.byte	0
 3839 0356 00        		.byte	0
 3840 0357 3D        		.uleb128 0x3d
 3841 0358 34        		.uleb128 0x34
 3842 0359 00        		.byte	0
 3843 035a 03        		.uleb128 0x3
 3844 035b 08        		.uleb128 0x8
 3845 035c 3A        		.uleb128 0x3a
 3846 035d 0B        		.uleb128 0xb
 3847 035e 3B        		.uleb128 0x3b
 3848 035f 05        		.uleb128 0x5
 3849 0360 49        		.uleb128 0x49
 3850 0361 13        		.uleb128 0x13
 3851 0362 02        		.uleb128 0x2
 3852 0363 06        		.uleb128 0x6
 3853 0364 00        		.byte	0
 3854 0365 00        		.byte	0
 3855 0366 3E        		.uleb128 0x3e
 3856 0367 2E        		.uleb128 0x2e
 3857 0368 00        		.byte	0
 3858 0369 03        		.uleb128 0x3
 3859 036a 0E        		.uleb128 0xe
 3860 036b 3A        		.uleb128 0x3a
 3861 036c 0B        		.uleb128 0xb
 3862 036d 3B        		.uleb128 0x3b
 3863 036e 0B        		.uleb128 0xb
 3864 036f 27        		.uleb128 0x27
 3865 0370 0C        		.uleb128 0xc
 3866 0371 20        		.uleb128 0x20
 3867 0372 0B        		.uleb128 0xb
 3868 0373 00        		.byte	0
 3869 0374 00        		.byte	0
 3870 0375 3F        		.uleb128 0x3f
 3871 0376 2E        		.uleb128 0x2e
 3872 0377 01        		.byte	0x1
 3873 0378 3F        		.uleb128 0x3f
 3874 0379 0C        		.uleb128 0xc
 3875 037a 03        		.uleb128 0x3
 3876 037b 0E        		.uleb128 0xe
 3877 037c 3A        		.uleb128 0x3a
 3878 037d 0B        		.uleb128 0xb
 3879 037e 3B        		.uleb128 0x3b
 3880 037f 05        		.uleb128 0x5
 3881 0380 27        		.uleb128 0x27
 3882 0381 0C        		.uleb128 0xc
 3883 0382 49        		.uleb128 0x49
 3884 0383 13        		.uleb128 0x13
 3885 0384 8701      		.uleb128 0x87
 3886 0386 0C        		.uleb128 0xc
 3887 0387 11        		.uleb128 0x11
 3888 0388 01        		.uleb128 0x1
 3889 0389 12        		.uleb128 0x12
 3890 038a 01        		.uleb128 0x1
 3891 038b 40        		.uleb128 0x40
 3892 038c 06        		.uleb128 0x6
 3893 038d 9642      		.uleb128 0x2116
 3894 038f 0C        		.uleb128 0xc
 3895 0390 01        		.uleb128 0x1
 3896 0391 13        		.uleb128 0x13
 3897 0392 00        		.byte	0
 3898 0393 00        		.byte	0
 3899 0394 40        		.uleb128 0x40
 3900 0395 34        		.uleb128 0x34
 3901 0396 00        		.byte	0
 3902 0397 03        		.uleb128 0x3
 3903 0398 08        		.uleb128 0x8
 3904 0399 3A        		.uleb128 0x3a
 3905 039a 0B        		.uleb128 0xb
 3906 039b 3B        		.uleb128 0x3b
 3907 039c 05        		.uleb128 0x5
 3908 039d 49        		.uleb128 0x49
 3909 039e 13        		.uleb128 0x13
 3910 039f 1C        		.uleb128 0x1c
 3911 03a0 0D        		.uleb128 0xd
 3912 03a1 00        		.byte	0
 3913 03a2 00        		.byte	0
 3914 03a3 41        		.uleb128 0x41
 3915 03a4 1D        		.uleb128 0x1d
 3916 03a5 00        		.byte	0
 3917 03a6 31        		.uleb128 0x31
 3918 03a7 13        		.uleb128 0x13
 3919 03a8 11        		.uleb128 0x11
 3920 03a9 01        		.uleb128 0x1
 3921 03aa 12        		.uleb128 0x12
 3922 03ab 01        		.uleb128 0x1
 3923 03ac 58        		.uleb128 0x58
 3924 03ad 0B        		.uleb128 0xb
 3925 03ae 59        		.uleb128 0x59
 3926 03af 05        		.uleb128 0x5
 3927 03b0 00        		.byte	0
 3928 03b1 00        		.byte	0
 3929 03b2 42        		.uleb128 0x42
 3930 03b3 1D        		.uleb128 0x1d
 3931 03b4 01        		.byte	0x1
 3932 03b5 31        		.uleb128 0x31
 3933 03b6 13        		.uleb128 0x13
 3934 03b7 11        		.uleb128 0x11
 3935 03b8 01        		.uleb128 0x1
 3936 03b9 12        		.uleb128 0x12
 3937 03ba 01        		.uleb128 0x1
 3938 03bb 58        		.uleb128 0x58
 3939 03bc 0B        		.uleb128 0xb
 3940 03bd 59        		.uleb128 0x59
 3941 03be 05        		.uleb128 0x5
 3942 03bf 01        		.uleb128 0x1
 3943 03c0 13        		.uleb128 0x13
 3944 03c1 00        		.byte	0
 3945 03c2 00        		.byte	0
 3946 03c3 43        		.uleb128 0x43
 3947 03c4 05        		.uleb128 0x5
 3948 03c5 00        		.byte	0
 3949 03c6 31        		.uleb128 0x31
 3950 03c7 13        		.uleb128 0x13
 3951 03c8 02        		.uleb128 0x2
 3952 03c9 06        		.uleb128 0x6
 3953 03ca 00        		.byte	0
 3954 03cb 00        		.byte	0
 3955 03cc 44        		.uleb128 0x44
 3956 03cd 0B        		.uleb128 0xb
 3957 03ce 01        		.byte	0x1
 3958 03cf 55        		.uleb128 0x55
 3959 03d0 06        		.uleb128 0x6
 3960 03d1 01        		.uleb128 0x1
 3961 03d2 13        		.uleb128 0x13
 3962 03d3 00        		.byte	0
 3963 03d4 00        		.byte	0
 3964 03d5 45        		.uleb128 0x45
 3965 03d6 8982 01   		.uleb128 0x4109
 3966 03d9 00        		.byte	0
 3967 03da 11        		.uleb128 0x11
 3968 03db 01        		.uleb128 0x1
 3969 03dc 9342      		.uleb128 0x2113
 3970 03de 0A        		.uleb128 0xa
 3971 03df 00        		.byte	0
 3972 03e0 00        		.byte	0
 3973 03e1 46        		.uleb128 0x46
 3974 03e2 0B        		.uleb128 0xb
 3975 03e3 01        		.byte	0x1
 3976 03e4 11        		.uleb128 0x11
 3977 03e5 01        		.uleb128 0x1
 3978 03e6 12        		.uleb128 0x12
 3979 03e7 01        		.uleb128 0x1
 3980 03e8 01        		.uleb128 0x1
 3981 03e9 13        		.uleb128 0x13
 3982 03ea 00        		.byte	0
 3983 03eb 00        		.byte	0
 3984 03ec 47        		.uleb128 0x47
 3985 03ed 34        		.uleb128 0x34
 3986 03ee 00        		.byte	0
 3987 03ef 31        		.uleb128 0x31
 3988 03f0 13        		.uleb128 0x13
 3989 03f1 02        		.uleb128 0x2
 3990 03f2 06        		.uleb128 0x6
 3991 03f3 00        		.byte	0
 3992 03f4 00        		.byte	0
 3993 03f5 48        		.uleb128 0x48
 3994 03f6 8982 01   		.uleb128 0x4109
 3995 03f9 00        		.byte	0
 3996 03fa 11        		.uleb128 0x11
 3997 03fb 01        		.uleb128 0x1
 3998 03fc 31        		.uleb128 0x31
 3999 03fd 13        		.uleb128 0x13
 4000 03fe 00        		.byte	0
 4001 03ff 00        		.byte	0
 4002 0400 49        		.uleb128 0x49
 4003 0401 15        		.uleb128 0x15
 4004 0402 00        		.byte	0
 4005 0403 27        		.uleb128 0x27
 4006 0404 0C        		.uleb128 0xc
 4007 0405 00        		.byte	0
 4008 0406 00        		.byte	0
 4009 0407 4A        		.uleb128 0x4a
 4010 0408 21        		.uleb128 0x21
 4011 0409 00        		.byte	0
 4012 040a 00        		.byte	0
 4013 040b 00        		.byte	0
 4014 040c 4B        		.uleb128 0x4b
 4015 040d 34        		.uleb128 0x34
 4016 040e 00        		.byte	0
 4017 040f 03        		.uleb128 0x3
 4018 0410 0E        		.uleb128 0xe
 4019 0411 3A        		.uleb128 0x3a
 4020 0412 0B        		.uleb128 0xb
 4021 0413 3B        		.uleb128 0x3b
 4022 0414 05        		.uleb128 0x5
 4023 0415 49        		.uleb128 0x49
 4024 0416 13        		.uleb128 0x13
 4025 0417 3F        		.uleb128 0x3f
 4026 0418 0C        		.uleb128 0xc
 4027 0419 3C        		.uleb128 0x3c
 4028 041a 0C        		.uleb128 0xc
 4029 041b 00        		.byte	0
 4030 041c 00        		.byte	0
 4031 041d 4C        		.uleb128 0x4c
 4032 041e 34        		.uleb128 0x34
 4033 041f 00        		.byte	0
 4034 0420 03        		.uleb128 0x3
 4035 0421 0E        		.uleb128 0xe
 4036 0422 3A        		.uleb128 0x3a
 4037 0423 0B        		.uleb128 0xb
 4038 0424 3B        		.uleb128 0x3b
 4039 0425 0B        		.uleb128 0xb
 4040 0426 49        		.uleb128 0x49
 4041 0427 13        		.uleb128 0x13
 4042 0428 3F        		.uleb128 0x3f
 4043 0429 0C        		.uleb128 0xc
 4044 042a 02        		.uleb128 0x2
 4045 042b 0A        		.uleb128 0xa
 4046 042c 00        		.byte	0
 4047 042d 00        		.byte	0
 4048 042e 4D        		.uleb128 0x4d
 4049 042f 34        		.uleb128 0x34
 4050 0430 00        		.byte	0
 4051 0431 03        		.uleb128 0x3
 4052 0432 0E        		.uleb128 0xe
 4053 0433 3A        		.uleb128 0x3a
 4054 0434 0B        		.uleb128 0xb
 4055 0435 3B        		.uleb128 0x3b
 4056 0436 0B        		.uleb128 0xb
 4057 0437 49        		.uleb128 0x49
 4058 0438 13        		.uleb128 0x13
 4059 0439 3F        		.uleb128 0x3f
 4060 043a 0C        		.uleb128 0xc
 4061 043b 3C        		.uleb128 0x3c
 4062 043c 0C        		.uleb128 0xc
 4063 043d 00        		.byte	0
 4064 043e 00        		.byte	0
 4065 043f 4E        		.uleb128 0x4e
 4066 0440 34        		.uleb128 0x34
 4067 0441 00        		.byte	0
 4068 0442 03        		.uleb128 0x3
 4069 0443 0E        		.uleb128 0xe
 4070 0444 3A        		.uleb128 0x3a
 4071 0445 0B        		.uleb128 0xb
 4072 0446 3B        		.uleb128 0x3b
 4073 0447 05        		.uleb128 0x5
 4074 0448 49        		.uleb128 0x49
 4075 0449 13        		.uleb128 0x13
 4076 044a 3F        		.uleb128 0x3f
 4077 044b 0C        		.uleb128 0xc
 4078 044c 02        		.uleb128 0x2
 4079 044d 0A        		.uleb128 0xa
 4080 044e 00        		.byte	0
 4081 044f 00        		.byte	0
 4082 0450 4F        		.uleb128 0x4f
 4083 0451 2E        		.uleb128 0x2e
 4084 0452 00        		.byte	0
 4085 0453 3F        		.uleb128 0x3f
 4086 0454 0C        		.uleb128 0xc
 4087 0455 3C        		.uleb128 0x3c
 4088 0456 0C        		.uleb128 0xc
 4089 0457 8740      		.uleb128 0x2007
 4090 0459 0E        		.uleb128 0xe
 4091 045a 03        		.uleb128 0x3
 4092 045b 0E        		.uleb128 0xe
 4093 045c 3A        		.uleb128 0x3a
 4094 045d 0B        		.uleb128 0xb
 4095 045e 3B        		.uleb128 0x3b
 4096 045f 05        		.uleb128 0x5
 4097 0460 00        		.byte	0
 4098 0461 00        		.byte	0
 4099 0462 50        		.uleb128 0x50
 4100 0463 2E        		.uleb128 0x2e
 4101 0464 00        		.byte	0
 4102 0465 3F        		.uleb128 0x3f
 4103 0466 0C        		.uleb128 0xc
 4104 0467 3C        		.uleb128 0x3c
 4105 0468 0C        		.uleb128 0xc
 4106 0469 8740      		.uleb128 0x2007
 4107 046b 0E        		.uleb128 0xe
 4108 046c 03        		.uleb128 0x3
 4109 046d 0E        		.uleb128 0xe
 4110 046e 3A        		.uleb128 0x3a
 4111 046f 0B        		.uleb128 0xb
 4112 0470 3B        		.uleb128 0x3b
 4113 0471 0B        		.uleb128 0xb
 4114 0472 00        		.byte	0
 4115 0473 00        		.byte	0
 4116 0474 00        		.byte	0
 4117               		.section	.debug_loc,"",@progbits
 4118               	.Ldebug_loc0:
 4119               	.LLST0:
 4120 0000 0000 0000 		.long	.LFB21
 4121 0004 0000 0000 		.long	.LCFI0
 4122 0008 0300      		.word	0x3
 4123 000a 92        		.byte	0x92
 4124 000b 20        		.uleb128 0x20
 4125 000c 02        		.sleb128 2
 4126 000d 0000 0000 		.long	.LCFI0
 4127 0011 0000 0000 		.long	.LFE21
 4128 0015 0300      		.word	0x3
 4129 0017 92        		.byte	0x92
 4130 0018 20        		.uleb128 0x20
 4131 0019 12        		.sleb128 18
 4132 001a 0000 0000 		.long	0
 4133 001e 0000 0000 		.long	0
 4134               	.LLST1:
 4135 0022 0000 0000 		.long	.LVL0
 4136 0026 0000 0000 		.long	.LVL3-1
 4137 002a 0600      		.word	0x6
 4138 002c 68        		.byte	0x68
 4139 002d 93        		.byte	0x93
 4140 002e 01        		.uleb128 0x1
 4141 002f 69        		.byte	0x69
 4142 0030 93        		.byte	0x93
 4143 0031 01        		.uleb128 0x1
 4144 0032 0000 0000 		.long	.LVL3-1
 4145 0036 0000 0000 		.long	.LVL9
 4146 003a 0600      		.word	0x6
 4147 003c 6C        		.byte	0x6c
 4148 003d 93        		.byte	0x93
 4149 003e 01        		.uleb128 0x1
 4150 003f 6D        		.byte	0x6d
 4151 0040 93        		.byte	0x93
 4152 0041 01        		.uleb128 0x1
 4153 0042 0000 0000 		.long	.LVL9
 4154 0046 0000 0000 		.long	.LFE21
 4155 004a 0400      		.word	0x4
 4156 004c F3        		.byte	0xf3
 4157 004d 01        		.uleb128 0x1
 4158 004e 68        		.byte	0x68
 4159 004f 9F        		.byte	0x9f
 4160 0050 0000 0000 		.long	0
 4161 0054 0000 0000 		.long	0
 4162               	.LLST2:
 4163 0058 0000 0000 		.long	.LVL0
 4164 005c 0000 0000 		.long	.LVL2
 4165 0060 0600      		.word	0x6
 4166 0062 66        		.byte	0x66
 4167 0063 93        		.byte	0x93
 4168 0064 01        		.uleb128 0x1
 4169 0065 67        		.byte	0x67
 4170 0066 93        		.byte	0x93
 4171 0067 01        		.uleb128 0x1
 4172 0068 0000 0000 		.long	.LVL2
 4173 006c 0000 0000 		.long	.LFE21
 4174 0070 0600      		.word	0x6
 4175 0072 60        		.byte	0x60
 4176 0073 93        		.byte	0x93
 4177 0074 01        		.uleb128 0x1
 4178 0075 61        		.byte	0x61
 4179 0076 93        		.byte	0x93
 4180 0077 01        		.uleb128 0x1
 4181 0078 0000 0000 		.long	0
 4182 007c 0000 0000 		.long	0
 4183               	.LLST3:
 4184 0080 0000 0000 		.long	.LFB22
 4185 0084 0000 0000 		.long	.LCFI1
 4186 0088 0300      		.word	0x3
 4187 008a 92        		.byte	0x92
 4188 008b 20        		.uleb128 0x20
 4189 008c 02        		.sleb128 2
 4190 008d 0000 0000 		.long	.LCFI1
 4191 0091 0000 0000 		.long	.LCFI2
 4192 0095 0300      		.word	0x3
 4193 0097 92        		.byte	0x92
 4194 0098 20        		.uleb128 0x20
 4195 0099 03        		.sleb128 3
 4196 009a 0000 0000 		.long	.LCFI2
 4197 009e 0000 0000 		.long	.LFE22
 4198 00a2 0300      		.word	0x3
 4199 00a4 92        		.byte	0x92
 4200 00a5 20        		.uleb128 0x20
 4201 00a6 04        		.sleb128 4
 4202 00a7 0000 0000 		.long	0
 4203 00ab 0000 0000 		.long	0
 4204               	.LLST4:
 4205 00af 0000 0000 		.long	.LVL10
 4206 00b3 0000 0000 		.long	.LVL11
 4207 00b7 0600      		.word	0x6
 4208 00b9 68        		.byte	0x68
 4209 00ba 93        		.byte	0x93
 4210 00bb 01        		.uleb128 0x1
 4211 00bc 69        		.byte	0x69
 4212 00bd 93        		.byte	0x93
 4213 00be 01        		.uleb128 0x1
 4214 00bf 0000 0000 		.long	.LVL11
 4215 00c3 0000 0000 		.long	.LFE23
 4216 00c7 0400      		.word	0x4
 4217 00c9 F3        		.byte	0xf3
 4218 00ca 01        		.uleb128 0x1
 4219 00cb 68        		.byte	0x68
 4220 00cc 9F        		.byte	0x9f
 4221 00cd 0000 0000 		.long	0
 4222 00d1 0000 0000 		.long	0
 4223               	.LLST5:
 4224 00d5 0000 0000 		.long	.LVL10
 4225 00d9 0000 0000 		.long	.LVL11
 4226 00dd 0600      		.word	0x6
 4227 00df 68        		.byte	0x68
 4228 00e0 93        		.byte	0x93
 4229 00e1 01        		.uleb128 0x1
 4230 00e2 69        		.byte	0x69
 4231 00e3 93        		.byte	0x93
 4232 00e4 01        		.uleb128 0x1
 4233 00e5 0000 0000 		.long	.LVL11
 4234 00e9 0000 0000 		.long	.LFE23
 4235 00ed 0400      		.word	0x4
 4236 00ef F3        		.byte	0xf3
 4237 00f0 01        		.uleb128 0x1
 4238 00f1 68        		.byte	0x68
 4239 00f2 9F        		.byte	0x9f
 4240 00f3 0000 0000 		.long	0
 4241 00f7 0000 0000 		.long	0
 4242               	.LLST6:
 4243 00fb 0000 0000 		.long	.LVL12
 4244 00ff 0000 0000 		.long	.LVL13
 4245 0103 0100      		.word	0x1
 4246 0105 68        		.byte	0x68
 4247 0106 0000 0000 		.long	.LVL13
 4248 010a 0000 0000 		.long	.LFE24
 4249 010e 0400      		.word	0x4
 4250 0110 F3        		.byte	0xf3
 4251 0111 01        		.uleb128 0x1
 4252 0112 68        		.byte	0x68
 4253 0113 9F        		.byte	0x9f
 4254 0114 0000 0000 		.long	0
 4255 0118 0000 0000 		.long	0
 4256               	.LLST7:
 4257 011c 0000 0000 		.long	.LVL14
 4258 0120 0000 0000 		.long	.LVL15
 4259 0124 0100      		.word	0x1
 4260 0126 68        		.byte	0x68
 4261 0127 0000 0000 		.long	.LVL15
 4262 012b 0000 0000 		.long	.LFE25
 4263 012f 0400      		.word	0x4
 4264 0131 F3        		.byte	0xf3
 4265 0132 01        		.uleb128 0x1
 4266 0133 68        		.byte	0x68
 4267 0134 9F        		.byte	0x9f
 4268 0135 0000 0000 		.long	0
 4269 0139 0000 0000 		.long	0
 4270               	.LLST8:
 4271 013d 0000 0000 		.long	.LVL15
 4272 0141 0000 0000 		.long	.LVL16
 4273 0145 0100      		.word	0x1
 4274 0147 68        		.byte	0x68
 4275 0148 0000 0000 		.long	.LVL16
 4276 014c 0000 0000 		.long	.LVL18
 4277 0150 0100      		.word	0x1
 4278 0152 69        		.byte	0x69
 4279 0153 0000 0000 		.long	.LVL18
 4280 0157 0000 0000 		.long	.LFE25
 4281 015b 0900      		.word	0x9
 4282 015d F3        		.byte	0xf3
 4283 015e 01        		.uleb128 0x1
 4284 015f 68        		.byte	0x68
 4285 0160 32        		.byte	0x32
 4286 0161 25        		.byte	0x25
 4287 0162 09        		.byte	0x9
 4288 0163 F8        		.byte	0xf8
 4289 0164 1A        		.byte	0x1a
 4290 0165 9F        		.byte	0x9f
 4291 0166 0000 0000 		.long	0
 4292 016a 0000 0000 		.long	0
 4293               	.LLST9:
 4294 016e 0000 0000 		.long	.LVL16
 4295 0172 0000 0000 		.long	.LVL17
 4296 0176 0200      		.word	0x2
 4297 0178 30        		.byte	0x30
 4298 0179 9F        		.byte	0x9f
 4299 017a 0000 0000 		.long	.LVL17
 4300 017e 0000 0000 		.long	.LVL18
 4301 0182 0A00      		.word	0xa
 4302 0184 89        		.byte	0x89
 4303 0185 00        		.sleb128 0
 4304 0186 31        		.byte	0x31
 4305 0187 25        		.byte	0x25
 4306 0188 89        		.byte	0x89
 4307 0189 00        		.sleb128 0
 4308 018a 32        		.byte	0x32
 4309 018b 24        		.byte	0x24
 4310 018c 21        		.byte	0x21
 4311 018d 9F        		.byte	0x9f
 4312 018e 0000 0000 		.long	.LVL18
 4313 0192 0000 0000 		.long	.LVL19
 4314 0196 1600      		.word	0x16
 4315 0198 F3        		.byte	0xf3
 4316 0199 01        		.uleb128 0x1
 4317 019a 68        		.byte	0x68
 4318 019b 32        		.byte	0x32
 4319 019c 25        		.byte	0x25
 4320 019d 09        		.byte	0x9
 4321 019e F8        		.byte	0xf8
 4322 019f 1A        		.byte	0x1a
 4323 01a0 31        		.byte	0x31
 4324 01a1 25        		.byte	0x25
 4325 01a2 F3        		.byte	0xf3
 4326 01a3 01        		.uleb128 0x1
 4327 01a4 68        		.byte	0x68
 4328 01a5 32        		.byte	0x32
 4329 01a6 25        		.byte	0x25
 4330 01a7 09        		.byte	0x9
 4331 01a8 F8        		.byte	0xf8
 4332 01a9 1A        		.byte	0x1a
 4333 01aa 32        		.byte	0x32
 4334 01ab 24        		.byte	0x24
 4335 01ac 21        		.byte	0x21
 4336 01ad 9F        		.byte	0x9f
 4337 01ae 0000 0000 		.long	.LVL19
 4338 01b2 0000 0000 		.long	.LFE25
 4339 01b6 0100      		.word	0x1
 4340 01b8 68        		.byte	0x68
 4341 01b9 0000 0000 		.long	0
 4342 01bd 0000 0000 		.long	0
 4343               	.LLST10:
 4344 01c1 0000 0000 		.long	.LVL20
 4345 01c5 0000 0000 		.long	.LVL21
 4346 01c9 0100      		.word	0x1
 4347 01cb 68        		.byte	0x68
 4348 01cc 0000 0000 		.long	.LVL21
 4349 01d0 0000 0000 		.long	.LFE26
 4350 01d4 0400      		.word	0x4
 4351 01d6 F3        		.byte	0xf3
 4352 01d7 01        		.uleb128 0x1
 4353 01d8 68        		.byte	0x68
 4354 01d9 9F        		.byte	0x9f
 4355 01da 0000 0000 		.long	0
 4356 01de 0000 0000 		.long	0
 4357               	.LLST11:
 4358 01e2 0000 0000 		.long	.LVL20
 4359 01e6 0000 0000 		.long	.LVL25
 4360 01ea 0100      		.word	0x1
 4361 01ec 68        		.byte	0x68
 4362 01ed 0000 0000 		.long	.LVL25
 4363 01f1 0000 0000 		.long	.LFE26
 4364 01f5 0700      		.word	0x7
 4365 01f7 F3        		.byte	0xf3
 4366 01f8 01        		.uleb128 0x1
 4367 01f9 68        		.byte	0x68
 4368 01fa 09        		.byte	0x9
 4369 01fb FC        		.byte	0xfc
 4370 01fc 1A        		.byte	0x1a
 4371 01fd 9F        		.byte	0x9f
 4372 01fe 0000 0000 		.long	0
 4373 0202 0000 0000 		.long	0
 4374               	.LLST12:
 4375 0206 0000 0000 		.long	.LVL21
 4376 020a 0000 0000 		.long	.LVL22
 4377 020e 0200      		.word	0x2
 4378 0210 30        		.byte	0x30
 4379 0211 9F        		.byte	0x9f
 4380 0212 0000 0000 		.long	.LVL22
 4381 0216 0000 0000 		.long	.LVL23
 4382 021a 0500      		.word	0x5
 4383 021c 82        		.byte	0x82
 4384 021d 00        		.sleb128 0
 4385 021e 34        		.byte	0x34
 4386 021f 24        		.byte	0x24
 4387 0220 9F        		.byte	0x9f
 4388 0221 0000 0000 		.long	.LVL23
 4389 0225 0000 0000 		.long	.LVL24
 4390 0229 0100      		.word	0x1
 4391 022b 64        		.byte	0x64
 4392 022c 0000 0000 		.long	.LVL24
 4393 0230 0000 0000 		.long	.LVL25
 4394 0234 0600      		.word	0x6
 4395 0236 88        		.byte	0x88
 4396 0237 00        		.sleb128 0
 4397 0238 82        		.byte	0x82
 4398 0239 00        		.sleb128 0
 4399 023a 21        		.byte	0x21
 4400 023b 9F        		.byte	0x9f
 4401 023c 0000 0000 		.long	.LVL25
 4402 0240 0000 0000 		.long	.LFE26
 4403 0244 0100      		.word	0x1
 4404 0246 68        		.byte	0x68
 4405 0247 0000 0000 		.long	0
 4406 024b 0000 0000 		.long	0
 4407               	.LLST13:
 4408 024f 0000 0000 		.long	.LVL26
 4409 0253 0000 0000 		.long	.LVL27
 4410 0257 0100      		.word	0x1
 4411 0259 68        		.byte	0x68
 4412 025a 0000 0000 		.long	.LVL27
 4413 025e 0000 0000 		.long	.LFE27
 4414 0262 0400      		.word	0x4
 4415 0264 F3        		.byte	0xf3
 4416 0265 01        		.uleb128 0x1
 4417 0266 68        		.byte	0x68
 4418 0267 9F        		.byte	0x9f
 4419 0268 0000 0000 		.long	0
 4420 026c 0000 0000 		.long	0
 4421               	.LLST14:
 4422 0270 0000 0000 		.long	.LVL26
 4423 0274 0000 0000 		.long	.LVL27
 4424 0278 0200      		.word	0x2
 4425 027a 30        		.byte	0x30
 4426 027b 9F        		.byte	0x9f
 4427 027c 0000 0000 		.long	.LVL27
 4428 0280 0000 0000 		.long	.LVL29
 4429 0284 0500      		.word	0x5
 4430 0286 38        		.byte	0x38
 4431 0287 89        		.byte	0x89
 4432 0288 00        		.sleb128 0
 4433 0289 1C        		.byte	0x1c
 4434 028a 9F        		.byte	0x9f
 4435 028b 0000 0000 		.long	.LVL29
 4436 028f 0000 0000 		.long	.LVL30
 4437 0293 0500      		.word	0x5
 4438 0295 39        		.byte	0x39
 4439 0296 89        		.byte	0x89
 4440 0297 00        		.sleb128 0
 4441 0298 1C        		.byte	0x1c
 4442 0299 9F        		.byte	0x9f
 4443 029a 0000 0000 		.long	.LVL30
 4444 029e 0000 0000 		.long	.LFE27
 4445 02a2 0500      		.word	0x5
 4446 02a4 38        		.byte	0x38
 4447 02a5 89        		.byte	0x89
 4448 02a6 00        		.sleb128 0
 4449 02a7 1C        		.byte	0x1c
 4450 02a8 9F        		.byte	0x9f
 4451 02a9 0000 0000 		.long	0
 4452 02ad 0000 0000 		.long	0
 4453               	.LLST15:
 4454 02b1 0000 0000 		.long	.LFB28
 4455 02b5 0000 0000 		.long	.LCFI3
 4456 02b9 0300      		.word	0x3
 4457 02bb 92        		.byte	0x92
 4458 02bc 20        		.uleb128 0x20
 4459 02bd 02        		.sleb128 2
 4460 02be 0000 0000 		.long	.LCFI3
 4461 02c2 0000 0000 		.long	.LCFI4
 4462 02c6 0300      		.word	0x3
 4463 02c8 92        		.byte	0x92
 4464 02c9 20        		.uleb128 0x20
 4465 02ca 03        		.sleb128 3
 4466 02cb 0000 0000 		.long	.LCFI4
 4467 02cf 0000 0000 		.long	.LCFI5
 4468 02d3 0300      		.word	0x3
 4469 02d5 92        		.byte	0x92
 4470 02d6 20        		.uleb128 0x20
 4471 02d7 04        		.sleb128 4
 4472 02d8 0000 0000 		.long	.LCFI5
 4473 02dc 0000 0000 		.long	.LFE28
 4474 02e0 0300      		.word	0x3
 4475 02e2 92        		.byte	0x92
 4476 02e3 20        		.uleb128 0x20
 4477 02e4 05        		.sleb128 5
 4478 02e5 0000 0000 		.long	0
 4479 02e9 0000 0000 		.long	0
 4480               	.LLST16:
 4481 02ed 0000 0000 		.long	.LVL31
 4482 02f1 0000 0000 		.long	.LVL33
 4483 02f5 0100      		.word	0x1
 4484 02f7 68        		.byte	0x68
 4485 02f8 0000 0000 		.long	.LVL33
 4486 02fc 0000 0000 		.long	.LVL40
 4487 0300 0100      		.word	0x1
 4488 0302 61        		.byte	0x61
 4489 0303 0000 0000 		.long	.LVL40
 4490 0307 0000 0000 		.long	.LFE28
 4491 030b 0400      		.word	0x4
 4492 030d F3        		.byte	0xf3
 4493 030e 01        		.uleb128 0x1
 4494 030f 68        		.byte	0x68
 4495 0310 9F        		.byte	0x9f
 4496 0311 0000 0000 		.long	0
 4497 0315 0000 0000 		.long	0
 4498               	.LLST17:
 4499 0319 0000 0000 		.long	.LVL31
 4500 031d 0000 0000 		.long	.LVL34-1
 4501 0321 0100      		.word	0x1
 4502 0323 66        		.byte	0x66
 4503 0324 0000 0000 		.long	.LVL34-1
 4504 0328 0000 0000 		.long	.LVL38
 4505 032c 0100      		.word	0x1
 4506 032e 6D        		.byte	0x6d
 4507 032f 0000 0000 		.long	.LVL38
 4508 0333 0000 0000 		.long	.LFE28
 4509 0337 0400      		.word	0x4
 4510 0339 F3        		.byte	0xf3
 4511 033a 01        		.uleb128 0x1
 4512 033b 66        		.byte	0x66
 4513 033c 9F        		.byte	0x9f
 4514 033d 0000 0000 		.long	0
 4515 0341 0000 0000 		.long	0
 4516               	.LLST18:
 4517 0345 0000 0000 		.long	.LVL31
 4518 0349 0000 0000 		.long	.LVL34-1
 4519 034d 0100      		.word	0x1
 4520 034f 64        		.byte	0x64
 4521 0350 0000 0000 		.long	.LVL34-1
 4522 0354 0000 0000 		.long	.LVL39
 4523 0358 0100      		.word	0x1
 4524 035a 6C        		.byte	0x6c
 4525 035b 0000 0000 		.long	.LVL39
 4526 035f 0000 0000 		.long	.LFE28
 4527 0363 0400      		.word	0x4
 4528 0365 F3        		.byte	0xf3
 4529 0366 01        		.uleb128 0x1
 4530 0367 64        		.byte	0x64
 4531 0368 9F        		.byte	0x9f
 4532 0369 0000 0000 		.long	0
 4533 036d 0000 0000 		.long	0
 4534               	.LLST19:
 4535 0371 0000 0000 		.long	.LFB29
 4536 0375 0000 0000 		.long	.LCFI6
 4537 0379 0300      		.word	0x3
 4538 037b 92        		.byte	0x92
 4539 037c 20        		.uleb128 0x20
 4540 037d 02        		.sleb128 2
 4541 037e 0000 0000 		.long	.LCFI6
 4542 0382 0000 0000 		.long	.LFE29
 4543 0386 0200      		.word	0x2
 4544 0388 8C        		.byte	0x8c
 4545 0389 17        		.sleb128 23
 4546 038a 0000 0000 		.long	0
 4547 038e 0000 0000 		.long	0
 4548               	.LLST20:
 4549 0392 0000 0000 		.long	.LVL41
 4550 0396 0000 0000 		.long	.LVL43
 4551 039a 0600      		.word	0x6
 4552 039c 68        		.byte	0x68
 4553 039d 93        		.byte	0x93
 4554 039e 01        		.uleb128 0x1
 4555 039f 69        		.byte	0x69
 4556 03a0 93        		.byte	0x93
 4557 03a1 01        		.uleb128 0x1
 4558 03a2 0000 0000 		.long	.LVL43
 4559 03a6 0000 0000 		.long	.LVL50
 4560 03aa 0600      		.word	0x6
 4561 03ac 62        		.byte	0x62
 4562 03ad 93        		.byte	0x93
 4563 03ae 01        		.uleb128 0x1
 4564 03af 63        		.byte	0x63
 4565 03b0 93        		.byte	0x93
 4566 03b1 01        		.uleb128 0x1
 4567 03b2 0000 0000 		.long	.LVL50
 4568 03b6 0000 0000 		.long	.LFE29
 4569 03ba 0400      		.word	0x4
 4570 03bc F3        		.byte	0xf3
 4571 03bd 01        		.uleb128 0x1
 4572 03be 68        		.byte	0x68
 4573 03bf 9F        		.byte	0x9f
 4574 03c0 0000 0000 		.long	0
 4575 03c4 0000 0000 		.long	0
 4576               	.LLST21:
 4577 03c8 0000 0000 		.long	.LVL44
 4578 03cc 0000 0000 		.long	.LVL45
 4579 03d0 0600      		.word	0x6
 4580 03d2 68        		.byte	0x68
 4581 03d3 93        		.byte	0x93
 4582 03d4 01        		.uleb128 0x1
 4583 03d5 69        		.byte	0x69
 4584 03d6 93        		.byte	0x93
 4585 03d7 01        		.uleb128 0x1
 4586 03d8 0000 0000 		.long	.LVL46
 4587 03dc 0000 0000 		.long	.LVL47
 4588 03e0 0600      		.word	0x6
 4589 03e2 68        		.byte	0x68
 4590 03e3 93        		.byte	0x93
 4591 03e4 01        		.uleb128 0x1
 4592 03e5 69        		.byte	0x69
 4593 03e6 93        		.byte	0x93
 4594 03e7 01        		.uleb128 0x1
 4595 03e8 0000 0000 		.long	.LVL47
 4596 03ec 0000 0000 		.long	.LVL51
 4597 03f0 0600      		.word	0x6
 4598 03f2 6E        		.byte	0x6e
 4599 03f3 93        		.byte	0x93
 4600 03f4 01        		.uleb128 0x1
 4601 03f5 6F        		.byte	0x6f
 4602 03f6 93        		.byte	0x93
 4603 03f7 01        		.uleb128 0x1
 4604 03f8 0000 0000 		.long	0
 4605 03fc 0000 0000 		.long	0
 4606               	.LLST22:
 4607 0400 0000 0000 		.long	.LVL52
 4608 0404 0000 0000 		.long	.LVL53
 4609 0408 0200      		.word	0x2
 4610 040a 30        		.byte	0x30
 4611 040b 9F        		.byte	0x9f
 4612 040c 0000 0000 		.long	0
 4613 0410 0000 0000 		.long	0
 4614               	.LLST23:
 4615 0414 0000 0000 		.long	.LVL54
 4616 0418 0000 0000 		.long	.LVL55
 4617 041c 0500      		.word	0x5
 4618 041e 88        		.byte	0x88
 4619 041f 00        		.sleb128 0
 4620 0420 36        		.byte	0x36
 4621 0421 25        		.byte	0x25
 4622 0422 9F        		.byte	0x9f
 4623 0423 0000 0000 		.long	.LVL55
 4624 0427 0000 0000 		.long	.LFE29
 4625 042b 0600      		.word	0x6
 4626 042d 68        		.byte	0x68
 4627 042e 93        		.byte	0x93
 4628 042f 01        		.uleb128 0x1
 4629 0430 69        		.byte	0x69
 4630 0431 93        		.byte	0x93
 4631 0432 01        		.uleb128 0x1
 4632 0433 0000 0000 		.long	0
 4633 0437 0000 0000 		.long	0
 4634               	.LLST24:
 4635 043b 0000 0000 		.long	.LFB32
 4636 043f 0000 0000 		.long	.LCFI7
 4637 0443 0300      		.word	0x3
 4638 0445 92        		.byte	0x92
 4639 0446 20        		.uleb128 0x20
 4640 0447 02        		.sleb128 2
 4641 0448 0000 0000 		.long	.LCFI7
 4642 044c 0000 0000 		.long	.LFE32
 4643 0450 0200      		.word	0x2
 4644 0452 8C        		.byte	0x8c
 4645 0453 1C        		.sleb128 28
 4646 0454 0000 0000 		.long	0
 4647 0458 0000 0000 		.long	0
 4648               	.LLST25:
 4649 045c 0000 0000 		.long	.LVL56
 4650 0460 0000 0000 		.long	.LVL66
 4651 0464 0200      		.word	0x2
 4652 0466 30        		.byte	0x30
 4653 0467 9F        		.byte	0x9f
 4654 0468 0000 0000 		.long	.LVL66
 4655 046c 0000 0000 		.long	.LVL72
 4656 0470 0100      		.word	0x1
 4657 0472 61        		.byte	0x61
 4658 0473 0000 0000 		.long	.LVL73
 4659 0477 0000 0000 		.long	.LFE32
 4660 047b 0100      		.word	0x1
 4661 047d 61        		.byte	0x61
 4662 047e 0000 0000 		.long	0
 4663 0482 0000 0000 		.long	0
 4664               	.LLST26:
 4665 0486 0000 0000 		.long	.LVL56
 4666 048a 0000 0000 		.long	.LVL66
 4667 048e 0200      		.word	0x2
 4668 0490 30        		.byte	0x30
 4669 0491 9F        		.byte	0x9f
 4670 0492 0000 0000 		.long	.LVL74
 4671 0496 0000 0000 		.long	.LFE32
 4672 049a 0100      		.word	0x1
 4673 049c 61        		.byte	0x61
 4674 049d 0000 0000 		.long	0
 4675 04a1 0000 0000 		.long	0
 4676               	.LLST27:
 4677 04a5 0000 0000 		.long	.LVL57
 4678 04a9 0000 0000 		.long	.LVL65
 4679 04ad 0200      		.word	0x2
 4680 04af 30        		.byte	0x30
 4681 04b0 9F        		.byte	0x9f
 4682 04b1 0000 0000 		.long	0
 4683 04b5 0000 0000 		.long	0
 4684               	.LLST28:
 4685 04b9 0000 0000 		.long	.LVL57
 4686 04bd 0000 0000 		.long	.LVL66
 4687 04c1 0200      		.word	0x2
 4688 04c3 30        		.byte	0x30
 4689 04c4 9F        		.byte	0x9f
 4690 04c5 0000 0000 		.long	.LVL66
 4691 04c9 0000 0000 		.long	.LVL67
 4692 04cd 0100      		.word	0x1
 4693 04cf 68        		.byte	0x68
 4694 04d0 0000 0000 		.long	.LVL68
 4695 04d4 0000 0000 		.long	.LFE32
 4696 04d8 0100      		.word	0x1
 4697 04da 57        		.byte	0x57
 4698 04db 0000 0000 		.long	0
 4699 04df 0000 0000 		.long	0
 4700               	.LLST29:
 4701 04e3 0000 0000 		.long	.LVL57
 4702 04e7 0000 0000 		.long	.LVL66
 4703 04eb 0200      		.word	0x2
 4704 04ed 30        		.byte	0x30
 4705 04ee 9F        		.byte	0x9f
 4706 04ef 0000 0000 		.long	.LVL66
 4707 04f3 0000 0000 		.long	.LFE32
 4708 04f7 0100      		.word	0x1
 4709 04f9 60        		.byte	0x60
 4710 04fa 0000 0000 		.long	0
 4711 04fe 0000 0000 		.long	0
 4712               	.LLST30:
 4713 0502 0000 0000 		.long	.LVL59
 4714 0506 0000 0000 		.long	.LVL60
 4715 050a 0200      		.word	0x2
 4716 050c 37        		.byte	0x37
 4717 050d 9F        		.byte	0x9f
 4718 050e 0000 0000 		.long	0
 4719 0512 0000 0000 		.long	0
 4720               	.LLST31:
 4721 0516 0000 0000 		.long	.LVL79
 4722 051a 0000 0000 		.long	.LVL97
 4723 051e 0400      		.word	0x4
 4724 0520 0A        		.byte	0xa
 4725 0521 0401      		.word	0x104
 4726 0523 9F        		.byte	0x9f
 4727 0524 0000 0000 		.long	0
 4728 0528 0000 0000 		.long	0
 4729               	.LLST32:
 4730 052c 0000 0000 		.long	.LVL79
 4731 0530 0000 0000 		.long	.LVL97
 4732 0534 0300      		.word	0x3
 4733 0536 08        		.byte	0x8
 4734 0537 64        		.byte	0x64
 4735 0538 9F        		.byte	0x9f
 4736 0539 0000 0000 		.long	0
 4737 053d 0000 0000 		.long	0
 4738               	.LLST35:
 4739 0541 0000 0000 		.long	.LVL79
 4740 0545 0000 0000 		.long	.LVL97
 4741 0549 0400      		.word	0x4
 4742 054b 0A        		.byte	0xa
 4743 054c 2C01      		.word	0x12c
 4744 054e 9F        		.byte	0x9f
 4745 054f 0000 0000 		.long	0
 4746 0553 0000 0000 		.long	0
 4747               	.LLST36:
 4748 0557 0000 0000 		.long	.LVL84
 4749 055b 0000 0000 		.long	.LVL85
 4750 055f 0200      		.word	0x2
 4751 0561 30        		.byte	0x30
 4752 0562 9F        		.byte	0x9f
 4753 0563 0000 0000 		.long	.LVL85
 4754 0567 0000 0000 		.long	.LVL94
 4755 056b 0600      		.word	0x6
 4756 056d 5E        		.byte	0x5e
 4757 056e 93        		.byte	0x93
 4758 056f 01        		.uleb128 0x1
 4759 0570 5F        		.byte	0x5f
 4760 0571 93        		.byte	0x93
 4761 0572 01        		.uleb128 0x1
 4762 0573 0000 0000 		.long	0
 4763 0577 0000 0000 		.long	0
 4764               	.LLST37:
 4765 057b 0000 0000 		.long	.LVL87
 4766 057f 0000 0000 		.long	.LVL88
 4767 0583 0500      		.word	0x5
 4768 0585 66        		.byte	0x66
 4769 0586 93        		.byte	0x93
 4770 0587 01        		.uleb128 0x1
 4771 0588 93        		.byte	0x93
 4772 0589 02        		.uleb128 0x2
 4773 058a 0000 0000 		.long	.LVL88
 4774 058e 0000 0000 		.long	.LVL89
 4775 0592 0900      		.word	0x9
 4776 0594 69        		.byte	0x69
 4777 0595 93        		.byte	0x93
 4778 0596 01        		.uleb128 0x1
 4779 0597 66        		.byte	0x66
 4780 0598 93        		.byte	0x93
 4781 0599 01        		.uleb128 0x1
 4782 059a 68        		.byte	0x68
 4783 059b 93        		.byte	0x93
 4784 059c 01        		.uleb128 0x1
 4785 059d 0000 0000 		.long	.LVL90
 4786 05a1 0000 0000 		.long	.LVL91
 4787 05a5 0900      		.word	0x9
 4788 05a7 69        		.byte	0x69
 4789 05a8 93        		.byte	0x93
 4790 05a9 01        		.uleb128 0x1
 4791 05aa 66        		.byte	0x66
 4792 05ab 93        		.byte	0x93
 4793 05ac 01        		.uleb128 0x1
 4794 05ad 68        		.byte	0x68
 4795 05ae 93        		.byte	0x93
 4796 05af 01        		.uleb128 0x1
 4797 05b0 0000 0000 		.long	.LVL91
 4798 05b4 0000 0000 		.long	.LVL92-1
 4799 05b8 0900      		.word	0x9
 4800 05ba 69        		.byte	0x69
 4801 05bb 93        		.byte	0x93
 4802 05bc 01        		.uleb128 0x1
 4803 05bd 66        		.byte	0x66
 4804 05be 93        		.byte	0x93
 4805 05bf 01        		.uleb128 0x1
 4806 05c0 64        		.byte	0x64
 4807 05c1 93        		.byte	0x93
 4808 05c2 01        		.uleb128 0x1
 4809 05c3 0000 0000 		.long	0
 4810 05c7 0000 0000 		.long	0
 4811               	.LLST38:
 4812 05cb 0000 0000 		.long	.LVL94
 4813 05cf 0000 0000 		.long	.LVL95
 4814 05d3 0600      		.word	0x6
 4815 05d5 08        		.byte	0x8
 4816 05d6 96        		.byte	0x96
 4817 05d7 7E        		.byte	0x7e
 4818 05d8 00        		.sleb128 0
 4819 05d9 1C        		.byte	0x1c
 4820 05da 9F        		.byte	0x9f
 4821 05db 0000 0000 		.long	.LVL95
 4822 05df 0000 0000 		.long	.LVL96
 4823 05e3 0600      		.word	0x6
 4824 05e5 08        		.byte	0x8
 4825 05e6 97        		.byte	0x97
 4826 05e7 7E        		.byte	0x7e
 4827 05e8 00        		.sleb128 0
 4828 05e9 1C        		.byte	0x1c
 4829 05ea 9F        		.byte	0x9f
 4830 05eb 0000 0000 		.long	.LVL96
 4831 05ef 0000 0000 		.long	.LVL97
 4832 05f3 0600      		.word	0x6
 4833 05f5 08        		.byte	0x8
 4834 05f6 96        		.byte	0x96
 4835 05f7 7E        		.byte	0x7e
 4836 05f8 00        		.sleb128 0
 4837 05f9 1C        		.byte	0x1c
 4838 05fa 9F        		.byte	0x9f
 4839 05fb 0000 0000 		.long	0
 4840 05ff 0000 0000 		.long	0
 4841               	.LLST39:
 4842 0603 0000 0000 		.long	.LVL99
 4843 0607 0000 0000 		.long	.LVL100-1
 4844 060b 0600      		.word	0x6
 4845 060d 66        		.byte	0x66
 4846 060e 93        		.byte	0x93
 4847 060f 01        		.uleb128 0x1
 4848 0610 67        		.byte	0x67
 4849 0611 93        		.byte	0x93
 4850 0612 01        		.uleb128 0x1
 4851 0613 0000 0000 		.long	0
 4852 0617 0000 0000 		.long	0
 4853               		.section	.debug_aranges,"",@progbits
 4854 0000 2400 0000 		.long	0x24
 4855 0004 0200      		.word	0x2
 4856 0006 0000 0000 		.long	.Ldebug_info0
 4857 000a 04        		.byte	0x4
 4858 000b 00        		.byte	0
 4859 000c 0000      		.word	0
 4860 000e 0000      		.word	0
 4861 0010 0000 0000 		.long	.Ltext0
 4862 0014 4002 0000 		.long	.Letext0-.Ltext0
 4863 0018 0000 0000 		.long	.LFB32
 4864 001c 4602 0000 		.long	.LFE32-.LFB32
 4865 0020 0000 0000 		.long	0
 4866 0024 0000 0000 		.long	0
 4867               		.section	.debug_ranges,"",@progbits
 4868               	.Ldebug_ranges0:
 4869 0000 0000 0000 		.long	.LBB36
 4870 0004 0000 0000 		.long	.LBE36
 4871 0008 0000 0000 		.long	.LBB44
 4872 000c 0000 0000 		.long	.LBE44
 4873 0010 0000 0000 		.long	0
 4874 0014 0000 0000 		.long	0
 4875 0018 0000 0000 		.long	.Ltext0
 4876 001c 0000 0000 		.long	.Letext0
 4877 0020 0000 0000 		.long	.LFB32
 4878 0024 0000 0000 		.long	.LFE32
 4879 0028 0000 0000 		.long	0
 4880 002c 0000 0000 		.long	0
 4881               		.section	.debug_line,"",@progbits
 4882               	.Ldebug_line0:
 4883 0000 8104 0000 		.section	.debug_str,"MS",@progbits,1
 4883      0200 F100 
 4883      0000 0201 
 4883      FB0E 0A00 
 4883      0101 0101 
 4884               	.LASF31:
 4885 0000 7573 6257 		.string	"usbWord_t"
 4885      6F72 645F 
 4885      7400 
 4886               	.LASF99:
 4887 000a 6C65 645F 		.string	"led_sensor_nvalues"
 4887      7365 6E73 
 4887      6F72 5F6E 
 4887      7661 6C75 
 4887      6573 00
 4888               	.LASF32:
 4889 001d 7573 6252 		.string	"usbRequest"
 4889      6571 7565 
 4889      7374 00
 4890               	.LASF73:
 4891 0028 756E 7061 		.string	"unpack_color_red"
 4891      636B 5F63 
 4891      6F6C 6F72 
 4891      5F72 6564 
 4891      00
 4892               	.LASF100:
 4893 0039 6C65 645F 		.string	"led_sensor_nsample"
 4893      7365 6E73 
 4893      6F72 5F6E 
 4893      7361 6D70 
 4893      6C65 00
 4894               	.LASF68:
 4895 004c 6969 7232 		.string	"iir2"
 4895      00
 4896               	.LASF94:
 4897 0051 6C65 645F 		.string	"led_sensor_last_random"
 4897      7365 6E73 
 4897      6F72 5F6C 
 4897      6173 745F 
 4897      7261 6E64 
 4898               	.LASF45:
 4899 0068 5449 4D45 		.string	"TIMER_DATA_CHANGE"
 4899      525F 4441 
 4899      5441 5F43 
 4899      4841 4E47 
 4899      4500 
 4900               	.LASF12:
 4901 007a 756E 6765 		.string	"unget"
 4901      7400 
 4902               	.LASF123:
 4903 0080 474E 5520 		.string	"GNU C99 5.4.0 -mn-flash=1 -mno-skip-bug -mcall-prologues -mmcu=avr25 -gdwarf-2 -Os -std=c
 4903      4339 3920 
 4903      352E 342E 
 4903      3020 2D6D 
 4903      6E2D 666C 
 4904               	.LASF95:
 4905 011d 6C65 645F 		.string	"led_sensor_delta_time"
 4905      7365 6E73 
 4905      6F72 5F64 
 4905      656C 7461 
 4905      5F74 696D 
 4906               	.LASF11:
 4907 0133 6C6F 6E67 		.string	"long long unsigned int"
 4907      206C 6F6E 
 4907      6720 756E 
 4907      7369 676E 
 4907      6564 2069 
 4908               	.LASF102:
 4909 014a 6C65 645F 		.string	"led_sensor_weigthed_sum"
 4909      7365 6E73 
 4909      6F72 5F77 
 4909      6569 6774 
 4909      6865 645F 
 4910               	.LASF119:
 4911 0162 5469 6D65 		.string	"Timers_DecreaseAll"
 4911      7273 5F44 
 4911      6563 7265 
 4911      6173 6541 
 4911      6C6C 00
 4912               	.LASF38:
 4913 0175 7573 6252 		.string	"usbRequest_t"
 4913      6571 7565 
 4913      7374 5F74 
 4913      00
 4914               	.LASF82:
 4915 0182 6765 7452 		.string	"getRainbowColor"
 4915      6169 6E62 
 4915      6F77 436F 
 4915      6C6F 7200 
 4916               	.LASF88:
 4917 0192 7765 6967 		.string	"weight_to"
 4917      6874 5F74 
 4917      6F00 
 4918               	.LASF4:
 4919 019c 696E 7431 		.string	"int16_t"
 4919      365F 7400 
 4920               	.LASF10:
 4921 01a4 6C6F 6E67 		.string	"long long int"
 4921      206C 6F6E 
 4921      6720 696E 
 4921      7400 
 4922               	.LASF2:
 4923 01b2 7369 676E 		.string	"signed char"
 4923      6564 2063 
 4923      6861 7200 
 4924               	.LASF48:
 4925 01be 7137 5F38 		.string	"q7_8_t"
 4925      5F74 00
 4926               	.LASF118:
 4927 01c5 5469 6D65 		.string	"Timer_Set"
 4927      725F 5365 
 4927      7400 
 4928               	.LASF78:
 4929 01cf 7465 6D70 		.string	"temp"
 4929      00
 4930               	.LASF8:
 4931 01d4 6C6F 6E67 		.string	"long int"
 4931      2069 6E74 
 4931      00
 4932               	.LASF120:
 4933 01dd 7573 6250 		.string	"usbPoll"
 4933      6F6C 6C00 
 4934               	.LASF15:
 4935 01e5 7564 6174 		.string	"udata"
 4935      6100 
 4936               	.LASF64:
 4937 01eb 746F 7461 		.string	"totalLeds"
 4937      6C4C 6564 
 4937      7300 
 4938               	.LASF35:
 4939 01f5 7756 616C 		.string	"wValue"
 4939      7565 00
 4940               	.LASF5:
 4941 01fc 7569 6E74 		.string	"uint16_t"
 4941      3136 5F74 
 4941      00
 4942               	.LASF86:
 4943 0205 696E 7465 		.string	"interpolate_index"
 4943      7270 6F6C 
 4943      6174 655F 
 4943      696E 6465 
 4943      7800 
 4944               	.LASF125:
 4945 0217 2F68 6F6D 		.string	"/home/birkler/src/birkler/avrtinybootloader/app_hid"
 4945      652F 6269 
 4945      726B 6C65 
 4945      722F 7372 
 4945      632F 6269 
 4946               	.LASF129:
 4947 024b 6D61 696E 		.string	"main"
 4947      00
 4948               	.LASF87:
 4949 0250 7765 6967 		.string	"weight_from"
 4949      6874 5F66 
 4949      726F 6D00 
 4950               	.LASF85:
 4951 025c 7261 696E 		.string	"rainbow_index"
 4951      626F 775F 
 4951      696E 6465 
 4951      7800 
 4952               	.LASF19:
 4953 026a 7265 706F 		.string	"report_id_keyboard"
 4953      7274 5F69 
 4953      645F 6B65 
 4953      7962 6F61 
 4953      7264 00
 4954               	.LASF47:
 4955 027d 5449 4D45 		.string	"TIMER_LAST"
 4955      525F 4C41 
 4955      5354 00
 4956               	.LASF30:
 4957 0288 6279 7465 		.string	"bytes"
 4957      7300 
 4958               	.LASF116:
 4959 028e 7072 696E 		.string	"printf_P"
 4959      7466 5F50 
 4959      00
 4960               	.LASF96:
 4961 0297 6C65 645F 		.string	"led_sensor_trig_time"
 4961      7365 6E73 
 4961      6F72 5F74 
 4961      7269 675F 
 4961      7469 6D65 
 4962               	.LASF26:
 4963 02ac 7573 6254 		.string	"usbTxStatus"
 4963      7853 7461 
 4963      7475 7300 
 4964               	.LASF33:
 4965 02b8 626D 5265 		.string	"bmRequestType"
 4965      7175 6573 
 4965      7454 7970 
 4965      6500 
 4966               	.LASF28:
 4967 02c6 7573 6254 		.string	"usbTxStatus_t"
 4967      7853 7461 
 4967      7475 735F 
 4967      7400 
 4968               	.LASF40:
 4969 02d4 5449 4D45 		.string	"TIMER_LED_SENSOR_BLINK"
 4969      525F 4C45 
 4969      445F 5345 
 4969      4E53 4F52 
 4969      5F42 4C49 
 4970               	.LASF67:
 4971 02eb 7661 6C75 		.string	"value"
 4971      6500 
 4972               	.LASF6:
 4973 02f1 756E 7369 		.string	"unsigned int"
 4973      676E 6564 
 4973      2069 6E74 
 4973      00
 4974               	.LASF104:
 4975 02fe 7374 6469 		.string	"stdin_get_string_buffer"
 4975      6E5F 6765 
 4975      745F 7374 
 4975      7269 6E67 
 4975      5F62 7566 
 4976               	.LASF42:
 4977 0316 5449 4D45 		.string	"TIMER_SEND_KEY_UP"
 4977      525F 5345 
 4977      4E44 5F4B 
 4977      4559 5F55 
 4977      5000 
 4978               	.LASF9:
 4979 0328 6C6F 6E67 		.string	"long unsigned int"
 4979      2075 6E73 
 4979      6967 6E65 
 4979      6420 696E 
 4979      7400 
 4980               	.LASF39:
 4981 033a 5449 4D45 		.string	"TIMER_LED_BLINK"
 4981      525F 4C45 
 4981      445F 424C 
 4981      494E 4B00 
 4982               	.LASF90:
 4983 034a 6275 7474 		.string	"buttonPressed"
 4983      6F6E 5072 
 4983      6573 7365 
 4983      6400 
 4984               	.LASF18:
 4985 0358 7265 706F 		.string	"report_id_mouse"
 4985      7274 5F69 
 4985      645F 6D6F 
 4985      7573 6500 
 4986               	.LASF72:
 4987 0368 6461 7461 		.string	"data"
 4987      00
 4988               	.LASF14:
 4989 036d 7369 7A65 		.string	"size"
 4989      00
 4990               	.LASF126:
 4991 0372 7573 6257 		.string	"usbWord"
 4991      6F72 6400 
 4992               	.LASF124:
 4993 037a 6D61 696E 		.string	"main.c"
 4993      2E63 00
 4994               	.LASF70:
 4995 0381 6669 6C74 		.string	"filter_iir2"
 4995      6572 5F69 
 4995      6972 3200 
 4996               	.LASF75:
 4997 038d 756E 7061 		.string	"unpack_color_green"
 4997      636B 5F63 
 4997      6F6C 6F72 
 4997      5F67 7265 
 4997      656E 00
 4998               	.LASF44:
 4999 03a0 5449 4D45 		.string	"TIMER_MEASURE_POT"
 4999      525F 4D45 
 4999      4153 5552 
 4999      455F 504F 
 4999      5400 
 5000               	.LASF89:
 5001 03b2 6672 6F6D 		.string	"from"
 5001      00
 5002               	.LASF74:
 5003 03b7 6261 7365 		.string	"base"
 5003      00
 5004               	.LASF93:
 5005 03bc 6669 6C74 		.string	"filtered_val"
 5005      6572 6564 
 5005      5F76 616C 
 5005      00
 5006               	.LASF54:
 5007 03c9 6275 664C 		.string	"bufLen"
 5007      656E 00
 5008               	.LASF111:
 5009 03d0 7573 6244 		.string	"usbDescriptorHidReport"
 5009      6573 6372 
 5009      6970 746F 
 5009      7248 6964 
 5009      5265 706F 
 5010               	.LASF24:
 5011 03e7 7369 7A65 		.string	"sizetype"
 5011      7479 7065 
 5011      00
 5012               	.LASF110:
 5013 03f0 5F5F 696F 		.string	"__iob"
 5013      6200 
 5014               	.LASF61:
 5015 03f6 636F 6C6F 		.string	"color_"
 5015      725F 00
 5016               	.LASF66:
 5017 03fd 7764 745F 		.string	"wdt_enable"
 5017      656E 6162 
 5017      6C65 00
 5018               	.LASF115:
 5019 0408 7261 696E 		.string	"rainbow_colors"
 5019      626F 775F 
 5019      636F 6C6F 
 5019      7273 00
 5020               	.LASF107:
 5021 0417 6361 7074 		.string	"capture_diff_max"
 5021      7572 655F 
 5021      6469 6666 
 5021      5F6D 6178 
 5021      00
 5022               	.LASF114:
 5023 0428 7573 625F 		.string	"usb_in_stream"
 5023      696E 5F73 
 5023      7472 6561 
 5023      6D00 
 5024               	.LASF98:
 5025 0436 6C65 645F 		.string	"led_sensor_values"
 5025      7365 6E73 
 5025      6F72 5F76 
 5025      616C 7565 
 5025      7300 
 5026               	.LASF59:
 5027 0448 434F 4C4F 		.string	"COLORS"
 5027      5253 00
 5028               	.LASF60:
 5029 044f 5247 4238 		.string	"RGB888_"
 5029      3838 5F00 
 5030               	.LASF65:
 5031 0457 7365 7443 		.string	"setColorOneLed"
 5031      6F6C 6F72 
 5031      4F6E 654C 
 5031      6564 00
 5032               	.LASF55:
 5033 0466 7374 6469 		.string	"stdin_get_string_t"
 5033      6E5F 6765 
 5033      745F 7374 
 5033      7269 6E67 
 5033      5F74 00
 5034               	.LASF50:
 5035 0479 7265 706F 		.string	"report_id"
 5035      7274 5F69 
 5035      6400 
 5036               	.LASF91:
 5037 0483 6C65 645F 		.string	"led_sensor_blink"
 5037      7365 6E73 
 5037      6F72 5F62 
 5037      6C69 6E6B 
 5037      00
 5038               	.LASF109:
 5039 0494 7265 706F 		.string	"reportBuffer"
 5039      7274 4275 
 5039      6666 6572 
 5039      00
 5040               	.LASF43:
 5041 04a1 5449 4D45 		.string	"TIMER_SEND_KEY_DOWN"
 5041      525F 5345 
 5041      4E44 5F4B 
 5041      4559 5F44 
 5041      4F57 4E00 
 5042               	.LASF108:
 5043 04b5 6361 7074 		.string	"captured"
 5043      7572 6564 
 5043      00
 5044               	.LASF7:
 5045 04be 696E 7433 		.string	"int32_t"
 5045      325F 7400 
 5046               	.LASF3:
 5047 04c6 756E 7369 		.string	"unsigned char"
 5047      676E 6564 
 5047      2063 6861 
 5047      7200 
 5048               	.LASF25:
 5049 04d4 5F5F 6669 		.string	"__file"
 5049      6C65 00
 5050               	.LASF62:
 5051 04db 5247 4238 		.string	"RGB888"
 5051      3838 00
 5052               	.LASF20:
 5053 04e2 7265 706F 		.string	"report_id_buf_out_setreadpos"
 5053      7274 5F69 
 5053      645F 6275 
 5053      665F 6F75 
 5053      745F 7365 
 5054               	.LASF36:
 5055 04ff 7749 6E64 		.string	"wIndex"
 5055      6578 00
 5056               	.LASF122:
 5057 0506 5469 6D65 		.string	"Timer_HasExpired"
 5057      725F 4861 
 5057      7345 7870 
 5057      6972 6564 
 5057      00
 5058               	.LASF34:
 5059 0517 6252 6571 		.string	"bRequest"
 5059      7565 7374 
 5059      00
 5060               	.LASF17:
 5061 0520 4649 4C45 		.string	"FILE"
 5061      00
 5062               	.LASF71:
 5063 0525 7573 6246 		.string	"usbFunctionSetup2"
 5063      756E 6374 
 5063      696F 6E53 
 5063      6574 7570 
 5063      3200 
 5064               	.LASF49:
 5065 0537 6669 6C74 		.string	"filter_iir2_t"
 5065      6572 5F69 
 5065      6972 325F 
 5065      7400 
 5066               	.LASF101:
 5067 0545 6C65 645F 		.string	"led_sensor_weigthed_sum_data"
 5067      7365 6E73 
 5067      6F72 5F77 
 5067      6569 6774 
 5067      6865 645F 
 5068               	.LASF57:
 5069 0562 4752 4545 		.string	"GREEN"
 5069      4E00 
 5070               	.LASF77:
 5071 0568 6279 7465 		.string	"byteval"
 5071      7661 6C00 
 5072               	.LASF22:
 5073 0570 7265 706F 		.string	"report_id_buf_out_data"
 5073      7274 5F69 
 5073      645F 6275 
 5073      665F 6F75 
 5073      745F 6461 
 5074               	.LASF103:
 5075 0587 6C65 645F 		.string	"led_sensor_weigthed_sum_idx"
 5075      7365 6E73 
 5075      6F72 5F77 
 5075      6569 6774 
 5075      6865 645F 
 5076               	.LASF16:
 5077 05a3 6368 6172 		.string	"char"
 5077      00
 5078               	.LASF117:
 5079 05a8 7573 6249 		.string	"usbInit"
 5079      6E69 7400 
 5080               	.LASF21:
 5081 05b0 7265 706F 		.string	"report_id_buf_in_getwritepos"
 5081      7274 5F69 
 5081      645F 6275 
 5081      665F 696E 
 5081      5F67 6574 
 5082               	.LASF56:
 5083 05cd 7267 6233 		.string	"rgb332_t"
 5083      3332 5F74 
 5083      00
 5084               	.LASF51:
 5085 05d6 6275 7474 		.string	"buttonMask"
 5085      6F6E 4D61 
 5085      736B 00
 5086               	.LASF83:
 5087 05e1 696E 6465 		.string	"index"
 5087      7800 
 5088               	.LASF58:
 5089 05e7 424C 5545 		.string	"BLUE"
 5089      00
 5090               	.LASF41:
 5091 05ec 5449 4D45 		.string	"TIMER_LED_BUTTON_BLINK"
 5091      525F 4C45 
 5091      445F 4255 
 5091      5454 4F4E 
 5091      5F42 4C49 
 5092               	.LASF27:
 5093 0603 6275 6666 		.string	"buffer"
 5093      6572 00
 5094               	.LASF112:
 5095 060a 7573 6254 		.string	"usbTxStatus1"
 5095      7853 7461 
 5095      7475 7331 
 5095      00
 5096               	.LASF63:
 5097 0617 6E75 6D4C 		.string	"numLedOn"
 5097      6564 4F6E 
 5097      00
 5098               	.LASF29:
 5099 0620 776F 7264 		.string	"word"
 5099      00
 5100               	.LASF92:
 5101 0625 6669 6C74 		.string	"filter_iir2_data"
 5101      6572 5F69 
 5101      6972 325F 
 5101      6461 7461 
 5101      00
 5102               	.LASF128:
 5103 0636 6861 7264 		.string	"hardwareInit"
 5103      7761 7265 
 5103      496E 6974 
 5103      00
 5104               	.LASF53:
 5105 0643 7265 706F 		.string	"report_t"
 5105      7274 5F74 
 5105      00
 5106               	.LASF23:
 5107 064c 7265 706F 		.string	"report_id_buf_in_data"
 5107      7274 5F69 
 5107      645F 6275 
 5107      665F 696E 
 5107      5F64 6174 
 5108               	.LASF81:
 5109 0662 7374 6172 		.string	"start_byte"
 5109      745F 6279 
 5109      7465 00
 5110               	.LASF69:
 5111 066d 696E 765F 		.string	"inv_b0"
 5111      6230 00
 5112               	.LASF106:
 5113 0674 6361 7074 		.string	"capture_diff"
 5113      7572 655F 
 5113      6469 6666 
 5113      00
 5114               	.LASF0:
 5115 0681 696E 7438 		.string	"int8_t"
 5115      5F74 00
 5116               	.LASF79:
 5117 0688 7365 6E64 		.string	"send_strip_byte"
 5117      5F73 7472 
 5117      6970 5F62 
 5117      7974 6500 
 5118               	.LASF97:
 5119 0698 6C65 645F 		.string	"led_sensor_prev_time"
 5119      7365 6E73 
 5119      6F72 5F70 
 5119      7265 765F 
 5119      7469 6D65 
 5120               	.LASF80:
 5121 06ad 7365 6E64 		.string	"send_color"
 5121      5F63 6F6C 
 5121      6F72 00
 5122               	.LASF105:
 5123 06b8 7265 7365 		.string	"reset_vec"
 5123      745F 7665 
 5123      6300 
 5124               	.LASF1:
 5125 06c2 7569 6E74 		.string	"uint8_t"
 5125      385F 7400 
 5126               	.LASF13:
 5127 06ca 666C 6167 		.string	"flags"
 5127      7300 
 5128               	.LASF52:
 5129 06d0 6D6F 7573 		.string	"mouse"
 5129      6500 
 5130               	.LASF37:
 5131 06d6 774C 656E 		.string	"wLength"
 5131      6774 6800 
 5132               	.LASF127:
 5133 06de 5F5F 7665 		.string	"__vector_16"
 5133      6374 6F72 
 5133      5F31 3600 
 5134               	.LASF113:
 5135 06ea 7573 625F 		.string	"usb_out_stream"
 5135      6F75 745F 
 5135      7374 7265 
 5135      616D 00
 5136               	.LASF46:
 5137 06f9 5449 4D45 		.string	"TIMER_SELF_TEST"
 5137      525F 5345 
 5137      4C46 5F54 
 5137      4553 5400 
 5138               	.LASF121:
 5139 0709 7573 6253 		.string	"usbSetInterrupt"
 5139      6574 496E 
 5139      7465 7272 
 5139      7570 7400 
 5140               	.LASF84:
 5141 0719 7374 6570 		.string	"steps"
 5141      7300 
 5142               	.LASF76:
 5143 071f 756E 7061 		.string	"unpack_color_blue"
 5143      636B 5F63 
 5143      6F6C 6F72 
 5143      5F62 6C75 
 5143      6500 
 5144               		.ident	"GCC: (GNU) 5.4.0"
 5145               	.global __do_copy_data
 5146               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc1mfGVT.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1mfGVT.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1mfGVT.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1mfGVT.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1mfGVT.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1mfGVT.s:13     .text:0000000000000000 filter_iir2
     /tmp/cc1mfGVT.s:182    .text:00000000000000ee __vector_16
     /tmp/cc1mfGVT.s:215    .text:0000000000000104 usbFunctionSetup2
     /tmp/cc1mfGVT.s:233    .text:0000000000000108 unpack_color_red
     /tmp/cc1mfGVT.s:251    .text:000000000000010c unpack_color_green
     /tmp/cc1mfGVT.s:285    .text:0000000000000120 unpack_color_blue
     /tmp/cc1mfGVT.s:325    .text:0000000000000140 send_strip_byte
     /tmp/cc1mfGVT.s:370    .text:0000000000000158 send_color
     /tmp/cc1mfGVT.s:426    .text:000000000000017c getRainbowColor
     /tmp/cc1mfGVT.s:1111   .data:0000000000000001 rainbow_colors
     /tmp/cc1mfGVT.s:588    .text.startup:0000000000000000 main
     /tmp/cc1mfGVT.s:1105   .progmem.data:000000000000000a __c.2476
     /tmp/cc1mfGVT.s:1099   .progmem.data:0000000000000000 __c.2487
                             .bss:0000000000000000 led_sensor_delta_time.2466
     /tmp/cc1mfGVT.s:1102   .bss:0000000000000002 reportBuffer
     /tmp/cc1mfGVT.s:1094   .data:0000000000000000 led_sensor_nsample.2471
     /tmp/cc1mfGVT.s:1139   .progmem.data:000000000000000e usbDescriptorHidReport
     /tmp/cc1mfGVT.s:1134   .bss:0000000000000004 captured
     /tmp/cc1mfGVT.s:1221   .bss:0000000000000006 capture_diff_max
     /tmp/cc1mfGVT.s:1223   .bss:0000000000000008 capture_diff

UNDEFINED SYMBOLS
__mulsi3
__prologue_saves__
__epilogue_restores__
__divmodhi4
__mulhi3
usb_out_stream
__iob
usb_in_stream
printf_P
usbInit
Timer_Set
Timers_DecreaseAll
usbPoll
usbTxStatus1
usbSetInterrupt
Timer_HasExpired
__do_copy_data
__do_clear_bss
