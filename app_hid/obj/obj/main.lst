   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__mulsi3
  11               	.global	filter_iir2
  12               		.type	filter_iir2, @function
  13               	filter_iir2:
  14               	.LFB21:
  15               		.file 1 "../util/iir_filter.h"
   1:../util/iir_filter.h **** /*
   2:../util/iir_filter.h ****  * iir_filter.h
   3:../util/iir_filter.h ****  *
   4:../util/iir_filter.h ****  *  Created on: Jan 25, 2011
   5:../util/iir_filter.h ****  *      Author: jorgen
   6:../util/iir_filter.h ****  *
   7:../util/iir_filter.h ****  *
   8:../util/iir_filter.h ****  *
   9:../util/iir_filter.h ****  *
  10:../util/iir_filter.h ****  *
  11:../util/iir_filter.h ****  *      http://faculty.cua.edu/regalia/regalia-perso_files/sp-sep-91.pdf
  12:../util/iir_filter.h ****  *
  13:../util/iir_filter.h ****  *      http://www.dsptutor.freeuk.com/IIRFilterDesign/IIRFilterDesign.html
  14:../util/iir_filter.h ****  *
  15:../util/iir_filter.h ****  *      http://ntur.lib.ntu.edu.tw/bitstream/246246/142473/1/63.pdf
  16:../util/iir_filter.h ****  */
  17:../util/iir_filter.h **** 
  18:../util/iir_filter.h **** #ifndef IIR_FILTER_H_
  19:../util/iir_filter.h **** #define IIR_FILTER_H_
  20:../util/iir_filter.h **** 
  21:../util/iir_filter.h **** #include "q7_8_t.h"
  22:../util/iir_filter.h **** #include "q2_13_t.h"
  23:../util/iir_filter.h **** 
  24:../util/iir_filter.h **** typedef struct {
  25:../util/iir_filter.h **** 	q7_8_t y_1;
  26:../util/iir_filter.h **** 	q7_8_t y_2;
  27:../util/iir_filter.h **** 	q7_8_t x_1;
  28:../util/iir_filter.h **** 	q7_8_t x_2;
  29:../util/iir_filter.h **** } filter_iir2_t;
  30:../util/iir_filter.h **** 
  31:../util/iir_filter.h **** 
  32:../util/iir_filter.h **** //Chebyshev IIR filter
  33:../util/iir_filter.h **** //
  34:../util/iir_filter.h **** //Filter type: HP
  35:../util/iir_filter.h **** //Passband: 400 - 4000 Hz
  36:../util/iir_filter.h **** //Passband ripple: 1.0 dB
  37:../util/iir_filter.h **** //Order: 2
  38:../util/iir_filter.h **** //
  39:../util/iir_filter.h **** //Coefficients
  40:../util/iir_filter.h **** //
  41:../util/iir_filter.h **** //a[0] = 0.7550102     	b[0] = 1.0
  42:../util/iir_filter.h **** //a[1] = -1.5100204     	b[1] = -1.655717
  43:../util/iir_filter.h **** //a[2] = 0.7550102     	b[2] = 0.73281693
  44:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_90per_HP(filter_iir2_t* iir2,q2_13_t in)
  45:../util/iir_filter.h **** {
  46:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.7550102);
  47:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(-1.5100204);
  48:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float( 0.7550102);
  49:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
  50:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.655717);
  51:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float(0.73281693);
  52:../util/iir_filter.h **** 
  53:../util/iir_filter.h **** 	q2_13_t res;
  54:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
  55:../util/iir_filter.h **** 			q2_13_mul(a0,in),
  56:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
  57:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
  58:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
  59:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
  60:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
  61:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
  62:../util/iir_filter.h **** 	iir2->y_1 = res;
  63:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
  64:../util/iir_filter.h **** 	iir2->x_1 = in;
  65:../util/iir_filter.h **** 	return res;
  66:../util/iir_filter.h **** }
  67:../util/iir_filter.h **** 
  68:../util/iir_filter.h **** 
  69:../util/iir_filter.h **** 
  70:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_50_BP(filter_iir2_t* iir2,q2_13_t in)
  71:../util/iir_filter.h **** {
  72:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.037804753 );
  73:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.0  );
  74:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(-0.037804753 );
  75:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
  76:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.1792585E-16);
  77:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float( 0.9243905);
  78:../util/iir_filter.h **** 
  79:../util/iir_filter.h **** 	q2_13_t res;
  80:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
  81:../util/iir_filter.h **** 			q2_13_mul(a0,in),
  82:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
  83:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
  84:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
  85:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
  86:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
  87:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
  88:../util/iir_filter.h **** 	iir2->y_1 = res;
  89:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
  90:../util/iir_filter.h **** 	iir2->x_1 = in;
  91:../util/iir_filter.h **** 	return res;
  92:../util/iir_filter.h **** }
  93:../util/iir_filter.h **** 
  94:../util/iir_filter.h **** /*
  95:../util/iir_filter.h **** 
  96:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_2_10_LP(filter_iir2_t* iir2,q2_13_t in)
  97:../util/iir_filter.h **** {
  98:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.0014603166);
  99:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.0029206332 );
 100:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(0.0014603166);
 101:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
 102:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.8890331);
 103:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float( 0.89487433);
 104:../util/iir_filter.h **** 
 105:../util/iir_filter.h **** 	q2_13_t res;
 106:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
 107:../util/iir_filter.h **** 			q2_13_mul(a0,in),
 108:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
 109:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
 110:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
 111:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
 112:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 113:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 114:../util/iir_filter.h **** 	iir2->y_1 = res;
 115:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 116:../util/iir_filter.h **** 	iir2->x_1 = in;
 117:../util/iir_filter.h **** 	return res;
 118:../util/iir_filter.h **** }
 119:../util/iir_filter.h **** */
 120:../util/iir_filter.h **** /*
 121:../util/iir_filter.h **** q2_13_t q2_13_filter_iir2(filter_iir2_t* iir2,q2_13_t in)
 122:../util/iir_filter.h **** {
 123:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.020517392);
 124:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.041034784);
 125:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(0.020517392);
 126:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
 127:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.6185197);
 128:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float(0.71059346);
 129:../util/iir_filter.h **** 
 130:../util/iir_filter.h **** 	q2_13_t res;
 131:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
 132:../util/iir_filter.h **** 			q2_13_mul(a0,in),
 133:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
 134:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
 135:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
 136:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
 137:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 138:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 139:../util/iir_filter.h **** 	iir2->y_1 = res;
 140:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 141:../util/iir_filter.h **** 	iir2->x_1 = in;
 142:../util/iir_filter.h **** 	return res;
 143:../util/iir_filter.h **** }
 144:../util/iir_filter.h **** */
 145:../util/iir_filter.h **** 
 146:../util/iir_filter.h **** q7_8_t filter_iir2(filter_iir2_t* iir2,q7_8_t in)
 147:../util/iir_filter.h **** {
  16               		.loc 1 147 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 A0E0      		ldi r26,0
  20 0002 B0E0      		ldi r27,0
  21 0004 E0E0      		ldi r30,lo8(gs(1f))
  22 0006 F0E0      		ldi r31,hi8(gs(1f))
  23 0008 00C0      		rjmp __prologue_saves__+((18 - 16) * 2)
  24               	1:
  25               	.LCFI0:
  26               		.cfi_offset 4, -2
  27               		.cfi_offset 5, -3
  28               		.cfi_offset 6, -4
  29               		.cfi_offset 7, -5
  30               		.cfi_offset 8, -6
  31               		.cfi_offset 9, -7
  32               		.cfi_offset 10, -8
  33               		.cfi_offset 11, -9
  34               		.cfi_offset 12, -10
  35               		.cfi_offset 13, -11
  36               		.cfi_offset 14, -12
  37               		.cfi_offset 15, -13
  38               		.cfi_offset 16, -14
  39               		.cfi_offset 17, -15
  40               		.cfi_offset 28, -16
  41               		.cfi_offset 29, -17
  42               		.cfi_def_cfa_offset 18
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 16 */
  46               	.L__stack_usage = 16
  47 000a EC01      		movw r28,r24
  48 000c 8B01      		movw r16,r22
  49               	.LVL1:
 148:../util/iir_filter.h **** 	const q7_8_t a0 = q7_8_float(0.020517392);
 149:../util/iir_filter.h **** 	const q7_8_t a1 = q7_8_float(0.041034784);
 150:../util/iir_filter.h **** 	const q7_8_t a2 = q7_8_float(0.020517392);
 151:../util/iir_filter.h **** 	const q7_8_t inv_b0 = q7_8_float(1/1.0);
 152:../util/iir_filter.h **** 	const q7_8_t _b1 = -q7_8_float(-1.6185197);
 153:../util/iir_filter.h **** 	const q7_8_t _b2 = -q7_8_float(0.71059346);
 154:../util/iir_filter.h **** 
 155:../util/iir_filter.h **** 	q7_8_t res;
 156:../util/iir_filter.h **** 	res =  q7_8_mul(inv_b0,q7_8_sum(
  50               		.loc 1 156 0
  51 000e EC80      		ldd r14,Y+4
  52 0010 FD80      		ldd r15,Y+5
  53 0012 C880      		ld r12,Y
  54 0014 D980      		ldd r13,Y+1
  55 0016 072E      		mov __tmp_reg__,r23
  56 0018 000C      		lsl r0
  57 001a 880B      		sbc r24,r24
  58 001c 990B      		sbc r25,r25
  59               	.LVL2:
  60 001e 25E0      		ldi r18,lo8(5)
  61 0020 30E0      		ldi r19,0
  62 0022 40E0      		ldi r20,0
  63 0024 50E0      		ldi r21,0
  64 0026 00D0      		rcall __mulsi3
  65               	.LVL3:
  66 0028 472E      		mov r4,r23
  67 002a 582E      		mov r5,r24
  68 002c 692E      		mov r6,r25
  69 002e 7724      		clr r7
  70 0030 67FC      		sbrc r6,7
  71 0032 7A94      		dec r7
  72 0034 B701      		movw r22,r14
  73 0036 0F2C      		mov __tmp_reg__,r15
  74 0038 000C      		lsl r0
  75 003a 880B      		sbc r24,r24
  76 003c 990B      		sbc r25,r25
  77 003e 2AE0      		ldi r18,lo8(10)
  78 0040 30E0      		ldi r19,0
  79 0042 40E0      		ldi r20,0
  80 0044 50E0      		ldi r21,0
  81 0046 00D0      		rcall __mulsi3
  82               	.LVL4:
  83 0048 BB27      		clr r27
  84 004a 97FD      		sbrc r25,7
  85 004c BA95      		dec r27
  86 004e A92F      		mov r26,r25
  87 0050 982F      		mov r25,r24
  88 0052 872F      		mov r24,r23
  89 0054 3201      		movw r6,r4
  90 0056 680E      		add r6,r24
  91 0058 791E      		adc r7,r25
  92 005a 6E81      		ldd r22,Y+6
  93 005c 7F81      		ldd r23,Y+7
  94 005e 072E      		mov __tmp_reg__,r23
  95 0060 000C      		lsl r0
  96 0062 880B      		sbc r24,r24
  97 0064 990B      		sbc r25,r25
  98 0066 25E0      		ldi r18,lo8(5)
  99 0068 30E0      		ldi r19,0
 100 006a 40E0      		ldi r20,0
 101 006c 50E0      		ldi r21,0
 102 006e 00D0      		rcall __mulsi3
 103               	.LVL5:
 104 0070 BB27      		clr r27
 105 0072 97FD      		sbrc r25,7
 106 0074 BA95      		dec r27
 107 0076 A92F      		mov r26,r25
 108 0078 982F      		mov r25,r24
 109 007a 872F      		mov r24,r23
 110 007c 4301      		movw r8,r6
 111 007e 880E      		add r8,r24
 112 0080 991E      		adc r9,r25
 113 0082 B601      		movw r22,r12
 114 0084 0D2C      		mov __tmp_reg__,r13
 115 0086 000C      		lsl r0
 116 0088 880B      		sbc r24,r24
 117 008a 990B      		sbc r25,r25
 118 008c 2EE9      		ldi r18,lo8(-98)
 119 008e 31E0      		ldi r19,lo8(1)
 120 0090 40E0      		ldi r20,0
 121 0092 50E0      		ldi r21,0
 122 0094 00D0      		rcall __mulsi3
 123               	.LVL6:
 124 0096 BB27      		clr r27
 125 0098 97FD      		sbrc r25,7
 126 009a BA95      		dec r27
 127 009c A92F      		mov r26,r25
 128 009e 982F      		mov r25,r24
 129 00a0 872F      		mov r24,r23
 130 00a2 5401      		movw r10,r8
 131 00a4 A80E      		add r10,r24
 132 00a6 B91E      		adc r11,r25
 133 00a8 6A81      		ldd r22,Y+2
 134 00aa 7B81      		ldd r23,Y+3
 135 00ac 072E      		mov __tmp_reg__,r23
 136 00ae 000C      		lsl r0
 137 00b0 880B      		sbc r24,r24
 138 00b2 990B      		sbc r25,r25
 139 00b4 2BE4      		ldi r18,lo8(75)
 140 00b6 3FEF      		ldi r19,lo8(-1)
 141 00b8 4FEF      		ldi r20,lo8(-1)
 142 00ba 5FEF      		ldi r21,lo8(-1)
 143 00bc 00D0      		rcall __mulsi3
 144               	.LVL7:
 145 00be BB27      		clr r27
 146 00c0 97FD      		sbrc r25,7
 147 00c2 BA95      		dec r27
 148 00c4 A92F      		mov r26,r25
 149 00c6 982F      		mov r25,r24
 150 00c8 872F      		mov r24,r23
 151 00ca 8A0D      		add r24,r10
 152 00cc 9B1D      		adc r25,r11
 153 00ce 092E      		mov __tmp_reg__,r25
 154 00d0 000C      		lsl r0
 155 00d2 AA0B      		sbc r26,r26
 156 00d4 BB0B      		sbc r27,r27
 157               	.LVL8:
 157:../util/iir_filter.h **** 			q7_8_mul(a0,in),
 158:../util/iir_filter.h **** 			q7_8_mul(a1,iir2->x_1),
 159:../util/iir_filter.h **** 			q7_8_mul(a2,iir2->x_2),
 160:../util/iir_filter.h **** 			q7_8_mul(_b1,iir2->y_1),
 161:../util/iir_filter.h **** 			q7_8_mul(_b2,iir2->y_2)));
 162:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 163:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 158               		.loc 1 163 0
 159 00d6 DB82      		std Y+3,r13
 160 00d8 CA82      		std Y+2,r12
 164:../util/iir_filter.h **** 	iir2->y_1 = res;
 161               		.loc 1 164 0
 162 00da 9983      		std Y+1,r25
 163 00dc 8883      		st Y,r24
 165:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 164               		.loc 1 165 0
 165 00de FF82      		std Y+7,r15
 166 00e0 EE82      		std Y+6,r14
 166:../util/iir_filter.h **** 	iir2->x_1 = in;
 167               		.loc 1 166 0
 168 00e2 1D83      		std Y+5,r17
 169 00e4 0C83      		std Y+4,r16
 170               	/* epilogue start */
 167:../util/iir_filter.h **** 	return res;
 168:../util/iir_filter.h **** }
 171               		.loc 1 168 0
 172 00e6 CDB7      		in r28,__SP_L__
 173 00e8 DEB7      		in r29,__SP_H__
 174               	.LVL9:
 175 00ea E0E1      		ldi r30, lo8(16)
 176 00ec 00C0      		rjmp __epilogue_restores__ + ((18 - 16) * 2)
 177               		.cfi_endproc
 178               	.LFE21:
 179               		.size	filter_iir2, .-filter_iir2
 180               	.global	__vector_16
 181               		.type	__vector_16, @function
 182               	__vector_16:
 183               	.LFB22:
 184               		.file 2 "main.c"
   1:main.c        **** 
   2:main.c        **** /*
   3:main.c        ****  * jorgen.birkler)a(gmail.com
   4:main.c        ****  */
   5:main.c        **** 
   6:main.c        **** /**
   7:main.c        ****  * @mainpage
   8:main.c        ****  *
   9:main.c        ****  * \section implementation_guide Implementation
  10:main.c        ****  * - \ref software
  11:main.c        ****  * - \ref hardware
  12:main.c        ****  * .
  13:main.c        ****  *
  14:main.c        ****  * (c) 2010 Jorgen Birkler (jorgen.birkler)a(gmail.com)
  15:main.c        ****  *
  16:main.c        ****  * USB driver
  17:main.c        ****  *
  18:main.c        ****  * (c) 2006 by OBJECTIVE DEVELOPMENT Software GmbH
  19:main.c        ****  */
  20:main.c        **** /**
  21:main.c        ****  * \page software Software
  22:main.c        ****  * Uses the firmware only USB low speed driver from http://obdev.at.
  23:main.c        ****  * The USB device is configured as a Mouse HID device.
  24:main.c        ****  *
  25:main.c        ****  * \section tips Tips about HID development
  26:main.c        ****  * General tips about HID development:
  27:main.c        ****  *
  28:main.c        ****  * 1. HID device class is cached by Windows; change USB_CFG_DEVICE_ID if you change USAGE_PAGE
  29:main.c        ****  *    class to another. It took me several weeks to find this info. I copied the use page for the
  30:main.c        ****  *    remote but it never work until I changed the USB_CFG_DEVICE_ID to another number so that the
  31:main.c        ****  *    device was rediscovered by Windows.
  32:main.c        ****  *
  33:main.c        ****  * 2. Added usbconfig.h manually to the dependencies in the make file to all .o files.
  34:main.c        ****  *    WinAVR .d files doesn't seem to work for subdirs
  35:main.c        ****  *
  36:main.c        ****  *
  37:main.c        ****  */
  38:main.c        **** /**
  39:main.c        ****  * \page hardware Hardware
  40:main.c        ****  *
  41:main.c        ****  */
  42:main.c        **** 
  43:main.c        **** #include <avr/io.h>
  44:main.c        **** #include <avr/interrupt.h>
  45:main.c        **** #include <avr/pgmspace.h>
  46:main.c        **** #include <avr/eeprom.h>
  47:main.c        **** #include <avr/wdt.h>
  48:main.c        **** #include <util/delay.h>
  49:main.c        **** #include <util/atomic.h>
  50:main.c        **** 
  51:main.c        **** #include <stdio.h>
  52:main.c        **** #include <string.h>
  53:main.c        **** #include <stdint.h>
  54:main.c        **** #define USB_GET_REPORT_IDS
  55:main.c        **** #include "usbdrv.h"
  56:main.c        **** #include "oddebug.h"
  57:main.c        **** #include "hw.h"
  58:main.c        **** #include "timers.h"
  59:main.c        **** #include "usbstream.h"
  60:main.c        **** #include "lfsr8.h"
  61:main.c        **** #include "iir_filter.h"
  62:main.c        **** 
  63:main.c        **** /*
  64:main.c        ****  * help macros
  65:main.c        ****  */
  66:main.c        **** #ifndef STATIC_ASSERT
  67:main.c        **** #define STATIC_ASSERT(expr) extern char static_assert[ (!!(expr))*2 - 1]
  68:main.c        **** #endif //#ifndef STATIC_ASSERT
  69:main.c        **** #define elements_of(array) (sizeof(array) / sizeof(array[0]))
  70:main.c        **** 
  71:main.c        **** STATIC_ASSERT(((int8_t)(-8))>>1 < 0);
  72:main.c        **** 
  73:main.c        **** /* ------------------------------------------------------------------------- */
  74:main.c        **** /* ------------------------------------------------------------------------- */
  75:main.c        **** /* ----------------------------- USB interface ----------------------------- */
  76:main.c        **** /* ------------------------------------------------------------------------- */
  77:main.c        **** 
  78:main.c        **** /*
  79:main.c        **** ISR(TIMER0_OVF_vect,ISR_NOBLOCK )
  80:main.c        **** {
  81:main.c        **** }
  82:main.c        ****  */
  83:main.c        **** 
  84:main.c        **** STATIC_ASSERT(TIMER0_OVERFLOW_PERIOD_MS_X256 > 2);
  85:main.c        **** STATIC_ASSERT(TIMER0_OVERFLOW_PERIOD_MS_X256 < 60000);
  86:main.c        **** 
  87:main.c        **** #define us_to_ticks(_us_) (((_us_)*F_TIMER1) / 1000000L)
  88:main.c        **** 
  89:main.c        **** STATIC_ASSERT(us_to_ticks(100) > 0);
  90:main.c        **** 
  91:main.c        **** 
  92:main.c        **** static volatile uint16_t capture_diff;
  93:main.c        **** static volatile uint16_t capture_diff_max;
  94:main.c        **** static volatile uint16_t captured;
  95:main.c        **** 
  96:main.c        **** 
  97:main.c        **** ISR(TIMER0_CAPT_vect,ISR_NOBLOCK )
  98:main.c        **** {
 185               		.loc 2 98 0
 186               		.cfi_startproc
 187 00ee 7894      		sei
 188 00f0 1F92      		push r1
 189               	.LCFI1:
 190               		.cfi_def_cfa_offset 3
 191               		.cfi_offset 1, -2
 192 00f2 0F92      		push r0
 193               	.LCFI2:
 194               		.cfi_def_cfa_offset 4
 195               		.cfi_offset 0, -3
 196 00f4 0FB6      		in r0,__SREG__
 197 00f6 0F92      		push r0
 198 00f8 1124      		clr __zero_reg__
 199               	/* prologue: Interrupt */
 200               	/* frame size = 0 */
 201               	/* stack size = 3 */
 202               	.L__stack_usage = 3
 203               	/* epilogue start */
  99:main.c        **** 	/*
 100:main.c        **** 	uint16_t capture_time;
 101:main.c        **** 	uint16_t service_time;
 102:main.c        **** 	service_time = TCNT0L;
 103:main.c        **** 	service_time |= ((unsigned int)TCNT0H << 8);
 104:main.c        **** 	capture_time = OCR0A;
 105:main.c        **** 	capture_time |= ((unsigned int)OCR0B << 8);
 106:main.c        **** 	capture_diff = service_time - capture_time;
 107:main.c        **** 	if (capture_diff > capture_diff_max) {
 108:main.c        **** 		capture_diff_max = capture_diff;
 109:main.c        **** 	}
 110:main.c        **** 	captured++;
 111:main.c        **** */
 112:main.c        **** }
 204               		.loc 2 112 0
 205 00fa 0F90      		pop r0
 206 00fc 0FBE      		out __SREG__,r0
 207 00fe 0F90      		pop r0
 208 0100 1F90      		pop r1
 209 0102 1895      		reti
 210               		.cfi_endproc
 211               	.LFE22:
 212               		.size	__vector_16, .-__vector_16
 213               	.global	usbFunctionSetup2
 214               		.type	usbFunctionSetup2, @function
 215               	usbFunctionSetup2:
 216               	.LFB23:
 113:main.c        **** 
 114:main.c        **** 
 115:main.c        **** 
 116:main.c        **** /*
 117:main.c        **** ISR(TIMER1_OVF_vect,ISR_NOBLOCK)
 118:main.c        **** {
 119:main.c        **** 	timer1_ticks_major++;
 120:main.c        **** }
 121:main.c        **** static uint32_t gettimer1ticks(void)
 122:main.c        **** {
 123:main.c        **** 	uint32_t res;
 124:main.c        **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 125:main.c        **** 	{
 126:main.c        **** 		res = TCNT1;
 127:main.c        **** 		res |= timer1_ticks_major<<8;
 128:main.c        **** 	}
 129:main.c        **** 	return res;
 130:main.c        **** }
 131:main.c        **** */
 132:main.c        **** 
 133:main.c        **** 
 134:main.c        **** #define ReportDescriptor usbHidReportDescriptor
 135:main.c        **** 
 136:main.c        **** PROGMEM
 137:main.c        **** #include "hid.h"
 138:main.c        **** 
 139:main.c        **** STATIC_ASSERT(sizeof(usbHidReportDescriptor) == USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH);
 140:main.c        **** 
 141:main.c        **** typedef struct{
 142:main.c        **** 	struct {
 143:main.c        **** 		unsigned char report_id;
 144:main.c        **** 		uchar   buttonMask;
 145:main.c        **** 	} mouse;
 146:main.c        **** }report_t;
 147:main.c        **** 
 148:main.c        **** 
 149:main.c        **** static report_t reportBuffer;
 150:main.c        **** 
 151:main.c        **** 
 152:main.c        **** usbMsgLen_t usbFunctionSetup2(uchar data[8])
 153:main.c        **** {
 217               		.loc 2 153 0
 218               		.cfi_startproc
 219               	.LVL10:
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 0 */
 223               	.L__stack_usage = 0
 154:main.c        **** 	usbRequest_t    *rq = (void *)data;
 155:main.c        **** 
 156:main.c        **** 	/* The following requests are never used. But since they are required by
 157:main.c        **** 	 * the specification, we implement them in this example.
 158:main.c        **** 	 *
 159:main.c        **** 	 */
 160:main.c        **** 	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 161:main.c        **** 		DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
 162:main.c        **** 		if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) *
 163:main.c        **** 			switch (rq->wValue.bytes[0]) {
 164:main.c        **** 			default:
 165:main.c        **** 				break;
 166:main.c        **** 			}
 167:main.c        **** 
 168:main.c        **** 		}
 169:main.c        **** 	}else{
 170:main.c        **** 		/* no vendor specific requests implemented */
 171:main.c        **** 	}
 172:main.c        **** 	return 0;   /* default for not implemented requests: return no data back to host */
 173:main.c        **** }
 224               		.loc 2 173 0
 225 0104 80E0      		ldi r24,0
 226               	.LVL11:
 227 0106 0895      		ret
 228               		.cfi_endproc
 229               	.LFE23:
 230               		.size	usbFunctionSetup2, .-usbFunctionSetup2
 231               	.global	unpack_color_red
 232               		.type	unpack_color_red, @function
 233               	unpack_color_red:
 234               	.LFB24:
 174:main.c        **** 
 175:main.c        **** 
 176:main.c        **** typedef struct {
 177:main.c        **** 	char buffer[64];
 178:main.c        **** 	uchar bufLen;
 179:main.c        **** } stdin_get_string_t;
 180:main.c        **** 
 181:main.c        **** 
 182:main.c        **** 
 183:main.c        **** typedef uint8_t rgb332_t;
 184:main.c        **** 
 185:main.c        **** /*
 186:main.c        **** static inline
 187:main.c        **** #define RGB888_RGB332(r,g,b)
 188:main.c        **** */
 189:main.c        **** 
 190:main.c        **** enum {
 191:main.c        **** 	RED,GREEN,BLUE,COLORS
 192:main.c        **** };
 193:main.c        **** 
 194:main.c        **** typedef struct RGB888_ {
 195:main.c        **** 	uint8_t color_[COLORS];
 196:main.c        **** } RGB888;
 197:main.c        **** 
 198:main.c        **** uint8_t unpack_color_red(rgb332_t rgb) {
 235               		.loc 2 198 0
 236               		.cfi_startproc
 237               	.LVL12:
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
 199:main.c        **** 	uint8_t base = rgb >> 5;
 200:main.c        **** 	base &= ~0b111;
 201:main.c        **** 	uint8_t res = base << 5;
 202:main.c        **** 	res |= base << 2;
 203:main.c        **** 	res |= base >> 1;
 204:main.c        **** 	return res;
 205:main.c        **** }
 242               		.loc 2 205 0
 243 0108 80E0      		ldi r24,0
 244               	.LVL13:
 245 010a 0895      		ret
 246               		.cfi_endproc
 247               	.LFE24:
 248               		.size	unpack_color_red, .-unpack_color_red
 249               	.global	unpack_color_green
 250               		.type	unpack_color_green, @function
 251               	unpack_color_green:
 252               	.LFB25:
 206:main.c        **** 
 207:main.c        **** 
 208:main.c        **** uint8_t unpack_color_green(rgb332_t rgb) {
 253               		.loc 2 208 0
 254               		.cfi_startproc
 255               	.LVL14:
 256               	/* prologue: function */
 257               	/* frame size = 0 */
 258               	/* stack size = 0 */
 259               	.L__stack_usage = 0
 209:main.c        **** 	uint8_t base = rgb >> 2;
 260               		.loc 2 209 0
 261 010c 8695      		lsr r24
 262 010e 8695      		lsr r24
 263               	.LVL15:
 210:main.c        **** 	base &= ~0b111;
 264               		.loc 2 210 0
 265 0110 982F      		mov r25,r24
 266 0112 987F      		andi r25,lo8(-8)
 267               	.LVL16:
 211:main.c        **** 	uint8_t res = base << 5;
 212:main.c        **** 	res |= base << 2;
 268               		.loc 2 212 0
 269 0114 892F      		mov r24,r25
 270 0116 880F      		lsl r24
 271 0118 880F      		lsl r24
 272               	.LVL17:
 213:main.c        **** 	res |= base >> 1;
 214:main.c        **** 	return res;
 273               		.loc 2 214 0
 274 011a 9695      		lsr r25
 275               	.LVL18:
 215:main.c        **** }
 276               		.loc 2 215 0
 277 011c 892B      		or r24,r25
 278               	.LVL19:
 279 011e 0895      		ret
 280               		.cfi_endproc
 281               	.LFE25:
 282               		.size	unpack_color_green, .-unpack_color_green
 283               	.global	unpack_color_blue
 284               		.type	unpack_color_blue, @function
 285               	unpack_color_blue:
 286               	.LFB26:
 216:main.c        **** 
 217:main.c        **** uint8_t unpack_color_blue(rgb332_t rgb) {
 287               		.loc 2 217 0
 288               		.cfi_startproc
 289               	.LVL20:
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 218:main.c        **** 	uint8_t base = rgb;
 219:main.c        **** 	base &= ~0b11;
 294               		.loc 2 219 0
 295 0120 8C7F      		andi r24,lo8(-4)
 296               	.LVL21:
 220:main.c        **** 	uint8_t res = base << 6;
 221:main.c        **** 	res |= base << 4;
 297               		.loc 2 221 0
 298 0122 282F      		mov r18,r24
 299 0124 30E0      		ldi r19,0
 300               	.LVL22:
 222:main.c        **** 	res |= base << 2;
 301               		.loc 2 222 0
 302 0126 A901      		movw r20,r18
 303 0128 94E0      		ldi r25,4
 304               		1:
 305 012a 440F      		lsl r20
 306 012c 551F      		rol r21
 307 012e 9A95      		dec r25
 308 0130 01F4      		brne 1b
 309               	.LVL23:
 310 0132 220F      		lsl r18
 311 0134 331F      		rol r19
 312 0136 220F      		lsl r18
 313 0138 331F      		rol r19
 314 013a 242B      		or r18,r20
 315               	.LVL24:
 223:main.c        **** 	res |= base << 0;
 224:main.c        **** 	return res;
 225:main.c        **** }
 316               		.loc 2 225 0
 317 013c 822B      		or r24,r18
 318               	.LVL25:
 319 013e 0895      		ret
 320               		.cfi_endproc
 321               	.LFE26:
 322               		.size	unpack_color_blue, .-unpack_color_blue
 323               	.global	send_strip_byte
 324               		.type	send_strip_byte, @function
 325               	send_strip_byte:
 326               	.LFB27:
 226:main.c        **** #define nop() __builtin_avr_nop()  //asm volatile(" nop \n\t")
 227:main.c        **** 
 228:main.c        **** 
 229:main.c        **** void send_strip_byte(uint8_t byteval) {
 327               		.loc 2 229 0
 328               		.cfi_startproc
 329               	.LVL26:
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
 334               		.loc 2 229 0
 335 0140 98E0      		ldi r25,lo8(8)
 336               	.LVL27:
 337               	.L10:
 338               	.LBB9:
 230:main.c        **** 	uint8_t temp = byteval;
 231:main.c        **** 	for (uint8_t i=0;i<8;++i) {
 232:main.c        **** 		if (temp & 0b10000000) {
 339               		.loc 2 232 0
 340 0142 87FF      		sbrs r24,7
 341 0144 00C0      		rjmp .L8
 233:main.c        **** 			STRIP_DATA_1();
 342               		.loc 2 233 0
 343 0146 DF9A      		sbi 0x1b,7
 344 0148 00C0      		rjmp .L9
 345               	.L8:
 234:main.c        **** 		} else {
 235:main.c        **** 			STRIP_DATA_0();
 346               		.loc 2 235 0
 347 014a DF98      		cbi 0x1b,7
 348               	.L9:
 236:main.c        **** 		}
 237:main.c        **** 		STRIP_CLK_HIGH();
 349               		.loc 2 237 0 discriminator 2
 350 014c DE9A      		sbi 0x1b,6
 238:main.c        **** 		temp <<=1;
 351               		.loc 2 238 0 discriminator 2
 352 014e 880F      		lsl r24
 353               	.LVL28:
 239:main.c        **** 		STRIP_CLK_LOW();
 354               		.loc 2 239 0 discriminator 2
 355 0150 DE98      		cbi 0x1b,6
 356               	.LVL29:
 357 0152 9150      		subi r25,lo8(-(-1))
 358               	.LVL30:
 231:main.c        **** 		if (temp & 0b10000000) {
 359               		.loc 2 231 0 discriminator 2
 360 0154 01F4      		brne .L10
 361               	/* epilogue start */
 362               	.LBE9:
 240:main.c        **** 	}
 241:main.c        **** }
 363               		.loc 2 241 0
 364 0156 0895      		ret
 365               		.cfi_endproc
 366               	.LFE27:
 367               		.size	send_strip_byte, .-send_strip_byte
 368               	.global	send_color
 369               		.type	send_color, @function
 370               	send_color:
 371               	.LFB28:
 242:main.c        **** 
 243:main.c        **** 
 244:main.c        **** 
 245:main.c        **** void send_color(uint8_t r,uint8_t g,uint8_t b) {
 372               		.loc 2 245 0
 373               		.cfi_startproc
 374               	.LVL31:
 375 0158 1F93      		push r17
 376               	.LCFI3:
 377               		.cfi_def_cfa_offset 3
 378               		.cfi_offset 17, -2
 379 015a CF93      		push r28
 380               	.LCFI4:
 381               		.cfi_def_cfa_offset 4
 382               		.cfi_offset 28, -3
 383 015c DF93      		push r29
 384               	.LCFI5:
 385               		.cfi_def_cfa_offset 5
 386               		.cfi_offset 29, -4
 387               	/* prologue: function */
 388               	/* frame size = 0 */
 389               	/* stack size = 3 */
 390               	.L__stack_usage = 3
 391 015e 182F      		mov r17,r24
 392 0160 D62F      		mov r29,r22
 393 0162 C42F      		mov r28,r20
 394               	.LVL32:
 246:main.c        **** 	const uint8_t start_byte = 0xFF;
 247:main.c        **** 	send_strip_byte(start_byte);
 395               		.loc 2 247 0
 396 0164 8FEF      		ldi r24,lo8(-1)
 397               	.LVL33:
 398 0166 00D0      		rcall send_strip_byte
 399               	.LVL34:
 248:main.c        **** 	send_strip_byte(r);
 400               		.loc 2 248 0
 401 0168 812F      		mov r24,r17
 402 016a 00D0      		rcall send_strip_byte
 403               	.LVL35:
 249:main.c        **** 	send_strip_byte(g);
 404               		.loc 2 249 0
 405 016c 8D2F      		mov r24,r29
 406 016e 00D0      		rcall send_strip_byte
 407               	.LVL36:
 250:main.c        **** 	send_strip_byte(b);
 408               		.loc 2 250 0
 409 0170 8C2F      		mov r24,r28
 410 0172 00D0      		rcall send_strip_byte
 411               	.LVL37:
 412               	/* epilogue start */
 251:main.c        **** }
 413               		.loc 2 251 0
 414 0174 DF91      		pop r29
 415               	.LVL38:
 416 0176 CF91      		pop r28
 417               	.LVL39:
 418 0178 1F91      		pop r17
 419               	.LVL40:
 420 017a 0895      		ret
 421               		.cfi_endproc
 422               	.LFE28:
 423               		.size	send_color, .-send_color
 424               	.global	getRainbowColor
 425               		.type	getRainbowColor, @function
 426               	getRainbowColor:
 427               	.LFB29:
 252:main.c        **** 
 253:main.c        **** 
 254:main.c        **** /* ------------------------------------------------------------------------- */
 255:main.c        **** 
 256:main.c        **** 
 257:main.c        **** RGB888 rainbow_colors[7] = {
 258:main.c        **** 		{{200,0,200}},
 259:main.c        **** 		{{200,0,0}},
 260:main.c        **** 		{{200,200,0}},
 261:main.c        **** 		{{0,200,0}},
 262:main.c        **** 		{{0,200,200}},
 263:main.c        **** 		{{0,0,200}},
 264:main.c        **** 		{{200,0,200}}
 265:main.c        **** };
 266:main.c        **** 
 267:main.c        **** 
 268:main.c        **** RGB888 getRainbowColor(int index) {
 428               		.loc 2 268 0
 429               		.cfi_startproc
 430               	.LVL41:
 431 017c A9E0      		ldi r26,lo8(9)
 432 017e B0E0      		ldi r27,0
 433 0180 E0E0      		ldi r30,lo8(gs(1f))
 434 0182 F0E0      		ldi r31,hi8(gs(1f))
 435 0184 00C0      		rjmp __prologue_saves__+((18 - 12) * 2)
 436               	1:
 437               	.LCFI6:
 438               		.cfi_offset 8, -2
 439               		.cfi_offset 9, -3
 440               		.cfi_offset 10, -4
 441               		.cfi_offset 11, -5
 442               		.cfi_offset 12, -6
 443               		.cfi_offset 13, -7
 444               		.cfi_offset 14, -8
 445               		.cfi_offset 15, -9
 446               		.cfi_offset 16, -10
 447               		.cfi_offset 17, -11
 448               		.cfi_offset 28, -12
 449               		.cfi_offset 29, -13
 450               		.cfi_def_cfa 28, 23
 451               	/* prologue: function */
 452               	/* frame size = 9 */
 453               	/* stack size = 21 */
 454               	.L__stack_usage = 21
 455 0186 9C01      		movw r18,r24
 456               	.LVL42:
 269:main.c        **** 	//300/6 = 50 ~ 64
 270:main.c        **** 	const int steps = 32;
 271:main.c        **** 
 272:main.c        **** 
 273:main.c        **** 	int rainbow_index = index / steps;
 457               		.loc 2 273 0
 458 0188 97FD      		sbrc r25,7
 459 018a 4F96      		adiw r24,31
 460               	.LVL43:
 461               	.L15:
 462 018c 45E0      		ldi r20,5
 463               		1:
 464 018e 9595      		asr r25
 465 0190 8795      		ror r24
 466 0192 4A95      		dec r20
 467 0194 01F4      		brne 1b
 468               	.LVL44:
 274:main.c        **** 	rainbow_index %= 6;
 469               		.loc 2 274 0
 470 0196 66E0      		ldi r22,lo8(6)
 471 0198 70E0      		ldi r23,0
 472 019a 00D0      		rcall __divmodhi4
 473               	.LVL45:
 474 019c FC01      		movw r30,r24
 475               	.LVL46:
 275:main.c        **** 	int interpolate_index = index % steps;
 476               		.loc 2 275 0
 477 019e C901      		movw r24,r18
 478               	.LVL47:
 479 01a0 60E2      		ldi r22,lo8(32)
 480 01a2 70E0      		ldi r23,0
 481 01a4 00D0      		rcall __divmodhi4
 482 01a6 7C01      		movw r14,r24
 483               	.LVL48:
 276:main.c        **** 	int weight_from = 64-interpolate_index;
 484               		.loc 2 276 0
 485 01a8 A0E4      		ldi r26,lo8(64)
 486 01aa B0E0      		ldi r27,0
 487 01ac 4D01      		movw r8,r26
 488 01ae 881A      		sub r8,r24
 489 01b0 990A      		sbc r9,r25
 490               	.LVL49:
 277:main.c        **** 	int weight_to = interpolate_index;
 278:main.c        **** 
 279:main.c        **** 	RGB888 from = rainbow_colors[rainbow_index];
 491               		.loc 2 279 0
 492 01b2 CF01      		movw r24,r30
 493 01b4 63E0      		ldi r22,lo8(3)
 494 01b6 70E0      		ldi r23,0
 495 01b8 00D0      		rcall __mulhi3
 496 01ba 8050      		subi r24,lo8(-(rainbow_colors))
 497 01bc 9040      		sbci r25,hi8(-(rainbow_colors))
 498 01be DC01      		movw r26,r24
 499 01c0 2D91      		ld r18,X+
 500 01c2 3D91      		ld r19,X+
 501 01c4 4C91      		ld r20,X
 502               	.LVL50:
 503 01c6 2F83      		std Y+7,r18
 504 01c8 3887      		std Y+8,r19
 505 01ca 4987      		std Y+9,r20
 280:main.c        **** 	RGB888 to = rainbow_colors[rainbow_index+1];
 506               		.loc 2 280 0
 507 01cc CF01      		movw r24,r30
 508 01ce 0196      		adiw r24,1
 509 01d0 63E0      		ldi r22,lo8(3)
 510 01d2 70E0      		ldi r23,0
 511 01d4 00D0      		rcall __mulhi3
 512 01d6 8050      		subi r24,lo8(-(rainbow_colors))
 513 01d8 9040      		sbci r25,hi8(-(rainbow_colors))
 514 01da FC01      		movw r30,r24
 515               	.LVL51:
 516 01dc 2081      		ld  r18,Z
 517 01de 3181      		ldd r19,Z+1
 518 01e0 4281      		ldd r20,Z+2
 519 01e2 2C83      		std Y+4,r18
 520 01e4 3D83      		std Y+5,r19
 521 01e6 4E83      		std Y+6,r20
 522               	.LVL52:
 523 01e8 FE01      		movw r30,r28
 524 01ea 3796      		adiw r30,7
 525 01ec 6E01      		movw r12,r28
 526 01ee 84E0      		ldi r24,4
 527 01f0 C80E      		add r12,r24
 528 01f2 D11C      		adc r13,__zero_reg__
 529 01f4 8E01      		movw r16,r28
 530 01f6 0F5F      		subi r16,-1
 531 01f8 1F4F      		sbci r17,-1
 532 01fa 5E01      		movw r10,r28
 533 01fc AAE0      		ldi r26,10
 534 01fe AA0E      		add r10,r26
 535 0200 B11C      		adc r11,__zero_reg__
 536               	.LVL53:
 537               	.L16:
 538               	.LBB10:
 539               	.LBB11:
 281:main.c        **** 
 282:main.c        **** 	RGB888 res;
 283:main.c        **** 	for (int c=0;c<COLORS;c++) {
 284:main.c        **** 		uint16_t temp = from.color_[c] * weight_from + to.color_[c] * weight_to;
 540               		.loc 2 284 0 discriminator 3
 541 0202 8191      		ld r24,Z+
 542 0204 D601      		movw r26,r12
 543 0206 4D91      		ld r20,X+
 544 0208 6D01      		movw r12,r26
 545 020a 90E0      		ldi r25,0
 546 020c B401      		movw r22,r8
 547 020e 00D0      		rcall __mulhi3
 548 0210 9C01      		movw r18,r24
 549 0212 842F      		mov r24,r20
 550 0214 90E0      		ldi r25,0
 551 0216 B701      		movw r22,r14
 552 0218 00D0      		rcall __mulhi3
 553 021a 820F      		add r24,r18
 554 021c 931F      		adc r25,r19
 555               	.LVL54:
 285:main.c        **** 		temp /= steps;
 286:main.c        **** 		temp /= 2;
 287:main.c        **** 		res.color_[c] = temp;
 556               		.loc 2 287 0 discriminator 3
 557 021e 26E0      		ldi r18,6
 558               		1:
 559 0220 9695      		lsr r25
 560 0222 8795      		ror r24
 561 0224 2A95      		dec r18
 562 0226 01F4      		brne 1b
 563               	.LVL55:
 564 0228 D801      		movw r26,r16
 565 022a 8D93      		st X+,r24
 566 022c 8D01      		movw r16,r26
 567               	.LBE11:
 283:main.c        **** 		uint16_t temp = from.color_[c] * weight_from + to.color_[c] * weight_to;
 568               		.loc 2 283 0 discriminator 3
 569 022e AE16      		cp r10,r30
 570 0230 BF06      		cpc r11,r31
 571 0232 01F4      		brne .L16
 572               	.LBE10:
 288:main.c        **** 	}
 289:main.c        **** 	return res;
 573               		.loc 2 289 0
 574 0234 6981      		ldd r22,Y+1
 575 0236 7A81      		ldd r23,Y+2
 576 0238 8B81      		ldd r24,Y+3
 577               	/* epilogue start */
 290:main.c        **** }
 578               		.loc 2 290 0
 579 023a 2996      		adiw r28,9
 580 023c ECE0      		ldi r30, lo8(12)
 581 023e 00C0      		rjmp __epilogue_restores__ + ((18 - 12) * 2)
 582               		.cfi_endproc
 583               	.LFE29:
 584               		.size	getRainbowColor, .-getRainbowColor
 585               		.section	.text.startup,"ax",@progbits
 586               	.global	main
 587               		.type	main, @function
 588               	main:
 589               	.LFB32:
 291:main.c        **** 
 292:main.c        **** 
 293:main.c        **** 
 294:main.c        **** 
 295:main.c        **** 
 296:main.c        **** static void setColor(int numLedsOn, uint8_t r,uint8_t g,uint8_t b) {
 297:main.c        **** 	const int totalLeds = 400;
 298:main.c        **** 	send_strip_byte(0);
 299:main.c        **** 	send_strip_byte(0);
 300:main.c        **** 	send_strip_byte(0);
 301:main.c        **** 	send_strip_byte(0);
 302:main.c        **** 	send_strip_byte(0);
 303:main.c        **** 
 304:main.c        **** 	send_strip_byte(0);
 305:main.c        **** 
 306:main.c        **** 
 307:main.c        **** //	send_color(0,255,0);
 308:main.c        **** //	send_color(0,0,255);
 309:main.c        **** //	send_color(255,0,0);
 310:main.c        **** //	send_color(0,255,255);
 311:main.c        **** 
 312:main.c        **** 	for (int i=0;i<numLedsOn;i++) {
 313:main.c        **** 		send_color(b,g,r);
 314:main.c        **** 		send_color(0,0,0);
 315:main.c        **** 		send_color(0,0,0);
 316:main.c        **** 		send_color(0,0,0);
 317:main.c        **** 		send_color(0,0,0);
 318:main.c        **** 		send_color(0,0,0);
 319:main.c        **** 	}
 320:main.c        **** 	for (int i=0;i<totalLeds;i++) {
 321:main.c        **** 		send_color(0,0,0);
 322:main.c        **** 	}
 323:main.c        **** 	for (int i=0;i<totalLeds;i++) {
 324:main.c        **** 		send_strip_byte(0xFF);
 325:main.c        **** 	}
 326:main.c        **** }
 327:main.c        **** 
 328:main.c        **** 
 329:main.c        **** static void setColorOneLed(int numLedOn, uint8_t r,uint8_t g,uint8_t b) {
 330:main.c        **** 	const int totalLeds = 300;
 331:main.c        **** 	send_strip_byte(0);
 332:main.c        **** 	send_strip_byte(0);
 333:main.c        **** 	send_strip_byte(0);
 334:main.c        **** 	send_strip_byte(0);
 335:main.c        **** 	send_strip_byte(0);
 336:main.c        **** 
 337:main.c        **** //	send_color(0,255,0);
 338:main.c        **** //	send_color(0,0,255);
 339:main.c        **** //	send_color(255,0,0);
 340:main.c        **** //	send_color(0,255,255);
 341:main.c        **** 
 342:main.c        **** 	/*
 343:main.c        **** 	for (int i=0;i<numLedOn;i++) {
 344:main.c        **** 		send_color(b,g,r);
 345:main.c        **** 		send_color(0,0,0);
 346:main.c        **** 		send_color(0,0,0);
 347:main.c        **** 		send_color(0,0,0);
 348:main.c        **** 		send_color(0,0,0);
 349:main.c        **** 	}*/
 350:main.c        **** 	//send_color(b,g,r);
 351:main.c        **** 	//send_color(b,g,r);
 352:main.c        **** 	//send_color(b,g,r);
 353:main.c        **** 	//send_color(b,g,r);
 354:main.c        **** 	for (int i=0;i<totalLeds;i++) {
 355:main.c        **** 		RGB888 rgb;
 356:main.c        **** 		
 357:main.c        **** 		if (i < numLedOn) {
 358:main.c        **** 			rgb = getRainbowColor(i);
 359:main.c        **** 		} else {
 360:main.c        **** 			rgb.color_[0] = 0;
 361:main.c        **** 			rgb.color_[1] = 0;
 362:main.c        **** 			rgb.color_[2] = 0;
 363:main.c        **** 		}
 364:main.c        **** 		send_color(rgb.color_[RED],rgb.color_[GREEN],rgb.color_[BLUE]);
 365:main.c        **** 	}
 366:main.c        **** 	for (int i=0;i<totalLeds/2;i++) {
 367:main.c        **** 		send_strip_byte(0x00);
 368:main.c        **** 	}
 369:main.c        **** }
 370:main.c        **** 
 371:main.c        **** 
 372:main.c        **** 
 373:main.c        **** int main(void)
 374:main.c        **** {
 590               		.loc 2 374 0
 591               		.cfi_startproc
 592 0000 A8E0      		ldi r26,lo8(8)
 593 0002 B0E0      		ldi r27,0
 594 0004 E0E0      		ldi r30,lo8(gs(1f))
 595 0006 F0E0      		ldi r31,hi8(gs(1f))
 596 0008 00C0      		rjmp __prologue_saves__+((18 - 18) * 2)
 597               	1:
 598               	.LCFI7:
 599               		.cfi_offset 2, -2
 600               		.cfi_offset 3, -3
 601               		.cfi_offset 4, -4
 602               		.cfi_offset 5, -5
 603               		.cfi_offset 6, -6
 604               		.cfi_offset 7, -7
 605               		.cfi_offset 8, -8
 606               		.cfi_offset 9, -9
 607               		.cfi_offset 10, -10
 608               		.cfi_offset 11, -11
 609               		.cfi_offset 12, -12
 610               		.cfi_offset 13, -13
 611               		.cfi_offset 14, -14
 612               		.cfi_offset 15, -15
 613               		.cfi_offset 16, -16
 614               		.cfi_offset 17, -17
 615               		.cfi_offset 28, -18
 616               		.cfi_offset 29, -19
 617               		.cfi_def_cfa 28, 28
 618               	/* prologue: function */
 619               	/* frame size = 8 */
 620               	/* stack size = 26 */
 621               	.L__stack_usage = 26
 622               	.LVL56:
 375:main.c        **** 	unsigned char buttonPressed = 0;
 376:main.c        **** 	unsigned char buttonMask = 0;
 377:main.c        **** 	unsigned char led_sensor_blink = 0;
 378:main.c        **** 	filter_iir2_t filter_iir2_data = {0,0,0,0};
 623               		.loc 2 378 0
 624 000a 88E0      		ldi r24,lo8(8)
 625 000c 9E01      		movw r18,r28
 626 000e 2F5F      		subi r18,-1
 627 0010 3F4F      		sbci r19,-1
 628 0012 7901      		movw r14,r18
 629 0014 F901      		movw r30,r18
 630 0016 282F      		mov r18,r24
 631               		0:
 632 0018 1192      		st Z+,__zero_reg__
 633 001a 2A95      		dec r18
 634 001c 01F4      		brne 0b
 635               	.LVL57:
 636               	.LBB21:
 637               	.LBB22:
 638               		.file 3 "../hw.h"
   1:../hw.h       **** /**
   2:../hw.h       ****  * Copyright 2007 Jorgen Birkler
   3:../hw.h       ****  * jorgen.birkler)a(gmail.com
   4:../hw.h       ****  * USB HID device for current monitoring and battery switch on-off
   5:../hw.h       ****  * License: GNU GPL v2 (see License.txt) or proprietary (contact author)
   6:../hw.h       ****  */
   7:../hw.h       **** 
   8:../hw.h       **** #ifndef __hw_h_included__
   9:../hw.h       **** #define __hw_h_included__
  10:../hw.h       **** #include <avr/io.h>
  11:../hw.h       **** 
  12:../hw.h       **** #define BOOTLOADER_CONDITION_INIT()   DDRA &= ~_BV(PA3);PORTA |= _BV(PA3)
  13:../hw.h       **** #define BOOTLOADER_CONDITION (bit_is_clear(PINA,PA3))
  14:../hw.h       **** 
  15:../hw.h       **** 
  16:../hw.h       **** #define LED_RED_CHANGE() PORTB ^= _BV(PB3)
  17:../hw.h       **** #define LED_RED_ON() PORTB |= _BV(PB3)
  18:../hw.h       **** #define LED_RED_OFF() PORTB &= ~_BV(PB3)
  19:../hw.h       **** #define LED_RED_INIT() DDRB |= _BV(PB3);PORTB &= ~_BV(PB3);LED_RED_OFF()
  20:../hw.h       **** 
  21:../hw.h       **** #define LED_SENSOR_CHANGE() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB ^= _BV(PB0);PORTA &= ~_BV(PA2)
  22:../hw.h       **** #define LED_SENSOR_ON() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB |= _BV(PB0); PORTA &= ~_BV(PA2)
  23:../hw.h       **** #define LED_SENSOR_OFF() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_BV(PB0); PORTA &= ~_BV(PA2)
  24:../hw.h       **** #define LED_SENSOR_INIT() LED_SENSOR_OFF()
  25:../hw.h       **** #define LED_SENSOR_REVERSE_BIAS()  PORTA |= _BV(PA2);DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_B
  26:../hw.h       **** #define LED_SENSOR_INPUT() DDRA &= ~_BV(PA2);PORTA &= ~_BV(PA2)
  27:../hw.h       **** #define LED_SENSOR_IS_HIGH() (PINA & _BV(PA2))
  28:../hw.h       **** 
  29:../hw.h       **** #define STRIP_DATA_1() PORTA |= _BV(PA7)
  30:../hw.h       **** #define STRIP_DATA_0() PORTA &= ~_BV(PA7)
  31:../hw.h       **** #define STRIP_CLK_HIGH() PORTA |= _BV(PA6)
  32:../hw.h       **** #define STRIP_CLK_LOW() PORTA &= ~_BV(PA6)
  33:../hw.h       **** 
  34:../hw.h       **** //#define STRIP_CHANGE() PORTA ^= _BV(PA7) | _BV(PA6)
  35:../hw.h       **** 
  36:../hw.h       **** #define STRIP_INIT() DDRA |= _BV(PA6) | _BV(PA7);PORTB &= ~(_BV(PA6) | _BV(PA7))
  37:../hw.h       **** 
  38:../hw.h       **** 
  39:../hw.h       **** 
  40:../hw.h       **** 
  41:../hw.h       **** //#define LED_SENSOR_CHANGE() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB ^= _BV(PB0);PORTA &= ~_BV(PA2
  42:../hw.h       **** //#define LED_SENSOR_ON() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB |= _BV(PB0); PORTA &= ~_BV(PA2)
  43:../hw.h       **** //#define LED_SENSOR_OFF() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_BV(PB0); PORTA &= ~_BV(PA2)
  44:../hw.h       **** //#define LED_SENSOR_INIT() LED_SENSOR_OFF()
  45:../hw.h       **** //#define LED_SENSOR_REVERSE_BIAS()  PORTA |= _BV(PA2);DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~
  46:../hw.h       **** //#define LED_SENSOR_INPUT() DDRB &= ~_BV(PB0)
  47:../hw.h       **** //#define LED_SENSOR_IS_HIGH() (PINB & _BV(PB0))
  48:../hw.h       **** 
  49:../hw.h       **** 
  50:../hw.h       **** 
  51:../hw.h       **** #define LED_BUTTON_CHANGE() PORTB ^= _BV(PB1)
  52:../hw.h       **** #define LED_BUTTON_ON() PORTB |= _BV(PB1)
  53:../hw.h       **** #define LED_BUTTON_OFF() PORTB &= ~_BV(PB1)
  54:../hw.h       **** #define LED_BUTTON_INIT() DDRB |= _BV(PB1);PORTB &= ~_BV(PB1);LED_BUTTON_OFF()
  55:../hw.h       **** 
  56:../hw.h       **** #define BUTTON_INIT() DDRA &= ~_BV(PA4);PORTA |= _BV(PA4)
  57:../hw.h       **** #define BUTTON_IS_PRESSED() (!(PINA & _BV(PA4)))
  58:../hw.h       **** 
  59:../hw.h       **** #define POT_ON() PORTA |= _BV(PA0)
  60:../hw.h       **** #define POT_OFF() PORTA &= ~_BV(PA0)
  61:../hw.h       **** #define POT_INIT() DDRA |= _BV(PA0);DDRA &= ~_BV(PA1);PORTA &= ~_BV(PA1);POT_OFF()
  62:../hw.h       **** #define POT_ADC_SETUP() ADCSRA = _BV(ADEN) | _BV(ADIF) | _BV(ADPS1) | _BV(ADPS0);ADCSRB = 0x00
  63:../hw.h       **** 
  64:../hw.h       **** #define POT_ADC_START() ADMUX = 0x1;ADCSRA |= _BV(ADSC)
  65:../hw.h       **** #define POT_ADC_DONE() ADCSRA |= _BV(ADIF)
  66:../hw.h       **** 
  67:../hw.h       **** #define POT_ADC_IS_POT_CHANNEL() ((ADMUX & 0x3F) == 0x1)
  68:../hw.h       **** 
  69:../hw.h       **** #define POT_ADC_IS_COMPLETED() (!(!(ADCSRA | _BV(ADIF))))
  70:../hw.h       **** 
  71:../hw.h       **** //Channel =ADC2
  72:../hw.h       **** //#define LED_SENSOR_ADC_CH 0x02
  73:../hw.h       **** 
  74:../hw.h       **** 
  75:../hw.h       **** // Channel= (ADC2-ADC1) x 20
  76:../hw.h       **** #define LED_SENSOR_ADC_CH 0x0E
  77:../hw.h       **** 
  78:../hw.h       **** 
  79:../hw.h       **** #define LED_SENSOR_ADC_SETUP() POT_OFF();ADCSRA = _BV(ADEN) | _BV(ADIF) | _BV(ADPS1) | _BV(ADPS0);A
  80:../hw.h       **** 
  81:../hw.h       **** #define LED_SENSOR_ADC_START() ADMUX = _BV(REFS1) | LED_SENSOR_ADC_CH;ADCSRA |= _BV(ADSC)
  82:../hw.h       **** #define LED_SENSOR_ADC_DONE() ADCSRA |= _BV(ADIF)
  83:../hw.h       **** 
  84:../hw.h       **** #define LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() ((ADMUX & 0x3F) == LED_SENSOR_ADC_CH)
  85:../hw.h       **** 
  86:../hw.h       **** #define LED_SENSOR_ADC_IS_COMPLETED() (!(!(ADCSRA & _BV(ADIF))))
  87:../hw.h       **** 
  88:../hw.h       **** 
  89:../hw.h       **** 
  90:../hw.h       **** //Timer0
  91:../hw.h       **** ////////////////////////////////////
  92:../hw.h       **** 
  93:../hw.h       **** 
  94:../hw.h       **** //16bit mode. clk/1. Input capture on. noise canceler on. Negative edge (ICES0 cleared).
  95:../hw.h       **** #define TIMER0_INIT() {TCCR0A = _BV(TCW0)|_BV(ICEN0)|_BV(ICNC0); TCCR0B = _BV(CS00);}
  96:../hw.h       **** #define F_TIMER0 (F_CPU / 1)
  97:../hw.h       **** #define TIMER0_ENABLE_OVERFLOW_INTERRUPT() TIMSK |= _BV(TOIE0);
  98:../hw.h       **** #define TIMER0_DISABLE_OVERFLOW_INTERRUPT() TIMSK &= ~_BV(TOIE0);
  99:../hw.h       **** #define TIMER0_ENABLE_INPUTCAPT_INTERRUPT() TIMSK |= _BV(TICIE0);
 100:../hw.h       **** #define TIMER0_DISABLE_INPUTCAPT_INTERRUPT() TIMSK &= ~_BV(TICIE0);
 101:../hw.h       **** #define TIMER0_OVERFLOW_PERIOD_MS ((256L * 256L * 1000L) / F_CPU)
 102:../hw.h       **** #define TIMER0_OVERFLOW_PERIOD_MS_X256 ((256L * 256L *256L) / (F_CPU / 1000L))
 103:../hw.h       **** 
 104:../hw.h       **** 
 105:../hw.h       **** 
 106:../hw.h       **** //Normal mode. clk/128
 107:../hw.h       **** #define TIMER1_INIT() {TCCR1A = 0; TCCR1B = _BV(CS13); TCCR1C = 0; TCCR1D = 0; TCCR1E = 0; PLLCSR =
 108:../hw.h       **** #define F_TIMER1 (F_CPU/128)
 109:../hw.h       **** #define TIMER1_ENABLE_OVERFLOW_INTERRUPT() TIMSK |= _BV(TOIE1);
 110:../hw.h       **** #define TIMER1_DISABLE_OVERFLOW_INTERRUPT() TIMSK &= ~_BV(TOIE1);
 111:../hw.h       **** #define TIMER1_OVERFLOW_PERIOD_MS ((256L * 1000L) / F_TIMER1)
 112:../hw.h       **** #define TIMER1_OVERFLOW_PERIOD_MS_X256 ((256L *256L) / (F_TIMER1 / 1000L))
 113:../hw.h       **** 
 114:../hw.h       **** #define UARTSW_1_TX_ENABLE 1
 115:../hw.h       **** #define UARTSW_1_RX_ENABLE 0
 116:../hw.h       **** #define UARTSW_2_TX_ENABLE 0
 117:../hw.h       **** #define UARTSW_2_RX_ENABLE 1
 118:../hw.h       **** #define UARTSW_2_INVERT 1
 119:../hw.h       **** #define UARTSW_1_INVERT 1
 120:../hw.h       **** 
 121:../hw.h       **** #define UARTSW_1_BAUDRATE 9600
 122:../hw.h       **** #define UARTSW_2_BAUDRATE 9600
 123:../hw.h       **** #define UARTSW_1_RXD_PINNAME
 124:../hw.h       **** #define UARTSW_1_RXD_PINPORT
 125:../hw.h       **** #define UARTSW_1_TXD_PINNAME A
 126:../hw.h       **** #define UARTSW_1_TXD_PINPORT PA6
 127:../hw.h       **** #define UARTSW_2_RXD_PINNAME A
 128:../hw.h       **** #define UARTSW_2_RXD_PINPORT PA6
 129:../hw.h       **** #define UARTSW_2_TXD_PINNAME
 130:../hw.h       **** #define UARTSW_2_TXD_PINPORT
 131:../hw.h       **** 
 132:../hw.h       **** 
 133:../hw.h       **** #ifndef __ASSEMBLER__
 134:../hw.h       **** 
 135:../hw.h       **** static inline void hardwareInit(void) {
 136:../hw.h       **** 	BOOTLOADER_CONDITION_INIT();
 639               		.loc 3 136 0
 640 001e D398      		cbi 0x1a,3
 641 0020 DB9A      		sbi 0x1b,3
 137:../hw.h       **** 	LED_RED_INIT();
 642               		.loc 3 137 0
 643 0022 BB9A      		sbi 0x17,3
 644 0024 C398      		cbi 0x18,3
 645 0026 C398      		cbi 0x18,3
 138:../hw.h       **** 	LED_BUTTON_INIT();
 646               		.loc 3 138 0
 647 0028 B99A      		sbi 0x17,1
 648 002a C198      		cbi 0x18,1
 649 002c C198      		cbi 0x18,1
 139:../hw.h       **** 	TIMER0_INIT();
 650               		.loc 3 139 0
 651 002e 90EE      		ldi r25,lo8(-32)
 652 0030 95BB      		out 0x15,r25
 653 0032 91E0      		ldi r25,lo8(1)
 654 0034 93BF      		out 0x33,r25
 140:../hw.h       **** 	TIMER1_INIT();
 655               		.loc 3 140 0
 656 0036 10BE      		out 0x30,__zero_reg__
 657 0038 8FBD      		out 0x2f,r24
 658 003a 17BC      		out 0x27,__zero_reg__
 659 003c 16BC      		out 0x26,__zero_reg__
 660 003e 10B8      		out 0,__zero_reg__
 661 0040 19BC      		out 0x29,__zero_reg__
 141:../hw.h       **** 	BUTTON_INIT();
 662               		.loc 3 141 0
 663 0042 D498      		cbi 0x1a,4
 664 0044 DC9A      		sbi 0x1b,4
 142:../hw.h       **** 	POT_INIT();
 665               		.loc 3 142 0
 666 0046 D09A      		sbi 0x1a,0
 667 0048 D198      		cbi 0x1a,1
 668 004a D998      		cbi 0x1b,1
 669 004c D898      		cbi 0x1b,0
 670               	.LBE22:
 671               	.LBE21:
 379:main.c        **** 	q7_8_t filtered_val = 0;
 380:main.c        **** 	uint8_t led_sensor_last_random = 0;
 381:main.c        **** 	static uint16_t led_sensor_delta_time = 0;
 382:main.c        **** 	uint16_t led_sensor_trig_time = 0;
 383:main.c        **** 	uint8_t led_sensor_prev_time=0;
 384:main.c        **** 	uint16_t led_sensor_values[5];
 385:main.c        **** 	uint8_t led_sensor_nvalues = 0;
 386:main.c        **** 	static uint8_t led_sensor_nsample = 5;
 387:main.c        **** 	static uint16_t led_sensor_weigthed_sum_data[20];
 388:main.c        **** 	uint16_t led_sensor_weigthed_sum = 0;
 389:main.c        **** 	uint8_t led_sensor_weigthed_sum_idx = 0;
 390:main.c        **** 
 391:main.c        **** 	hardwareInit();
 392:main.c        **** 	stdout = &usb_out_stream;
 672               		.loc 2 392 0
 673 004e 80E0      		ldi r24,lo8(usb_out_stream)
 674 0050 90E0      		ldi r25,hi8(usb_out_stream)
 675 0052 9093 0000 		sts __iob+2+1,r25
 676 0056 8093 0000 		sts __iob+2,r24
 393:main.c        **** 	stdin = &usb_in_stream;
 677               		.loc 2 393 0
 678 005a 80E0      		ldi r24,lo8(usb_in_stream)
 679 005c 90E0      		ldi r25,hi8(usb_in_stream)
 680 005e 9093 0000 		sts __iob+1,r25
 681 0062 8093 0000 		sts __iob,r24
 394:main.c        **** 	stdin_get_string_t stdin_get_string_buffer;
 395:main.c        **** 	stdin_get_string_buffer.bufLen = 0;
 396:main.c        **** 	//const char* stdin_str;
 397:main.c        **** 
 398:main.c        **** 	printf_P(PSTR("B!\n"));
 682               		.loc 2 398 0
 683 0066 80E0      		ldi r24,lo8(__c.2476)
 684 0068 90E0      		ldi r25,hi8(__c.2476)
 685 006a 9F93      		push r25
 686 006c 8F93      		push r24
 687 006e 00D0      		rcall printf_P
 688               	.LVL58:
 399:main.c        **** 	usbDeviceDisconnect();
 689               		.loc 2 399 0
 690 0070 BC98      		cbi 0x17,4
 691 0072 C498      		cbi 0x18,4
 692               	.LVL59:
 693               	.LBB23:
 694               	.LBB24:
 695               		.file 4 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/lib/avr/include/avr/wdt.h **** 
 103:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/lib/avr/include/avr/wdt.h **** #else
 106:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/lib/avr/include/avr/wdt.h **** #endif
 108:/usr/lib/avr/include/avr/wdt.h **** 
 109:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/lib/avr/include/avr/wdt.h **** #else
 114:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/lib/avr/include/avr/wdt.h **** #endif
 116:/usr/lib/avr/include/avr/wdt.h **** 
 117:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/lib/avr/include/avr/wdt.h **** #else
 120:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/lib/avr/include/avr/wdt.h **** #endif
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/lib/avr/include/avr/wdt.h **** 
 125:/usr/lib/avr/include/avr/wdt.h **** 
 126:/usr/lib/avr/include/avr/wdt.h **** /**
 127:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/lib/avr/include/avr/wdt.h **** */
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** 
 138:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/lib/avr/include/avr/wdt.h **** 
 140:/usr/lib/avr/include/avr/wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:/usr/lib/avr/include/avr/wdt.h **** 
 142:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 143:/usr/lib/avr/include/avr/wdt.h **** do { \
 144:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 145:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 146:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"									"\n\t" \
 147:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:/usr/lib/avr/include/avr/wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:/usr/lib/avr/include/avr/wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:/usr/lib/avr/include/avr/wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:/usr/lib/avr/include/avr/wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h **** 	: [tmp]					"=r" (temp) \
 155:/usr/lib/avr/include/avr/wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:/usr/lib/avr/include/avr/wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:/usr/lib/avr/include/avr/wdt.h **** ); \
 162:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 163:/usr/lib/avr/include/avr/wdt.h **** 
 164:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 165:/usr/lib/avr/include/avr/wdt.h **** do { \
 166:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 167:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 168:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"								"\n\t" \
 169:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:/usr/lib/avr/include/avr/wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]            "=r" (temp) \
 174:/usr/lib/avr/include/avr/wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:/usr/lib/avr/include/avr/wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:/usr/lib/avr/include/avr/wdt.h **** ); \
 179:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 180:/usr/lib/avr/include/avr/wdt.h **** 
 181:/usr/lib/avr/include/avr/wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:/usr/lib/avr/include/avr/wdt.h **** 
 183:/usr/lib/avr/include/avr/wdt.h **** /*
 184:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 185:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 187:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 188:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 191:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 194:/usr/lib/avr/include/avr/wdt.h **** */
 195:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 196:/usr/lib/avr/include/avr/wdt.h **** do { \
 197:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 198:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 199:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 208:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 216:/usr/lib/avr/include/avr/wdt.h **** ); \
 217:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 218:/usr/lib/avr/include/avr/wdt.h **** 
 219:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 220:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 221:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:/usr/lib/avr/include/avr/wdt.h ****     : \
 227:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 233:/usr/lib/avr/include/avr/wdt.h **** );
 234:/usr/lib/avr/include/avr/wdt.h **** 
 235:/usr/lib/avr/include/avr/wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:/usr/lib/avr/include/avr/wdt.h **** 
 237:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 238:/usr/lib/avr/include/avr/wdt.h **** 
 239:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 240:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 241:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 243:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 244:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 248:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 254:/usr/lib/avr/include/avr/wdt.h **** )
 255:/usr/lib/avr/include/avr/wdt.h **** 
 256:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 257:/usr/lib/avr/include/avr/wdt.h **** do { \
 258:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 259:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 260:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 262:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 263:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 269:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 275:/usr/lib/avr/include/avr/wdt.h **** ); \
 276:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 277:/usr/lib/avr/include/avr/wdt.h **** 
 278:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 279:/usr/lib/avr/include/avr/wdt.h **** 
 280:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 281:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 282:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 283:/usr/lib/avr/include/avr/wdt.h **** {
 284:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:/usr/lib/avr/include/avr/wdt.h **** 	{
 286:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 287:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 289:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 290:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 294:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 300:/usr/lib/avr/include/avr/wdt.h **** 			);
 301:/usr/lib/avr/include/avr/wdt.h **** 	}
 302:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:/usr/lib/avr/include/avr/wdt.h **** 	{
 304:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 305:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 307:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 308:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 312:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 318:/usr/lib/avr/include/avr/wdt.h **** 			);
 319:/usr/lib/avr/include/avr/wdt.h **** 	}
 320:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:/usr/lib/avr/include/avr/wdt.h **** 	{
 322:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 323:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 330:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 336:/usr/lib/avr/include/avr/wdt.h **** 			);
 337:/usr/lib/avr/include/avr/wdt.h **** 	}
 338:/usr/lib/avr/include/avr/wdt.h **** 	else
 339:/usr/lib/avr/include/avr/wdt.h ****  	{
 340:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 341:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 348:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 			);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** }
 357:/usr/lib/avr/include/avr/wdt.h **** 
 358:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 359:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 360:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 361:/usr/lib/avr/include/avr/wdt.h **** {
 362:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:/usr/lib/avr/include/avr/wdt.h **** 	{
 364:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 365:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 366:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 369:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 375:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 381:/usr/lib/avr/include/avr/wdt.h **** 				);
 382:/usr/lib/avr/include/avr/wdt.h **** 	}
 383:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:/usr/lib/avr/include/avr/wdt.h **** 	{
 385:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 386:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 387:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 390:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 396:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 402:/usr/lib/avr/include/avr/wdt.h **** 				);
 403:/usr/lib/avr/include/avr/wdt.h **** 	}
 404:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:/usr/lib/avr/include/avr/wdt.h **** 	{
 406:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 407:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 408:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 417:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 423:/usr/lib/avr/include/avr/wdt.h **** 				);
 424:/usr/lib/avr/include/avr/wdt.h **** 	}
 425:/usr/lib/avr/include/avr/wdt.h **** 	else
 426:/usr/lib/avr/include/avr/wdt.h **** 	{
 427:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 428:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 429:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 438:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 444:/usr/lib/avr/include/avr/wdt.h **** 				);
 445:/usr/lib/avr/include/avr/wdt.h **** 	}
 446:/usr/lib/avr/include/avr/wdt.h **** }
 447:/usr/lib/avr/include/avr/wdt.h **** 
 448:/usr/lib/avr/include/avr/wdt.h **** #else
 449:/usr/lib/avr/include/avr/wdt.h **** 
 450:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 451:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 452:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 453:/usr/lib/avr/include/avr/wdt.h **** {
 454:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:/usr/lib/avr/include/avr/wdt.h **** 	{
 456:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 696               		.loc 4 456 0
 697 0074 9FE0      		ldi r25,lo8(15)
 698 0076 88E1      		ldi r24,lo8(24)
 699               	/* #APP */
 700               	 ;  456 "/usr/lib/avr/include/avr/wdt.h" 1
 701 0078 0FB6      		in __tmp_reg__,__SREG__
 702 007a F894      		cli
 703 007c A895      		wdr
 704 007e 81BD      		out 33, r24
 705 0080 0FBE      		out __SREG__,__tmp_reg__
 706 0082 91BD      		out 33, r25
 707               	 	
 708               	 ;  0 "" 2
 709               	.LVL60:
 710               	/* #NOAPP */
 711               	.LBE24:
 712               	.LBE23:
 400:main.c        **** 	uchar i, j;
 401:main.c        **** 	j = 0;
 402:main.c        **** 	while (--j)
 403:main.c        **** 	{ /* USB Reset by device only required on Watchdog Reset */
 404:main.c        **** 		i = 0;
 405:main.c        **** 		while (--i)
 406:main.c        **** 			; /* delay >10ms for USB reset */
 407:main.c        **** 	}
 408:main.c        **** 
 409:main.c        **** 	wdt_enable(WDTO_2S);
 410:main.c        **** 	odDebugInit();
 411:main.c        **** 	usbInit();
 713               		.loc 2 411 0
 714 0084 00D0      		rcall usbInit
 715               	.LVL61:
 412:main.c        **** 	TIMER0_ENABLE_INPUTCAPT_INTERRUPT();
 716               		.loc 2 412 0
 717 0086 89B7      		in r24,0x39
 718 0088 8160      		ori r24,lo8(1)
 719 008a 89BF      		out 0x39,r24
 413:main.c        **** 	sei();
 720               		.loc 2 413 0
 721               	/* #APP */
 722               	 ;  413 "main.c" 1
 723 008c 7894      		sei
 724               	 ;  0 "" 2
 414:main.c        **** 	usbDeviceConnect();
 725               		.loc 2 414 0
 726               	/* #NOAPP */
 727 008e BC9A      		sbi 0x17,4
 728 0090 C49A      		sbi 0x18,4
 415:main.c        **** 	LED_RED_ON();
 729               		.loc 2 415 0
 730 0092 C39A      		sbi 0x18,3
 416:main.c        **** 	LED_SENSOR_INIT();
 731               		.loc 2 416 0
 732 0094 D29A      		sbi 0x1a,2
 733 0096 B89A      		sbi 0x17,0
 734 0098 C098      		cbi 0x18,0
 735 009a DA98      		cbi 0x1b,2
 417:main.c        **** 	LED_BUTTON_OFF();
 736               		.loc 2 417 0
 737 009c C198      		cbi 0x18,1
 418:main.c        **** 	Timer_Set(TIMER_LED_BLINK,TIMER_LED_STARTUP_TIMEOUT);
 738               		.loc 2 418 0
 739 009e 60ED      		ldi r22,lo8(-48)
 740 00a0 77E0      		ldi r23,lo8(7)
 741 00a2 80E0      		ldi r24,0
 742 00a4 00D0      		rcall Timer_Set
 743               	.LVL62:
 419:main.c        **** 	Timer_Set(TIMER_LED_SENSOR_BLINK,2);
 744               		.loc 2 419 0
 745 00a6 62E0      		ldi r22,lo8(2)
 746 00a8 70E0      		ldi r23,0
 747 00aa 81E0      		ldi r24,lo8(1)
 748 00ac 00D0      		rcall Timer_Set
 749               	.LVL63:
 420:main.c        **** 	Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_STARTUP_TIMEOUT);
 750               		.loc 2 420 0
 751 00ae 60ED      		ldi r22,lo8(-48)
 752 00b0 77E0      		ldi r23,lo8(7)
 753 00b2 82E0      		ldi r24,lo8(2)
 754 00b4 00D0      		rcall Timer_Set
 755               	.LVL64:
 421:main.c        **** 	filtered_val = filter_iir2(&filter_iir2_data,1000);
 756               		.loc 2 421 0
 757 00b6 68EE      		ldi r22,lo8(-24)
 758 00b8 73E0      		ldi r23,lo8(3)
 759 00ba C701      		movw r24,r14
 760 00bc 00D0      		rcall filter_iir2
 761               	.LVL65:
 762 00be 0F90      		pop __tmp_reg__
 763 00c0 0F90      		pop __tmp_reg__
 385:main.c        **** 	static uint8_t led_sensor_nsample = 5;
 764               		.loc 2 385 0
 765 00c2 00E0      		ldi r16,0
 383:main.c        **** 	uint16_t led_sensor_values[5];
 766               		.loc 2 383 0
 767 00c4 80E0      		ldi r24,0
 375:main.c        **** 	unsigned char buttonMask = 0;
 768               		.loc 2 375 0
 769 00c6 10E0      		ldi r17,0
 422:main.c        **** 	// main event loop
 423:main.c        **** 	for (;;)
 424:main.c        **** 	{
 425:main.c        **** 		//update delta time
 426:main.c        **** 		{
 427:main.c        **** 			uint8_t temp = TCNT1;
 428:main.c        **** 			led_sensor_delta_time += (temp - led_sensor_prev_time) & 0xFF;
 429:main.c        **** 			led_sensor_prev_time = temp;
 430:main.c        **** 		}
 431:main.c        **** 
 432:main.c        **** 		//Watchdog
 433:main.c        **** 		wdt_reset();
 434:main.c        **** 
 435:main.c        **** 		//Timers
 436:main.c        **** 		/////////////////////////////////////////////////////
 437:main.c        **** 		if (TIFR & _BV(TOV1)) {
 438:main.c        **** 			TIFR |= _BV(TOV1);
 439:main.c        **** 			Timers_DecreaseAll(TIMER1_OVERFLOW_PERIOD_MS_X256);
 440:main.c        **** 		}
 441:main.c        **** 
 442:main.c        **** 		//usb
 443:main.c        **** 		/////////////////////////////////////////////////////
 444:main.c        **** 		usbPoll();
 445:main.c        **** 
 446:main.c        **** 		//
 447:main.c        **** 		/////////////////////////////////////////////////////
 448:main.c        **** 		if (BUTTON_IS_PRESSED()) {
 449:main.c        **** 			LED_BUTTON_ON();
 450:main.c        **** 			if (!(buttonPressed)) {
 451:main.c        **** 				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
 452:main.c        **** 				//uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
 453:main.c        **** 				printf_P(PSTR("Button!\r\n"));
 454:main.c        **** 				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,ca
 455:main.c        **** 			}
 456:main.c        **** 			buttonPressed = 1;
 770               		.loc 2 456 0
 771 00c8 8824      		clr r8
 772 00ca 8394      		inc r8
 453:main.c        **** 				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,ca
 773               		.loc 2 453 0
 774 00cc 90E0      		ldi r25,lo8(__c.2487)
 775 00ce C92E      		mov r12,r25
 776 00d0 90E0      		ldi r25,hi8(__c.2487)
 777 00d2 D92E      		mov r13,r25
 457:main.c        **** 			buttonMask |= 0x1;
 458:main.c        **** 		}
 459:main.c        **** 		else {
 460:main.c        **** 			//LED_BUTTON_OFF();
 461:main.c        **** 			buttonMask &= ~0x1;
 462:main.c        **** 			buttonPressed = 0;
 463:main.c        **** 		}
 464:main.c        **** 
 465:main.c        **** 		//USB interrupt
 466:main.c        **** 		/////////////////////////////////////////////////////
 467:main.c        **** 		if (usbInterruptIsReady())
 468:main.c        **** 		{
 469:main.c        **** 			if (buttonMask != reportBuffer.mouse.buttonMask) {
 470:main.c        **** 				reportBuffer.mouse.report_id = report_id_mouse;
 471:main.c        **** 				reportBuffer.mouse.buttonMask = buttonMask;
 472:main.c        **** 				usbSetInterrupt((uchar*)&reportBuffer.mouse, sizeof(reportBuffer.mouse));
 473:main.c        **** 
 474:main.c        **** 			}
 475:main.c        **** 			else if (1) {
 476:main.c        **** 
 477:main.c        **** 			}
 478:main.c        **** 
 479:main.c        **** 		}
 480:main.c        **** 
 481:main.c        **** 		//LED Timer
 482:main.c        **** 		/////////////////////////////////////////////////////
 483:main.c        **** 		if (Timer_HasExpired(TIMER_LED_BLINK)) {
 484:main.c        **** 			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
 485:main.c        **** 			LED_RED_CHANGE();
 778               		.loc 2 485 0
 779 00d4 28E0      		ldi r18,lo8(8)
 780 00d6 322E      		mov r3,r18
 486:main.c        **** 		}
 487:main.c        **** 		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
 488:main.c        **** 			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
 489:main.c        **** 			LED_BUTTON_CHANGE();
 490:main.c        **** 		}
 491:main.c        **** 
 492:main.c        **** 
 493:main.c        **** 		//ADC measurement of led sensor
 494:main.c        **** 		{
 495:main.c        **** 			if (led_sensor_delta_time >= us_to_ticks(4000) * led_sensor_nsample)
 496:main.c        **** 			{
 497:main.c        **** 				LED_SENSOR_ADC_START();
 781               		.loc 2 497 0
 782 00d8 3EE8      		ldi r19,lo8(-114)
 783 00da 232E      		mov r2,r19
 784               	.LBB25:
 498:main.c        **** 				led_sensor_nsample++;
 499:main.c        **** 			}
 500:main.c        **** 			if (LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() && LED_SENSOR_ADC_IS_COMPLETED()) {
 501:main.c        **** 				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
 502:main.c        **** 					led_sensor_values[led_sensor_nvalues] = ADC;
 503:main.c        **** 					if (led_sensor_nvalues == 4) {
 504:main.c        **** 						int16_t val = led_sensor_values[led_sensor_nvalues];
 505:main.c        **** 						if ((led_sensor_last_random & 0x1)) {
 506:main.c        **** 							val = -val;
 507:main.c        **** 						}
 508:main.c        **** 						filtered_val = filter_iir2(&filter_iir2_data,val);
 509:main.c        **** 					}
 510:main.c        **** 				}
 511:main.c        **** 				led_sensor_nvalues++;
 512:main.c        **** 				LED_SENSOR_ADC_DONE();
 513:main.c        **** 			}
 514:main.c        **** 		}
 515:main.c        **** 
 516:main.c        **** 
 517:main.c        **** 		if (BOOTLOADER_CONDITION) {
 518:main.c        **** 			cli();
 519:main.c        **** 			BOOTLOADER_CONDITION_INIT();
 520:main.c        **** 			void (*reset_vec)(void) = 0;
 521:main.c        **** 			reset_vec();
 785               		.loc 2 521 0
 786 00dc A12C      		mov r10,__zero_reg__
 787 00de B12C      		mov r11,__zero_reg__
 788               	.LVL66:
 789               	.L19:
 790               	.LBE25:
 791               	.LBB26:
 427:main.c        **** 			led_sensor_delta_time += (temp - led_sensor_prev_time) & 0xFF;
 792               		.loc 2 427 0
 793 00e0 9EB4      		in r9,0x2e
 794               	.LVL67:
 428:main.c        **** 			led_sensor_prev_time = temp;
 795               		.loc 2 428 0
 796 00e2 292D      		mov r18,r9
 797 00e4 281B      		sub r18,r24
 798 00e6 8091 0000 		lds r24,led_sensor_delta_time.2466
 799 00ea 9091 0000 		lds r25,led_sensor_delta_time.2466+1
 800 00ee 820F      		add r24,r18
 801 00f0 911D      		adc r25,__zero_reg__
 802 00f2 9093 0000 		sts led_sensor_delta_time.2466+1,r25
 803 00f6 8093 0000 		sts led_sensor_delta_time.2466,r24
 804               	.LVL68:
 805               	.LBE26:
 433:main.c        **** 
 806               		.loc 2 433 0
 807               	/* #APP */
 808               	 ;  433 "main.c" 1
 809 00fa A895      		wdr
 810               	 ;  0 "" 2
 437:main.c        **** 			TIFR |= _BV(TOV1);
 811               		.loc 2 437 0
 812               	/* #NOAPP */
 813 00fc 08B6      		in __tmp_reg__,0x38
 814 00fe 02FE      		sbrs __tmp_reg__,2
 815 0100 00C0      		rjmp .L20
 438:main.c        **** 			Timers_DecreaseAll(TIMER1_OVERFLOW_PERIOD_MS_X256);
 816               		.loc 2 438 0
 817 0102 88B7      		in r24,0x38
 818 0104 8460      		ori r24,lo8(4)
 819 0106 88BF      		out 0x38,r24
 439:main.c        **** 		}
 820               		.loc 2 439 0
 821 0108 80E0      		ldi r24,0
 822 010a 92E0      		ldi r25,lo8(2)
 823 010c 00D0      		rcall Timers_DecreaseAll
 824               	.LVL69:
 825               	.L20:
 444:main.c        **** 
 826               		.loc 2 444 0
 827 010e 00D0      		rcall usbPoll
 828               	.LVL70:
 448:main.c        **** 			LED_BUTTON_ON();
 829               		.loc 2 448 0
 830 0110 CC99      		sbic 0x19,4
 831 0112 00C0      		rjmp .L29
 449:main.c        **** 			if (!(buttonPressed)) {
 832               		.loc 2 449 0
 833 0114 C19A      		sbi 0x18,1
 450:main.c        **** 				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
 834               		.loc 2 450 0
 835 0116 1111      		cpse r17,__zero_reg__
 836 0118 00C0      		rjmp .L30
 453:main.c        **** 				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,ca
 837               		.loc 2 453 0
 838 011a DF92      		push r13
 839 011c CF92      		push r12
 840 011e 00D0      		rcall printf_P
 841               	.LVL71:
 842 0120 0F90      		pop __tmp_reg__
 843 0122 0F90      		pop __tmp_reg__
 844 0124 00C0      		rjmp .L30
 845               	.L29:
 462:main.c        **** 		}
 846               		.loc 2 462 0
 847 0126 10E0      		ldi r17,0
 848               	.LVL72:
 849 0128 00C0      		rjmp .L21
 850               	.LVL73:
 851               	.L30:
 456:main.c        **** 			buttonMask |= 0x1;
 852               		.loc 2 456 0
 853 012a 11E0      		ldi r17,lo8(1)
 854               	.LVL74:
 855               	.L21:
 467:main.c        **** 		{
 856               		.loc 2 467 0
 857 012c 8091 0000 		lds r24,usbTxStatus1
 858 0130 84FF      		sbrs r24,4
 859 0132 00C0      		rjmp .L22
 469:main.c        **** 				reportBuffer.mouse.report_id = report_id_mouse;
 860               		.loc 2 469 0
 861 0134 8091 0000 		lds r24,reportBuffer+1
 862 0138 1817      		cp r17,r24
 863 013a 01F0      		breq .L22
 470:main.c        **** 				reportBuffer.mouse.buttonMask = buttonMask;
 864               		.loc 2 470 0
 865 013c 8092 0000 		sts reportBuffer,r8
 471:main.c        **** 				usbSetInterrupt((uchar*)&reportBuffer.mouse, sizeof(reportBuffer.mouse));
 866               		.loc 2 471 0
 867 0140 1093 0000 		sts reportBuffer+1,r17
 472:main.c        **** 
 868               		.loc 2 472 0
 869 0144 62E0      		ldi r22,lo8(2)
 870 0146 80E0      		ldi r24,lo8(reportBuffer)
 871 0148 90E0      		ldi r25,hi8(reportBuffer)
 872 014a 00D0      		rcall usbSetInterrupt
 873               	.LVL75:
 874               	.L22:
 483:main.c        **** 			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
 875               		.loc 2 483 0
 876 014c 80E0      		ldi r24,0
 877 014e 00D0      		rcall Timer_HasExpired
 878               	.LVL76:
 879 0150 892B      		or r24,r25
 880 0152 01F0      		breq .L23
 484:main.c        **** 			LED_RED_CHANGE();
 881               		.loc 2 484 0
 882 0154 64EF      		ldi r22,lo8(-12)
 883 0156 71E0      		ldi r23,lo8(1)
 884 0158 80E0      		ldi r24,0
 885 015a 00D0      		rcall Timer_Set
 886               	.LVL77:
 485:main.c        **** 		}
 887               		.loc 2 485 0
 888 015c 88B3      		in r24,0x18
 889 015e 8325      		eor r24,r3
 890 0160 88BB      		out 0x18,r24
 891               	.L23:
 487:main.c        **** 			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
 892               		.loc 2 487 0
 893 0162 82E0      		ldi r24,lo8(2)
 894 0164 00D0      		rcall Timer_HasExpired
 895               	.LVL78:
 896 0166 892B      		or r24,r25
 897 0168 01F0      		breq .L24
 488:main.c        **** 			LED_BUTTON_CHANGE();
 898               		.loc 2 488 0
 899 016a 6AEF      		ldi r22,lo8(-6)
 900 016c 70E0      		ldi r23,0
 901 016e 82E0      		ldi r24,lo8(2)
 902 0170 00D0      		rcall Timer_Set
 903               	.LVL79:
 489:main.c        **** 		}
 904               		.loc 2 489 0
 905 0172 98B3      		in r25,0x18
 906 0174 82E0      		ldi r24,lo8(2)
 907 0176 8927      		eor r24,r25
 908 0178 88BB      		out 0x18,r24
 909               	.L24:
 495:main.c        **** 			{
 910               		.loc 2 495 0
 911 017a 4090 0000 		lds r4,led_sensor_delta_time.2466
 912 017e 5090 0000 		lds r5,led_sensor_delta_time.2466+1
 913 0182 612C      		mov r6,__zero_reg__
 914 0184 712C      		mov r7,__zero_reg__
 915 0186 6091 0000 		lds r22,led_sensor_nsample.2471
 916 018a 70E0      		ldi r23,0
 917 018c 80E0      		ldi r24,0
 918 018e 90E0      		ldi r25,0
 919 0190 23E0      		ldi r18,lo8(3)
 920 0192 32E0      		ldi r19,lo8(2)
 921 0194 40E0      		ldi r20,0
 922 0196 50E0      		ldi r21,0
 923 0198 00D0      		rcall __mulsi3
 924               	.LVL80:
 925 019a 4616      		cp r4,r22
 926 019c 5706      		cpc r5,r23
 927 019e 6806      		cpc r6,r24
 928 01a0 7906      		cpc r7,r25
 929 01a2 00F0      		brlo .L25
 497:main.c        **** 				led_sensor_nsample++;
 930               		.loc 2 497 0
 931 01a4 27B8      		out 0x7,r2
 932 01a6 369A      		sbi 0x6,6
 498:main.c        **** 			}
 933               		.loc 2 498 0
 934 01a8 8091 0000 		lds r24,led_sensor_nsample.2471
 935 01ac 8F5F      		subi r24,lo8(-(1))
 936 01ae 8093 0000 		sts led_sensor_nsample.2471,r24
 937               	.L25:
 500:main.c        **** 				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
 938               		.loc 2 500 0
 939 01b2 87B1      		in r24,0x7
 940 01b4 8F73      		andi r24,lo8(63)
 941 01b6 8E30      		cpi r24,lo8(14)
 942 01b8 01F4      		brne .L26
 500:main.c        **** 				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
 943               		.loc 2 500 0 is_stmt 0 discriminator 1
 944 01ba 349B      		sbis 0x6,4
 945 01bc 00C0      		rjmp .L26
 501:main.c        **** 					led_sensor_values[led_sensor_nvalues] = ADC;
 946               		.loc 2 501 0 is_stmt 1
 947 01be 0530      		cpi r16,lo8(5)
 948 01c0 00F4      		brsh .L27
 502:main.c        **** 					if (led_sensor_nvalues == 4) {
 949               		.loc 2 502 0
 950 01c2 64B1      		in r22,0x4
 951 01c4 75B1      		in r23,0x4+1
 503:main.c        **** 						int16_t val = led_sensor_values[led_sensor_nvalues];
 952               		.loc 2 503 0
 953 01c6 0430      		cpi r16,lo8(4)
 954 01c8 01F4      		brne .L27
 955               	.LVL81:
 956               	.LBB27:
 508:main.c        **** 					}
 957               		.loc 2 508 0
 958 01ca C701      		movw r24,r14
 959 01cc 00D0      		rcall filter_iir2
 960               	.LVL82:
 961               	.L27:
 962               	.LBE27:
 511:main.c        **** 				LED_SENSOR_ADC_DONE();
 963               		.loc 2 511 0
 964 01ce 0F5F      		subi r16,lo8(-(1))
 965               	.LVL83:
 512:main.c        **** 			}
 966               		.loc 2 512 0
 967 01d0 349A      		sbi 0x6,4
 968               	.L26:
 517:main.c        **** 			cli();
 969               		.loc 2 517 0
 970 01d2 CB9B      		sbis 0x19,3
 971 01d4 00C0      		rjmp .L46
 972               	.L28:
 374:main.c        **** 	unsigned char buttonPressed = 0;
 973               		.loc 2 374 0
 974 01d6 892D      		mov r24,r9
 975 01d8 00C0      		rjmp .L19
 976               	.L46:
 977               	.LBB28:
 518:main.c        **** 			BOOTLOADER_CONDITION_INIT();
 978               		.loc 2 518 0
 979               	/* #APP */
 980               	 ;  518 "main.c" 1
 981 01da F894      		cli
 982               	 ;  0 "" 2
 519:main.c        **** 			void (*reset_vec)(void) = 0;
 983               		.loc 2 519 0
 984               	/* #NOAPP */
 985 01dc D398      		cbi 0x1a,3
 986 01de DB9A      		sbi 0x1b,3
 987               	.LVL84:
 988               		.loc 2 521 0
 989 01e0 F501      		movw r30,r10
 990 01e2 0995      		icall
 991               	.LVL85:
 992 01e4 00C0      		rjmp .L28
 993               	.LBE28:
 994               		.cfi_endproc
 995               	.LFE32:
 996               		.size	main, .-main
 997               		.data
 998               		.type	led_sensor_nsample.2471, @object
 999               		.size	led_sensor_nsample.2471, 1
 1000               	led_sensor_nsample.2471:
 1001 0000 05        		.byte	5
 1002               		.section	.progmem.data,"a",@progbits
 1003               		.type	__c.2487, @object
 1004               		.size	__c.2487, 10
 1005               	__c.2487:
 1006 0000 4275 7474 		.string	"Button!\r\n"
 1006      6F6E 210D 
 1006      0A00 
 1007               		.local	led_sensor_delta_time.2466
 1008               		.comm	led_sensor_delta_time.2466,2,1
 1009               		.type	__c.2476, @object
 1010               		.size	__c.2476, 4
 1011               	__c.2476:
 1012 000a 4221 0A00 		.string	"B!\n"
 1013               	.global	rainbow_colors
 1014               		.data
 1015               		.type	rainbow_colors, @object
 1016               		.size	rainbow_colors, 21
 1017               	rainbow_colors:
 1018 0001 C8        		.byte	-56
 1019 0002 00        		.byte	0
 1020 0003 C8        		.byte	-56
 1021 0004 C8        		.byte	-56
 1022 0005 00        		.byte	0
 1023 0006 00        		.byte	0
 1024 0007 C8        		.byte	-56
 1025 0008 C8        		.byte	-56
 1026 0009 00        		.byte	0
 1027 000a 00        		.byte	0
 1028 000b C8        		.byte	-56
 1029 000c 00        		.byte	0
 1030 000d 00        		.byte	0
 1031 000e C8        		.byte	-56
 1032 000f C8        		.byte	-56
 1033 0010 00        		.byte	0
 1034 0011 00        		.byte	0
 1035 0012 C8        		.byte	-56
 1036 0013 C8        		.byte	-56
 1037 0014 00        		.byte	0
 1038 0015 C8        		.byte	-56
 1039               		.local	reportBuffer
 1040               		.comm	reportBuffer,2,1
 1041               	.global	usbDescriptorHidReport
 1042               		.section	.progmem.data,"a",@progbits
 1043               		.type	usbDescriptorHidReport, @object
 1044               		.size	usbDescriptorHidReport, 80
 1045               	usbDescriptorHidReport:
 1046 000e 05        		.byte	5
 1047 000f 01        		.byte	1
 1048 0010 09        		.byte	9
 1049 0011 02        		.byte	2
 1050 0012 A1        		.byte	-95
 1051 0013 01        		.byte	1
 1052 0014 09        		.byte	9
 1053 0015 01        		.byte	1
 1054 0016 A1        		.byte	-95
 1055 0017 00        		.byte	0
 1056 0018 05        		.byte	5
 1057 0019 09        		.byte	9
 1058 001a 19        		.byte	25
 1059 001b 01        		.byte	1
 1060 001c 29        		.byte	41
 1061 001d 03        		.byte	3
 1062 001e 15        		.byte	21
 1063 001f 00        		.byte	0
 1064 0020 25        		.byte	37
 1065 0021 01        		.byte	1
 1066 0022 95        		.byte	-107
 1067 0023 03        		.byte	3
 1068 0024 75        		.byte	117
 1069 0025 01        		.byte	1
 1070 0026 85        		.byte	-123
 1071 0027 01        		.byte	1
 1072 0028 81        		.byte	-127
 1073 0029 02        		.byte	2
 1074 002a 95        		.byte	-107
 1075 002b 01        		.byte	1
 1076 002c 75        		.byte	117
 1077 002d 05        		.byte	5
 1078 002e 81        		.byte	-127
 1079 002f 03        		.byte	3
 1080 0030 C0        		.byte	-64
 1081 0031 C0        		.byte	-64
 1082 0032 0B        		.byte	11
 1083 0033 00        		.byte	0
 1084 0034 00        		.byte	0
 1085 0035 01        		.byte	1
 1086 0036 00        		.byte	0
 1087 0037 A1        		.byte	-95
 1088 0038 00        		.byte	0
 1089 0039 05        		.byte	5
 1090 003a 01        		.byte	1
 1091 003b 75        		.byte	117
 1092 003c 10        		.byte	16
 1093 003d 95        		.byte	-107
 1094 003e 01        		.byte	1
 1095 003f 09        		.byte	9
 1096 0040 00        		.byte	0
 1097 0041 85        		.byte	-123
 1098 0042 7C        		.byte	124
 1099 0043 B1        		.byte	-79
 1100 0044 02        		.byte	2
 1101 0045 09        		.byte	9
 1102 0046 00        		.byte	0
 1103 0047 85        		.byte	-123
 1104 0048 7D        		.byte	125
 1105 0049 B1        		.byte	-79
 1106 004a 02        		.byte	2
 1107 004b 75        		.byte	117
 1108 004c 08        		.byte	8
 1109 004d 95        		.byte	-107
 1110 004e 44        		.byte	68
 1111 004f 09        		.byte	9
 1112 0050 00        		.byte	0
 1113 0051 85        		.byte	-123
 1114 0052 7E        		.byte	126
 1115 0053 B1        		.byte	-79
 1116 0054 00        		.byte	0
 1117 0055 09        		.byte	9
 1118 0056 00        		.byte	0
 1119 0057 95        		.byte	-107
 1120 0058 09        		.byte	9
 1121 0059 85        		.byte	-123
 1122 005a 7F        		.byte	127
 1123 005b B1        		.byte	-79
 1124 005c 00        		.byte	0
 1125 005d C0        		.byte	-64
 1126               		.local	captured
 1127               		.comm	captured,2,1
 1128               		.local	capture_diff_max
 1129               		.comm	capture_diff_max,2,1
 1130               		.local	capture_diff
 1131               		.comm	capture_diff,2,1
 1132               		.text
 1133               	.Letext0:
 1134               		.file 5 "/usr/lib/avr/include/stdint.h"
 1135               		.file 6 "/usr/lib/avr/include/stdio.h"
 1136               		.file 7 "../usbdrv/usbdrv.h"
 1137               		.file 8 "./usbconfig.h"
 1138               		.file 9 "./timer_ids.h"
 1139               		.file 10 "../util/q7_8_t.h"
 1140               		.file 11 "hid.h"
 1141               		.file 12 "../util/usbstream.h"
 1142               		.file 13 "../util/timers.h"
 1143               		.section	.debug_info,"",@progbits
 1144               	.Ldebug_info0:
 1145 0000 490C 0000 		.long	0xc49
 1146 0004 0200      		.word	0x2
 1147 0006 0000 0000 		.long	.Ldebug_abbrev0
 1148 000a 04        		.byte	0x4
 1149 000b 01        		.uleb128 0x1
 1150 000c 0000 0000 		.long	.LASF118
 1151 0010 0C        		.byte	0xc
 1152 0011 0000 0000 		.long	.LASF119
 1153 0015 0000 0000 		.long	.LASF120
 1154 0019 0000 0000 		.long	.Ldebug_ranges0+0x18
 1155 001d 0000 0000 		.long	0
 1156 0021 0000 0000 		.long	0
 1157 0025 0000 0000 		.long	.Ldebug_line0
 1158 0029 02        		.uleb128 0x2
 1159 002a 0000 0000 		.long	.LASF0
 1160 002e 05        		.byte	0x5
 1161 002f 7D        		.byte	0x7d
 1162 0030 3400 0000 		.long	0x34
 1163 0034 03        		.uleb128 0x3
 1164 0035 01        		.byte	0x1
 1165 0036 06        		.byte	0x6
 1166 0037 0000 0000 		.long	.LASF2
 1167 003b 02        		.uleb128 0x2
 1168 003c 0000 0000 		.long	.LASF1
 1169 0040 05        		.byte	0x5
 1170 0041 7E        		.byte	0x7e
 1171 0042 4600 0000 		.long	0x46
 1172 0046 03        		.uleb128 0x3
 1173 0047 01        		.byte	0x1
 1174 0048 08        		.byte	0x8
 1175 0049 0000 0000 		.long	.LASF3
 1176 004d 02        		.uleb128 0x2
 1177 004e 0000 0000 		.long	.LASF4
 1178 0052 05        		.byte	0x5
 1179 0053 7F        		.byte	0x7f
 1180 0054 5800 0000 		.long	0x58
 1181 0058 04        		.uleb128 0x4
 1182 0059 02        		.byte	0x2
 1183 005a 05        		.byte	0x5
 1184 005b 696E 7400 		.string	"int"
 1185 005f 02        		.uleb128 0x2
 1186 0060 0000 0000 		.long	.LASF5
 1187 0064 05        		.byte	0x5
 1188 0065 80        		.byte	0x80
 1189 0066 6A00 0000 		.long	0x6a
 1190 006a 03        		.uleb128 0x3
 1191 006b 02        		.byte	0x2
 1192 006c 07        		.byte	0x7
 1193 006d 0000 0000 		.long	.LASF6
 1194 0071 02        		.uleb128 0x2
 1195 0072 0000 0000 		.long	.LASF7
 1196 0076 05        		.byte	0x5
 1197 0077 81        		.byte	0x81
 1198 0078 7C00 0000 		.long	0x7c
 1199 007c 03        		.uleb128 0x3
 1200 007d 04        		.byte	0x4
 1201 007e 05        		.byte	0x5
 1202 007f 0000 0000 		.long	.LASF8
 1203 0083 03        		.uleb128 0x3
 1204 0084 04        		.byte	0x4
 1205 0085 07        		.byte	0x7
 1206 0086 0000 0000 		.long	.LASF9
 1207 008a 03        		.uleb128 0x3
 1208 008b 08        		.byte	0x8
 1209 008c 05        		.byte	0x5
 1210 008d 0000 0000 		.long	.LASF10
 1211 0091 03        		.uleb128 0x3
 1212 0092 08        		.byte	0x8
 1213 0093 07        		.byte	0x7
 1214 0094 0000 0000 		.long	.LASF11
 1215 0098 05        		.uleb128 0x5
 1216 0099 0000 0000 		.long	.LASF25
 1217 009d 0E        		.byte	0xe
 1218 009e 06        		.byte	0x6
 1219 009f F4        		.byte	0xf4
 1220 00a0 1A01 0000 		.long	0x11a
 1221 00a4 06        		.uleb128 0x6
 1222 00a5 6275 6600 		.string	"buf"
 1223 00a9 06        		.byte	0x6
 1224 00aa F5        		.byte	0xf5
 1225 00ab 1A01 0000 		.long	0x11a
 1226 00af 02        		.byte	0x2
 1227 00b0 23        		.byte	0x23
 1228 00b1 00        		.uleb128 0
 1229 00b2 07        		.uleb128 0x7
 1230 00b3 0000 0000 		.long	.LASF12
 1231 00b7 06        		.byte	0x6
 1232 00b8 F6        		.byte	0xf6
 1233 00b9 4600 0000 		.long	0x46
 1234 00bd 02        		.byte	0x2
 1235 00be 23        		.byte	0x23
 1236 00bf 02        		.uleb128 0x2
 1237 00c0 07        		.uleb128 0x7
 1238 00c1 0000 0000 		.long	.LASF13
 1239 00c5 06        		.byte	0x6
 1240 00c6 F7        		.byte	0xf7
 1241 00c7 3B00 0000 		.long	0x3b
 1242 00cb 02        		.byte	0x2
 1243 00cc 23        		.byte	0x23
 1244 00cd 03        		.uleb128 0x3
 1245 00ce 08        		.uleb128 0x8
 1246 00cf 0000 0000 		.long	.LASF14
 1247 00d3 06        		.byte	0x6
 1248 00d4 0701      		.word	0x107
 1249 00d6 5800 0000 		.long	0x58
 1250 00da 02        		.byte	0x2
 1251 00db 23        		.byte	0x23
 1252 00dc 04        		.uleb128 0x4
 1253 00dd 09        		.uleb128 0x9
 1254 00de 6C65 6E00 		.string	"len"
 1255 00e2 06        		.byte	0x6
 1256 00e3 0801      		.word	0x108
 1257 00e5 5800 0000 		.long	0x58
 1258 00e9 02        		.byte	0x2
 1259 00ea 23        		.byte	0x23
 1260 00eb 06        		.uleb128 0x6
 1261 00ec 09        		.uleb128 0x9
 1262 00ed 7075 7400 		.string	"put"
 1263 00f1 06        		.byte	0x6
 1264 00f2 0901      		.word	0x109
 1265 00f4 4201 0000 		.long	0x142
 1266 00f8 02        		.byte	0x2
 1267 00f9 23        		.byte	0x23
 1268 00fa 08        		.uleb128 0x8
 1269 00fb 09        		.uleb128 0x9
 1270 00fc 6765 7400 		.string	"get"
 1271 0100 06        		.byte	0x6
 1272 0101 0A01      		.word	0x10a
 1273 0103 5801 0000 		.long	0x158
 1274 0107 02        		.byte	0x2
 1275 0108 23        		.byte	0x23
 1276 0109 0A        		.uleb128 0xa
 1277 010a 08        		.uleb128 0x8
 1278 010b 0000 0000 		.long	.LASF15
 1279 010f 06        		.byte	0x6
 1280 0110 0B01      		.word	0x10b
 1281 0112 5E01 0000 		.long	0x15e
 1282 0116 02        		.byte	0x2
 1283 0117 23        		.byte	0x23
 1284 0118 0C        		.uleb128 0xc
 1285 0119 00        		.byte	0
 1286 011a 0A        		.uleb128 0xa
 1287 011b 02        		.byte	0x2
 1288 011c 2001 0000 		.long	0x120
 1289 0120 03        		.uleb128 0x3
 1290 0121 01        		.byte	0x1
 1291 0122 08        		.byte	0x8
 1292 0123 0000 0000 		.long	.LASF16
 1293 0127 0B        		.uleb128 0xb
 1294 0128 01        		.byte	0x1
 1295 0129 5800 0000 		.long	0x58
 1296 012d 3C01 0000 		.long	0x13c
 1297 0131 0C        		.uleb128 0xc
 1298 0132 2001 0000 		.long	0x120
 1299 0136 0C        		.uleb128 0xc
 1300 0137 3C01 0000 		.long	0x13c
 1301 013b 00        		.byte	0
 1302 013c 0A        		.uleb128 0xa
 1303 013d 02        		.byte	0x2
 1304 013e 9800 0000 		.long	0x98
 1305 0142 0A        		.uleb128 0xa
 1306 0143 02        		.byte	0x2
 1307 0144 2701 0000 		.long	0x127
 1308 0148 0B        		.uleb128 0xb
 1309 0149 01        		.byte	0x1
 1310 014a 5800 0000 		.long	0x58
 1311 014e 5801 0000 		.long	0x158
 1312 0152 0C        		.uleb128 0xc
 1313 0153 3C01 0000 		.long	0x13c
 1314 0157 00        		.byte	0
 1315 0158 0A        		.uleb128 0xa
 1316 0159 02        		.byte	0x2
 1317 015a 4801 0000 		.long	0x148
 1318 015e 0D        		.uleb128 0xd
 1319 015f 02        		.byte	0x2
 1320 0160 0E        		.uleb128 0xe
 1321 0161 0000 0000 		.long	.LASF17
 1322 0165 06        		.byte	0x6
 1323 0166 1501      		.word	0x115
 1324 0168 9800 0000 		.long	0x98
 1325 016c 0F        		.uleb128 0xf
 1326 016d 01        		.byte	0x1
 1327 016e 4600 0000 		.long	0x46
 1328 0172 08        		.byte	0x8
 1329 0173 7601      		.word	0x176
 1330 0175 9E01 0000 		.long	0x19e
 1331 0179 10        		.uleb128 0x10
 1332 017a 0000 0000 		.long	.LASF18
 1333 017e 01        		.byte	0x1
 1334 017f 10        		.uleb128 0x10
 1335 0180 0000 0000 		.long	.LASF19
 1336 0184 02        		.byte	0x2
 1337 0185 10        		.uleb128 0x10
 1338 0186 0000 0000 		.long	.LASF20
 1339 018a 7C        		.byte	0x7c
 1340 018b 10        		.uleb128 0x10
 1341 018c 0000 0000 		.long	.LASF21
 1342 0190 7D        		.byte	0x7d
 1343 0191 10        		.uleb128 0x10
 1344 0192 0000 0000 		.long	.LASF22
 1345 0196 7E        		.byte	0x7e
 1346 0197 10        		.uleb128 0x10
 1347 0198 0000 0000 		.long	.LASF23
 1348 019c 7F        		.byte	0x7f
 1349 019d 00        		.byte	0
 1350 019e 03        		.uleb128 0x3
 1351 019f 02        		.byte	0x2
 1352 01a0 07        		.byte	0x7
 1353 01a1 0000 0000 		.long	.LASF24
 1354 01a5 11        		.uleb128 0x11
 1355 01a6 0000 0000 		.long	.LASF26
 1356 01aa 0C        		.byte	0xc
 1357 01ab 07        		.byte	0x7
 1358 01ac 8702      		.word	0x287
 1359 01ae D101 0000 		.long	0x1d1
 1360 01b2 09        		.uleb128 0x9
 1361 01b3 6C65 6E00 		.string	"len"
 1362 01b7 07        		.byte	0x7
 1363 01b8 8802      		.word	0x288
 1364 01ba D101 0000 		.long	0x1d1
 1365 01be 02        		.byte	0x2
 1366 01bf 23        		.byte	0x23
 1367 01c0 00        		.uleb128 0
 1368 01c1 08        		.uleb128 0x8
 1369 01c2 0000 0000 		.long	.LASF27
 1370 01c6 07        		.byte	0x7
 1371 01c7 8902      		.word	0x289
 1372 01c9 D601 0000 		.long	0x1d6
 1373 01cd 02        		.byte	0x2
 1374 01ce 23        		.byte	0x23
 1375 01cf 01        		.uleb128 0x1
 1376 01d0 00        		.byte	0
 1377 01d1 12        		.uleb128 0x12
 1378 01d2 4600 0000 		.long	0x46
 1379 01d6 13        		.uleb128 0x13
 1380 01d7 4600 0000 		.long	0x46
 1381 01db E601 0000 		.long	0x1e6
 1382 01df 14        		.uleb128 0x14
 1383 01e0 9E01 0000 		.long	0x19e
 1384 01e4 0A        		.byte	0xa
 1385 01e5 00        		.byte	0
 1386 01e6 0E        		.uleb128 0xe
 1387 01e7 0000 0000 		.long	.LASF28
 1388 01eb 07        		.byte	0x7
 1389 01ec 8A02      		.word	0x28a
 1390 01ee A501 0000 		.long	0x1a5
 1391 01f2 15        		.uleb128 0x15
 1392 01f3 0000 0000 		.long	.LASF121
 1393 01f7 02        		.byte	0x2
 1394 01f8 07        		.byte	0x7
 1395 01f9 9302      		.word	0x293
 1396 01fb 1802 0000 		.long	0x218
 1397 01ff 16        		.uleb128 0x16
 1398 0200 0000 0000 		.long	.LASF29
 1399 0204 07        		.byte	0x7
 1400 0205 9402      		.word	0x294
 1401 0207 6A00 0000 		.long	0x6a
 1402 020b 16        		.uleb128 0x16
 1403 020c 0000 0000 		.long	.LASF30
 1404 0210 07        		.byte	0x7
 1405 0211 9502      		.word	0x295
 1406 0213 1802 0000 		.long	0x218
 1407 0217 00        		.byte	0
 1408 0218 13        		.uleb128 0x13
 1409 0219 4600 0000 		.long	0x46
 1410 021d 2802 0000 		.long	0x228
 1411 0221 14        		.uleb128 0x14
 1412 0222 9E01 0000 		.long	0x19e
 1413 0226 01        		.byte	0x1
 1414 0227 00        		.byte	0
 1415 0228 0E        		.uleb128 0xe
 1416 0229 0000 0000 		.long	.LASF31
 1417 022d 07        		.byte	0x7
 1418 022e 9602      		.word	0x296
 1419 0230 F201 0000 		.long	0x1f2
 1420 0234 11        		.uleb128 0x11
 1421 0235 0000 0000 		.long	.LASF32
 1422 0239 08        		.byte	0x8
 1423 023a 07        		.byte	0x7
 1424 023b 9802      		.word	0x298
 1425 023d 8D02 0000 		.long	0x28d
 1426 0241 08        		.uleb128 0x8
 1427 0242 0000 0000 		.long	.LASF33
 1428 0246 07        		.byte	0x7
 1429 0247 9902      		.word	0x299
 1430 0249 4600 0000 		.long	0x46
 1431 024d 02        		.byte	0x2
 1432 024e 23        		.byte	0x23
 1433 024f 00        		.uleb128 0
 1434 0250 08        		.uleb128 0x8
 1435 0251 0000 0000 		.long	.LASF34
 1436 0255 07        		.byte	0x7
 1437 0256 9A02      		.word	0x29a
 1438 0258 4600 0000 		.long	0x46
 1439 025c 02        		.byte	0x2
 1440 025d 23        		.byte	0x23
 1441 025e 01        		.uleb128 0x1
 1442 025f 08        		.uleb128 0x8
 1443 0260 0000 0000 		.long	.LASF35
 1444 0264 07        		.byte	0x7
 1445 0265 9B02      		.word	0x29b
 1446 0267 2802 0000 		.long	0x228
 1447 026b 02        		.byte	0x2
 1448 026c 23        		.byte	0x23
 1449 026d 02        		.uleb128 0x2
 1450 026e 08        		.uleb128 0x8
 1451 026f 0000 0000 		.long	.LASF36
 1452 0273 07        		.byte	0x7
 1453 0274 9C02      		.word	0x29c
 1454 0276 2802 0000 		.long	0x228
 1455 027a 02        		.byte	0x2
 1456 027b 23        		.byte	0x23
 1457 027c 04        		.uleb128 0x4
 1458 027d 08        		.uleb128 0x8
 1459 027e 0000 0000 		.long	.LASF37
 1460 0282 07        		.byte	0x7
 1461 0283 9D02      		.word	0x29d
 1462 0285 2802 0000 		.long	0x228
 1463 0289 02        		.byte	0x2
 1464 028a 23        		.byte	0x23
 1465 028b 06        		.uleb128 0x6
 1466 028c 00        		.byte	0
 1467 028d 0E        		.uleb128 0xe
 1468 028e 0000 0000 		.long	.LASF38
 1469 0292 07        		.byte	0x7
 1470 0293 9E02      		.word	0x29e
 1471 0295 3402 0000 		.long	0x234
 1472 0299 17        		.uleb128 0x17
 1473 029a 01        		.byte	0x1
 1474 029b 4600 0000 		.long	0x46
 1475 029f 09        		.byte	0x9
 1476 02a0 12        		.byte	0x12
 1477 02a1 DC02 0000 		.long	0x2dc
 1478 02a5 10        		.uleb128 0x10
 1479 02a6 0000 0000 		.long	.LASF39
 1480 02aa 00        		.byte	0
 1481 02ab 10        		.uleb128 0x10
 1482 02ac 0000 0000 		.long	.LASF40
 1483 02b0 01        		.byte	0x1
 1484 02b1 10        		.uleb128 0x10
 1485 02b2 0000 0000 		.long	.LASF41
 1486 02b6 02        		.byte	0x2
 1487 02b7 10        		.uleb128 0x10
 1488 02b8 0000 0000 		.long	.LASF42
 1489 02bc 03        		.byte	0x3
 1490 02bd 10        		.uleb128 0x10
 1491 02be 0000 0000 		.long	.LASF43
 1492 02c2 04        		.byte	0x4
 1493 02c3 10        		.uleb128 0x10
 1494 02c4 0000 0000 		.long	.LASF44
 1495 02c8 05        		.byte	0x5
 1496 02c9 10        		.uleb128 0x10
 1497 02ca 0000 0000 		.long	.LASF45
 1498 02ce 06        		.byte	0x6
 1499 02cf 10        		.uleb128 0x10
 1500 02d0 0000 0000 		.long	.LASF46
 1501 02d4 07        		.byte	0x7
 1502 02d5 10        		.uleb128 0x10
 1503 02d6 0000 0000 		.long	.LASF47
 1504 02da 08        		.byte	0x8
 1505 02db 00        		.byte	0
 1506 02dc 02        		.uleb128 0x2
 1507 02dd 0000 0000 		.long	.LASF48
 1508 02e1 0A        		.byte	0xa
 1509 02e2 0B        		.byte	0xb
 1510 02e3 4D00 0000 		.long	0x4d
 1511 02e7 18        		.uleb128 0x18
 1512 02e8 08        		.byte	0x8
 1513 02e9 01        		.byte	0x1
 1514 02ea 18        		.byte	0x18
 1515 02eb 2803 0000 		.long	0x328
 1516 02ef 06        		.uleb128 0x6
 1517 02f0 795F 3100 		.string	"y_1"
 1518 02f4 01        		.byte	0x1
 1519 02f5 19        		.byte	0x19
 1520 02f6 DC02 0000 		.long	0x2dc
 1521 02fa 02        		.byte	0x2
 1522 02fb 23        		.byte	0x23
 1523 02fc 00        		.uleb128 0
 1524 02fd 06        		.uleb128 0x6
 1525 02fe 795F 3200 		.string	"y_2"
 1526 0302 01        		.byte	0x1
 1527 0303 1A        		.byte	0x1a
 1528 0304 DC02 0000 		.long	0x2dc
 1529 0308 02        		.byte	0x2
 1530 0309 23        		.byte	0x23
 1531 030a 02        		.uleb128 0x2
 1532 030b 06        		.uleb128 0x6
 1533 030c 785F 3100 		.string	"x_1"
 1534 0310 01        		.byte	0x1
 1535 0311 1B        		.byte	0x1b
 1536 0312 DC02 0000 		.long	0x2dc
 1537 0316 02        		.byte	0x2
 1538 0317 23        		.byte	0x23
 1539 0318 04        		.uleb128 0x4
 1540 0319 06        		.uleb128 0x6
 1541 031a 785F 3200 		.string	"x_2"
 1542 031e 01        		.byte	0x1
 1543 031f 1C        		.byte	0x1c
 1544 0320 DC02 0000 		.long	0x2dc
 1545 0324 02        		.byte	0x2
 1546 0325 23        		.byte	0x23
 1547 0326 06        		.uleb128 0x6
 1548 0327 00        		.byte	0
 1549 0328 02        		.uleb128 0x2
 1550 0329 0000 0000 		.long	.LASF49
 1551 032d 01        		.byte	0x1
 1552 032e 1D        		.byte	0x1d
 1553 032f E702 0000 		.long	0x2e7
 1554 0333 18        		.uleb128 0x18
 1555 0334 02        		.byte	0x2
 1556 0335 02        		.byte	0x2
 1557 0336 8E        		.byte	0x8e
 1558 0337 5803 0000 		.long	0x358
 1559 033b 07        		.uleb128 0x7
 1560 033c 0000 0000 		.long	.LASF50
 1561 0340 02        		.byte	0x2
 1562 0341 8F        		.byte	0x8f
 1563 0342 4600 0000 		.long	0x46
 1564 0346 02        		.byte	0x2
 1565 0347 23        		.byte	0x23
 1566 0348 00        		.uleb128 0
 1567 0349 07        		.uleb128 0x7
 1568 034a 0000 0000 		.long	.LASF51
 1569 034e 02        		.byte	0x2
 1570 034f 90        		.byte	0x90
 1571 0350 4600 0000 		.long	0x46
 1572 0354 02        		.byte	0x2
 1573 0355 23        		.byte	0x23
 1574 0356 01        		.uleb128 0x1
 1575 0357 00        		.byte	0
 1576 0358 18        		.uleb128 0x18
 1577 0359 02        		.byte	0x2
 1578 035a 02        		.byte	0x2
 1579 035b 8D        		.byte	0x8d
 1580 035c 6F03 0000 		.long	0x36f
 1581 0360 07        		.uleb128 0x7
 1582 0361 0000 0000 		.long	.LASF52
 1583 0365 02        		.byte	0x2
 1584 0366 91        		.byte	0x91
 1585 0367 3303 0000 		.long	0x333
 1586 036b 02        		.byte	0x2
 1587 036c 23        		.byte	0x23
 1588 036d 00        		.uleb128 0
 1589 036e 00        		.byte	0
 1590 036f 02        		.uleb128 0x2
 1591 0370 0000 0000 		.long	.LASF53
 1592 0374 02        		.byte	0x2
 1593 0375 92        		.byte	0x92
 1594 0376 5803 0000 		.long	0x358
 1595 037a 18        		.uleb128 0x18
 1596 037b 41        		.byte	0x41
 1597 037c 02        		.byte	0x2
 1598 037d B0        		.byte	0xb0
 1599 037e 9F03 0000 		.long	0x39f
 1600 0382 07        		.uleb128 0x7
 1601 0383 0000 0000 		.long	.LASF27
 1602 0387 02        		.byte	0x2
 1603 0388 B1        		.byte	0xb1
 1604 0389 9F03 0000 		.long	0x39f
 1605 038d 02        		.byte	0x2
 1606 038e 23        		.byte	0x23
 1607 038f 00        		.uleb128 0
 1608 0390 07        		.uleb128 0x7
 1609 0391 0000 0000 		.long	.LASF54
 1610 0395 02        		.byte	0x2
 1611 0396 B2        		.byte	0xb2
 1612 0397 4600 0000 		.long	0x46
 1613 039b 02        		.byte	0x2
 1614 039c 23        		.byte	0x23
 1615 039d 40        		.uleb128 0x40
 1616 039e 00        		.byte	0
 1617 039f 13        		.uleb128 0x13
 1618 03a0 2001 0000 		.long	0x120
 1619 03a4 AF03 0000 		.long	0x3af
 1620 03a8 14        		.uleb128 0x14
 1621 03a9 9E01 0000 		.long	0x19e
 1622 03ad 3F        		.byte	0x3f
 1623 03ae 00        		.byte	0
 1624 03af 02        		.uleb128 0x2
 1625 03b0 0000 0000 		.long	.LASF55
 1626 03b4 02        		.byte	0x2
 1627 03b5 B3        		.byte	0xb3
 1628 03b6 7A03 0000 		.long	0x37a
 1629 03ba 02        		.uleb128 0x2
 1630 03bb 0000 0000 		.long	.LASF56
 1631 03bf 02        		.byte	0x2
 1632 03c0 B7        		.byte	0xb7
 1633 03c1 3B00 0000 		.long	0x3b
 1634 03c5 17        		.uleb128 0x17
 1635 03c6 01        		.byte	0x1
 1636 03c7 4600 0000 		.long	0x46
 1637 03cb 02        		.byte	0x2
 1638 03cc BE        		.byte	0xbe
 1639 03cd EA03 0000 		.long	0x3ea
 1640 03d1 19        		.uleb128 0x19
 1641 03d2 5245 4400 		.string	"RED"
 1642 03d6 00        		.byte	0
 1643 03d7 10        		.uleb128 0x10
 1644 03d8 0000 0000 		.long	.LASF57
 1645 03dc 01        		.byte	0x1
 1646 03dd 10        		.uleb128 0x10
 1647 03de 0000 0000 		.long	.LASF58
 1648 03e2 02        		.byte	0x2
 1649 03e3 10        		.uleb128 0x10
 1650 03e4 0000 0000 		.long	.LASF59
 1651 03e8 03        		.byte	0x3
 1652 03e9 00        		.byte	0
 1653 03ea 05        		.uleb128 0x5
 1654 03eb 0000 0000 		.long	.LASF60
 1655 03ef 03        		.byte	0x3
 1656 03f0 02        		.byte	0x2
 1657 03f1 C2        		.byte	0xc2
 1658 03f2 0504 0000 		.long	0x405
 1659 03f6 07        		.uleb128 0x7
 1660 03f7 0000 0000 		.long	.LASF61
 1661 03fb 02        		.byte	0x2
 1662 03fc C3        		.byte	0xc3
 1663 03fd 0504 0000 		.long	0x405
 1664 0401 02        		.byte	0x2
 1665 0402 23        		.byte	0x23
 1666 0403 00        		.uleb128 0
 1667 0404 00        		.byte	0
 1668 0405 13        		.uleb128 0x13
 1669 0406 3B00 0000 		.long	0x3b
 1670 040a 1504 0000 		.long	0x415
 1671 040e 14        		.uleb128 0x14
 1672 040f 9E01 0000 		.long	0x19e
 1673 0413 02        		.byte	0x2
 1674 0414 00        		.byte	0
 1675 0415 02        		.uleb128 0x2
 1676 0416 0000 0000 		.long	.LASF62
 1677 041a 02        		.byte	0x2
 1678 041b C4        		.byte	0xc4
 1679 041c EA03 0000 		.long	0x3ea
 1680 0420 1A        		.uleb128 0x1a
 1681 0421 0000 0000 		.long	.LASF122
 1682 0425 04        		.byte	0x4
 1683 0426 C401      		.word	0x1c4
 1684 0428 01        		.byte	0x1
 1685 0429 03        		.byte	0x3
 1686 042a 3B04 0000 		.long	0x43b
 1687 042e 1B        		.uleb128 0x1b
 1688 042f 0000 0000 		.long	.LASF123
 1689 0433 04        		.byte	0x4
 1690 0434 C401      		.word	0x1c4
 1691 0436 3B04 0000 		.long	0x43b
 1692 043a 00        		.byte	0
 1693 043b 1C        		.uleb128 0x1c
 1694 043c 3B00 0000 		.long	0x3b
 1695 0440 1D        		.uleb128 0x1d
 1696 0441 01        		.byte	0x1
 1697 0442 0000 0000 		.long	.LASF65
 1698 0446 01        		.byte	0x1
 1699 0447 92        		.byte	0x92
 1700 0448 01        		.byte	0x1
 1701 0449 DC02 0000 		.long	0x2dc
 1702 044d 0000 0000 		.long	.LFB21
 1703 0451 0000 0000 		.long	.LFE21
 1704 0455 0000 0000 		.long	.LLST0
 1705 0459 01        		.byte	0x1
 1706 045a D604 0000 		.long	0x4d6
 1707 045e 1E        		.uleb128 0x1e
 1708 045f 0000 0000 		.long	.LASF63
 1709 0463 01        		.byte	0x1
 1710 0464 92        		.byte	0x92
 1711 0465 D604 0000 		.long	0x4d6
 1712 0469 0000 0000 		.long	.LLST1
 1713 046d 1F        		.uleb128 0x1f
 1714 046e 696E 00   		.string	"in"
 1715 0471 01        		.byte	0x1
 1716 0472 92        		.byte	0x92
 1717 0473 DC02 0000 		.long	0x2dc
 1718 0477 0000 0000 		.long	.LLST2
 1719 047b 20        		.uleb128 0x20
 1720 047c 6130 00   		.string	"a0"
 1721 047f 01        		.byte	0x1
 1722 0480 94        		.byte	0x94
 1723 0481 DC04 0000 		.long	0x4dc
 1724 0485 05        		.byte	0x5
 1725 0486 20        		.uleb128 0x20
 1726 0487 6131 00   		.string	"a1"
 1727 048a 01        		.byte	0x1
 1728 048b 95        		.byte	0x95
 1729 048c DC04 0000 		.long	0x4dc
 1730 0490 0A        		.byte	0xa
 1731 0491 20        		.uleb128 0x20
 1732 0492 6132 00   		.string	"a2"
 1733 0495 01        		.byte	0x1
 1734 0496 96        		.byte	0x96
 1735 0497 DC04 0000 		.long	0x4dc
 1736 049b 05        		.byte	0x5
 1737 049c 21        		.uleb128 0x21
 1738 049d 0000 0000 		.long	.LASF64
 1739 04a1 01        		.byte	0x1
 1740 04a2 97        		.byte	0x97
 1741 04a3 DC04 0000 		.long	0x4dc
 1742 04a7 0001      		.word	0x100
 1743 04a9 22        		.uleb128 0x22
 1744 04aa 5F62 3100 		.string	"_b1"
 1745 04ae 01        		.byte	0x1
 1746 04af 98        		.byte	0x98
 1747 04b0 DC04 0000 		.long	0x4dc
 1748 04b4 9E01      		.word	0x19e
 1749 04b6 23        		.uleb128 0x23
 1750 04b7 5F62 3200 		.string	"_b2"
 1751 04bb 01        		.byte	0x1
 1752 04bc 99        		.byte	0x99
 1753 04bd DC04 0000 		.long	0x4dc
 1754 04c1 CB7E      		.sleb128 -181
 1755 04c3 24        		.uleb128 0x24
 1756 04c4 7265 7300 		.string	"res"
 1757 04c8 01        		.byte	0x1
 1758 04c9 9B        		.byte	0x9b
 1759 04ca DC02 0000 		.long	0x2dc
 1760 04ce 06        		.byte	0x6
 1761 04cf 68        		.byte	0x68
 1762 04d0 93        		.byte	0x93
 1763 04d1 01        		.uleb128 0x1
 1764 04d2 69        		.byte	0x69
 1765 04d3 93        		.byte	0x93
 1766 04d4 01        		.uleb128 0x1
 1767 04d5 00        		.byte	0
 1768 04d6 0A        		.uleb128 0xa
 1769 04d7 02        		.byte	0x2
 1770 04d8 2803 0000 		.long	0x328
 1771 04dc 1C        		.uleb128 0x1c
 1772 04dd DC02 0000 		.long	0x2dc
 1773 04e1 25        		.uleb128 0x25
 1774 04e2 01        		.byte	0x1
 1775 04e3 0000 0000 		.long	.LASF124
 1776 04e7 02        		.byte	0x2
 1777 04e8 61        		.byte	0x61
 1778 04e9 01        		.byte	0x1
 1779 04ea 0000 0000 		.long	.LFB22
 1780 04ee 0000 0000 		.long	.LFE22
 1781 04f2 0000 0000 		.long	.LLST3
 1782 04f6 01        		.byte	0x1
 1783 04f7 26        		.uleb128 0x26
 1784 04f8 01        		.byte	0x1
 1785 04f9 0000 0000 		.long	.LASF66
 1786 04fd 02        		.byte	0x2
 1787 04fe 98        		.byte	0x98
 1788 04ff 01        		.byte	0x1
 1789 0500 4600 0000 		.long	0x46
 1790 0504 0000 0000 		.long	.LFB23
 1791 0508 0000 0000 		.long	.LFE23
 1792 050c 03        		.byte	0x3
 1793 050d 92        		.byte	0x92
 1794 050e 20        		.uleb128 0x20
 1795 050f 02        		.sleb128 2
 1796 0510 01        		.byte	0x1
 1797 0511 3305 0000 		.long	0x533
 1798 0515 1E        		.uleb128 0x1e
 1799 0516 0000 0000 		.long	.LASF67
 1800 051a 02        		.byte	0x2
 1801 051b 98        		.byte	0x98
 1802 051c 3305 0000 		.long	0x533
 1803 0520 0000 0000 		.long	.LLST4
 1804 0524 27        		.uleb128 0x27
 1805 0525 7271 00   		.string	"rq"
 1806 0528 02        		.byte	0x2
 1807 0529 9A        		.byte	0x9a
 1808 052a 3905 0000 		.long	0x539
 1809 052e 0000 0000 		.long	.LLST5
 1810 0532 00        		.byte	0
 1811 0533 0A        		.uleb128 0xa
 1812 0534 02        		.byte	0x2
 1813 0535 4600 0000 		.long	0x46
 1814 0539 0A        		.uleb128 0xa
 1815 053a 02        		.byte	0x2
 1816 053b 8D02 0000 		.long	0x28d
 1817 053f 26        		.uleb128 0x26
 1818 0540 01        		.byte	0x1
 1819 0541 0000 0000 		.long	.LASF68
 1820 0545 02        		.byte	0x2
 1821 0546 C6        		.byte	0xc6
 1822 0547 01        		.byte	0x1
 1823 0548 3B00 0000 		.long	0x3b
 1824 054c 0000 0000 		.long	.LFB24
 1825 0550 0000 0000 		.long	.LFE24
 1826 0554 03        		.byte	0x3
 1827 0555 92        		.byte	0x92
 1828 0556 20        		.uleb128 0x20
 1829 0557 02        		.sleb128 2
 1830 0558 01        		.byte	0x1
 1831 0559 8505 0000 		.long	0x585
 1832 055d 1F        		.uleb128 0x1f
 1833 055e 7267 6200 		.string	"rgb"
 1834 0562 02        		.byte	0x2
 1835 0563 C6        		.byte	0xc6
 1836 0564 BA03 0000 		.long	0x3ba
 1837 0568 0000 0000 		.long	.LLST6
 1838 056c 28        		.uleb128 0x28
 1839 056d 0000 0000 		.long	.LASF69
 1840 0571 02        		.byte	0x2
 1841 0572 C7        		.byte	0xc7
 1842 0573 3B00 0000 		.long	0x3b
 1843 0577 00        		.byte	0
 1844 0578 20        		.uleb128 0x20
 1845 0579 7265 7300 		.string	"res"
 1846 057d 02        		.byte	0x2
 1847 057e C9        		.byte	0xc9
 1848 057f 3B00 0000 		.long	0x3b
 1849 0583 00        		.byte	0
 1850 0584 00        		.byte	0
 1851 0585 26        		.uleb128 0x26
 1852 0586 01        		.byte	0x1
 1853 0587 0000 0000 		.long	.LASF70
 1854 058b 02        		.byte	0x2
 1855 058c D0        		.byte	0xd0
 1856 058d 01        		.byte	0x1
 1857 058e 3B00 0000 		.long	0x3b
 1858 0592 0000 0000 		.long	.LFB25
 1859 0596 0000 0000 		.long	.LFE25
 1860 059a 03        		.byte	0x3
 1861 059b 92        		.byte	0x92
 1862 059c 20        		.uleb128 0x20
 1863 059d 02        		.sleb128 2
 1864 059e 01        		.byte	0x1
 1865 059f D105 0000 		.long	0x5d1
 1866 05a3 1F        		.uleb128 0x1f
 1867 05a4 7267 6200 		.string	"rgb"
 1868 05a8 02        		.byte	0x2
 1869 05a9 D0        		.byte	0xd0
 1870 05aa BA03 0000 		.long	0x3ba
 1871 05ae 0000 0000 		.long	.LLST7
 1872 05b2 29        		.uleb128 0x29
 1873 05b3 0000 0000 		.long	.LASF69
 1874 05b7 02        		.byte	0x2
 1875 05b8 D1        		.byte	0xd1
 1876 05b9 3B00 0000 		.long	0x3b
 1877 05bd 0000 0000 		.long	.LLST8
 1878 05c1 27        		.uleb128 0x27
 1879 05c2 7265 7300 		.string	"res"
 1880 05c6 02        		.byte	0x2
 1881 05c7 D3        		.byte	0xd3
 1882 05c8 3B00 0000 		.long	0x3b
 1883 05cc 0000 0000 		.long	.LLST9
 1884 05d0 00        		.byte	0
 1885 05d1 26        		.uleb128 0x26
 1886 05d2 01        		.byte	0x1
 1887 05d3 0000 0000 		.long	.LASF71
 1888 05d7 02        		.byte	0x2
 1889 05d8 D9        		.byte	0xd9
 1890 05d9 01        		.byte	0x1
 1891 05da 3B00 0000 		.long	0x3b
 1892 05de 0000 0000 		.long	.LFB26
 1893 05e2 0000 0000 		.long	.LFE26
 1894 05e6 03        		.byte	0x3
 1895 05e7 92        		.byte	0x92
 1896 05e8 20        		.uleb128 0x20
 1897 05e9 02        		.sleb128 2
 1898 05ea 01        		.byte	0x1
 1899 05eb 1D06 0000 		.long	0x61d
 1900 05ef 1F        		.uleb128 0x1f
 1901 05f0 7267 6200 		.string	"rgb"
 1902 05f4 02        		.byte	0x2
 1903 05f5 D9        		.byte	0xd9
 1904 05f6 BA03 0000 		.long	0x3ba
 1905 05fa 0000 0000 		.long	.LLST10
 1906 05fe 29        		.uleb128 0x29
 1907 05ff 0000 0000 		.long	.LASF69
 1908 0603 02        		.byte	0x2
 1909 0604 DA        		.byte	0xda
 1910 0605 3B00 0000 		.long	0x3b
 1911 0609 0000 0000 		.long	.LLST11
 1912 060d 27        		.uleb128 0x27
 1913 060e 7265 7300 		.string	"res"
 1914 0612 02        		.byte	0x2
 1915 0613 DC        		.byte	0xdc
 1916 0614 3B00 0000 		.long	0x3b
 1917 0618 0000 0000 		.long	.LLST12
 1918 061c 00        		.byte	0
 1919 061d 2A        		.uleb128 0x2a
 1920 061e 01        		.byte	0x1
 1921 061f 0000 0000 		.long	.LASF74
 1922 0623 02        		.byte	0x2
 1923 0624 E5        		.byte	0xe5
 1924 0625 01        		.byte	0x1
 1925 0626 0000 0000 		.long	.LFB27
 1926 062a 0000 0000 		.long	.LFE27
 1927 062e 03        		.byte	0x3
 1928 062f 92        		.byte	0x92
 1929 0630 20        		.uleb128 0x20
 1930 0631 02        		.sleb128 2
 1931 0632 01        		.byte	0x1
 1932 0633 6B06 0000 		.long	0x66b
 1933 0637 1E        		.uleb128 0x1e
 1934 0638 0000 0000 		.long	.LASF72
 1935 063c 02        		.byte	0x2
 1936 063d E5        		.byte	0xe5
 1937 063e 3B00 0000 		.long	0x3b
 1938 0642 0000 0000 		.long	.LLST13
 1939 0646 2B        		.uleb128 0x2b
 1940 0647 0000 0000 		.long	.LASF73
 1941 064b 02        		.byte	0x2
 1942 064c E6        		.byte	0xe6
 1943 064d 3B00 0000 		.long	0x3b
 1944 0651 01        		.byte	0x1
 1945 0652 68        		.byte	0x68
 1946 0653 2C        		.uleb128 0x2c
 1947 0654 0000 0000 		.long	.LBB9
 1948 0658 0000 0000 		.long	.LBE9
 1949 065c 27        		.uleb128 0x27
 1950 065d 6900      		.string	"i"
 1951 065f 02        		.byte	0x2
 1952 0660 E7        		.byte	0xe7
 1953 0661 3B00 0000 		.long	0x3b
 1954 0665 0000 0000 		.long	.LLST14
 1955 0669 00        		.byte	0
 1956 066a 00        		.byte	0
 1957 066b 2D        		.uleb128 0x2d
 1958 066c 01        		.byte	0x1
 1959 066d 0000 0000 		.long	.LASF75
 1960 0671 02        		.byte	0x2
 1961 0672 F5        		.byte	0xf5
 1962 0673 01        		.byte	0x1
 1963 0674 0000 0000 		.long	.LFB28
 1964 0678 0000 0000 		.long	.LFE28
 1965 067c 0000 0000 		.long	.LLST15
 1966 0680 01        		.byte	0x1
 1967 0681 0507 0000 		.long	0x705
 1968 0685 1F        		.uleb128 0x1f
 1969 0686 7200      		.string	"r"
 1970 0688 02        		.byte	0x2
 1971 0689 F5        		.byte	0xf5
 1972 068a 3B00 0000 		.long	0x3b
 1973 068e 0000 0000 		.long	.LLST16
 1974 0692 1F        		.uleb128 0x1f
 1975 0693 6700      		.string	"g"
 1976 0695 02        		.byte	0x2
 1977 0696 F5        		.byte	0xf5
 1978 0697 3B00 0000 		.long	0x3b
 1979 069b 0000 0000 		.long	.LLST17
 1980 069f 1F        		.uleb128 0x1f
 1981 06a0 6200      		.string	"b"
 1982 06a2 02        		.byte	0x2
 1983 06a3 F5        		.byte	0xf5
 1984 06a4 3B00 0000 		.long	0x3b
 1985 06a8 0000 0000 		.long	.LLST18
 1986 06ac 2E        		.uleb128 0x2e
 1987 06ad 0000 0000 		.long	.LASF76
 1988 06b1 02        		.byte	0x2
 1989 06b2 F6        		.byte	0xf6
 1990 06b3 3B04 0000 		.long	0x43b
 1991 06b7 7F        		.sleb128 -1
 1992 06b8 2F        		.uleb128 0x2f
 1993 06b9 0000 0000 		.long	.LVL34
 1994 06bd 1D06 0000 		.long	0x61d
 1995 06c1 CC06 0000 		.long	0x6cc
 1996 06c5 30        		.uleb128 0x30
 1997 06c6 01        		.byte	0x1
 1998 06c7 68        		.byte	0x68
 1999 06c8 02        		.byte	0x2
 2000 06c9 09        		.byte	0x9
 2001 06ca FF        		.byte	0xff
 2002 06cb 00        		.byte	0
 2003 06cc 2F        		.uleb128 0x2f
 2004 06cd 0000 0000 		.long	.LVL35
 2005 06d1 1D06 0000 		.long	0x61d
 2006 06d5 E006 0000 		.long	0x6e0
 2007 06d9 30        		.uleb128 0x30
 2008 06da 01        		.byte	0x1
 2009 06db 68        		.byte	0x68
 2010 06dc 02        		.byte	0x2
 2011 06dd 81        		.byte	0x81
 2012 06de 00        		.sleb128 0
 2013 06df 00        		.byte	0
 2014 06e0 2F        		.uleb128 0x2f
 2015 06e1 0000 0000 		.long	.LVL36
 2016 06e5 1D06 0000 		.long	0x61d
 2017 06e9 F406 0000 		.long	0x6f4
 2018 06ed 30        		.uleb128 0x30
 2019 06ee 01        		.byte	0x1
 2020 06ef 68        		.byte	0x68
 2021 06f0 02        		.byte	0x2
 2022 06f1 8D        		.byte	0x8d
 2023 06f2 00        		.sleb128 0
 2024 06f3 00        		.byte	0
 2025 06f4 31        		.uleb128 0x31
 2026 06f5 0000 0000 		.long	.LVL37
 2027 06f9 1D06 0000 		.long	0x61d
 2028 06fd 30        		.uleb128 0x30
 2029 06fe 01        		.byte	0x1
 2030 06ff 68        		.byte	0x68
 2031 0700 02        		.byte	0x2
 2032 0701 8C        		.byte	0x8c
 2033 0702 00        		.sleb128 0
 2034 0703 00        		.byte	0
 2035 0704 00        		.byte	0
 2036 0705 32        		.uleb128 0x32
 2037 0706 01        		.byte	0x1
 2038 0707 0000 0000 		.long	.LASF77
 2039 070b 02        		.byte	0x2
 2040 070c 0C01      		.word	0x10c
 2041 070e 01        		.byte	0x1
 2042 070f 1504 0000 		.long	0x415
 2043 0713 0000 0000 		.long	.LFB29
 2044 0717 0000 0000 		.long	.LFE29
 2045 071b 0000 0000 		.long	.LLST19
 2046 071f 01        		.byte	0x1
 2047 0720 E907 0000 		.long	0x7e9
 2048 0724 33        		.uleb128 0x33
 2049 0725 0000 0000 		.long	.LASF78
 2050 0729 02        		.byte	0x2
 2051 072a 0C01      		.word	0x10c
 2052 072c 5800 0000 		.long	0x58
 2053 0730 0000 0000 		.long	.LLST20
 2054 0734 34        		.uleb128 0x34
 2055 0735 0000 0000 		.long	.LASF79
 2056 0739 02        		.byte	0x2
 2057 073a 0E01      		.word	0x10e
 2058 073c E907 0000 		.long	0x7e9
 2059 0740 20        		.byte	0x20
 2060 0741 35        		.uleb128 0x35
 2061 0742 0000 0000 		.long	.LASF80
 2062 0746 02        		.byte	0x2
 2063 0747 1101      		.word	0x111
 2064 0749 5800 0000 		.long	0x58
 2065 074d 0000 0000 		.long	.LLST21
 2066 0751 36        		.uleb128 0x36
 2067 0752 0000 0000 		.long	.LASF81
 2068 0756 02        		.byte	0x2
 2069 0757 1301      		.word	0x113
 2070 0759 5800 0000 		.long	0x58
 2071 075d 06        		.byte	0x6
 2072 075e 5E        		.byte	0x5e
 2073 075f 93        		.byte	0x93
 2074 0760 01        		.uleb128 0x1
 2075 0761 5F        		.byte	0x5f
 2076 0762 93        		.byte	0x93
 2077 0763 01        		.uleb128 0x1
 2078 0764 36        		.uleb128 0x36
 2079 0765 0000 0000 		.long	.LASF82
 2080 0769 02        		.byte	0x2
 2081 076a 1401      		.word	0x114
 2082 076c 5800 0000 		.long	0x58
 2083 0770 06        		.byte	0x6
 2084 0771 58        		.byte	0x58
 2085 0772 93        		.byte	0x93
 2086 0773 01        		.uleb128 0x1
 2087 0774 59        		.byte	0x59
 2088 0775 93        		.byte	0x93
 2089 0776 01        		.uleb128 0x1
 2090 0777 36        		.uleb128 0x36
 2091 0778 0000 0000 		.long	.LASF83
 2092 077c 02        		.byte	0x2
 2093 077d 1501      		.word	0x115
 2094 077f 5800 0000 		.long	0x58
 2095 0783 06        		.byte	0x6
 2096 0784 5E        		.byte	0x5e
 2097 0785 93        		.byte	0x93
 2098 0786 01        		.uleb128 0x1
 2099 0787 5F        		.byte	0x5f
 2100 0788 93        		.byte	0x93
 2101 0789 01        		.uleb128 0x1
 2102 078a 36        		.uleb128 0x36
 2103 078b 0000 0000 		.long	.LASF84
 2104 078f 02        		.byte	0x2
 2105 0790 1701      		.word	0x117
 2106 0792 1504 0000 		.long	0x415
 2107 0796 02        		.byte	0x2
 2108 0797 8C        		.byte	0x8c
 2109 0798 07        		.sleb128 7
 2110 0799 37        		.uleb128 0x37
 2111 079a 746F 00   		.string	"to"
 2112 079d 02        		.byte	0x2
 2113 079e 1801      		.word	0x118
 2114 07a0 1504 0000 		.long	0x415
 2115 07a4 02        		.byte	0x2
 2116 07a5 8C        		.byte	0x8c
 2117 07a6 04        		.sleb128 4
 2118 07a7 37        		.uleb128 0x37
 2119 07a8 7265 7300 		.string	"res"
 2120 07ac 02        		.byte	0x2
 2121 07ad 1A01      		.word	0x11a
 2122 07af 1504 0000 		.long	0x415
 2123 07b3 02        		.byte	0x2
 2124 07b4 8C        		.byte	0x8c
 2125 07b5 01        		.sleb128 1
 2126 07b6 2C        		.uleb128 0x2c
 2127 07b7 0000 0000 		.long	.LBB10
 2128 07bb 0000 0000 		.long	.LBE10
 2129 07bf 38        		.uleb128 0x38
 2130 07c0 6300      		.string	"c"
 2131 07c2 02        		.byte	0x2
 2132 07c3 1B01      		.word	0x11b
 2133 07c5 5800 0000 		.long	0x58
 2134 07c9 0000 0000 		.long	.LLST22
 2135 07cd 2C        		.uleb128 0x2c
 2136 07ce 0000 0000 		.long	.LBB11
 2137 07d2 0000 0000 		.long	.LBE11
 2138 07d6 35        		.uleb128 0x35
 2139 07d7 0000 0000 		.long	.LASF73
 2140 07db 02        		.byte	0x2
 2141 07dc 1C01      		.word	0x11c
 2142 07de 5F00 0000 		.long	0x5f
 2143 07e2 0000 0000 		.long	.LLST23
 2144 07e6 00        		.byte	0
 2145 07e7 00        		.byte	0
 2146 07e8 00        		.byte	0
 2147 07e9 1C        		.uleb128 0x1c
 2148 07ea 5800 0000 		.long	0x58
 2149 07ee 39        		.uleb128 0x39
 2150 07ef 0000 0000 		.long	.LASF125
 2151 07f3 03        		.byte	0x3
 2152 07f4 87        		.byte	0x87
 2153 07f5 01        		.byte	0x1
 2154 07f6 03        		.byte	0x3
 2155 07f7 3A        		.uleb128 0x3a
 2156 07f8 01        		.byte	0x1
 2157 07f9 0000 0000 		.long	.LASF126
 2158 07fd 02        		.byte	0x2
 2159 07fe 7501      		.word	0x175
 2160 0800 01        		.byte	0x1
 2161 0801 5800 0000 		.long	0x58
 2162 0805 01        		.byte	0x1
 2163 0806 0000 0000 		.long	.LFB32
 2164 080a 0000 0000 		.long	.LFE32
 2165 080e 0000 0000 		.long	.LLST24
 2166 0812 01        		.byte	0x1
 2167 0813 EF0A 0000 		.long	0xaef
 2168 0817 35        		.uleb128 0x35
 2169 0818 0000 0000 		.long	.LASF85
 2170 081c 02        		.byte	0x2
 2171 081d 7701      		.word	0x177
 2172 081f 4600 0000 		.long	0x46
 2173 0823 0000 0000 		.long	.LLST25
 2174 0827 35        		.uleb128 0x35
 2175 0828 0000 0000 		.long	.LASF51
 2176 082c 02        		.byte	0x2
 2177 082d 7801      		.word	0x178
 2178 082f 4600 0000 		.long	0x46
 2179 0833 0000 0000 		.long	.LLST26
 2180 0837 34        		.uleb128 0x34
 2181 0838 0000 0000 		.long	.LASF86
 2182 083c 02        		.byte	0x2
 2183 083d 7901      		.word	0x179
 2184 083f 4600 0000 		.long	0x46
 2185 0843 00        		.byte	0
 2186 0844 36        		.uleb128 0x36
 2187 0845 0000 0000 		.long	.LASF87
 2188 0849 02        		.byte	0x2
 2189 084a 7A01      		.word	0x17a
 2190 084c 2803 0000 		.long	0x328
 2191 0850 02        		.byte	0x2
 2192 0851 8C        		.byte	0x8c
 2193 0852 01        		.sleb128 1
 2194 0853 35        		.uleb128 0x35
 2195 0854 0000 0000 		.long	.LASF88
 2196 0858 02        		.byte	0x2
 2197 0859 7B01      		.word	0x17b
 2198 085b DC02 0000 		.long	0x2dc
 2199 085f 0000 0000 		.long	.LLST27
 2200 0863 34        		.uleb128 0x34
 2201 0864 0000 0000 		.long	.LASF89
 2202 0868 02        		.byte	0x2
 2203 0869 7C01      		.word	0x17c
 2204 086b 3B00 0000 		.long	0x3b
 2205 086f 00        		.byte	0
 2206 0870 36        		.uleb128 0x36
 2207 0871 0000 0000 		.long	.LASF90
 2208 0875 02        		.byte	0x2
 2209 0876 7D01      		.word	0x17d
 2210 0878 5F00 0000 		.long	0x5f
 2211 087c 05        		.byte	0x5
 2212 087d 03        		.byte	0x3
 2213 087e 0000 0000 		.long	led_sensor_delta_time.2466
 2214 0882 34        		.uleb128 0x34
 2215 0883 0000 0000 		.long	.LASF91
 2216 0887 02        		.byte	0x2
 2217 0888 7E01      		.word	0x17e
 2218 088a 5F00 0000 		.long	0x5f
 2219 088e 00        		.byte	0
 2220 088f 35        		.uleb128 0x35
 2221 0890 0000 0000 		.long	.LASF92
 2222 0894 02        		.byte	0x2
 2223 0895 7F01      		.word	0x17f
 2224 0897 3B00 0000 		.long	0x3b
 2225 089b 0000 0000 		.long	.LLST28
 2226 089f 3B        		.uleb128 0x3b
 2227 08a0 0000 0000 		.long	.LASF95
 2228 08a4 02        		.byte	0x2
 2229 08a5 8001      		.word	0x180
 2230 08a7 EF0A 0000 		.long	0xaef
 2231 08ab 35        		.uleb128 0x35
 2232 08ac 0000 0000 		.long	.LASF93
 2233 08b0 02        		.byte	0x2
 2234 08b1 8101      		.word	0x181
 2235 08b3 3B00 0000 		.long	0x3b
 2236 08b7 0000 0000 		.long	.LLST29
 2237 08bb 36        		.uleb128 0x36
 2238 08bc 0000 0000 		.long	.LASF94
 2239 08c0 02        		.byte	0x2
 2240 08c1 8201      		.word	0x182
 2241 08c3 3B00 0000 		.long	0x3b
 2242 08c7 05        		.byte	0x5
 2243 08c8 03        		.byte	0x3
 2244 08c9 0000 0000 		.long	led_sensor_nsample.2471
 2245 08cd 3B        		.uleb128 0x3b
 2246 08ce 0000 0000 		.long	.LASF96
 2247 08d2 02        		.byte	0x2
 2248 08d3 8301      		.word	0x183
 2249 08d5 FF0A 0000 		.long	0xaff
 2250 08d9 34        		.uleb128 0x34
 2251 08da 0000 0000 		.long	.LASF97
 2252 08de 02        		.byte	0x2
 2253 08df 8401      		.word	0x184
 2254 08e1 5F00 0000 		.long	0x5f
 2255 08e5 00        		.byte	0
 2256 08e6 34        		.uleb128 0x34
 2257 08e7 0000 0000 		.long	.LASF98
 2258 08eb 02        		.byte	0x2
 2259 08ec 8501      		.word	0x185
 2260 08ee 3B00 0000 		.long	0x3b
 2261 08f2 00        		.byte	0
 2262 08f3 3B        		.uleb128 0x3b
 2263 08f4 0000 0000 		.long	.LASF99
 2264 08f8 02        		.byte	0x2
 2265 08f9 8A01      		.word	0x18a
 2266 08fb AF03 0000 		.long	0x3af
 2267 08ff 3C        		.uleb128 0x3c
 2268 0900 6900      		.string	"i"
 2269 0902 02        		.byte	0x2
 2270 0903 9001      		.word	0x190
 2271 0905 4600 0000 		.long	0x46
 2272 0909 3D        		.uleb128 0x3d
 2273 090a 6A00      		.string	"j"
 2274 090c 02        		.byte	0x2
 2275 090d 9001      		.word	0x190
 2276 090f 4600 0000 		.long	0x46
 2277 0913 7F        		.sleb128 -1
 2278 0914 3E        		.uleb128 0x3e
 2279 0915 EE07 0000 		.long	0x7ee
 2280 0919 0000 0000 		.long	.LBB21
 2281 091d 0000 0000 		.long	.LBE21
 2282 0921 02        		.byte	0x2
 2283 0922 8701      		.word	0x187
 2284 0924 3F        		.uleb128 0x3f
 2285 0925 2004 0000 		.long	0x420
 2286 0929 0000 0000 		.long	.LBB23
 2287 092d 0000 0000 		.long	.LBE23
 2288 0931 02        		.byte	0x2
 2289 0932 9901      		.word	0x199
 2290 0934 4209 0000 		.long	0x942
 2291 0938 40        		.uleb128 0x40
 2292 0939 2E04 0000 		.long	0x42e
 2293 093d 0000 0000 		.long	.LLST30
 2294 0941 00        		.byte	0
 2295 0942 41        		.uleb128 0x41
 2296 0943 0000 0000 		.long	.Ldebug_ranges0+0
 2297 0947 6109 0000 		.long	0x961
 2298 094b 34        		.uleb128 0x34
 2299 094c 0000 0000 		.long	.LASF100
 2300 0950 02        		.byte	0x2
 2301 0951 0802      		.word	0x208
 2302 0953 110B 0000 		.long	0xb11
 2303 0957 00        		.byte	0
 2304 0958 42        		.uleb128 0x42
 2305 0959 0000 0000 		.long	.LVL85
 2306 095d 02        		.byte	0x2
 2307 095e 76        		.byte	0x76
 2308 095f 00        		.sleb128 0
 2309 0960 00        		.byte	0
 2310 0961 43        		.uleb128 0x43
 2311 0962 0000 0000 		.long	.LBB26
 2312 0966 0000 0000 		.long	.LBE26
 2313 096a 7D09 0000 		.long	0x97d
 2314 096e 36        		.uleb128 0x36
 2315 096f 0000 0000 		.long	.LASF73
 2316 0973 02        		.byte	0x2
 2317 0974 AB01      		.word	0x1ab
 2318 0976 3B00 0000 		.long	0x3b
 2319 097a 01        		.byte	0x1
 2320 097b 59        		.byte	0x59
 2321 097c 00        		.byte	0
 2322 097d 43        		.uleb128 0x43
 2323 097e 0000 0000 		.long	.LBB27
 2324 0982 0000 0000 		.long	.LBE27
 2325 0986 B009 0000 		.long	0x9b0
 2326 098a 38        		.uleb128 0x38
 2327 098b 7661 6C00 		.string	"val"
 2328 098f 02        		.byte	0x2
 2329 0990 F801      		.word	0x1f8
 2330 0992 4D00 0000 		.long	0x4d
 2331 0996 0000 0000 		.long	.LLST31
 2332 099a 31        		.uleb128 0x31
 2333 099b 0000 0000 		.long	.LVL82
 2334 099f 4004 0000 		.long	0x440
 2335 09a3 30        		.uleb128 0x30
 2336 09a4 06        		.byte	0x6
 2337 09a5 68        		.byte	0x68
 2338 09a6 93        		.byte	0x93
 2339 09a7 01        		.uleb128 0x1
 2340 09a8 69        		.byte	0x69
 2341 09a9 93        		.byte	0x93
 2342 09aa 01        		.uleb128 0x1
 2343 09ab 02        		.byte	0x2
 2344 09ac 7E        		.byte	0x7e
 2345 09ad 00        		.sleb128 0
 2346 09ae 00        		.byte	0
 2347 09af 00        		.byte	0
 2348 09b0 44        		.uleb128 0x44
 2349 09b1 0000 0000 		.long	.LVL58
 2350 09b5 F00B 0000 		.long	0xbf0
 2351 09b9 44        		.uleb128 0x44
 2352 09ba 0000 0000 		.long	.LVL61
 2353 09be FE0B 0000 		.long	0xbfe
 2354 09c2 2F        		.uleb128 0x2f
 2355 09c3 0000 0000 		.long	.LVL62
 2356 09c7 0B0C 0000 		.long	0xc0b
 2357 09cb E109 0000 		.long	0x9e1
 2358 09cf 30        		.uleb128 0x30
 2359 09d0 01        		.byte	0x1
 2360 09d1 68        		.byte	0x68
 2361 09d2 01        		.byte	0x1
 2362 09d3 30        		.byte	0x30
 2363 09d4 30        		.uleb128 0x30
 2364 09d5 06        		.byte	0x6
 2365 09d6 66        		.byte	0x66
 2366 09d7 93        		.byte	0x93
 2367 09d8 01        		.uleb128 0x1
 2368 09d9 67        		.byte	0x67
 2369 09da 93        		.byte	0x93
 2370 09db 01        		.uleb128 0x1
 2371 09dc 03        		.byte	0x3
 2372 09dd 0A        		.byte	0xa
 2373 09de D007      		.word	0x7d0
 2374 09e0 00        		.byte	0
 2375 09e1 2F        		.uleb128 0x2f
 2376 09e2 0000 0000 		.long	.LVL63
 2377 09e6 0B0C 0000 		.long	0xc0b
 2378 09ea FE09 0000 		.long	0x9fe
 2379 09ee 30        		.uleb128 0x30
 2380 09ef 01        		.byte	0x1
 2381 09f0 68        		.byte	0x68
 2382 09f1 01        		.byte	0x1
 2383 09f2 31        		.byte	0x31
 2384 09f3 30        		.uleb128 0x30
 2385 09f4 06        		.byte	0x6
 2386 09f5 66        		.byte	0x66
 2387 09f6 93        		.byte	0x93
 2388 09f7 01        		.uleb128 0x1
 2389 09f8 67        		.byte	0x67
 2390 09f9 93        		.byte	0x93
 2391 09fa 01        		.uleb128 0x1
 2392 09fb 01        		.byte	0x1
 2393 09fc 32        		.byte	0x32
 2394 09fd 00        		.byte	0
 2395 09fe 2F        		.uleb128 0x2f
 2396 09ff 0000 0000 		.long	.LVL64
 2397 0a03 0B0C 0000 		.long	0xc0b
 2398 0a07 1D0A 0000 		.long	0xa1d
 2399 0a0b 30        		.uleb128 0x30
 2400 0a0c 01        		.byte	0x1
 2401 0a0d 68        		.byte	0x68
 2402 0a0e 01        		.byte	0x1
 2403 0a0f 32        		.byte	0x32
 2404 0a10 30        		.uleb128 0x30
 2405 0a11 06        		.byte	0x6
 2406 0a12 66        		.byte	0x66
 2407 0a13 93        		.byte	0x93
 2408 0a14 01        		.uleb128 0x1
 2409 0a15 67        		.byte	0x67
 2410 0a16 93        		.byte	0x93
 2411 0a17 01        		.uleb128 0x1
 2412 0a18 03        		.byte	0x3
 2413 0a19 0A        		.byte	0xa
 2414 0a1a D007      		.word	0x7d0
 2415 0a1c 00        		.byte	0
 2416 0a1d 2F        		.uleb128 0x2f
 2417 0a1e 0000 0000 		.long	.LVL65
 2418 0a22 4004 0000 		.long	0x440
 2419 0a26 420A 0000 		.long	0xa42
 2420 0a2a 30        		.uleb128 0x30
 2421 0a2b 06        		.byte	0x6
 2422 0a2c 68        		.byte	0x68
 2423 0a2d 93        		.byte	0x93
 2424 0a2e 01        		.uleb128 0x1
 2425 0a2f 69        		.byte	0x69
 2426 0a30 93        		.byte	0x93
 2427 0a31 01        		.uleb128 0x1
 2428 0a32 02        		.byte	0x2
 2429 0a33 7E        		.byte	0x7e
 2430 0a34 00        		.sleb128 0
 2431 0a35 30        		.uleb128 0x30
 2432 0a36 06        		.byte	0x6
 2433 0a37 66        		.byte	0x66
 2434 0a38 93        		.byte	0x93
 2435 0a39 01        		.uleb128 0x1
 2436 0a3a 67        		.byte	0x67
 2437 0a3b 93        		.byte	0x93
 2438 0a3c 01        		.uleb128 0x1
 2439 0a3d 03        		.byte	0x3
 2440 0a3e 0A        		.byte	0xa
 2441 0a3f E803      		.word	0x3e8
 2442 0a41 00        		.byte	0
 2443 0a42 2F        		.uleb128 0x2f
 2444 0a43 0000 0000 		.long	.LVL69
 2445 0a47 180C 0000 		.long	0xc18
 2446 0a4b 5C0A 0000 		.long	0xa5c
 2447 0a4f 30        		.uleb128 0x30
 2448 0a50 06        		.byte	0x6
 2449 0a51 68        		.byte	0x68
 2450 0a52 93        		.byte	0x93
 2451 0a53 01        		.uleb128 0x1
 2452 0a54 69        		.byte	0x69
 2453 0a55 93        		.byte	0x93
 2454 0a56 01        		.uleb128 0x1
 2455 0a57 03        		.byte	0x3
 2456 0a58 0A        		.byte	0xa
 2457 0a59 0002      		.word	0x200
 2458 0a5b 00        		.byte	0
 2459 0a5c 44        		.uleb128 0x44
 2460 0a5d 0000 0000 		.long	.LVL70
 2461 0a61 250C 0000 		.long	0xc25
 2462 0a65 44        		.uleb128 0x44
 2463 0a66 0000 0000 		.long	.LVL71
 2464 0a6a F00B 0000 		.long	0xbf0
 2465 0a6e 2F        		.uleb128 0x2f
 2466 0a6f 0000 0000 		.long	.LVL75
 2467 0a73 320C 0000 		.long	0xc32
 2468 0a77 8F0A 0000 		.long	0xa8f
 2469 0a7b 30        		.uleb128 0x30
 2470 0a7c 06        		.byte	0x6
 2471 0a7d 68        		.byte	0x68
 2472 0a7e 93        		.byte	0x93
 2473 0a7f 01        		.uleb128 0x1
 2474 0a80 69        		.byte	0x69
 2475 0a81 93        		.byte	0x93
 2476 0a82 01        		.uleb128 0x1
 2477 0a83 05        		.byte	0x5
 2478 0a84 03        		.byte	0x3
 2479 0a85 0000 0000 		.long	reportBuffer
 2480 0a89 30        		.uleb128 0x30
 2481 0a8a 01        		.byte	0x1
 2482 0a8b 66        		.byte	0x66
 2483 0a8c 01        		.byte	0x1
 2484 0a8d 32        		.byte	0x32
 2485 0a8e 00        		.byte	0
 2486 0a8f 2F        		.uleb128 0x2f
 2487 0a90 0000 0000 		.long	.LVL76
 2488 0a94 3F0C 0000 		.long	0xc3f
 2489 0a98 A20A 0000 		.long	0xaa2
 2490 0a9c 30        		.uleb128 0x30
 2491 0a9d 01        		.byte	0x1
 2492 0a9e 68        		.byte	0x68
 2493 0a9f 01        		.byte	0x1
 2494 0aa0 30        		.byte	0x30
 2495 0aa1 00        		.byte	0
 2496 0aa2 2F        		.uleb128 0x2f
 2497 0aa3 0000 0000 		.long	.LVL77
 2498 0aa7 0B0C 0000 		.long	0xc0b
 2499 0aab C10A 0000 		.long	0xac1
 2500 0aaf 30        		.uleb128 0x30
 2501 0ab0 01        		.byte	0x1
 2502 0ab1 68        		.byte	0x68
 2503 0ab2 01        		.byte	0x1
 2504 0ab3 30        		.byte	0x30
 2505 0ab4 30        		.uleb128 0x30
 2506 0ab5 06        		.byte	0x6
 2507 0ab6 66        		.byte	0x66
 2508 0ab7 93        		.byte	0x93
 2509 0ab8 01        		.uleb128 0x1
 2510 0ab9 67        		.byte	0x67
 2511 0aba 93        		.byte	0x93
 2512 0abb 01        		.uleb128 0x1
 2513 0abc 03        		.byte	0x3
 2514 0abd 0A        		.byte	0xa
 2515 0abe F401      		.word	0x1f4
 2516 0ac0 00        		.byte	0
 2517 0ac1 2F        		.uleb128 0x2f
 2518 0ac2 0000 0000 		.long	.LVL78
 2519 0ac6 3F0C 0000 		.long	0xc3f
 2520 0aca D40A 0000 		.long	0xad4
 2521 0ace 30        		.uleb128 0x30
 2522 0acf 01        		.byte	0x1
 2523 0ad0 68        		.byte	0x68
 2524 0ad1 01        		.byte	0x1
 2525 0ad2 32        		.byte	0x32
 2526 0ad3 00        		.byte	0
 2527 0ad4 31        		.uleb128 0x31
 2528 0ad5 0000 0000 		.long	.LVL79
 2529 0ad9 0B0C 0000 		.long	0xc0b
 2530 0add 30        		.uleb128 0x30
 2531 0ade 01        		.byte	0x1
 2532 0adf 68        		.byte	0x68
 2533 0ae0 01        		.byte	0x1
 2534 0ae1 32        		.byte	0x32
 2535 0ae2 30        		.uleb128 0x30
 2536 0ae3 06        		.byte	0x6
 2537 0ae4 66        		.byte	0x66
 2538 0ae5 93        		.byte	0x93
 2539 0ae6 01        		.uleb128 0x1
 2540 0ae7 67        		.byte	0x67
 2541 0ae8 93        		.byte	0x93
 2542 0ae9 01        		.uleb128 0x1
 2543 0aea 02        		.byte	0x2
 2544 0aeb 08        		.byte	0x8
 2545 0aec FA        		.byte	0xfa
 2546 0aed 00        		.byte	0
 2547 0aee 00        		.byte	0
 2548 0aef 13        		.uleb128 0x13
 2549 0af0 5F00 0000 		.long	0x5f
 2550 0af4 FF0A 0000 		.long	0xaff
 2551 0af8 14        		.uleb128 0x14
 2552 0af9 9E01 0000 		.long	0x19e
 2553 0afd 04        		.byte	0x4
 2554 0afe 00        		.byte	0
 2555 0aff 13        		.uleb128 0x13
 2556 0b00 5F00 0000 		.long	0x5f
 2557 0b04 0F0B 0000 		.long	0xb0f
 2558 0b08 14        		.uleb128 0x14
 2559 0b09 9E01 0000 		.long	0x19e
 2560 0b0d 13        		.byte	0x13
 2561 0b0e 00        		.byte	0
 2562 0b0f 45        		.uleb128 0x45
 2563 0b10 01        		.byte	0x1
 2564 0b11 0A        		.uleb128 0xa
 2565 0b12 02        		.byte	0x2
 2566 0b13 0F0B 0000 		.long	0xb0f
 2567 0b17 2B        		.uleb128 0x2b
 2568 0b18 0000 0000 		.long	.LASF101
 2569 0b1c 02        		.byte	0x2
 2570 0b1d 5C        		.byte	0x5c
 2571 0b1e 280B 0000 		.long	0xb28
 2572 0b22 05        		.byte	0x5
 2573 0b23 03        		.byte	0x3
 2574 0b24 0000 0000 		.long	capture_diff
 2575 0b28 12        		.uleb128 0x12
 2576 0b29 5F00 0000 		.long	0x5f
 2577 0b2d 2B        		.uleb128 0x2b
 2578 0b2e 0000 0000 		.long	.LASF102
 2579 0b32 02        		.byte	0x2
 2580 0b33 5D        		.byte	0x5d
 2581 0b34 280B 0000 		.long	0xb28
 2582 0b38 05        		.byte	0x5
 2583 0b39 03        		.byte	0x3
 2584 0b3a 0000 0000 		.long	capture_diff_max
 2585 0b3e 2B        		.uleb128 0x2b
 2586 0b3f 0000 0000 		.long	.LASF103
 2587 0b43 02        		.byte	0x2
 2588 0b44 5E        		.byte	0x5e
 2589 0b45 280B 0000 		.long	0xb28
 2590 0b49 05        		.byte	0x5
 2591 0b4a 03        		.byte	0x3
 2592 0b4b 0000 0000 		.long	captured
 2593 0b4f 2B        		.uleb128 0x2b
 2594 0b50 0000 0000 		.long	.LASF104
 2595 0b54 02        		.byte	0x2
 2596 0b55 95        		.byte	0x95
 2597 0b56 6F03 0000 		.long	0x36f
 2598 0b5a 05        		.byte	0x5
 2599 0b5b 03        		.byte	0x3
 2600 0b5c 0000 0000 		.long	reportBuffer
 2601 0b60 13        		.uleb128 0x13
 2602 0b61 3C01 0000 		.long	0x13c
 2603 0b65 6B0B 0000 		.long	0xb6b
 2604 0b69 46        		.uleb128 0x46
 2605 0b6a 00        		.byte	0
 2606 0b6b 47        		.uleb128 0x47
 2607 0b6c 0000 0000 		.long	.LASF105
 2608 0b70 06        		.byte	0x6
 2609 0b71 9701      		.word	0x197
 2610 0b73 600B 0000 		.long	0xb60
 2611 0b77 01        		.byte	0x1
 2612 0b78 01        		.byte	0x1
 2613 0b79 13        		.uleb128 0x13
 2614 0b7a 890B 0000 		.long	0xb89
 2615 0b7e 890B 0000 		.long	0xb89
 2616 0b82 14        		.uleb128 0x14
 2617 0b83 9E01 0000 		.long	0x19e
 2618 0b87 4F        		.byte	0x4f
 2619 0b88 00        		.byte	0
 2620 0b89 1C        		.uleb128 0x1c
 2621 0b8a 2001 0000 		.long	0x120
 2622 0b8e 48        		.uleb128 0x48
 2623 0b8f 0000 0000 		.long	.LASF106
 2624 0b93 0B        		.byte	0xb
 2625 0b94 03        		.byte	0x3
 2626 0b95 A00B 0000 		.long	0xba0
 2627 0b99 01        		.byte	0x1
 2628 0b9a 05        		.byte	0x5
 2629 0b9b 03        		.byte	0x3
 2630 0b9c 0000 0000 		.long	usbDescriptorHidReport
 2631 0ba0 1C        		.uleb128 0x1c
 2632 0ba1 790B 0000 		.long	0xb79
 2633 0ba5 47        		.uleb128 0x47
 2634 0ba6 0000 0000 		.long	.LASF107
 2635 0baa 07        		.byte	0x7
 2636 0bab 8C02      		.word	0x28c
 2637 0bad E601 0000 		.long	0x1e6
 2638 0bb1 01        		.byte	0x1
 2639 0bb2 01        		.byte	0x1
 2640 0bb3 49        		.uleb128 0x49
 2641 0bb4 0000 0000 		.long	.LASF108
 2642 0bb8 0C        		.byte	0xc
 2643 0bb9 0D        		.byte	0xd
 2644 0bba 6001 0000 		.long	0x160
 2645 0bbe 01        		.byte	0x1
 2646 0bbf 01        		.byte	0x1
 2647 0bc0 49        		.uleb128 0x49
 2648 0bc1 0000 0000 		.long	.LASF109
 2649 0bc5 0C        		.byte	0xc
 2650 0bc6 0E        		.byte	0xe
 2651 0bc7 6001 0000 		.long	0x160
 2652 0bcb 01        		.byte	0x1
 2653 0bcc 01        		.byte	0x1
 2654 0bcd 13        		.uleb128 0x13
 2655 0bce 1504 0000 		.long	0x415
 2656 0bd2 DD0B 0000 		.long	0xbdd
 2657 0bd6 14        		.uleb128 0x14
 2658 0bd7 9E01 0000 		.long	0x19e
 2659 0bdb 06        		.byte	0x6
 2660 0bdc 00        		.byte	0
 2661 0bdd 4A        		.uleb128 0x4a
 2662 0bde 0000 0000 		.long	.LASF110
 2663 0be2 02        		.byte	0x2
 2664 0be3 0101      		.word	0x101
 2665 0be5 CD0B 0000 		.long	0xbcd
 2666 0be9 01        		.byte	0x1
 2667 0bea 05        		.byte	0x5
 2668 0beb 03        		.byte	0x3
 2669 0bec 0000 0000 		.long	rainbow_colors
 2670 0bf0 4B        		.uleb128 0x4b
 2671 0bf1 01        		.byte	0x1
 2672 0bf2 01        		.byte	0x1
 2673 0bf3 0000 0000 		.long	.LASF111
 2674 0bf7 0000 0000 		.long	.LASF111
 2675 0bfb 06        		.byte	0x6
 2676 0bfc 9102      		.word	0x291
 2677 0bfe 4C        		.uleb128 0x4c
 2678 0bff 01        		.byte	0x1
 2679 0c00 01        		.byte	0x1
 2680 0c01 0000 0000 		.long	.LASF112
 2681 0c05 0000 0000 		.long	.LASF112
 2682 0c09 07        		.byte	0x7
 2683 0c0a A8        		.byte	0xa8
 2684 0c0b 4C        		.uleb128 0x4c
 2685 0c0c 01        		.byte	0x1
 2686 0c0d 01        		.byte	0x1
 2687 0c0e 0000 0000 		.long	.LASF113
 2688 0c12 0000 0000 		.long	.LASF113
 2689 0c16 0D        		.byte	0xd
 2690 0c17 20        		.byte	0x20
 2691 0c18 4C        		.uleb128 0x4c
 2692 0c19 01        		.byte	0x1
 2693 0c1a 01        		.byte	0x1
 2694 0c1b 0000 0000 		.long	.LASF114
 2695 0c1f 0000 0000 		.long	.LASF114
 2696 0c23 0D        		.byte	0xd
 2697 0c24 19        		.byte	0x19
 2698 0c25 4C        		.uleb128 0x4c
 2699 0c26 01        		.byte	0x1
 2700 0c27 01        		.byte	0x1
 2701 0c28 0000 0000 		.long	.LASF115
 2702 0c2c 0000 0000 		.long	.LASF115
 2703 0c30 07        		.byte	0x7
 2704 0c31 AE        		.byte	0xae
 2705 0c32 4C        		.uleb128 0x4c
 2706 0c33 01        		.byte	0x1
 2707 0c34 01        		.byte	0x1
 2708 0c35 0000 0000 		.long	.LASF116
 2709 0c39 0000 0000 		.long	.LASF116
 2710 0c3d 07        		.byte	0x7
 2711 0c3e DC        		.byte	0xdc
 2712 0c3f 4C        		.uleb128 0x4c
 2713 0c40 01        		.byte	0x1
 2714 0c41 01        		.byte	0x1
 2715 0c42 0000 0000 		.long	.LASF117
 2716 0c46 0000 0000 		.long	.LASF117
 2717 0c4a 0D        		.byte	0xd
 2718 0c4b 1C        		.byte	0x1c
 2719 0c4c 00        		.byte	0
 2720               		.section	.debug_abbrev,"",@progbits
 2721               	.Ldebug_abbrev0:
 2722 0000 01        		.uleb128 0x1
 2723 0001 11        		.uleb128 0x11
 2724 0002 01        		.byte	0x1
 2725 0003 25        		.uleb128 0x25
 2726 0004 0E        		.uleb128 0xe
 2727 0005 13        		.uleb128 0x13
 2728 0006 0B        		.uleb128 0xb
 2729 0007 03        		.uleb128 0x3
 2730 0008 0E        		.uleb128 0xe
 2731 0009 1B        		.uleb128 0x1b
 2732 000a 0E        		.uleb128 0xe
 2733 000b 55        		.uleb128 0x55
 2734 000c 06        		.uleb128 0x6
 2735 000d 11        		.uleb128 0x11
 2736 000e 01        		.uleb128 0x1
 2737 000f 52        		.uleb128 0x52
 2738 0010 01        		.uleb128 0x1
 2739 0011 10        		.uleb128 0x10
 2740 0012 06        		.uleb128 0x6
 2741 0013 00        		.byte	0
 2742 0014 00        		.byte	0
 2743 0015 02        		.uleb128 0x2
 2744 0016 16        		.uleb128 0x16
 2745 0017 00        		.byte	0
 2746 0018 03        		.uleb128 0x3
 2747 0019 0E        		.uleb128 0xe
 2748 001a 3A        		.uleb128 0x3a
 2749 001b 0B        		.uleb128 0xb
 2750 001c 3B        		.uleb128 0x3b
 2751 001d 0B        		.uleb128 0xb
 2752 001e 49        		.uleb128 0x49
 2753 001f 13        		.uleb128 0x13
 2754 0020 00        		.byte	0
 2755 0021 00        		.byte	0
 2756 0022 03        		.uleb128 0x3
 2757 0023 24        		.uleb128 0x24
 2758 0024 00        		.byte	0
 2759 0025 0B        		.uleb128 0xb
 2760 0026 0B        		.uleb128 0xb
 2761 0027 3E        		.uleb128 0x3e
 2762 0028 0B        		.uleb128 0xb
 2763 0029 03        		.uleb128 0x3
 2764 002a 0E        		.uleb128 0xe
 2765 002b 00        		.byte	0
 2766 002c 00        		.byte	0
 2767 002d 04        		.uleb128 0x4
 2768 002e 24        		.uleb128 0x24
 2769 002f 00        		.byte	0
 2770 0030 0B        		.uleb128 0xb
 2771 0031 0B        		.uleb128 0xb
 2772 0032 3E        		.uleb128 0x3e
 2773 0033 0B        		.uleb128 0xb
 2774 0034 03        		.uleb128 0x3
 2775 0035 08        		.uleb128 0x8
 2776 0036 00        		.byte	0
 2777 0037 00        		.byte	0
 2778 0038 05        		.uleb128 0x5
 2779 0039 13        		.uleb128 0x13
 2780 003a 01        		.byte	0x1
 2781 003b 03        		.uleb128 0x3
 2782 003c 0E        		.uleb128 0xe
 2783 003d 0B        		.uleb128 0xb
 2784 003e 0B        		.uleb128 0xb
 2785 003f 3A        		.uleb128 0x3a
 2786 0040 0B        		.uleb128 0xb
 2787 0041 3B        		.uleb128 0x3b
 2788 0042 0B        		.uleb128 0xb
 2789 0043 01        		.uleb128 0x1
 2790 0044 13        		.uleb128 0x13
 2791 0045 00        		.byte	0
 2792 0046 00        		.byte	0
 2793 0047 06        		.uleb128 0x6
 2794 0048 0D        		.uleb128 0xd
 2795 0049 00        		.byte	0
 2796 004a 03        		.uleb128 0x3
 2797 004b 08        		.uleb128 0x8
 2798 004c 3A        		.uleb128 0x3a
 2799 004d 0B        		.uleb128 0xb
 2800 004e 3B        		.uleb128 0x3b
 2801 004f 0B        		.uleb128 0xb
 2802 0050 49        		.uleb128 0x49
 2803 0051 13        		.uleb128 0x13
 2804 0052 38        		.uleb128 0x38
 2805 0053 0A        		.uleb128 0xa
 2806 0054 00        		.byte	0
 2807 0055 00        		.byte	0
 2808 0056 07        		.uleb128 0x7
 2809 0057 0D        		.uleb128 0xd
 2810 0058 00        		.byte	0
 2811 0059 03        		.uleb128 0x3
 2812 005a 0E        		.uleb128 0xe
 2813 005b 3A        		.uleb128 0x3a
 2814 005c 0B        		.uleb128 0xb
 2815 005d 3B        		.uleb128 0x3b
 2816 005e 0B        		.uleb128 0xb
 2817 005f 49        		.uleb128 0x49
 2818 0060 13        		.uleb128 0x13
 2819 0061 38        		.uleb128 0x38
 2820 0062 0A        		.uleb128 0xa
 2821 0063 00        		.byte	0
 2822 0064 00        		.byte	0
 2823 0065 08        		.uleb128 0x8
 2824 0066 0D        		.uleb128 0xd
 2825 0067 00        		.byte	0
 2826 0068 03        		.uleb128 0x3
 2827 0069 0E        		.uleb128 0xe
 2828 006a 3A        		.uleb128 0x3a
 2829 006b 0B        		.uleb128 0xb
 2830 006c 3B        		.uleb128 0x3b
 2831 006d 05        		.uleb128 0x5
 2832 006e 49        		.uleb128 0x49
 2833 006f 13        		.uleb128 0x13
 2834 0070 38        		.uleb128 0x38
 2835 0071 0A        		.uleb128 0xa
 2836 0072 00        		.byte	0
 2837 0073 00        		.byte	0
 2838 0074 09        		.uleb128 0x9
 2839 0075 0D        		.uleb128 0xd
 2840 0076 00        		.byte	0
 2841 0077 03        		.uleb128 0x3
 2842 0078 08        		.uleb128 0x8
 2843 0079 3A        		.uleb128 0x3a
 2844 007a 0B        		.uleb128 0xb
 2845 007b 3B        		.uleb128 0x3b
 2846 007c 05        		.uleb128 0x5
 2847 007d 49        		.uleb128 0x49
 2848 007e 13        		.uleb128 0x13
 2849 007f 38        		.uleb128 0x38
 2850 0080 0A        		.uleb128 0xa
 2851 0081 00        		.byte	0
 2852 0082 00        		.byte	0
 2853 0083 0A        		.uleb128 0xa
 2854 0084 0F        		.uleb128 0xf
 2855 0085 00        		.byte	0
 2856 0086 0B        		.uleb128 0xb
 2857 0087 0B        		.uleb128 0xb
 2858 0088 49        		.uleb128 0x49
 2859 0089 13        		.uleb128 0x13
 2860 008a 00        		.byte	0
 2861 008b 00        		.byte	0
 2862 008c 0B        		.uleb128 0xb
 2863 008d 15        		.uleb128 0x15
 2864 008e 01        		.byte	0x1
 2865 008f 27        		.uleb128 0x27
 2866 0090 0C        		.uleb128 0xc
 2867 0091 49        		.uleb128 0x49
 2868 0092 13        		.uleb128 0x13
 2869 0093 01        		.uleb128 0x1
 2870 0094 13        		.uleb128 0x13
 2871 0095 00        		.byte	0
 2872 0096 00        		.byte	0
 2873 0097 0C        		.uleb128 0xc
 2874 0098 05        		.uleb128 0x5
 2875 0099 00        		.byte	0
 2876 009a 49        		.uleb128 0x49
 2877 009b 13        		.uleb128 0x13
 2878 009c 00        		.byte	0
 2879 009d 00        		.byte	0
 2880 009e 0D        		.uleb128 0xd
 2881 009f 0F        		.uleb128 0xf
 2882 00a0 00        		.byte	0
 2883 00a1 0B        		.uleb128 0xb
 2884 00a2 0B        		.uleb128 0xb
 2885 00a3 00        		.byte	0
 2886 00a4 00        		.byte	0
 2887 00a5 0E        		.uleb128 0xe
 2888 00a6 16        		.uleb128 0x16
 2889 00a7 00        		.byte	0
 2890 00a8 03        		.uleb128 0x3
 2891 00a9 0E        		.uleb128 0xe
 2892 00aa 3A        		.uleb128 0x3a
 2893 00ab 0B        		.uleb128 0xb
 2894 00ac 3B        		.uleb128 0x3b
 2895 00ad 05        		.uleb128 0x5
 2896 00ae 49        		.uleb128 0x49
 2897 00af 13        		.uleb128 0x13
 2898 00b0 00        		.byte	0
 2899 00b1 00        		.byte	0
 2900 00b2 0F        		.uleb128 0xf
 2901 00b3 04        		.uleb128 0x4
 2902 00b4 01        		.byte	0x1
 2903 00b5 0B        		.uleb128 0xb
 2904 00b6 0B        		.uleb128 0xb
 2905 00b7 49        		.uleb128 0x49
 2906 00b8 13        		.uleb128 0x13
 2907 00b9 3A        		.uleb128 0x3a
 2908 00ba 0B        		.uleb128 0xb
 2909 00bb 3B        		.uleb128 0x3b
 2910 00bc 05        		.uleb128 0x5
 2911 00bd 01        		.uleb128 0x1
 2912 00be 13        		.uleb128 0x13
 2913 00bf 00        		.byte	0
 2914 00c0 00        		.byte	0
 2915 00c1 10        		.uleb128 0x10
 2916 00c2 28        		.uleb128 0x28
 2917 00c3 00        		.byte	0
 2918 00c4 03        		.uleb128 0x3
 2919 00c5 0E        		.uleb128 0xe
 2920 00c6 1C        		.uleb128 0x1c
 2921 00c7 0B        		.uleb128 0xb
 2922 00c8 00        		.byte	0
 2923 00c9 00        		.byte	0
 2924 00ca 11        		.uleb128 0x11
 2925 00cb 13        		.uleb128 0x13
 2926 00cc 01        		.byte	0x1
 2927 00cd 03        		.uleb128 0x3
 2928 00ce 0E        		.uleb128 0xe
 2929 00cf 0B        		.uleb128 0xb
 2930 00d0 0B        		.uleb128 0xb
 2931 00d1 3A        		.uleb128 0x3a
 2932 00d2 0B        		.uleb128 0xb
 2933 00d3 3B        		.uleb128 0x3b
 2934 00d4 05        		.uleb128 0x5
 2935 00d5 01        		.uleb128 0x1
 2936 00d6 13        		.uleb128 0x13
 2937 00d7 00        		.byte	0
 2938 00d8 00        		.byte	0
 2939 00d9 12        		.uleb128 0x12
 2940 00da 35        		.uleb128 0x35
 2941 00db 00        		.byte	0
 2942 00dc 49        		.uleb128 0x49
 2943 00dd 13        		.uleb128 0x13
 2944 00de 00        		.byte	0
 2945 00df 00        		.byte	0
 2946 00e0 13        		.uleb128 0x13
 2947 00e1 01        		.uleb128 0x1
 2948 00e2 01        		.byte	0x1
 2949 00e3 49        		.uleb128 0x49
 2950 00e4 13        		.uleb128 0x13
 2951 00e5 01        		.uleb128 0x1
 2952 00e6 13        		.uleb128 0x13
 2953 00e7 00        		.byte	0
 2954 00e8 00        		.byte	0
 2955 00e9 14        		.uleb128 0x14
 2956 00ea 21        		.uleb128 0x21
 2957 00eb 00        		.byte	0
 2958 00ec 49        		.uleb128 0x49
 2959 00ed 13        		.uleb128 0x13
 2960 00ee 2F        		.uleb128 0x2f
 2961 00ef 0B        		.uleb128 0xb
 2962 00f0 00        		.byte	0
 2963 00f1 00        		.byte	0
 2964 00f2 15        		.uleb128 0x15
 2965 00f3 17        		.uleb128 0x17
 2966 00f4 01        		.byte	0x1
 2967 00f5 03        		.uleb128 0x3
 2968 00f6 0E        		.uleb128 0xe
 2969 00f7 0B        		.uleb128 0xb
 2970 00f8 0B        		.uleb128 0xb
 2971 00f9 3A        		.uleb128 0x3a
 2972 00fa 0B        		.uleb128 0xb
 2973 00fb 3B        		.uleb128 0x3b
 2974 00fc 05        		.uleb128 0x5
 2975 00fd 01        		.uleb128 0x1
 2976 00fe 13        		.uleb128 0x13
 2977 00ff 00        		.byte	0
 2978 0100 00        		.byte	0
 2979 0101 16        		.uleb128 0x16
 2980 0102 0D        		.uleb128 0xd
 2981 0103 00        		.byte	0
 2982 0104 03        		.uleb128 0x3
 2983 0105 0E        		.uleb128 0xe
 2984 0106 3A        		.uleb128 0x3a
 2985 0107 0B        		.uleb128 0xb
 2986 0108 3B        		.uleb128 0x3b
 2987 0109 05        		.uleb128 0x5
 2988 010a 49        		.uleb128 0x49
 2989 010b 13        		.uleb128 0x13
 2990 010c 00        		.byte	0
 2991 010d 00        		.byte	0
 2992 010e 17        		.uleb128 0x17
 2993 010f 04        		.uleb128 0x4
 2994 0110 01        		.byte	0x1
 2995 0111 0B        		.uleb128 0xb
 2996 0112 0B        		.uleb128 0xb
 2997 0113 49        		.uleb128 0x49
 2998 0114 13        		.uleb128 0x13
 2999 0115 3A        		.uleb128 0x3a
 3000 0116 0B        		.uleb128 0xb
 3001 0117 3B        		.uleb128 0x3b
 3002 0118 0B        		.uleb128 0xb
 3003 0119 01        		.uleb128 0x1
 3004 011a 13        		.uleb128 0x13
 3005 011b 00        		.byte	0
 3006 011c 00        		.byte	0
 3007 011d 18        		.uleb128 0x18
 3008 011e 13        		.uleb128 0x13
 3009 011f 01        		.byte	0x1
 3010 0120 0B        		.uleb128 0xb
 3011 0121 0B        		.uleb128 0xb
 3012 0122 3A        		.uleb128 0x3a
 3013 0123 0B        		.uleb128 0xb
 3014 0124 3B        		.uleb128 0x3b
 3015 0125 0B        		.uleb128 0xb
 3016 0126 01        		.uleb128 0x1
 3017 0127 13        		.uleb128 0x13
 3018 0128 00        		.byte	0
 3019 0129 00        		.byte	0
 3020 012a 19        		.uleb128 0x19
 3021 012b 28        		.uleb128 0x28
 3022 012c 00        		.byte	0
 3023 012d 03        		.uleb128 0x3
 3024 012e 08        		.uleb128 0x8
 3025 012f 1C        		.uleb128 0x1c
 3026 0130 0B        		.uleb128 0xb
 3027 0131 00        		.byte	0
 3028 0132 00        		.byte	0
 3029 0133 1A        		.uleb128 0x1a
 3030 0134 2E        		.uleb128 0x2e
 3031 0135 01        		.byte	0x1
 3032 0136 03        		.uleb128 0x3
 3033 0137 0E        		.uleb128 0xe
 3034 0138 3A        		.uleb128 0x3a
 3035 0139 0B        		.uleb128 0xb
 3036 013a 3B        		.uleb128 0x3b
 3037 013b 05        		.uleb128 0x5
 3038 013c 27        		.uleb128 0x27
 3039 013d 0C        		.uleb128 0xc
 3040 013e 20        		.uleb128 0x20
 3041 013f 0B        		.uleb128 0xb
 3042 0140 01        		.uleb128 0x1
 3043 0141 13        		.uleb128 0x13
 3044 0142 00        		.byte	0
 3045 0143 00        		.byte	0
 3046 0144 1B        		.uleb128 0x1b
 3047 0145 05        		.uleb128 0x5
 3048 0146 00        		.byte	0
 3049 0147 03        		.uleb128 0x3
 3050 0148 0E        		.uleb128 0xe
 3051 0149 3A        		.uleb128 0x3a
 3052 014a 0B        		.uleb128 0xb
 3053 014b 3B        		.uleb128 0x3b
 3054 014c 05        		.uleb128 0x5
 3055 014d 49        		.uleb128 0x49
 3056 014e 13        		.uleb128 0x13
 3057 014f 00        		.byte	0
 3058 0150 00        		.byte	0
 3059 0151 1C        		.uleb128 0x1c
 3060 0152 26        		.uleb128 0x26
 3061 0153 00        		.byte	0
 3062 0154 49        		.uleb128 0x49
 3063 0155 13        		.uleb128 0x13
 3064 0156 00        		.byte	0
 3065 0157 00        		.byte	0
 3066 0158 1D        		.uleb128 0x1d
 3067 0159 2E        		.uleb128 0x2e
 3068 015a 01        		.byte	0x1
 3069 015b 3F        		.uleb128 0x3f
 3070 015c 0C        		.uleb128 0xc
 3071 015d 03        		.uleb128 0x3
 3072 015e 0E        		.uleb128 0xe
 3073 015f 3A        		.uleb128 0x3a
 3074 0160 0B        		.uleb128 0xb
 3075 0161 3B        		.uleb128 0x3b
 3076 0162 0B        		.uleb128 0xb
 3077 0163 27        		.uleb128 0x27
 3078 0164 0C        		.uleb128 0xc
 3079 0165 49        		.uleb128 0x49
 3080 0166 13        		.uleb128 0x13
 3081 0167 11        		.uleb128 0x11
 3082 0168 01        		.uleb128 0x1
 3083 0169 12        		.uleb128 0x12
 3084 016a 01        		.uleb128 0x1
 3085 016b 40        		.uleb128 0x40
 3086 016c 06        		.uleb128 0x6
 3087 016d 9642      		.uleb128 0x2116
 3088 016f 0C        		.uleb128 0xc
 3089 0170 01        		.uleb128 0x1
 3090 0171 13        		.uleb128 0x13
 3091 0172 00        		.byte	0
 3092 0173 00        		.byte	0
 3093 0174 1E        		.uleb128 0x1e
 3094 0175 05        		.uleb128 0x5
 3095 0176 00        		.byte	0
 3096 0177 03        		.uleb128 0x3
 3097 0178 0E        		.uleb128 0xe
 3098 0179 3A        		.uleb128 0x3a
 3099 017a 0B        		.uleb128 0xb
 3100 017b 3B        		.uleb128 0x3b
 3101 017c 0B        		.uleb128 0xb
 3102 017d 49        		.uleb128 0x49
 3103 017e 13        		.uleb128 0x13
 3104 017f 02        		.uleb128 0x2
 3105 0180 06        		.uleb128 0x6
 3106 0181 00        		.byte	0
 3107 0182 00        		.byte	0
 3108 0183 1F        		.uleb128 0x1f
 3109 0184 05        		.uleb128 0x5
 3110 0185 00        		.byte	0
 3111 0186 03        		.uleb128 0x3
 3112 0187 08        		.uleb128 0x8
 3113 0188 3A        		.uleb128 0x3a
 3114 0189 0B        		.uleb128 0xb
 3115 018a 3B        		.uleb128 0x3b
 3116 018b 0B        		.uleb128 0xb
 3117 018c 49        		.uleb128 0x49
 3118 018d 13        		.uleb128 0x13
 3119 018e 02        		.uleb128 0x2
 3120 018f 06        		.uleb128 0x6
 3121 0190 00        		.byte	0
 3122 0191 00        		.byte	0
 3123 0192 20        		.uleb128 0x20
 3124 0193 34        		.uleb128 0x34
 3125 0194 00        		.byte	0
 3126 0195 03        		.uleb128 0x3
 3127 0196 08        		.uleb128 0x8
 3128 0197 3A        		.uleb128 0x3a
 3129 0198 0B        		.uleb128 0xb
 3130 0199 3B        		.uleb128 0x3b
 3131 019a 0B        		.uleb128 0xb
 3132 019b 49        		.uleb128 0x49
 3133 019c 13        		.uleb128 0x13
 3134 019d 1C        		.uleb128 0x1c
 3135 019e 0B        		.uleb128 0xb
 3136 019f 00        		.byte	0
 3137 01a0 00        		.byte	0
 3138 01a1 21        		.uleb128 0x21
 3139 01a2 34        		.uleb128 0x34
 3140 01a3 00        		.byte	0
 3141 01a4 03        		.uleb128 0x3
 3142 01a5 0E        		.uleb128 0xe
 3143 01a6 3A        		.uleb128 0x3a
 3144 01a7 0B        		.uleb128 0xb
 3145 01a8 3B        		.uleb128 0x3b
 3146 01a9 0B        		.uleb128 0xb
 3147 01aa 49        		.uleb128 0x49
 3148 01ab 13        		.uleb128 0x13
 3149 01ac 1C        		.uleb128 0x1c
 3150 01ad 05        		.uleb128 0x5
 3151 01ae 00        		.byte	0
 3152 01af 00        		.byte	0
 3153 01b0 22        		.uleb128 0x22
 3154 01b1 34        		.uleb128 0x34
 3155 01b2 00        		.byte	0
 3156 01b3 03        		.uleb128 0x3
 3157 01b4 08        		.uleb128 0x8
 3158 01b5 3A        		.uleb128 0x3a
 3159 01b6 0B        		.uleb128 0xb
 3160 01b7 3B        		.uleb128 0x3b
 3161 01b8 0B        		.uleb128 0xb
 3162 01b9 49        		.uleb128 0x49
 3163 01ba 13        		.uleb128 0x13
 3164 01bb 1C        		.uleb128 0x1c
 3165 01bc 05        		.uleb128 0x5
 3166 01bd 00        		.byte	0
 3167 01be 00        		.byte	0
 3168 01bf 23        		.uleb128 0x23
 3169 01c0 34        		.uleb128 0x34
 3170 01c1 00        		.byte	0
 3171 01c2 03        		.uleb128 0x3
 3172 01c3 08        		.uleb128 0x8
 3173 01c4 3A        		.uleb128 0x3a
 3174 01c5 0B        		.uleb128 0xb
 3175 01c6 3B        		.uleb128 0x3b
 3176 01c7 0B        		.uleb128 0xb
 3177 01c8 49        		.uleb128 0x49
 3178 01c9 13        		.uleb128 0x13
 3179 01ca 1C        		.uleb128 0x1c
 3180 01cb 0D        		.uleb128 0xd
 3181 01cc 00        		.byte	0
 3182 01cd 00        		.byte	0
 3183 01ce 24        		.uleb128 0x24
 3184 01cf 34        		.uleb128 0x34
 3185 01d0 00        		.byte	0
 3186 01d1 03        		.uleb128 0x3
 3187 01d2 08        		.uleb128 0x8
 3188 01d3 3A        		.uleb128 0x3a
 3189 01d4 0B        		.uleb128 0xb
 3190 01d5 3B        		.uleb128 0x3b
 3191 01d6 0B        		.uleb128 0xb
 3192 01d7 49        		.uleb128 0x49
 3193 01d8 13        		.uleb128 0x13
 3194 01d9 02        		.uleb128 0x2
 3195 01da 0A        		.uleb128 0xa
 3196 01db 00        		.byte	0
 3197 01dc 00        		.byte	0
 3198 01dd 25        		.uleb128 0x25
 3199 01de 2E        		.uleb128 0x2e
 3200 01df 00        		.byte	0
 3201 01e0 3F        		.uleb128 0x3f
 3202 01e1 0C        		.uleb128 0xc
 3203 01e2 03        		.uleb128 0x3
 3204 01e3 0E        		.uleb128 0xe
 3205 01e4 3A        		.uleb128 0x3a
 3206 01e5 0B        		.uleb128 0xb
 3207 01e6 3B        		.uleb128 0x3b
 3208 01e7 0B        		.uleb128 0xb
 3209 01e8 27        		.uleb128 0x27
 3210 01e9 0C        		.uleb128 0xc
 3211 01ea 11        		.uleb128 0x11
 3212 01eb 01        		.uleb128 0x1
 3213 01ec 12        		.uleb128 0x12
 3214 01ed 01        		.uleb128 0x1
 3215 01ee 40        		.uleb128 0x40
 3216 01ef 06        		.uleb128 0x6
 3217 01f0 9742      		.uleb128 0x2117
 3218 01f2 0C        		.uleb128 0xc
 3219 01f3 00        		.byte	0
 3220 01f4 00        		.byte	0
 3221 01f5 26        		.uleb128 0x26
 3222 01f6 2E        		.uleb128 0x2e
 3223 01f7 01        		.byte	0x1
 3224 01f8 3F        		.uleb128 0x3f
 3225 01f9 0C        		.uleb128 0xc
 3226 01fa 03        		.uleb128 0x3
 3227 01fb 0E        		.uleb128 0xe
 3228 01fc 3A        		.uleb128 0x3a
 3229 01fd 0B        		.uleb128 0xb
 3230 01fe 3B        		.uleb128 0x3b
 3231 01ff 0B        		.uleb128 0xb
 3232 0200 27        		.uleb128 0x27
 3233 0201 0C        		.uleb128 0xc
 3234 0202 49        		.uleb128 0x49
 3235 0203 13        		.uleb128 0x13
 3236 0204 11        		.uleb128 0x11
 3237 0205 01        		.uleb128 0x1
 3238 0206 12        		.uleb128 0x12
 3239 0207 01        		.uleb128 0x1
 3240 0208 40        		.uleb128 0x40
 3241 0209 0A        		.uleb128 0xa
 3242 020a 9742      		.uleb128 0x2117
 3243 020c 0C        		.uleb128 0xc
 3244 020d 01        		.uleb128 0x1
 3245 020e 13        		.uleb128 0x13
 3246 020f 00        		.byte	0
 3247 0210 00        		.byte	0
 3248 0211 27        		.uleb128 0x27
 3249 0212 34        		.uleb128 0x34
 3250 0213 00        		.byte	0
 3251 0214 03        		.uleb128 0x3
 3252 0215 08        		.uleb128 0x8
 3253 0216 3A        		.uleb128 0x3a
 3254 0217 0B        		.uleb128 0xb
 3255 0218 3B        		.uleb128 0x3b
 3256 0219 0B        		.uleb128 0xb
 3257 021a 49        		.uleb128 0x49
 3258 021b 13        		.uleb128 0x13
 3259 021c 02        		.uleb128 0x2
 3260 021d 06        		.uleb128 0x6
 3261 021e 00        		.byte	0
 3262 021f 00        		.byte	0
 3263 0220 28        		.uleb128 0x28
 3264 0221 34        		.uleb128 0x34
 3265 0222 00        		.byte	0
 3266 0223 03        		.uleb128 0x3
 3267 0224 0E        		.uleb128 0xe
 3268 0225 3A        		.uleb128 0x3a
 3269 0226 0B        		.uleb128 0xb
 3270 0227 3B        		.uleb128 0x3b
 3271 0228 0B        		.uleb128 0xb
 3272 0229 49        		.uleb128 0x49
 3273 022a 13        		.uleb128 0x13
 3274 022b 1C        		.uleb128 0x1c
 3275 022c 0B        		.uleb128 0xb
 3276 022d 00        		.byte	0
 3277 022e 00        		.byte	0
 3278 022f 29        		.uleb128 0x29
 3279 0230 34        		.uleb128 0x34
 3280 0231 00        		.byte	0
 3281 0232 03        		.uleb128 0x3
 3282 0233 0E        		.uleb128 0xe
 3283 0234 3A        		.uleb128 0x3a
 3284 0235 0B        		.uleb128 0xb
 3285 0236 3B        		.uleb128 0x3b
 3286 0237 0B        		.uleb128 0xb
 3287 0238 49        		.uleb128 0x49
 3288 0239 13        		.uleb128 0x13
 3289 023a 02        		.uleb128 0x2
 3290 023b 06        		.uleb128 0x6
 3291 023c 00        		.byte	0
 3292 023d 00        		.byte	0
 3293 023e 2A        		.uleb128 0x2a
 3294 023f 2E        		.uleb128 0x2e
 3295 0240 01        		.byte	0x1
 3296 0241 3F        		.uleb128 0x3f
 3297 0242 0C        		.uleb128 0xc
 3298 0243 03        		.uleb128 0x3
 3299 0244 0E        		.uleb128 0xe
 3300 0245 3A        		.uleb128 0x3a
 3301 0246 0B        		.uleb128 0xb
 3302 0247 3B        		.uleb128 0x3b
 3303 0248 0B        		.uleb128 0xb
 3304 0249 27        		.uleb128 0x27
 3305 024a 0C        		.uleb128 0xc
 3306 024b 11        		.uleb128 0x11
 3307 024c 01        		.uleb128 0x1
 3308 024d 12        		.uleb128 0x12
 3309 024e 01        		.uleb128 0x1
 3310 024f 40        		.uleb128 0x40
 3311 0250 0A        		.uleb128 0xa
 3312 0251 9742      		.uleb128 0x2117
 3313 0253 0C        		.uleb128 0xc
 3314 0254 01        		.uleb128 0x1
 3315 0255 13        		.uleb128 0x13
 3316 0256 00        		.byte	0
 3317 0257 00        		.byte	0
 3318 0258 2B        		.uleb128 0x2b
 3319 0259 34        		.uleb128 0x34
 3320 025a 00        		.byte	0
 3321 025b 03        		.uleb128 0x3
 3322 025c 0E        		.uleb128 0xe
 3323 025d 3A        		.uleb128 0x3a
 3324 025e 0B        		.uleb128 0xb
 3325 025f 3B        		.uleb128 0x3b
 3326 0260 0B        		.uleb128 0xb
 3327 0261 49        		.uleb128 0x49
 3328 0262 13        		.uleb128 0x13
 3329 0263 02        		.uleb128 0x2
 3330 0264 0A        		.uleb128 0xa
 3331 0265 00        		.byte	0
 3332 0266 00        		.byte	0
 3333 0267 2C        		.uleb128 0x2c
 3334 0268 0B        		.uleb128 0xb
 3335 0269 01        		.byte	0x1
 3336 026a 11        		.uleb128 0x11
 3337 026b 01        		.uleb128 0x1
 3338 026c 12        		.uleb128 0x12
 3339 026d 01        		.uleb128 0x1
 3340 026e 00        		.byte	0
 3341 026f 00        		.byte	0
 3342 0270 2D        		.uleb128 0x2d
 3343 0271 2E        		.uleb128 0x2e
 3344 0272 01        		.byte	0x1
 3345 0273 3F        		.uleb128 0x3f
 3346 0274 0C        		.uleb128 0xc
 3347 0275 03        		.uleb128 0x3
 3348 0276 0E        		.uleb128 0xe
 3349 0277 3A        		.uleb128 0x3a
 3350 0278 0B        		.uleb128 0xb
 3351 0279 3B        		.uleb128 0x3b
 3352 027a 0B        		.uleb128 0xb
 3353 027b 27        		.uleb128 0x27
 3354 027c 0C        		.uleb128 0xc
 3355 027d 11        		.uleb128 0x11
 3356 027e 01        		.uleb128 0x1
 3357 027f 12        		.uleb128 0x12
 3358 0280 01        		.uleb128 0x1
 3359 0281 40        		.uleb128 0x40
 3360 0282 06        		.uleb128 0x6
 3361 0283 9742      		.uleb128 0x2117
 3362 0285 0C        		.uleb128 0xc
 3363 0286 01        		.uleb128 0x1
 3364 0287 13        		.uleb128 0x13
 3365 0288 00        		.byte	0
 3366 0289 00        		.byte	0
 3367 028a 2E        		.uleb128 0x2e
 3368 028b 34        		.uleb128 0x34
 3369 028c 00        		.byte	0
 3370 028d 03        		.uleb128 0x3
 3371 028e 0E        		.uleb128 0xe
 3372 028f 3A        		.uleb128 0x3a
 3373 0290 0B        		.uleb128 0xb
 3374 0291 3B        		.uleb128 0x3b
 3375 0292 0B        		.uleb128 0xb
 3376 0293 49        		.uleb128 0x49
 3377 0294 13        		.uleb128 0x13
 3378 0295 1C        		.uleb128 0x1c
 3379 0296 0D        		.uleb128 0xd
 3380 0297 00        		.byte	0
 3381 0298 00        		.byte	0
 3382 0299 2F        		.uleb128 0x2f
 3383 029a 8982 01   		.uleb128 0x4109
 3384 029d 01        		.byte	0x1
 3385 029e 11        		.uleb128 0x11
 3386 029f 01        		.uleb128 0x1
 3387 02a0 31        		.uleb128 0x31
 3388 02a1 13        		.uleb128 0x13
 3389 02a2 01        		.uleb128 0x1
 3390 02a3 13        		.uleb128 0x13
 3391 02a4 00        		.byte	0
 3392 02a5 00        		.byte	0
 3393 02a6 30        		.uleb128 0x30
 3394 02a7 8A82 01   		.uleb128 0x410a
 3395 02aa 00        		.byte	0
 3396 02ab 02        		.uleb128 0x2
 3397 02ac 0A        		.uleb128 0xa
 3398 02ad 9142      		.uleb128 0x2111
 3399 02af 0A        		.uleb128 0xa
 3400 02b0 00        		.byte	0
 3401 02b1 00        		.byte	0
 3402 02b2 31        		.uleb128 0x31
 3403 02b3 8982 01   		.uleb128 0x4109
 3404 02b6 01        		.byte	0x1
 3405 02b7 11        		.uleb128 0x11
 3406 02b8 01        		.uleb128 0x1
 3407 02b9 31        		.uleb128 0x31
 3408 02ba 13        		.uleb128 0x13
 3409 02bb 00        		.byte	0
 3410 02bc 00        		.byte	0
 3411 02bd 32        		.uleb128 0x32
 3412 02be 2E        		.uleb128 0x2e
 3413 02bf 01        		.byte	0x1
 3414 02c0 3F        		.uleb128 0x3f
 3415 02c1 0C        		.uleb128 0xc
 3416 02c2 03        		.uleb128 0x3
 3417 02c3 0E        		.uleb128 0xe
 3418 02c4 3A        		.uleb128 0x3a
 3419 02c5 0B        		.uleb128 0xb
 3420 02c6 3B        		.uleb128 0x3b
 3421 02c7 05        		.uleb128 0x5
 3422 02c8 27        		.uleb128 0x27
 3423 02c9 0C        		.uleb128 0xc
 3424 02ca 49        		.uleb128 0x49
 3425 02cb 13        		.uleb128 0x13
 3426 02cc 11        		.uleb128 0x11
 3427 02cd 01        		.uleb128 0x1
 3428 02ce 12        		.uleb128 0x12
 3429 02cf 01        		.uleb128 0x1
 3430 02d0 40        		.uleb128 0x40
 3431 02d1 06        		.uleb128 0x6
 3432 02d2 9742      		.uleb128 0x2117
 3433 02d4 0C        		.uleb128 0xc
 3434 02d5 01        		.uleb128 0x1
 3435 02d6 13        		.uleb128 0x13
 3436 02d7 00        		.byte	0
 3437 02d8 00        		.byte	0
 3438 02d9 33        		.uleb128 0x33
 3439 02da 05        		.uleb128 0x5
 3440 02db 00        		.byte	0
 3441 02dc 03        		.uleb128 0x3
 3442 02dd 0E        		.uleb128 0xe
 3443 02de 3A        		.uleb128 0x3a
 3444 02df 0B        		.uleb128 0xb
 3445 02e0 3B        		.uleb128 0x3b
 3446 02e1 05        		.uleb128 0x5
 3447 02e2 49        		.uleb128 0x49
 3448 02e3 13        		.uleb128 0x13
 3449 02e4 02        		.uleb128 0x2
 3450 02e5 06        		.uleb128 0x6
 3451 02e6 00        		.byte	0
 3452 02e7 00        		.byte	0
 3453 02e8 34        		.uleb128 0x34
 3454 02e9 34        		.uleb128 0x34
 3455 02ea 00        		.byte	0
 3456 02eb 03        		.uleb128 0x3
 3457 02ec 0E        		.uleb128 0xe
 3458 02ed 3A        		.uleb128 0x3a
 3459 02ee 0B        		.uleb128 0xb
 3460 02ef 3B        		.uleb128 0x3b
 3461 02f0 05        		.uleb128 0x5
 3462 02f1 49        		.uleb128 0x49
 3463 02f2 13        		.uleb128 0x13
 3464 02f3 1C        		.uleb128 0x1c
 3465 02f4 0B        		.uleb128 0xb
 3466 02f5 00        		.byte	0
 3467 02f6 00        		.byte	0
 3468 02f7 35        		.uleb128 0x35
 3469 02f8 34        		.uleb128 0x34
 3470 02f9 00        		.byte	0
 3471 02fa 03        		.uleb128 0x3
 3472 02fb 0E        		.uleb128 0xe
 3473 02fc 3A        		.uleb128 0x3a
 3474 02fd 0B        		.uleb128 0xb
 3475 02fe 3B        		.uleb128 0x3b
 3476 02ff 05        		.uleb128 0x5
 3477 0300 49        		.uleb128 0x49
 3478 0301 13        		.uleb128 0x13
 3479 0302 02        		.uleb128 0x2
 3480 0303 06        		.uleb128 0x6
 3481 0304 00        		.byte	0
 3482 0305 00        		.byte	0
 3483 0306 36        		.uleb128 0x36
 3484 0307 34        		.uleb128 0x34
 3485 0308 00        		.byte	0
 3486 0309 03        		.uleb128 0x3
 3487 030a 0E        		.uleb128 0xe
 3488 030b 3A        		.uleb128 0x3a
 3489 030c 0B        		.uleb128 0xb
 3490 030d 3B        		.uleb128 0x3b
 3491 030e 05        		.uleb128 0x5
 3492 030f 49        		.uleb128 0x49
 3493 0310 13        		.uleb128 0x13
 3494 0311 02        		.uleb128 0x2
 3495 0312 0A        		.uleb128 0xa
 3496 0313 00        		.byte	0
 3497 0314 00        		.byte	0
 3498 0315 37        		.uleb128 0x37
 3499 0316 34        		.uleb128 0x34
 3500 0317 00        		.byte	0
 3501 0318 03        		.uleb128 0x3
 3502 0319 08        		.uleb128 0x8
 3503 031a 3A        		.uleb128 0x3a
 3504 031b 0B        		.uleb128 0xb
 3505 031c 3B        		.uleb128 0x3b
 3506 031d 05        		.uleb128 0x5
 3507 031e 49        		.uleb128 0x49
 3508 031f 13        		.uleb128 0x13
 3509 0320 02        		.uleb128 0x2
 3510 0321 0A        		.uleb128 0xa
 3511 0322 00        		.byte	0
 3512 0323 00        		.byte	0
 3513 0324 38        		.uleb128 0x38
 3514 0325 34        		.uleb128 0x34
 3515 0326 00        		.byte	0
 3516 0327 03        		.uleb128 0x3
 3517 0328 08        		.uleb128 0x8
 3518 0329 3A        		.uleb128 0x3a
 3519 032a 0B        		.uleb128 0xb
 3520 032b 3B        		.uleb128 0x3b
 3521 032c 05        		.uleb128 0x5
 3522 032d 49        		.uleb128 0x49
 3523 032e 13        		.uleb128 0x13
 3524 032f 02        		.uleb128 0x2
 3525 0330 06        		.uleb128 0x6
 3526 0331 00        		.byte	0
 3527 0332 00        		.byte	0
 3528 0333 39        		.uleb128 0x39
 3529 0334 2E        		.uleb128 0x2e
 3530 0335 00        		.byte	0
 3531 0336 03        		.uleb128 0x3
 3532 0337 0E        		.uleb128 0xe
 3533 0338 3A        		.uleb128 0x3a
 3534 0339 0B        		.uleb128 0xb
 3535 033a 3B        		.uleb128 0x3b
 3536 033b 0B        		.uleb128 0xb
 3537 033c 27        		.uleb128 0x27
 3538 033d 0C        		.uleb128 0xc
 3539 033e 20        		.uleb128 0x20
 3540 033f 0B        		.uleb128 0xb
 3541 0340 00        		.byte	0
 3542 0341 00        		.byte	0
 3543 0342 3A        		.uleb128 0x3a
 3544 0343 2E        		.uleb128 0x2e
 3545 0344 01        		.byte	0x1
 3546 0345 3F        		.uleb128 0x3f
 3547 0346 0C        		.uleb128 0xc
 3548 0347 03        		.uleb128 0x3
 3549 0348 0E        		.uleb128 0xe
 3550 0349 3A        		.uleb128 0x3a
 3551 034a 0B        		.uleb128 0xb
 3552 034b 3B        		.uleb128 0x3b
 3553 034c 05        		.uleb128 0x5
 3554 034d 27        		.uleb128 0x27
 3555 034e 0C        		.uleb128 0xc
 3556 034f 49        		.uleb128 0x49
 3557 0350 13        		.uleb128 0x13
 3558 0351 8701      		.uleb128 0x87
 3559 0353 0C        		.uleb128 0xc
 3560 0354 11        		.uleb128 0x11
 3561 0355 01        		.uleb128 0x1
 3562 0356 12        		.uleb128 0x12
 3563 0357 01        		.uleb128 0x1
 3564 0358 40        		.uleb128 0x40
 3565 0359 06        		.uleb128 0x6
 3566 035a 9642      		.uleb128 0x2116
 3567 035c 0C        		.uleb128 0xc
 3568 035d 01        		.uleb128 0x1
 3569 035e 13        		.uleb128 0x13
 3570 035f 00        		.byte	0
 3571 0360 00        		.byte	0
 3572 0361 3B        		.uleb128 0x3b
 3573 0362 34        		.uleb128 0x34
 3574 0363 00        		.byte	0
 3575 0364 03        		.uleb128 0x3
 3576 0365 0E        		.uleb128 0xe
 3577 0366 3A        		.uleb128 0x3a
 3578 0367 0B        		.uleb128 0xb
 3579 0368 3B        		.uleb128 0x3b
 3580 0369 05        		.uleb128 0x5
 3581 036a 49        		.uleb128 0x49
 3582 036b 13        		.uleb128 0x13
 3583 036c 00        		.byte	0
 3584 036d 00        		.byte	0
 3585 036e 3C        		.uleb128 0x3c
 3586 036f 34        		.uleb128 0x34
 3587 0370 00        		.byte	0
 3588 0371 03        		.uleb128 0x3
 3589 0372 08        		.uleb128 0x8
 3590 0373 3A        		.uleb128 0x3a
 3591 0374 0B        		.uleb128 0xb
 3592 0375 3B        		.uleb128 0x3b
 3593 0376 05        		.uleb128 0x5
 3594 0377 49        		.uleb128 0x49
 3595 0378 13        		.uleb128 0x13
 3596 0379 00        		.byte	0
 3597 037a 00        		.byte	0
 3598 037b 3D        		.uleb128 0x3d
 3599 037c 34        		.uleb128 0x34
 3600 037d 00        		.byte	0
 3601 037e 03        		.uleb128 0x3
 3602 037f 08        		.uleb128 0x8
 3603 0380 3A        		.uleb128 0x3a
 3604 0381 0B        		.uleb128 0xb
 3605 0382 3B        		.uleb128 0x3b
 3606 0383 05        		.uleb128 0x5
 3607 0384 49        		.uleb128 0x49
 3608 0385 13        		.uleb128 0x13
 3609 0386 1C        		.uleb128 0x1c
 3610 0387 0D        		.uleb128 0xd
 3611 0388 00        		.byte	0
 3612 0389 00        		.byte	0
 3613 038a 3E        		.uleb128 0x3e
 3614 038b 1D        		.uleb128 0x1d
 3615 038c 00        		.byte	0
 3616 038d 31        		.uleb128 0x31
 3617 038e 13        		.uleb128 0x13
 3618 038f 11        		.uleb128 0x11
 3619 0390 01        		.uleb128 0x1
 3620 0391 12        		.uleb128 0x12
 3621 0392 01        		.uleb128 0x1
 3622 0393 58        		.uleb128 0x58
 3623 0394 0B        		.uleb128 0xb
 3624 0395 59        		.uleb128 0x59
 3625 0396 05        		.uleb128 0x5
 3626 0397 00        		.byte	0
 3627 0398 00        		.byte	0
 3628 0399 3F        		.uleb128 0x3f
 3629 039a 1D        		.uleb128 0x1d
 3630 039b 01        		.byte	0x1
 3631 039c 31        		.uleb128 0x31
 3632 039d 13        		.uleb128 0x13
 3633 039e 11        		.uleb128 0x11
 3634 039f 01        		.uleb128 0x1
 3635 03a0 12        		.uleb128 0x12
 3636 03a1 01        		.uleb128 0x1
 3637 03a2 58        		.uleb128 0x58
 3638 03a3 0B        		.uleb128 0xb
 3639 03a4 59        		.uleb128 0x59
 3640 03a5 05        		.uleb128 0x5
 3641 03a6 01        		.uleb128 0x1
 3642 03a7 13        		.uleb128 0x13
 3643 03a8 00        		.byte	0
 3644 03a9 00        		.byte	0
 3645 03aa 40        		.uleb128 0x40
 3646 03ab 05        		.uleb128 0x5
 3647 03ac 00        		.byte	0
 3648 03ad 31        		.uleb128 0x31
 3649 03ae 13        		.uleb128 0x13
 3650 03af 02        		.uleb128 0x2
 3651 03b0 06        		.uleb128 0x6
 3652 03b1 00        		.byte	0
 3653 03b2 00        		.byte	0
 3654 03b3 41        		.uleb128 0x41
 3655 03b4 0B        		.uleb128 0xb
 3656 03b5 01        		.byte	0x1
 3657 03b6 55        		.uleb128 0x55
 3658 03b7 06        		.uleb128 0x6
 3659 03b8 01        		.uleb128 0x1
 3660 03b9 13        		.uleb128 0x13
 3661 03ba 00        		.byte	0
 3662 03bb 00        		.byte	0
 3663 03bc 42        		.uleb128 0x42
 3664 03bd 8982 01   		.uleb128 0x4109
 3665 03c0 00        		.byte	0
 3666 03c1 11        		.uleb128 0x11
 3667 03c2 01        		.uleb128 0x1
 3668 03c3 9342      		.uleb128 0x2113
 3669 03c5 0A        		.uleb128 0xa
 3670 03c6 00        		.byte	0
 3671 03c7 00        		.byte	0
 3672 03c8 43        		.uleb128 0x43
 3673 03c9 0B        		.uleb128 0xb
 3674 03ca 01        		.byte	0x1
 3675 03cb 11        		.uleb128 0x11
 3676 03cc 01        		.uleb128 0x1
 3677 03cd 12        		.uleb128 0x12
 3678 03ce 01        		.uleb128 0x1
 3679 03cf 01        		.uleb128 0x1
 3680 03d0 13        		.uleb128 0x13
 3681 03d1 00        		.byte	0
 3682 03d2 00        		.byte	0
 3683 03d3 44        		.uleb128 0x44
 3684 03d4 8982 01   		.uleb128 0x4109
 3685 03d7 00        		.byte	0
 3686 03d8 11        		.uleb128 0x11
 3687 03d9 01        		.uleb128 0x1
 3688 03da 31        		.uleb128 0x31
 3689 03db 13        		.uleb128 0x13
 3690 03dc 00        		.byte	0
 3691 03dd 00        		.byte	0
 3692 03de 45        		.uleb128 0x45
 3693 03df 15        		.uleb128 0x15
 3694 03e0 00        		.byte	0
 3695 03e1 27        		.uleb128 0x27
 3696 03e2 0C        		.uleb128 0xc
 3697 03e3 00        		.byte	0
 3698 03e4 00        		.byte	0
 3699 03e5 46        		.uleb128 0x46
 3700 03e6 21        		.uleb128 0x21
 3701 03e7 00        		.byte	0
 3702 03e8 00        		.byte	0
 3703 03e9 00        		.byte	0
 3704 03ea 47        		.uleb128 0x47
 3705 03eb 34        		.uleb128 0x34
 3706 03ec 00        		.byte	0
 3707 03ed 03        		.uleb128 0x3
 3708 03ee 0E        		.uleb128 0xe
 3709 03ef 3A        		.uleb128 0x3a
 3710 03f0 0B        		.uleb128 0xb
 3711 03f1 3B        		.uleb128 0x3b
 3712 03f2 05        		.uleb128 0x5
 3713 03f3 49        		.uleb128 0x49
 3714 03f4 13        		.uleb128 0x13
 3715 03f5 3F        		.uleb128 0x3f
 3716 03f6 0C        		.uleb128 0xc
 3717 03f7 3C        		.uleb128 0x3c
 3718 03f8 0C        		.uleb128 0xc
 3719 03f9 00        		.byte	0
 3720 03fa 00        		.byte	0
 3721 03fb 48        		.uleb128 0x48
 3722 03fc 34        		.uleb128 0x34
 3723 03fd 00        		.byte	0
 3724 03fe 03        		.uleb128 0x3
 3725 03ff 0E        		.uleb128 0xe
 3726 0400 3A        		.uleb128 0x3a
 3727 0401 0B        		.uleb128 0xb
 3728 0402 3B        		.uleb128 0x3b
 3729 0403 0B        		.uleb128 0xb
 3730 0404 49        		.uleb128 0x49
 3731 0405 13        		.uleb128 0x13
 3732 0406 3F        		.uleb128 0x3f
 3733 0407 0C        		.uleb128 0xc
 3734 0408 02        		.uleb128 0x2
 3735 0409 0A        		.uleb128 0xa
 3736 040a 00        		.byte	0
 3737 040b 00        		.byte	0
 3738 040c 49        		.uleb128 0x49
 3739 040d 34        		.uleb128 0x34
 3740 040e 00        		.byte	0
 3741 040f 03        		.uleb128 0x3
 3742 0410 0E        		.uleb128 0xe
 3743 0411 3A        		.uleb128 0x3a
 3744 0412 0B        		.uleb128 0xb
 3745 0413 3B        		.uleb128 0x3b
 3746 0414 0B        		.uleb128 0xb
 3747 0415 49        		.uleb128 0x49
 3748 0416 13        		.uleb128 0x13
 3749 0417 3F        		.uleb128 0x3f
 3750 0418 0C        		.uleb128 0xc
 3751 0419 3C        		.uleb128 0x3c
 3752 041a 0C        		.uleb128 0xc
 3753 041b 00        		.byte	0
 3754 041c 00        		.byte	0
 3755 041d 4A        		.uleb128 0x4a
 3756 041e 34        		.uleb128 0x34
 3757 041f 00        		.byte	0
 3758 0420 03        		.uleb128 0x3
 3759 0421 0E        		.uleb128 0xe
 3760 0422 3A        		.uleb128 0x3a
 3761 0423 0B        		.uleb128 0xb
 3762 0424 3B        		.uleb128 0x3b
 3763 0425 05        		.uleb128 0x5
 3764 0426 49        		.uleb128 0x49
 3765 0427 13        		.uleb128 0x13
 3766 0428 3F        		.uleb128 0x3f
 3767 0429 0C        		.uleb128 0xc
 3768 042a 02        		.uleb128 0x2
 3769 042b 0A        		.uleb128 0xa
 3770 042c 00        		.byte	0
 3771 042d 00        		.byte	0
 3772 042e 4B        		.uleb128 0x4b
 3773 042f 2E        		.uleb128 0x2e
 3774 0430 00        		.byte	0
 3775 0431 3F        		.uleb128 0x3f
 3776 0432 0C        		.uleb128 0xc
 3777 0433 3C        		.uleb128 0x3c
 3778 0434 0C        		.uleb128 0xc
 3779 0435 8740      		.uleb128 0x2007
 3780 0437 0E        		.uleb128 0xe
 3781 0438 03        		.uleb128 0x3
 3782 0439 0E        		.uleb128 0xe
 3783 043a 3A        		.uleb128 0x3a
 3784 043b 0B        		.uleb128 0xb
 3785 043c 3B        		.uleb128 0x3b
 3786 043d 05        		.uleb128 0x5
 3787 043e 00        		.byte	0
 3788 043f 00        		.byte	0
 3789 0440 4C        		.uleb128 0x4c
 3790 0441 2E        		.uleb128 0x2e
 3791 0442 00        		.byte	0
 3792 0443 3F        		.uleb128 0x3f
 3793 0444 0C        		.uleb128 0xc
 3794 0445 3C        		.uleb128 0x3c
 3795 0446 0C        		.uleb128 0xc
 3796 0447 8740      		.uleb128 0x2007
 3797 0449 0E        		.uleb128 0xe
 3798 044a 03        		.uleb128 0x3
 3799 044b 0E        		.uleb128 0xe
 3800 044c 3A        		.uleb128 0x3a
 3801 044d 0B        		.uleb128 0xb
 3802 044e 3B        		.uleb128 0x3b
 3803 044f 0B        		.uleb128 0xb
 3804 0450 00        		.byte	0
 3805 0451 00        		.byte	0
 3806 0452 00        		.byte	0
 3807               		.section	.debug_loc,"",@progbits
 3808               	.Ldebug_loc0:
 3809               	.LLST0:
 3810 0000 0000 0000 		.long	.LFB21
 3811 0004 0000 0000 		.long	.LCFI0
 3812 0008 0300      		.word	0x3
 3813 000a 92        		.byte	0x92
 3814 000b 20        		.uleb128 0x20
 3815 000c 02        		.sleb128 2
 3816 000d 0000 0000 		.long	.LCFI0
 3817 0011 0000 0000 		.long	.LFE21
 3818 0015 0300      		.word	0x3
 3819 0017 92        		.byte	0x92
 3820 0018 20        		.uleb128 0x20
 3821 0019 12        		.sleb128 18
 3822 001a 0000 0000 		.long	0
 3823 001e 0000 0000 		.long	0
 3824               	.LLST1:
 3825 0022 0000 0000 		.long	.LVL0
 3826 0026 0000 0000 		.long	.LVL3-1
 3827 002a 0600      		.word	0x6
 3828 002c 68        		.byte	0x68
 3829 002d 93        		.byte	0x93
 3830 002e 01        		.uleb128 0x1
 3831 002f 69        		.byte	0x69
 3832 0030 93        		.byte	0x93
 3833 0031 01        		.uleb128 0x1
 3834 0032 0000 0000 		.long	.LVL3-1
 3835 0036 0000 0000 		.long	.LVL9
 3836 003a 0600      		.word	0x6
 3837 003c 6C        		.byte	0x6c
 3838 003d 93        		.byte	0x93
 3839 003e 01        		.uleb128 0x1
 3840 003f 6D        		.byte	0x6d
 3841 0040 93        		.byte	0x93
 3842 0041 01        		.uleb128 0x1
 3843 0042 0000 0000 		.long	.LVL9
 3844 0046 0000 0000 		.long	.LFE21
 3845 004a 0400      		.word	0x4
 3846 004c F3        		.byte	0xf3
 3847 004d 01        		.uleb128 0x1
 3848 004e 68        		.byte	0x68
 3849 004f 9F        		.byte	0x9f
 3850 0050 0000 0000 		.long	0
 3851 0054 0000 0000 		.long	0
 3852               	.LLST2:
 3853 0058 0000 0000 		.long	.LVL0
 3854 005c 0000 0000 		.long	.LVL2
 3855 0060 0600      		.word	0x6
 3856 0062 66        		.byte	0x66
 3857 0063 93        		.byte	0x93
 3858 0064 01        		.uleb128 0x1
 3859 0065 67        		.byte	0x67
 3860 0066 93        		.byte	0x93
 3861 0067 01        		.uleb128 0x1
 3862 0068 0000 0000 		.long	.LVL2
 3863 006c 0000 0000 		.long	.LFE21
 3864 0070 0600      		.word	0x6
 3865 0072 60        		.byte	0x60
 3866 0073 93        		.byte	0x93
 3867 0074 01        		.uleb128 0x1
 3868 0075 61        		.byte	0x61
 3869 0076 93        		.byte	0x93
 3870 0077 01        		.uleb128 0x1
 3871 0078 0000 0000 		.long	0
 3872 007c 0000 0000 		.long	0
 3873               	.LLST3:
 3874 0080 0000 0000 		.long	.LFB22
 3875 0084 0000 0000 		.long	.LCFI1
 3876 0088 0300      		.word	0x3
 3877 008a 92        		.byte	0x92
 3878 008b 20        		.uleb128 0x20
 3879 008c 02        		.sleb128 2
 3880 008d 0000 0000 		.long	.LCFI1
 3881 0091 0000 0000 		.long	.LCFI2
 3882 0095 0300      		.word	0x3
 3883 0097 92        		.byte	0x92
 3884 0098 20        		.uleb128 0x20
 3885 0099 03        		.sleb128 3
 3886 009a 0000 0000 		.long	.LCFI2
 3887 009e 0000 0000 		.long	.LFE22
 3888 00a2 0300      		.word	0x3
 3889 00a4 92        		.byte	0x92
 3890 00a5 20        		.uleb128 0x20
 3891 00a6 04        		.sleb128 4
 3892 00a7 0000 0000 		.long	0
 3893 00ab 0000 0000 		.long	0
 3894               	.LLST4:
 3895 00af 0000 0000 		.long	.LVL10
 3896 00b3 0000 0000 		.long	.LVL11
 3897 00b7 0600      		.word	0x6
 3898 00b9 68        		.byte	0x68
 3899 00ba 93        		.byte	0x93
 3900 00bb 01        		.uleb128 0x1
 3901 00bc 69        		.byte	0x69
 3902 00bd 93        		.byte	0x93
 3903 00be 01        		.uleb128 0x1
 3904 00bf 0000 0000 		.long	.LVL11
 3905 00c3 0000 0000 		.long	.LFE23
 3906 00c7 0400      		.word	0x4
 3907 00c9 F3        		.byte	0xf3
 3908 00ca 01        		.uleb128 0x1
 3909 00cb 68        		.byte	0x68
 3910 00cc 9F        		.byte	0x9f
 3911 00cd 0000 0000 		.long	0
 3912 00d1 0000 0000 		.long	0
 3913               	.LLST5:
 3914 00d5 0000 0000 		.long	.LVL10
 3915 00d9 0000 0000 		.long	.LVL11
 3916 00dd 0600      		.word	0x6
 3917 00df 68        		.byte	0x68
 3918 00e0 93        		.byte	0x93
 3919 00e1 01        		.uleb128 0x1
 3920 00e2 69        		.byte	0x69
 3921 00e3 93        		.byte	0x93
 3922 00e4 01        		.uleb128 0x1
 3923 00e5 0000 0000 		.long	.LVL11
 3924 00e9 0000 0000 		.long	.LFE23
 3925 00ed 0400      		.word	0x4
 3926 00ef F3        		.byte	0xf3
 3927 00f0 01        		.uleb128 0x1
 3928 00f1 68        		.byte	0x68
 3929 00f2 9F        		.byte	0x9f
 3930 00f3 0000 0000 		.long	0
 3931 00f7 0000 0000 		.long	0
 3932               	.LLST6:
 3933 00fb 0000 0000 		.long	.LVL12
 3934 00ff 0000 0000 		.long	.LVL13
 3935 0103 0100      		.word	0x1
 3936 0105 68        		.byte	0x68
 3937 0106 0000 0000 		.long	.LVL13
 3938 010a 0000 0000 		.long	.LFE24
 3939 010e 0400      		.word	0x4
 3940 0110 F3        		.byte	0xf3
 3941 0111 01        		.uleb128 0x1
 3942 0112 68        		.byte	0x68
 3943 0113 9F        		.byte	0x9f
 3944 0114 0000 0000 		.long	0
 3945 0118 0000 0000 		.long	0
 3946               	.LLST7:
 3947 011c 0000 0000 		.long	.LVL14
 3948 0120 0000 0000 		.long	.LVL15
 3949 0124 0100      		.word	0x1
 3950 0126 68        		.byte	0x68
 3951 0127 0000 0000 		.long	.LVL15
 3952 012b 0000 0000 		.long	.LFE25
 3953 012f 0400      		.word	0x4
 3954 0131 F3        		.byte	0xf3
 3955 0132 01        		.uleb128 0x1
 3956 0133 68        		.byte	0x68
 3957 0134 9F        		.byte	0x9f
 3958 0135 0000 0000 		.long	0
 3959 0139 0000 0000 		.long	0
 3960               	.LLST8:
 3961 013d 0000 0000 		.long	.LVL15
 3962 0141 0000 0000 		.long	.LVL16
 3963 0145 0100      		.word	0x1
 3964 0147 68        		.byte	0x68
 3965 0148 0000 0000 		.long	.LVL16
 3966 014c 0000 0000 		.long	.LVL18
 3967 0150 0100      		.word	0x1
 3968 0152 69        		.byte	0x69
 3969 0153 0000 0000 		.long	.LVL18
 3970 0157 0000 0000 		.long	.LFE25
 3971 015b 0900      		.word	0x9
 3972 015d F3        		.byte	0xf3
 3973 015e 01        		.uleb128 0x1
 3974 015f 68        		.byte	0x68
 3975 0160 32        		.byte	0x32
 3976 0161 25        		.byte	0x25
 3977 0162 09        		.byte	0x9
 3978 0163 F8        		.byte	0xf8
 3979 0164 1A        		.byte	0x1a
 3980 0165 9F        		.byte	0x9f
 3981 0166 0000 0000 		.long	0
 3982 016a 0000 0000 		.long	0
 3983               	.LLST9:
 3984 016e 0000 0000 		.long	.LVL16
 3985 0172 0000 0000 		.long	.LVL17
 3986 0176 0200      		.word	0x2
 3987 0178 30        		.byte	0x30
 3988 0179 9F        		.byte	0x9f
 3989 017a 0000 0000 		.long	.LVL17
 3990 017e 0000 0000 		.long	.LVL18
 3991 0182 0A00      		.word	0xa
 3992 0184 89        		.byte	0x89
 3993 0185 00        		.sleb128 0
 3994 0186 31        		.byte	0x31
 3995 0187 25        		.byte	0x25
 3996 0188 89        		.byte	0x89
 3997 0189 00        		.sleb128 0
 3998 018a 32        		.byte	0x32
 3999 018b 24        		.byte	0x24
 4000 018c 21        		.byte	0x21
 4001 018d 9F        		.byte	0x9f
 4002 018e 0000 0000 		.long	.LVL18
 4003 0192 0000 0000 		.long	.LVL19
 4004 0196 1600      		.word	0x16
 4005 0198 F3        		.byte	0xf3
 4006 0199 01        		.uleb128 0x1
 4007 019a 68        		.byte	0x68
 4008 019b 32        		.byte	0x32
 4009 019c 25        		.byte	0x25
 4010 019d 09        		.byte	0x9
 4011 019e F8        		.byte	0xf8
 4012 019f 1A        		.byte	0x1a
 4013 01a0 31        		.byte	0x31
 4014 01a1 25        		.byte	0x25
 4015 01a2 F3        		.byte	0xf3
 4016 01a3 01        		.uleb128 0x1
 4017 01a4 68        		.byte	0x68
 4018 01a5 32        		.byte	0x32
 4019 01a6 25        		.byte	0x25
 4020 01a7 09        		.byte	0x9
 4021 01a8 F8        		.byte	0xf8
 4022 01a9 1A        		.byte	0x1a
 4023 01aa 32        		.byte	0x32
 4024 01ab 24        		.byte	0x24
 4025 01ac 21        		.byte	0x21
 4026 01ad 9F        		.byte	0x9f
 4027 01ae 0000 0000 		.long	.LVL19
 4028 01b2 0000 0000 		.long	.LFE25
 4029 01b6 0100      		.word	0x1
 4030 01b8 68        		.byte	0x68
 4031 01b9 0000 0000 		.long	0
 4032 01bd 0000 0000 		.long	0
 4033               	.LLST10:
 4034 01c1 0000 0000 		.long	.LVL20
 4035 01c5 0000 0000 		.long	.LVL21
 4036 01c9 0100      		.word	0x1
 4037 01cb 68        		.byte	0x68
 4038 01cc 0000 0000 		.long	.LVL21
 4039 01d0 0000 0000 		.long	.LFE26
 4040 01d4 0400      		.word	0x4
 4041 01d6 F3        		.byte	0xf3
 4042 01d7 01        		.uleb128 0x1
 4043 01d8 68        		.byte	0x68
 4044 01d9 9F        		.byte	0x9f
 4045 01da 0000 0000 		.long	0
 4046 01de 0000 0000 		.long	0
 4047               	.LLST11:
 4048 01e2 0000 0000 		.long	.LVL20
 4049 01e6 0000 0000 		.long	.LVL25
 4050 01ea 0100      		.word	0x1
 4051 01ec 68        		.byte	0x68
 4052 01ed 0000 0000 		.long	.LVL25
 4053 01f1 0000 0000 		.long	.LFE26
 4054 01f5 0700      		.word	0x7
 4055 01f7 F3        		.byte	0xf3
 4056 01f8 01        		.uleb128 0x1
 4057 01f9 68        		.byte	0x68
 4058 01fa 09        		.byte	0x9
 4059 01fb FC        		.byte	0xfc
 4060 01fc 1A        		.byte	0x1a
 4061 01fd 9F        		.byte	0x9f
 4062 01fe 0000 0000 		.long	0
 4063 0202 0000 0000 		.long	0
 4064               	.LLST12:
 4065 0206 0000 0000 		.long	.LVL21
 4066 020a 0000 0000 		.long	.LVL22
 4067 020e 0200      		.word	0x2
 4068 0210 30        		.byte	0x30
 4069 0211 9F        		.byte	0x9f
 4070 0212 0000 0000 		.long	.LVL22
 4071 0216 0000 0000 		.long	.LVL23
 4072 021a 0500      		.word	0x5
 4073 021c 82        		.byte	0x82
 4074 021d 00        		.sleb128 0
 4075 021e 34        		.byte	0x34
 4076 021f 24        		.byte	0x24
 4077 0220 9F        		.byte	0x9f
 4078 0221 0000 0000 		.long	.LVL23
 4079 0225 0000 0000 		.long	.LVL24
 4080 0229 0100      		.word	0x1
 4081 022b 64        		.byte	0x64
 4082 022c 0000 0000 		.long	.LVL24
 4083 0230 0000 0000 		.long	.LVL25
 4084 0234 0600      		.word	0x6
 4085 0236 88        		.byte	0x88
 4086 0237 00        		.sleb128 0
 4087 0238 82        		.byte	0x82
 4088 0239 00        		.sleb128 0
 4089 023a 21        		.byte	0x21
 4090 023b 9F        		.byte	0x9f
 4091 023c 0000 0000 		.long	.LVL25
 4092 0240 0000 0000 		.long	.LFE26
 4093 0244 0100      		.word	0x1
 4094 0246 68        		.byte	0x68
 4095 0247 0000 0000 		.long	0
 4096 024b 0000 0000 		.long	0
 4097               	.LLST13:
 4098 024f 0000 0000 		.long	.LVL26
 4099 0253 0000 0000 		.long	.LVL27
 4100 0257 0100      		.word	0x1
 4101 0259 68        		.byte	0x68
 4102 025a 0000 0000 		.long	.LVL27
 4103 025e 0000 0000 		.long	.LFE27
 4104 0262 0400      		.word	0x4
 4105 0264 F3        		.byte	0xf3
 4106 0265 01        		.uleb128 0x1
 4107 0266 68        		.byte	0x68
 4108 0267 9F        		.byte	0x9f
 4109 0268 0000 0000 		.long	0
 4110 026c 0000 0000 		.long	0
 4111               	.LLST14:
 4112 0270 0000 0000 		.long	.LVL26
 4113 0274 0000 0000 		.long	.LVL27
 4114 0278 0200      		.word	0x2
 4115 027a 30        		.byte	0x30
 4116 027b 9F        		.byte	0x9f
 4117 027c 0000 0000 		.long	.LVL27
 4118 0280 0000 0000 		.long	.LVL29
 4119 0284 0500      		.word	0x5
 4120 0286 38        		.byte	0x38
 4121 0287 89        		.byte	0x89
 4122 0288 00        		.sleb128 0
 4123 0289 1C        		.byte	0x1c
 4124 028a 9F        		.byte	0x9f
 4125 028b 0000 0000 		.long	.LVL29
 4126 028f 0000 0000 		.long	.LVL30
 4127 0293 0500      		.word	0x5
 4128 0295 39        		.byte	0x39
 4129 0296 89        		.byte	0x89
 4130 0297 00        		.sleb128 0
 4131 0298 1C        		.byte	0x1c
 4132 0299 9F        		.byte	0x9f
 4133 029a 0000 0000 		.long	.LVL30
 4134 029e 0000 0000 		.long	.LFE27
 4135 02a2 0500      		.word	0x5
 4136 02a4 38        		.byte	0x38
 4137 02a5 89        		.byte	0x89
 4138 02a6 00        		.sleb128 0
 4139 02a7 1C        		.byte	0x1c
 4140 02a8 9F        		.byte	0x9f
 4141 02a9 0000 0000 		.long	0
 4142 02ad 0000 0000 		.long	0
 4143               	.LLST15:
 4144 02b1 0000 0000 		.long	.LFB28
 4145 02b5 0000 0000 		.long	.LCFI3
 4146 02b9 0300      		.word	0x3
 4147 02bb 92        		.byte	0x92
 4148 02bc 20        		.uleb128 0x20
 4149 02bd 02        		.sleb128 2
 4150 02be 0000 0000 		.long	.LCFI3
 4151 02c2 0000 0000 		.long	.LCFI4
 4152 02c6 0300      		.word	0x3
 4153 02c8 92        		.byte	0x92
 4154 02c9 20        		.uleb128 0x20
 4155 02ca 03        		.sleb128 3
 4156 02cb 0000 0000 		.long	.LCFI4
 4157 02cf 0000 0000 		.long	.LCFI5
 4158 02d3 0300      		.word	0x3
 4159 02d5 92        		.byte	0x92
 4160 02d6 20        		.uleb128 0x20
 4161 02d7 04        		.sleb128 4
 4162 02d8 0000 0000 		.long	.LCFI5
 4163 02dc 0000 0000 		.long	.LFE28
 4164 02e0 0300      		.word	0x3
 4165 02e2 92        		.byte	0x92
 4166 02e3 20        		.uleb128 0x20
 4167 02e4 05        		.sleb128 5
 4168 02e5 0000 0000 		.long	0
 4169 02e9 0000 0000 		.long	0
 4170               	.LLST16:
 4171 02ed 0000 0000 		.long	.LVL31
 4172 02f1 0000 0000 		.long	.LVL33
 4173 02f5 0100      		.word	0x1
 4174 02f7 68        		.byte	0x68
 4175 02f8 0000 0000 		.long	.LVL33
 4176 02fc 0000 0000 		.long	.LVL40
 4177 0300 0100      		.word	0x1
 4178 0302 61        		.byte	0x61
 4179 0303 0000 0000 		.long	.LVL40
 4180 0307 0000 0000 		.long	.LFE28
 4181 030b 0400      		.word	0x4
 4182 030d F3        		.byte	0xf3
 4183 030e 01        		.uleb128 0x1
 4184 030f 68        		.byte	0x68
 4185 0310 9F        		.byte	0x9f
 4186 0311 0000 0000 		.long	0
 4187 0315 0000 0000 		.long	0
 4188               	.LLST17:
 4189 0319 0000 0000 		.long	.LVL31
 4190 031d 0000 0000 		.long	.LVL34-1
 4191 0321 0100      		.word	0x1
 4192 0323 66        		.byte	0x66
 4193 0324 0000 0000 		.long	.LVL34-1
 4194 0328 0000 0000 		.long	.LVL38
 4195 032c 0100      		.word	0x1
 4196 032e 6D        		.byte	0x6d
 4197 032f 0000 0000 		.long	.LVL38
 4198 0333 0000 0000 		.long	.LFE28
 4199 0337 0400      		.word	0x4
 4200 0339 F3        		.byte	0xf3
 4201 033a 01        		.uleb128 0x1
 4202 033b 66        		.byte	0x66
 4203 033c 9F        		.byte	0x9f
 4204 033d 0000 0000 		.long	0
 4205 0341 0000 0000 		.long	0
 4206               	.LLST18:
 4207 0345 0000 0000 		.long	.LVL31
 4208 0349 0000 0000 		.long	.LVL34-1
 4209 034d 0100      		.word	0x1
 4210 034f 64        		.byte	0x64
 4211 0350 0000 0000 		.long	.LVL34-1
 4212 0354 0000 0000 		.long	.LVL39
 4213 0358 0100      		.word	0x1
 4214 035a 6C        		.byte	0x6c
 4215 035b 0000 0000 		.long	.LVL39
 4216 035f 0000 0000 		.long	.LFE28
 4217 0363 0400      		.word	0x4
 4218 0365 F3        		.byte	0xf3
 4219 0366 01        		.uleb128 0x1
 4220 0367 64        		.byte	0x64
 4221 0368 9F        		.byte	0x9f
 4222 0369 0000 0000 		.long	0
 4223 036d 0000 0000 		.long	0
 4224               	.LLST19:
 4225 0371 0000 0000 		.long	.LFB29
 4226 0375 0000 0000 		.long	.LCFI6
 4227 0379 0300      		.word	0x3
 4228 037b 92        		.byte	0x92
 4229 037c 20        		.uleb128 0x20
 4230 037d 02        		.sleb128 2
 4231 037e 0000 0000 		.long	.LCFI6
 4232 0382 0000 0000 		.long	.LFE29
 4233 0386 0200      		.word	0x2
 4234 0388 8C        		.byte	0x8c
 4235 0389 17        		.sleb128 23
 4236 038a 0000 0000 		.long	0
 4237 038e 0000 0000 		.long	0
 4238               	.LLST20:
 4239 0392 0000 0000 		.long	.LVL41
 4240 0396 0000 0000 		.long	.LVL43
 4241 039a 0600      		.word	0x6
 4242 039c 68        		.byte	0x68
 4243 039d 93        		.byte	0x93
 4244 039e 01        		.uleb128 0x1
 4245 039f 69        		.byte	0x69
 4246 03a0 93        		.byte	0x93
 4247 03a1 01        		.uleb128 0x1
 4248 03a2 0000 0000 		.long	.LVL43
 4249 03a6 0000 0000 		.long	.LVL50
 4250 03aa 0600      		.word	0x6
 4251 03ac 62        		.byte	0x62
 4252 03ad 93        		.byte	0x93
 4253 03ae 01        		.uleb128 0x1
 4254 03af 63        		.byte	0x63
 4255 03b0 93        		.byte	0x93
 4256 03b1 01        		.uleb128 0x1
 4257 03b2 0000 0000 		.long	.LVL50
 4258 03b6 0000 0000 		.long	.LFE29
 4259 03ba 0400      		.word	0x4
 4260 03bc F3        		.byte	0xf3
 4261 03bd 01        		.uleb128 0x1
 4262 03be 68        		.byte	0x68
 4263 03bf 9F        		.byte	0x9f
 4264 03c0 0000 0000 		.long	0
 4265 03c4 0000 0000 		.long	0
 4266               	.LLST21:
 4267 03c8 0000 0000 		.long	.LVL44
 4268 03cc 0000 0000 		.long	.LVL45
 4269 03d0 0600      		.word	0x6
 4270 03d2 68        		.byte	0x68
 4271 03d3 93        		.byte	0x93
 4272 03d4 01        		.uleb128 0x1
 4273 03d5 69        		.byte	0x69
 4274 03d6 93        		.byte	0x93
 4275 03d7 01        		.uleb128 0x1
 4276 03d8 0000 0000 		.long	.LVL46
 4277 03dc 0000 0000 		.long	.LVL47
 4278 03e0 0600      		.word	0x6
 4279 03e2 68        		.byte	0x68
 4280 03e3 93        		.byte	0x93
 4281 03e4 01        		.uleb128 0x1
 4282 03e5 69        		.byte	0x69
 4283 03e6 93        		.byte	0x93
 4284 03e7 01        		.uleb128 0x1
 4285 03e8 0000 0000 		.long	.LVL47
 4286 03ec 0000 0000 		.long	.LVL51
 4287 03f0 0600      		.word	0x6
 4288 03f2 6E        		.byte	0x6e
 4289 03f3 93        		.byte	0x93
 4290 03f4 01        		.uleb128 0x1
 4291 03f5 6F        		.byte	0x6f
 4292 03f6 93        		.byte	0x93
 4293 03f7 01        		.uleb128 0x1
 4294 03f8 0000 0000 		.long	0
 4295 03fc 0000 0000 		.long	0
 4296               	.LLST22:
 4297 0400 0000 0000 		.long	.LVL52
 4298 0404 0000 0000 		.long	.LVL53
 4299 0408 0200      		.word	0x2
 4300 040a 30        		.byte	0x30
 4301 040b 9F        		.byte	0x9f
 4302 040c 0000 0000 		.long	0
 4303 0410 0000 0000 		.long	0
 4304               	.LLST23:
 4305 0414 0000 0000 		.long	.LVL54
 4306 0418 0000 0000 		.long	.LVL55
 4307 041c 0500      		.word	0x5
 4308 041e 88        		.byte	0x88
 4309 041f 00        		.sleb128 0
 4310 0420 36        		.byte	0x36
 4311 0421 25        		.byte	0x25
 4312 0422 9F        		.byte	0x9f
 4313 0423 0000 0000 		.long	.LVL55
 4314 0427 0000 0000 		.long	.LFE29
 4315 042b 0600      		.word	0x6
 4316 042d 68        		.byte	0x68
 4317 042e 93        		.byte	0x93
 4318 042f 01        		.uleb128 0x1
 4319 0430 69        		.byte	0x69
 4320 0431 93        		.byte	0x93
 4321 0432 01        		.uleb128 0x1
 4322 0433 0000 0000 		.long	0
 4323 0437 0000 0000 		.long	0
 4324               	.LLST24:
 4325 043b 0000 0000 		.long	.LFB32
 4326 043f 0000 0000 		.long	.LCFI7
 4327 0443 0300      		.word	0x3
 4328 0445 92        		.byte	0x92
 4329 0446 20        		.uleb128 0x20
 4330 0447 02        		.sleb128 2
 4331 0448 0000 0000 		.long	.LCFI7
 4332 044c 0000 0000 		.long	.LFE32
 4333 0450 0200      		.word	0x2
 4334 0452 8C        		.byte	0x8c
 4335 0453 1C        		.sleb128 28
 4336 0454 0000 0000 		.long	0
 4337 0458 0000 0000 		.long	0
 4338               	.LLST25:
 4339 045c 0000 0000 		.long	.LVL56
 4340 0460 0000 0000 		.long	.LVL66
 4341 0464 0200      		.word	0x2
 4342 0466 30        		.byte	0x30
 4343 0467 9F        		.byte	0x9f
 4344 0468 0000 0000 		.long	.LVL66
 4345 046c 0000 0000 		.long	.LVL72
 4346 0470 0100      		.word	0x1
 4347 0472 61        		.byte	0x61
 4348 0473 0000 0000 		.long	.LVL73
 4349 0477 0000 0000 		.long	.LFE32
 4350 047b 0100      		.word	0x1
 4351 047d 61        		.byte	0x61
 4352 047e 0000 0000 		.long	0
 4353 0482 0000 0000 		.long	0
 4354               	.LLST26:
 4355 0486 0000 0000 		.long	.LVL56
 4356 048a 0000 0000 		.long	.LVL66
 4357 048e 0200      		.word	0x2
 4358 0490 30        		.byte	0x30
 4359 0491 9F        		.byte	0x9f
 4360 0492 0000 0000 		.long	.LVL74
 4361 0496 0000 0000 		.long	.LFE32
 4362 049a 0100      		.word	0x1
 4363 049c 61        		.byte	0x61
 4364 049d 0000 0000 		.long	0
 4365 04a1 0000 0000 		.long	0
 4366               	.LLST27:
 4367 04a5 0000 0000 		.long	.LVL57
 4368 04a9 0000 0000 		.long	.LVL65
 4369 04ad 0200      		.word	0x2
 4370 04af 30        		.byte	0x30
 4371 04b0 9F        		.byte	0x9f
 4372 04b1 0000 0000 		.long	0
 4373 04b5 0000 0000 		.long	0
 4374               	.LLST28:
 4375 04b9 0000 0000 		.long	.LVL57
 4376 04bd 0000 0000 		.long	.LVL66
 4377 04c1 0200      		.word	0x2
 4378 04c3 30        		.byte	0x30
 4379 04c4 9F        		.byte	0x9f
 4380 04c5 0000 0000 		.long	.LVL66
 4381 04c9 0000 0000 		.long	.LVL67
 4382 04cd 0100      		.word	0x1
 4383 04cf 68        		.byte	0x68
 4384 04d0 0000 0000 		.long	.LVL68
 4385 04d4 0000 0000 		.long	.LFE32
 4386 04d8 0100      		.word	0x1
 4387 04da 59        		.byte	0x59
 4388 04db 0000 0000 		.long	0
 4389 04df 0000 0000 		.long	0
 4390               	.LLST29:
 4391 04e3 0000 0000 		.long	.LVL57
 4392 04e7 0000 0000 		.long	.LVL66
 4393 04eb 0200      		.word	0x2
 4394 04ed 30        		.byte	0x30
 4395 04ee 9F        		.byte	0x9f
 4396 04ef 0000 0000 		.long	.LVL66
 4397 04f3 0000 0000 		.long	.LFE32
 4398 04f7 0100      		.word	0x1
 4399 04f9 60        		.byte	0x60
 4400 04fa 0000 0000 		.long	0
 4401 04fe 0000 0000 		.long	0
 4402               	.LLST30:
 4403 0502 0000 0000 		.long	.LVL59
 4404 0506 0000 0000 		.long	.LVL60
 4405 050a 0200      		.word	0x2
 4406 050c 37        		.byte	0x37
 4407 050d 9F        		.byte	0x9f
 4408 050e 0000 0000 		.long	0
 4409 0512 0000 0000 		.long	0
 4410               	.LLST31:
 4411 0516 0000 0000 		.long	.LVL81
 4412 051a 0000 0000 		.long	.LVL82-1
 4413 051e 0600      		.word	0x6
 4414 0520 66        		.byte	0x66
 4415 0521 93        		.byte	0x93
 4416 0522 01        		.uleb128 0x1
 4417 0523 67        		.byte	0x67
 4418 0524 93        		.byte	0x93
 4419 0525 01        		.uleb128 0x1
 4420 0526 0000 0000 		.long	0
 4421 052a 0000 0000 		.long	0
 4422               		.section	.debug_aranges,"",@progbits
 4423 0000 2400 0000 		.long	0x24
 4424 0004 0200      		.word	0x2
 4425 0006 0000 0000 		.long	.Ldebug_info0
 4426 000a 04        		.byte	0x4
 4427 000b 00        		.byte	0
 4428 000c 0000      		.word	0
 4429 000e 0000      		.word	0
 4430 0010 0000 0000 		.long	.Ltext0
 4431 0014 4002 0000 		.long	.Letext0-.Ltext0
 4432 0018 0000 0000 		.long	.LFB32
 4433 001c E601 0000 		.long	.LFE32-.LFB32
 4434 0020 0000 0000 		.long	0
 4435 0024 0000 0000 		.long	0
 4436               		.section	.debug_ranges,"",@progbits
 4437               	.Ldebug_ranges0:
 4438 0000 0000 0000 		.long	.LBB25
 4439 0004 0000 0000 		.long	.LBE25
 4440 0008 0000 0000 		.long	.LBB28
 4441 000c 0000 0000 		.long	.LBE28
 4442 0010 0000 0000 		.long	0
 4443 0014 0000 0000 		.long	0
 4444 0018 0000 0000 		.long	.Ltext0
 4445 001c 0000 0000 		.long	.Letext0
 4446 0020 0000 0000 		.long	.LFB32
 4447 0024 0000 0000 		.long	.LFE32
 4448 0028 0000 0000 		.long	0
 4449 002c 0000 0000 		.long	0
 4450               		.section	.debug_line,"",@progbits
 4451               	.Ldebug_line0:
 4452 0000 3004 0000 		.section	.debug_str,"MS",@progbits,1
 4452      0200 F100 
 4452      0000 0201 
 4452      FB0E 0A00 
 4452      0101 0101 
 4453               	.LASF31:
 4454 0000 7573 6257 		.string	"usbWord_t"
 4454      6F72 645F 
 4454      7400 
 4455               	.LASF93:
 4456 000a 6C65 645F 		.string	"led_sensor_nvalues"
 4456      7365 6E73 
 4456      6F72 5F6E 
 4456      7661 6C75 
 4456      6573 00
 4457               	.LASF32:
 4458 001d 7573 6252 		.string	"usbRequest"
 4458      6571 7565 
 4458      7374 00
 4459               	.LASF68:
 4460 0028 756E 7061 		.string	"unpack_color_red"
 4460      636B 5F63 
 4460      6F6C 6F72 
 4460      5F72 6564 
 4460      00
 4461               	.LASF94:
 4462 0039 6C65 645F 		.string	"led_sensor_nsample"
 4462      7365 6E73 
 4462      6F72 5F6E 
 4462      7361 6D70 
 4462      6C65 00
 4463               	.LASF63:
 4464 004c 6969 7232 		.string	"iir2"
 4464      00
 4465               	.LASF89:
 4466 0051 6C65 645F 		.string	"led_sensor_last_random"
 4466      7365 6E73 
 4466      6F72 5F6C 
 4466      6173 745F 
 4466      7261 6E64 
 4467               	.LASF45:
 4468 0068 5449 4D45 		.string	"TIMER_DATA_CHANGE"
 4468      525F 4441 
 4468      5441 5F43 
 4468      4841 4E47 
 4468      4500 
 4469               	.LASF12:
 4470 007a 756E 6765 		.string	"unget"
 4470      7400 
 4471               	.LASF118:
 4472 0080 474E 5520 		.string	"GNU C99 5.4.0 -mn-flash=1 -mno-skip-bug -mcall-prologues -mmcu=avr25 -gdwarf-2 -Os -std=c
 4472      4339 3920 
 4472      352E 342E 
 4472      3020 2D6D 
 4472      6E2D 666C 
 4473               	.LASF90:
 4474 011d 6C65 645F 		.string	"led_sensor_delta_time"
 4474      7365 6E73 
 4474      6F72 5F64 
 4474      656C 7461 
 4474      5F74 696D 
 4475               	.LASF11:
 4476 0133 6C6F 6E67 		.string	"long long unsigned int"
 4476      206C 6F6E 
 4476      6720 756E 
 4476      7369 676E 
 4476      6564 2069 
 4477               	.LASF97:
 4478 014a 6C65 645F 		.string	"led_sensor_weigthed_sum"
 4478      7365 6E73 
 4478      6F72 5F77 
 4478      6569 6774 
 4478      6865 645F 
 4479               	.LASF114:
 4480 0162 5469 6D65 		.string	"Timers_DecreaseAll"
 4480      7273 5F44 
 4480      6563 7265 
 4480      6173 6541 
 4480      6C6C 00
 4481               	.LASF38:
 4482 0175 7573 6252 		.string	"usbRequest_t"
 4482      6571 7565 
 4482      7374 5F74 
 4482      00
 4483               	.LASF77:
 4484 0182 6765 7452 		.string	"getRainbowColor"
 4484      6169 6E62 
 4484      6F77 436F 
 4484      6C6F 7200 
 4485               	.LASF83:
 4486 0192 7765 6967 		.string	"weight_to"
 4486      6874 5F74 
 4486      6F00 
 4487               	.LASF4:
 4488 019c 696E 7431 		.string	"int16_t"
 4488      365F 7400 
 4489               	.LASF10:
 4490 01a4 6C6F 6E67 		.string	"long long int"
 4490      206C 6F6E 
 4490      6720 696E 
 4490      7400 
 4491               	.LASF2:
 4492 01b2 7369 676E 		.string	"signed char"
 4492      6564 2063 
 4492      6861 7200 
 4493               	.LASF48:
 4494 01be 7137 5F38 		.string	"q7_8_t"
 4494      5F74 00
 4495               	.LASF113:
 4496 01c5 5469 6D65 		.string	"Timer_Set"
 4496      725F 5365 
 4496      7400 
 4497               	.LASF73:
 4498 01cf 7465 6D70 		.string	"temp"
 4498      00
 4499               	.LASF8:
 4500 01d4 6C6F 6E67 		.string	"long int"
 4500      2069 6E74 
 4500      00
 4501               	.LASF115:
 4502 01dd 7573 6250 		.string	"usbPoll"
 4502      6F6C 6C00 
 4503               	.LASF15:
 4504 01e5 7564 6174 		.string	"udata"
 4504      6100 
 4505               	.LASF35:
 4506 01eb 7756 616C 		.string	"wValue"
 4506      7565 00
 4507               	.LASF5:
 4508 01f2 7569 6E74 		.string	"uint16_t"
 4508      3136 5F74 
 4508      00
 4509               	.LASF81:
 4510 01fb 696E 7465 		.string	"interpolate_index"
 4510      7270 6F6C 
 4510      6174 655F 
 4510      696E 6465 
 4510      7800 
 4511               	.LASF120:
 4512 020d 2F68 6F6D 		.string	"/home/birkler/src/birkler/avrtinybootloader/app_hid"
 4512      652F 6269 
 4512      726B 6C65 
 4512      722F 7372 
 4512      632F 6269 
 4513               	.LASF126:
 4514 0241 6D61 696E 		.string	"main"
 4514      00
 4515               	.LASF82:
 4516 0246 7765 6967 		.string	"weight_from"
 4516      6874 5F66 
 4516      726F 6D00 
 4517               	.LASF80:
 4518 0252 7261 696E 		.string	"rainbow_index"
 4518      626F 775F 
 4518      696E 6465 
 4518      7800 
 4519               	.LASF19:
 4520 0260 7265 706F 		.string	"report_id_keyboard"
 4520      7274 5F69 
 4520      645F 6B65 
 4520      7962 6F61 
 4520      7264 00
 4521               	.LASF47:
 4522 0273 5449 4D45 		.string	"TIMER_LAST"
 4522      525F 4C41 
 4522      5354 00
 4523               	.LASF30:
 4524 027e 6279 7465 		.string	"bytes"
 4524      7300 
 4525               	.LASF111:
 4526 0284 7072 696E 		.string	"printf_P"
 4526      7466 5F50 
 4526      00
 4527               	.LASF91:
 4528 028d 6C65 645F 		.string	"led_sensor_trig_time"
 4528      7365 6E73 
 4528      6F72 5F74 
 4528      7269 675F 
 4528      7469 6D65 
 4529               	.LASF26:
 4530 02a2 7573 6254 		.string	"usbTxStatus"
 4530      7853 7461 
 4530      7475 7300 
 4531               	.LASF33:
 4532 02ae 626D 5265 		.string	"bmRequestType"
 4532      7175 6573 
 4532      7454 7970 
 4532      6500 
 4533               	.LASF28:
 4534 02bc 7573 6254 		.string	"usbTxStatus_t"
 4534      7853 7461 
 4534      7475 735F 
 4534      7400 
 4535               	.LASF40:
 4536 02ca 5449 4D45 		.string	"TIMER_LED_SENSOR_BLINK"
 4536      525F 4C45 
 4536      445F 5345 
 4536      4E53 4F52 
 4536      5F42 4C49 
 4537               	.LASF123:
 4538 02e1 7661 6C75 		.string	"value"
 4538      6500 
 4539               	.LASF6:
 4540 02e7 756E 7369 		.string	"unsigned int"
 4540      676E 6564 
 4540      2069 6E74 
 4540      00
 4541               	.LASF99:
 4542 02f4 7374 6469 		.string	"stdin_get_string_buffer"
 4542      6E5F 6765 
 4542      745F 7374 
 4542      7269 6E67 
 4542      5F62 7566 
 4543               	.LASF42:
 4544 030c 5449 4D45 		.string	"TIMER_SEND_KEY_UP"
 4544      525F 5345 
 4544      4E44 5F4B 
 4544      4559 5F55 
 4544      5000 
 4545               	.LASF9:
 4546 031e 6C6F 6E67 		.string	"long unsigned int"
 4546      2075 6E73 
 4546      6967 6E65 
 4546      6420 696E 
 4546      7400 
 4547               	.LASF39:
 4548 0330 5449 4D45 		.string	"TIMER_LED_BLINK"
 4548      525F 4C45 
 4548      445F 424C 
 4548      494E 4B00 
 4549               	.LASF85:
 4550 0340 6275 7474 		.string	"buttonPressed"
 4550      6F6E 5072 
 4550      6573 7365 
 4550      6400 
 4551               	.LASF18:
 4552 034e 7265 706F 		.string	"report_id_mouse"
 4552      7274 5F69 
 4552      645F 6D6F 
 4552      7573 6500 
 4553               	.LASF67:
 4554 035e 6461 7461 		.string	"data"
 4554      00
 4555               	.LASF14:
 4556 0363 7369 7A65 		.string	"size"
 4556      00
 4557               	.LASF121:
 4558 0368 7573 6257 		.string	"usbWord"
 4558      6F72 6400 
 4559               	.LASF119:
 4560 0370 6D61 696E 		.string	"main.c"
 4560      2E63 00
 4561               	.LASF65:
 4562 0377 6669 6C74 		.string	"filter_iir2"
 4562      6572 5F69 
 4562      6972 3200 
 4563               	.LASF70:
 4564 0383 756E 7061 		.string	"unpack_color_green"
 4564      636B 5F63 
 4564      6F6C 6F72 
 4564      5F67 7265 
 4564      656E 00
 4565               	.LASF44:
 4566 0396 5449 4D45 		.string	"TIMER_MEASURE_POT"
 4566      525F 4D45 
 4566      4153 5552 
 4566      455F 504F 
 4566      5400 
 4567               	.LASF84:
 4568 03a8 6672 6F6D 		.string	"from"
 4568      00
 4569               	.LASF69:
 4570 03ad 6261 7365 		.string	"base"
 4570      00
 4571               	.LASF88:
 4572 03b2 6669 6C74 		.string	"filtered_val"
 4572      6572 6564 
 4572      5F76 616C 
 4572      00
 4573               	.LASF54:
 4574 03bf 6275 664C 		.string	"bufLen"
 4574      656E 00
 4575               	.LASF106:
 4576 03c6 7573 6244 		.string	"usbDescriptorHidReport"
 4576      6573 6372 
 4576      6970 746F 
 4576      7248 6964 
 4576      5265 706F 
 4577               	.LASF24:
 4578 03dd 7369 7A65 		.string	"sizetype"
 4578      7479 7065 
 4578      00
 4579               	.LASF105:
 4580 03e6 5F5F 696F 		.string	"__iob"
 4580      6200 
 4581               	.LASF61:
 4582 03ec 636F 6C6F 		.string	"color_"
 4582      725F 00
 4583               	.LASF122:
 4584 03f3 7764 745F 		.string	"wdt_enable"
 4584      656E 6162 
 4584      6C65 00
 4585               	.LASF110:
 4586 03fe 7261 696E 		.string	"rainbow_colors"
 4586      626F 775F 
 4586      636F 6C6F 
 4586      7273 00
 4587               	.LASF102:
 4588 040d 6361 7074 		.string	"capture_diff_max"
 4588      7572 655F 
 4588      6469 6666 
 4588      5F6D 6178 
 4588      00
 4589               	.LASF109:
 4590 041e 7573 625F 		.string	"usb_in_stream"
 4590      696E 5F73 
 4590      7472 6561 
 4590      6D00 
 4591               	.LASF95:
 4592 042c 6C65 645F 		.string	"led_sensor_values"
 4592      7365 6E73 
 4592      6F72 5F76 
 4592      616C 7565 
 4592      7300 
 4593               	.LASF59:
 4594 043e 434F 4C4F 		.string	"COLORS"
 4594      5253 00
 4595               	.LASF60:
 4596 0445 5247 4238 		.string	"RGB888_"
 4596      3838 5F00 
 4597               	.LASF55:
 4598 044d 7374 6469 		.string	"stdin_get_string_t"
 4598      6E5F 6765 
 4598      745F 7374 
 4598      7269 6E67 
 4598      5F74 00
 4599               	.LASF50:
 4600 0460 7265 706F 		.string	"report_id"
 4600      7274 5F69 
 4600      6400 
 4601               	.LASF86:
 4602 046a 6C65 645F 		.string	"led_sensor_blink"
 4602      7365 6E73 
 4602      6F72 5F62 
 4602      6C69 6E6B 
 4602      00
 4603               	.LASF104:
 4604 047b 7265 706F 		.string	"reportBuffer"
 4604      7274 4275 
 4604      6666 6572 
 4604      00
 4605               	.LASF43:
 4606 0488 5449 4D45 		.string	"TIMER_SEND_KEY_DOWN"
 4606      525F 5345 
 4606      4E44 5F4B 
 4606      4559 5F44 
 4606      4F57 4E00 
 4607               	.LASF103:
 4608 049c 6361 7074 		.string	"captured"
 4608      7572 6564 
 4608      00
 4609               	.LASF7:
 4610 04a5 696E 7433 		.string	"int32_t"
 4610      325F 7400 
 4611               	.LASF3:
 4612 04ad 756E 7369 		.string	"unsigned char"
 4612      676E 6564 
 4612      2063 6861 
 4612      7200 
 4613               	.LASF25:
 4614 04bb 5F5F 6669 		.string	"__file"
 4614      6C65 00
 4615               	.LASF62:
 4616 04c2 5247 4238 		.string	"RGB888"
 4616      3838 00
 4617               	.LASF20:
 4618 04c9 7265 706F 		.string	"report_id_buf_out_setreadpos"
 4618      7274 5F69 
 4618      645F 6275 
 4618      665F 6F75 
 4618      745F 7365 
 4619               	.LASF36:
 4620 04e6 7749 6E64 		.string	"wIndex"
 4620      6578 00
 4621               	.LASF117:
 4622 04ed 5469 6D65 		.string	"Timer_HasExpired"
 4622      725F 4861 
 4622      7345 7870 
 4622      6972 6564 
 4622      00
 4623               	.LASF34:
 4624 04fe 6252 6571 		.string	"bRequest"
 4624      7565 7374 
 4624      00
 4625               	.LASF17:
 4626 0507 4649 4C45 		.string	"FILE"
 4626      00
 4627               	.LASF66:
 4628 050c 7573 6246 		.string	"usbFunctionSetup2"
 4628      756E 6374 
 4628      696F 6E53 
 4628      6574 7570 
 4628      3200 
 4629               	.LASF49:
 4630 051e 6669 6C74 		.string	"filter_iir2_t"
 4630      6572 5F69 
 4630      6972 325F 
 4630      7400 
 4631               	.LASF96:
 4632 052c 6C65 645F 		.string	"led_sensor_weigthed_sum_data"
 4632      7365 6E73 
 4632      6F72 5F77 
 4632      6569 6774 
 4632      6865 645F 
 4633               	.LASF57:
 4634 0549 4752 4545 		.string	"GREEN"
 4634      4E00 
 4635               	.LASF72:
 4636 054f 6279 7465 		.string	"byteval"
 4636      7661 6C00 
 4637               	.LASF22:
 4638 0557 7265 706F 		.string	"report_id_buf_out_data"
 4638      7274 5F69 
 4638      645F 6275 
 4638      665F 6F75 
 4638      745F 6461 
 4639               	.LASF98:
 4640 056e 6C65 645F 		.string	"led_sensor_weigthed_sum_idx"
 4640      7365 6E73 
 4640      6F72 5F77 
 4640      6569 6774 
 4640      6865 645F 
 4641               	.LASF16:
 4642 058a 6368 6172 		.string	"char"
 4642      00
 4643               	.LASF112:
 4644 058f 7573 6249 		.string	"usbInit"
 4644      6E69 7400 
 4645               	.LASF21:
 4646 0597 7265 706F 		.string	"report_id_buf_in_getwritepos"
 4646      7274 5F69 
 4646      645F 6275 
 4646      665F 696E 
 4646      5F67 6574 
 4647               	.LASF56:
 4648 05b4 7267 6233 		.string	"rgb332_t"
 4648      3332 5F74 
 4648      00
 4649               	.LASF51:
 4650 05bd 6275 7474 		.string	"buttonMask"
 4650      6F6E 4D61 
 4650      736B 00
 4651               	.LASF78:
 4652 05c8 696E 6465 		.string	"index"
 4652      7800 
 4653               	.LASF58:
 4654 05ce 424C 5545 		.string	"BLUE"
 4654      00
 4655               	.LASF41:
 4656 05d3 5449 4D45 		.string	"TIMER_LED_BUTTON_BLINK"
 4656      525F 4C45 
 4656      445F 4255 
 4656      5454 4F4E 
 4656      5F42 4C49 
 4657               	.LASF27:
 4658 05ea 6275 6666 		.string	"buffer"
 4658      6572 00
 4659               	.LASF107:
 4660 05f1 7573 6254 		.string	"usbTxStatus1"
 4660      7853 7461 
 4660      7475 7331 
 4660      00
 4661               	.LASF29:
 4662 05fe 776F 7264 		.string	"word"
 4662      00
 4663               	.LASF87:
 4664 0603 6669 6C74 		.string	"filter_iir2_data"
 4664      6572 5F69 
 4664      6972 325F 
 4664      6461 7461 
 4664      00
 4665               	.LASF125:
 4666 0614 6861 7264 		.string	"hardwareInit"
 4666      7761 7265 
 4666      496E 6974 
 4666      00
 4667               	.LASF53:
 4668 0621 7265 706F 		.string	"report_t"
 4668      7274 5F74 
 4668      00
 4669               	.LASF23:
 4670 062a 7265 706F 		.string	"report_id_buf_in_data"
 4670      7274 5F69 
 4670      645F 6275 
 4670      665F 696E 
 4670      5F64 6174 
 4671               	.LASF76:
 4672 0640 7374 6172 		.string	"start_byte"
 4672      745F 6279 
 4672      7465 00
 4673               	.LASF64:
 4674 064b 696E 765F 		.string	"inv_b0"
 4674      6230 00
 4675               	.LASF101:
 4676 0652 6361 7074 		.string	"capture_diff"
 4676      7572 655F 
 4676      6469 6666 
 4676      00
 4677               	.LASF0:
 4678 065f 696E 7438 		.string	"int8_t"
 4678      5F74 00
 4679               	.LASF74:
 4680 0666 7365 6E64 		.string	"send_strip_byte"
 4680      5F73 7472 
 4680      6970 5F62 
 4680      7974 6500 
 4681               	.LASF92:
 4682 0676 6C65 645F 		.string	"led_sensor_prev_time"
 4682      7365 6E73 
 4682      6F72 5F70 
 4682      7265 765F 
 4682      7469 6D65 
 4683               	.LASF75:
 4684 068b 7365 6E64 		.string	"send_color"
 4684      5F63 6F6C 
 4684      6F72 00
 4685               	.LASF100:
 4686 0696 7265 7365 		.string	"reset_vec"
 4686      745F 7665 
 4686      6300 
 4687               	.LASF1:
 4688 06a0 7569 6E74 		.string	"uint8_t"
 4688      385F 7400 
 4689               	.LASF13:
 4690 06a8 666C 6167 		.string	"flags"
 4690      7300 
 4691               	.LASF52:
 4692 06ae 6D6F 7573 		.string	"mouse"
 4692      6500 
 4693               	.LASF37:
 4694 06b4 774C 656E 		.string	"wLength"
 4694      6774 6800 
 4695               	.LASF124:
 4696 06bc 5F5F 7665 		.string	"__vector_16"
 4696      6374 6F72 
 4696      5F31 3600 
 4697               	.LASF108:
 4698 06c8 7573 625F 		.string	"usb_out_stream"
 4698      6F75 745F 
 4698      7374 7265 
 4698      616D 00
 4699               	.LASF46:
 4700 06d7 5449 4D45 		.string	"TIMER_SELF_TEST"
 4700      525F 5345 
 4700      4C46 5F54 
 4700      4553 5400 
 4701               	.LASF116:
 4702 06e7 7573 6253 		.string	"usbSetInterrupt"
 4702      6574 496E 
 4702      7465 7272 
 4702      7570 7400 
 4703               	.LASF79:
 4704 06f7 7374 6570 		.string	"steps"
 4704      7300 
 4705               	.LASF71:
 4706 06fd 756E 7061 		.string	"unpack_color_blue"
 4706      636B 5F63 
 4706      6F6C 6F72 
 4706      5F62 6C75 
 4706      6500 
 4707               		.ident	"GCC: (GNU) 5.4.0"
 4708               	.global __do_copy_data
 4709               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNUvWpq.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccNUvWpq.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccNUvWpq.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccNUvWpq.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccNUvWpq.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccNUvWpq.s:13     .text:0000000000000000 filter_iir2
     /tmp/ccNUvWpq.s:182    .text:00000000000000ee __vector_16
     /tmp/ccNUvWpq.s:215    .text:0000000000000104 usbFunctionSetup2
     /tmp/ccNUvWpq.s:233    .text:0000000000000108 unpack_color_red
     /tmp/ccNUvWpq.s:251    .text:000000000000010c unpack_color_green
     /tmp/ccNUvWpq.s:285    .text:0000000000000120 unpack_color_blue
     /tmp/ccNUvWpq.s:325    .text:0000000000000140 send_strip_byte
     /tmp/ccNUvWpq.s:370    .text:0000000000000158 send_color
     /tmp/ccNUvWpq.s:426    .text:000000000000017c getRainbowColor
     /tmp/ccNUvWpq.s:1017   .data:0000000000000001 rainbow_colors
     /tmp/ccNUvWpq.s:588    .text.startup:0000000000000000 main
     /tmp/ccNUvWpq.s:1011   .progmem.data:000000000000000a __c.2476
     /tmp/ccNUvWpq.s:1005   .progmem.data:0000000000000000 __c.2487
                             .bss:0000000000000000 led_sensor_delta_time.2466
     /tmp/ccNUvWpq.s:1008   .bss:0000000000000002 reportBuffer
     /tmp/ccNUvWpq.s:1000   .data:0000000000000000 led_sensor_nsample.2471
     /tmp/ccNUvWpq.s:1045   .progmem.data:000000000000000e usbDescriptorHidReport
     /tmp/ccNUvWpq.s:1040   .bss:0000000000000004 captured
     /tmp/ccNUvWpq.s:1127   .bss:0000000000000006 capture_diff_max
     /tmp/ccNUvWpq.s:1129   .bss:0000000000000008 capture_diff

UNDEFINED SYMBOLS
__mulsi3
__prologue_saves__
__epilogue_restores__
__divmodhi4
__mulhi3
usb_out_stream
__iob
usb_in_stream
printf_P
usbInit
Timer_Set
Timers_DecreaseAll
usbPoll
usbTxStatus1
usbSetInterrupt
Timer_HasExpired
__do_copy_data
__do_clear_bss
