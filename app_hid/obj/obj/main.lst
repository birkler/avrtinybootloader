   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__mulsi3
  11               	.global	filter_iir2
  12               		.type	filter_iir2, @function
  13               	filter_iir2:
  14               	.LFB21:
  15               		.file 1 "../util/iir_filter.h"
   1:../util/iir_filter.h **** /*
   2:../util/iir_filter.h ****  * iir_filter.h
   3:../util/iir_filter.h ****  *
   4:../util/iir_filter.h ****  *  Created on: Jan 25, 2011
   5:../util/iir_filter.h ****  *      Author: jorgen
   6:../util/iir_filter.h ****  *
   7:../util/iir_filter.h ****  *
   8:../util/iir_filter.h ****  *
   9:../util/iir_filter.h ****  *
  10:../util/iir_filter.h ****  *
  11:../util/iir_filter.h ****  *      http://faculty.cua.edu/regalia/regalia-perso_files/sp-sep-91.pdf
  12:../util/iir_filter.h ****  *
  13:../util/iir_filter.h ****  *      http://www.dsptutor.freeuk.com/IIRFilterDesign/IIRFilterDesign.html
  14:../util/iir_filter.h ****  *
  15:../util/iir_filter.h ****  *      http://ntur.lib.ntu.edu.tw/bitstream/246246/142473/1/63.pdf
  16:../util/iir_filter.h ****  */
  17:../util/iir_filter.h **** 
  18:../util/iir_filter.h **** #ifndef IIR_FILTER_H_
  19:../util/iir_filter.h **** #define IIR_FILTER_H_
  20:../util/iir_filter.h **** 
  21:../util/iir_filter.h **** #include "q7_8_t.h"
  22:../util/iir_filter.h **** #include "q2_13_t.h"
  23:../util/iir_filter.h **** 
  24:../util/iir_filter.h **** typedef struct {
  25:../util/iir_filter.h **** 	q7_8_t y_1;
  26:../util/iir_filter.h **** 	q7_8_t y_2;
  27:../util/iir_filter.h **** 	q7_8_t x_1;
  28:../util/iir_filter.h **** 	q7_8_t x_2;
  29:../util/iir_filter.h **** } filter_iir2_t;
  30:../util/iir_filter.h **** 
  31:../util/iir_filter.h **** 
  32:../util/iir_filter.h **** //Chebyshev IIR filter
  33:../util/iir_filter.h **** //
  34:../util/iir_filter.h **** //Filter type: HP
  35:../util/iir_filter.h **** //Passband: 400 - 4000 Hz
  36:../util/iir_filter.h **** //Passband ripple: 1.0 dB
  37:../util/iir_filter.h **** //Order: 2
  38:../util/iir_filter.h **** //
  39:../util/iir_filter.h **** //Coefficients
  40:../util/iir_filter.h **** //
  41:../util/iir_filter.h **** //a[0] = 0.7550102     	b[0] = 1.0
  42:../util/iir_filter.h **** //a[1] = -1.5100204     	b[1] = -1.655717
  43:../util/iir_filter.h **** //a[2] = 0.7550102     	b[2] = 0.73281693
  44:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_90per_HP(filter_iir2_t* iir2,q2_13_t in)
  45:../util/iir_filter.h **** {
  46:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.7550102);
  47:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(-1.5100204);
  48:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float( 0.7550102);
  49:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
  50:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.655717);
  51:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float(0.73281693);
  52:../util/iir_filter.h **** 
  53:../util/iir_filter.h **** 	q2_13_t res;
  54:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
  55:../util/iir_filter.h **** 			q2_13_mul(a0,in),
  56:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
  57:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
  58:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
  59:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
  60:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
  61:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
  62:../util/iir_filter.h **** 	iir2->y_1 = res;
  63:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
  64:../util/iir_filter.h **** 	iir2->x_1 = in;
  65:../util/iir_filter.h **** 	return res;
  66:../util/iir_filter.h **** }
  67:../util/iir_filter.h **** 
  68:../util/iir_filter.h **** 
  69:../util/iir_filter.h **** 
  70:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_50_BP(filter_iir2_t* iir2,q2_13_t in)
  71:../util/iir_filter.h **** {
  72:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.037804753 );
  73:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.0  );
  74:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(-0.037804753 );
  75:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
  76:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.1792585E-16);
  77:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float( 0.9243905);
  78:../util/iir_filter.h **** 
  79:../util/iir_filter.h **** 	q2_13_t res;
  80:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
  81:../util/iir_filter.h **** 			q2_13_mul(a0,in),
  82:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
  83:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
  84:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
  85:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
  86:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
  87:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
  88:../util/iir_filter.h **** 	iir2->y_1 = res;
  89:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
  90:../util/iir_filter.h **** 	iir2->x_1 = in;
  91:../util/iir_filter.h **** 	return res;
  92:../util/iir_filter.h **** }
  93:../util/iir_filter.h **** 
  94:../util/iir_filter.h **** /*
  95:../util/iir_filter.h **** 
  96:../util/iir_filter.h **** static q2_13_t q2_13_filter_iir2_2_10_LP(filter_iir2_t* iir2,q2_13_t in)
  97:../util/iir_filter.h **** {
  98:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.0014603166);
  99:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.0029206332 );
 100:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(0.0014603166);
 101:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
 102:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.8890331);
 103:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float( 0.89487433);
 104:../util/iir_filter.h **** 
 105:../util/iir_filter.h **** 	q2_13_t res;
 106:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
 107:../util/iir_filter.h **** 			q2_13_mul(a0,in),
 108:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
 109:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
 110:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
 111:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
 112:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 113:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 114:../util/iir_filter.h **** 	iir2->y_1 = res;
 115:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 116:../util/iir_filter.h **** 	iir2->x_1 = in;
 117:../util/iir_filter.h **** 	return res;
 118:../util/iir_filter.h **** }
 119:../util/iir_filter.h **** */
 120:../util/iir_filter.h **** /*
 121:../util/iir_filter.h **** q2_13_t q2_13_filter_iir2(filter_iir2_t* iir2,q2_13_t in)
 122:../util/iir_filter.h **** {
 123:../util/iir_filter.h **** 	const q2_13_t a0 = q2_13_float(0.020517392);
 124:../util/iir_filter.h **** 	const q2_13_t a1 = q2_13_float(0.041034784);
 125:../util/iir_filter.h **** 	const q2_13_t a2 = q2_13_float(0.020517392);
 126:../util/iir_filter.h **** 	const q2_13_t inv_b0 = q2_13_float(1/1.0);
 127:../util/iir_filter.h **** 	const q2_13_t _b1 = -q2_13_float(-1.6185197);
 128:../util/iir_filter.h **** 	const q2_13_t _b2 = -q2_13_float(0.71059346);
 129:../util/iir_filter.h **** 
 130:../util/iir_filter.h **** 	q2_13_t res;
 131:../util/iir_filter.h **** 	res =  q2_13_mul(inv_b0,q2_13_sum(
 132:../util/iir_filter.h **** 			q2_13_mul(a0,in),
 133:../util/iir_filter.h **** 			q2_13_mul(a1,iir2->x_1),
 134:../util/iir_filter.h **** 			q2_13_mul(a2,iir2->x_2),
 135:../util/iir_filter.h **** 			q2_13_mul(_b1,iir2->y_1),
 136:../util/iir_filter.h **** 			q2_13_mul(_b2,iir2->y_2)));
 137:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 138:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 139:../util/iir_filter.h **** 	iir2->y_1 = res;
 140:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 141:../util/iir_filter.h **** 	iir2->x_1 = in;
 142:../util/iir_filter.h **** 	return res;
 143:../util/iir_filter.h **** }
 144:../util/iir_filter.h **** */
 145:../util/iir_filter.h **** 
 146:../util/iir_filter.h **** q7_8_t filter_iir2(filter_iir2_t* iir2,q7_8_t in)
 147:../util/iir_filter.h **** {
  16               		.loc 1 147 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 A0E0      		ldi r26,0
  20 0002 B0E0      		ldi r27,0
  21 0004 E0E0      		ldi r30,lo8(gs(1f))
  22 0006 F0E0      		ldi r31,hi8(gs(1f))
  23 0008 00C0      		rjmp __prologue_saves__+((18 - 16) * 2)
  24               	1:
  25               	.LCFI0:
  26               		.cfi_offset 4, -2
  27               		.cfi_offset 5, -3
  28               		.cfi_offset 6, -4
  29               		.cfi_offset 7, -5
  30               		.cfi_offset 8, -6
  31               		.cfi_offset 9, -7
  32               		.cfi_offset 10, -8
  33               		.cfi_offset 11, -9
  34               		.cfi_offset 12, -10
  35               		.cfi_offset 13, -11
  36               		.cfi_offset 14, -12
  37               		.cfi_offset 15, -13
  38               		.cfi_offset 16, -14
  39               		.cfi_offset 17, -15
  40               		.cfi_offset 28, -16
  41               		.cfi_offset 29, -17
  42               		.cfi_def_cfa_offset 18
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 16 */
  46               	.L__stack_usage = 16
  47 000a EC01      		movw r28,r24
  48 000c 8B01      		movw r16,r22
  49               	.LVL1:
 148:../util/iir_filter.h **** 	const q7_8_t a0 = q7_8_float(0.020517392);
 149:../util/iir_filter.h **** 	const q7_8_t a1 = q7_8_float(0.041034784);
 150:../util/iir_filter.h **** 	const q7_8_t a2 = q7_8_float(0.020517392);
 151:../util/iir_filter.h **** 	const q7_8_t inv_b0 = q7_8_float(1/1.0);
 152:../util/iir_filter.h **** 	const q7_8_t _b1 = -q7_8_float(-1.6185197);
 153:../util/iir_filter.h **** 	const q7_8_t _b2 = -q7_8_float(0.71059346);
 154:../util/iir_filter.h **** 
 155:../util/iir_filter.h **** 	q7_8_t res;
 156:../util/iir_filter.h **** 	res =  q7_8_mul(inv_b0,q7_8_sum(
  50               		.loc 1 156 0
  51 000e EC80      		ldd r14,Y+4
  52 0010 FD80      		ldd r15,Y+5
  53 0012 C880      		ld r12,Y
  54 0014 D980      		ldd r13,Y+1
  55 0016 072E      		mov __tmp_reg__,r23
  56 0018 000C      		lsl r0
  57 001a 880B      		sbc r24,r24
  58 001c 990B      		sbc r25,r25
  59               	.LVL2:
  60 001e 25E0      		ldi r18,lo8(5)
  61 0020 30E0      		ldi r19,0
  62 0022 40E0      		ldi r20,0
  63 0024 50E0      		ldi r21,0
  64 0026 00D0      		rcall __mulsi3
  65               	.LVL3:
  66 0028 472E      		mov r4,r23
  67 002a 582E      		mov r5,r24
  68 002c 692E      		mov r6,r25
  69 002e 7724      		clr r7
  70 0030 67FC      		sbrc r6,7
  71 0032 7A94      		dec r7
  72 0034 B701      		movw r22,r14
  73 0036 0F2C      		mov __tmp_reg__,r15
  74 0038 000C      		lsl r0
  75 003a 880B      		sbc r24,r24
  76 003c 990B      		sbc r25,r25
  77 003e 2AE0      		ldi r18,lo8(10)
  78 0040 30E0      		ldi r19,0
  79 0042 40E0      		ldi r20,0
  80 0044 50E0      		ldi r21,0
  81 0046 00D0      		rcall __mulsi3
  82               	.LVL4:
  83 0048 BB27      		clr r27
  84 004a 97FD      		sbrc r25,7
  85 004c BA95      		dec r27
  86 004e A92F      		mov r26,r25
  87 0050 982F      		mov r25,r24
  88 0052 872F      		mov r24,r23
  89 0054 3201      		movw r6,r4
  90 0056 680E      		add r6,r24
  91 0058 791E      		adc r7,r25
  92 005a 6E81      		ldd r22,Y+6
  93 005c 7F81      		ldd r23,Y+7
  94 005e 072E      		mov __tmp_reg__,r23
  95 0060 000C      		lsl r0
  96 0062 880B      		sbc r24,r24
  97 0064 990B      		sbc r25,r25
  98 0066 25E0      		ldi r18,lo8(5)
  99 0068 30E0      		ldi r19,0
 100 006a 40E0      		ldi r20,0
 101 006c 50E0      		ldi r21,0
 102 006e 00D0      		rcall __mulsi3
 103               	.LVL5:
 104 0070 BB27      		clr r27
 105 0072 97FD      		sbrc r25,7
 106 0074 BA95      		dec r27
 107 0076 A92F      		mov r26,r25
 108 0078 982F      		mov r25,r24
 109 007a 872F      		mov r24,r23
 110 007c 4301      		movw r8,r6
 111 007e 880E      		add r8,r24
 112 0080 991E      		adc r9,r25
 113 0082 B601      		movw r22,r12
 114 0084 0D2C      		mov __tmp_reg__,r13
 115 0086 000C      		lsl r0
 116 0088 880B      		sbc r24,r24
 117 008a 990B      		sbc r25,r25
 118 008c 2EE9      		ldi r18,lo8(-98)
 119 008e 31E0      		ldi r19,lo8(1)
 120 0090 40E0      		ldi r20,0
 121 0092 50E0      		ldi r21,0
 122 0094 00D0      		rcall __mulsi3
 123               	.LVL6:
 124 0096 BB27      		clr r27
 125 0098 97FD      		sbrc r25,7
 126 009a BA95      		dec r27
 127 009c A92F      		mov r26,r25
 128 009e 982F      		mov r25,r24
 129 00a0 872F      		mov r24,r23
 130 00a2 5401      		movw r10,r8
 131 00a4 A80E      		add r10,r24
 132 00a6 B91E      		adc r11,r25
 133 00a8 6A81      		ldd r22,Y+2
 134 00aa 7B81      		ldd r23,Y+3
 135 00ac 072E      		mov __tmp_reg__,r23
 136 00ae 000C      		lsl r0
 137 00b0 880B      		sbc r24,r24
 138 00b2 990B      		sbc r25,r25
 139 00b4 2BE4      		ldi r18,lo8(75)
 140 00b6 3FEF      		ldi r19,lo8(-1)
 141 00b8 4FEF      		ldi r20,lo8(-1)
 142 00ba 5FEF      		ldi r21,lo8(-1)
 143 00bc 00D0      		rcall __mulsi3
 144               	.LVL7:
 145 00be BB27      		clr r27
 146 00c0 97FD      		sbrc r25,7
 147 00c2 BA95      		dec r27
 148 00c4 A92F      		mov r26,r25
 149 00c6 982F      		mov r25,r24
 150 00c8 872F      		mov r24,r23
 151 00ca 8A0D      		add r24,r10
 152 00cc 9B1D      		adc r25,r11
 153 00ce 092E      		mov __tmp_reg__,r25
 154 00d0 000C      		lsl r0
 155 00d2 AA0B      		sbc r26,r26
 156 00d4 BB0B      		sbc r27,r27
 157               	.LVL8:
 157:../util/iir_filter.h **** 			q7_8_mul(a0,in),
 158:../util/iir_filter.h **** 			q7_8_mul(a1,iir2->x_1),
 159:../util/iir_filter.h **** 			q7_8_mul(a2,iir2->x_2),
 160:../util/iir_filter.h **** 			q7_8_mul(_b1,iir2->y_1),
 161:../util/iir_filter.h **** 			q7_8_mul(_b2,iir2->y_2)));
 162:../util/iir_filter.h **** 	//printf("%f,",iir2->b0);
 163:../util/iir_filter.h **** 	iir2->y_2 = iir2->y_1;
 158               		.loc 1 163 0
 159 00d6 DB82      		std Y+3,r13
 160 00d8 CA82      		std Y+2,r12
 164:../util/iir_filter.h **** 	iir2->y_1 = res;
 161               		.loc 1 164 0
 162 00da 9983      		std Y+1,r25
 163 00dc 8883      		st Y,r24
 165:../util/iir_filter.h **** 	iir2->x_2 = iir2->x_1;
 164               		.loc 1 165 0
 165 00de FF82      		std Y+7,r15
 166 00e0 EE82      		std Y+6,r14
 166:../util/iir_filter.h **** 	iir2->x_1 = in;
 167               		.loc 1 166 0
 168 00e2 1D83      		std Y+5,r17
 169 00e4 0C83      		std Y+4,r16
 170               	/* epilogue start */
 167:../util/iir_filter.h **** 	return res;
 168:../util/iir_filter.h **** }
 171               		.loc 1 168 0
 172 00e6 CDB7      		in r28,__SP_L__
 173 00e8 DEB7      		in r29,__SP_H__
 174               	.LVL9:
 175 00ea E0E1      		ldi r30, lo8(16)
 176 00ec 00C0      		rjmp __epilogue_restores__ + ((18 - 16) * 2)
 177               		.cfi_endproc
 178               	.LFE21:
 179               		.size	filter_iir2, .-filter_iir2
 180               	.global	__vector_16
 181               		.type	__vector_16, @function
 182               	__vector_16:
 183               	.LFB22:
 184               		.file 2 "main.c"
   1:main.c        **** 
   2:main.c        **** /*
   3:main.c        ****  * Copyright 2007 Jorgen Birkler
   4:main.c        ****  * jorgen.birkler)a(gmail.com
   5:main.c        ****  * USB HID device for current monitoring and battery switch on-off
   6:main.c        ****  * License: GNU GPL v2 (see License.txt) or proprietary (contact author)
   7:main.c        ****  */
   8:main.c        **** 
   9:main.c        **** /**
  10:main.c        ****  * @mainpage
  11:main.c        ****  *
  12:main.c        ****  *
  13:main.c        ****  * \section implementation_guide Implementation
  14:main.c        ****  * - \ref software
  15:main.c        ****  * - \ref hardware
  16:main.c        ****  * .
  17:main.c        ****  *
  18:main.c        ****  * (c) 2010 Jorgen Birkler (jorgen.birkler)a(gmail.com)
  19:main.c        ****  *
  20:main.c        ****  * USB driver
  21:main.c        ****  *
  22:main.c        ****  * (c) 2006 by OBJECTIVE DEVELOPMENT Software GmbH
  23:main.c        ****  */
  24:main.c        **** /**
  25:main.c        ****  * \page software Software
  26:main.c        ****  * Uses the firmware only USB low speed driver from http://obdev.at.
  27:main.c        ****  * The USB device is configured as a Remote Control HID device.
  28:main.c        ****  *
  29:main.c        ****  * \section tips Tips about HID development
  30:main.c        ****  * General tips about HID development:
  31:main.c        ****  *
  32:main.c        ****  * 1. HID device class is cached by Windows; change USB_CFG_DEVICE_ID if you change USAGE_PAGE
  33:main.c        ****  *    class to another. It took me several weeks to find this info. I copied the use page for the
  34:main.c        ****  *    remote but it never work until I changed the USB_CFG_DEVICE_ID to another number so that the
  35:main.c        ****  *    device was rediscovered by Windows.
  36:main.c        ****  *
  37:main.c        ****  * 2. Added usbconfig.h manually to the dependencies in the make file to all .o files.
  38:main.c        ****  *    WinAVR .d files doesn't seem to work for subdirs
  39:main.c        ****  *
  40:main.c        ****  * Ir is received by ICP interrupt:
  41:main.c        ****  * \include irrx.h
  42:main.c        ****  *
  43:main.c        ****  * Main loop translated the ir codes received and handles the main USB look:
  44:main.c        ****  * \include main.c
  45:main.c        ****  */
  46:main.c        **** /**
  47:main.c        ****  * \page hardware Hardware
  48:main.c        ****  *
  49:main.c        ****  * Schematic:
  50:main.c        ****  * \image html current_mon_switch.sch.png Schematic
  51:main.c        ****  *
  52:main.c        ****  * Partlist:
  53:main.c        ****  * \verbinclude current_mon_switch.sch..parts.txt
  54:main.c        ****  *
  55:main.c        ****  * Board (for protoboards):
  56:main.c        ****  * \image html current_mon_switch.brd.png
  57:main.c        ****  *
  58:main.c        ****  */
  59:main.c        **** 
  60:main.c        **** #include <avr/io.h>
  61:main.c        **** #include <avr/interrupt.h>
  62:main.c        **** #include <avr/pgmspace.h>
  63:main.c        **** #include <avr/eeprom.h>
  64:main.c        **** #include <avr/wdt.h>
  65:main.c        **** #include <util/delay.h>
  66:main.c        **** #include <util/atomic.h>
  67:main.c        **** 
  68:main.c        **** #include <stdio.h>
  69:main.c        **** #include <string.h>
  70:main.c        **** #include <stdint.h>
  71:main.c        **** #define USB_GET_REPORT_IDS
  72:main.c        **** #include "usbdrv.h"
  73:main.c        **** #include "oddebug.h"
  74:main.c        **** #include "hw.h"
  75:main.c        **** #include "timers.h"
  76:main.c        **** #include "usbstream.h"
  77:main.c        **** //#include "uartsw.h"
  78:main.c        **** #include "lfsr8.h"
  79:main.c        **** #include "iir_filter.h"
  80:main.c        **** 
  81:main.c        **** /*
  82:main.c        ****  * help macros
  83:main.c        ****  */
  84:main.c        **** #ifndef STATIC_ASSERT
  85:main.c        **** #define STATIC_ASSERT(expr) extern char static_assert[ (!!(expr))*2 - 1]
  86:main.c        **** #endif //#ifndef STATIC_ASSERT
  87:main.c        **** #define elements_of(array) (sizeof(array) / sizeof(array[0]))
  88:main.c        **** 
  89:main.c        **** STATIC_ASSERT(((int8_t)(-8))>>1 < 0);
  90:main.c        **** /* ------------------------------------------------------------------------- */
  91:main.c        **** /* ------------------------------------------------------------------------- */
  92:main.c        **** /* ----------------------------- UART interface ----------------------------- */
  93:main.c        **** /* ------------------------------------------------------------------------- */
  94:main.c        **** /*
  95:main.c        **** static int uartsw_stream_putchar(char c, FILE *stream)
  96:main.c        **** {
  97:main.c        **** 	//uartsw1_putc(c);
  98:main.c        **** 	return c;
  99:main.c        **** }
 100:main.c        **** static int uartsw_stream_getchar(FILE *stream)
 101:main.c        **** {
 102:main.c        **** 	return -1;//uartsw2_getc_nowait();
 103:main.c        **** }
 104:main.c        **** #define uartsw_init() (void)0
 105:main.c        **** 
 106:main.c        **** FILE uartsw_stream = FDEV_SETUP_STREAM(uartsw_stream_putchar,uartsw_stream_getchar, _FDEV_SETUP_REA
 107:main.c        **** 
 108:main.c        **** */
 109:main.c        **** 
 110:main.c        **** /* ------------------------------------------------------------------------- */
 111:main.c        **** /* ------------------------------------------------------------------------- */
 112:main.c        **** /* ----------------------------- USB interface ----------------------------- */
 113:main.c        **** /* ------------------------------------------------------------------------- */
 114:main.c        **** 
 115:main.c        **** /*
 116:main.c        **** ISR(TIMER0_OVF_vect,ISR_NOBLOCK )
 117:main.c        **** {
 118:main.c        **** }
 119:main.c        ****  */
 120:main.c        **** 
 121:main.c        **** STATIC_ASSERT(TIMER0_OVERFLOW_PERIOD_MS_X256 > 2);
 122:main.c        **** STATIC_ASSERT(TIMER0_OVERFLOW_PERIOD_MS_X256 < 60000);
 123:main.c        **** 
 124:main.c        **** #define us_to_ticks(_us_) (((_us_)*F_TIMER1) / 1000000L)
 125:main.c        **** 
 126:main.c        **** STATIC_ASSERT(us_to_ticks(100) > 0);
 127:main.c        **** 
 128:main.c        **** 
 129:main.c        **** static volatile uint16_t capture_diff;
 130:main.c        **** static volatile uint16_t capture_diff_max;
 131:main.c        **** static volatile uint16_t captured;
 132:main.c        **** 
 133:main.c        **** 
 134:main.c        **** ISR(TIMER0_CAPT_vect,ISR_NOBLOCK )
 135:main.c        **** {
 185               		.loc 2 135 0
 186               		.cfi_startproc
 187 00ee 7894      		sei
 188 00f0 1F92      		push r1
 189               	.LCFI1:
 190               		.cfi_def_cfa_offset 3
 191               		.cfi_offset 1, -2
 192 00f2 0F92      		push r0
 193               	.LCFI2:
 194               		.cfi_def_cfa_offset 4
 195               		.cfi_offset 0, -3
 196 00f4 0FB6      		in r0,__SREG__
 197 00f6 0F92      		push r0
 198 00f8 1124      		clr __zero_reg__
 199               	/* prologue: Interrupt */
 200               	/* frame size = 0 */
 201               	/* stack size = 3 */
 202               	.L__stack_usage = 3
 203               	/* epilogue start */
 136:main.c        **** 	/*
 137:main.c        **** 	uint16_t capture_time;
 138:main.c        **** 	uint16_t service_time;
 139:main.c        **** 	service_time = TCNT0L;
 140:main.c        **** 	service_time |= ((unsigned int)TCNT0H << 8);
 141:main.c        **** 	capture_time = OCR0A;
 142:main.c        **** 	capture_time |= ((unsigned int)OCR0B << 8);
 143:main.c        **** 	capture_diff = service_time - capture_time;
 144:main.c        **** 	if (capture_diff > capture_diff_max) {
 145:main.c        **** 		capture_diff_max = capture_diff;
 146:main.c        **** 	}
 147:main.c        **** 	captured++;
 148:main.c        **** */
 149:main.c        **** }
 204               		.loc 2 149 0
 205 00fa 0F90      		pop r0
 206 00fc 0FBE      		out __SREG__,r0
 207 00fe 0F90      		pop r0
 208 0100 1F90      		pop r1
 209 0102 1895      		reti
 210               		.cfi_endproc
 211               	.LFE22:
 212               		.size	__vector_16, .-__vector_16
 213               	.global	usbFunctionSetup2
 214               		.type	usbFunctionSetup2, @function
 215               	usbFunctionSetup2:
 216               	.LFB23:
 150:main.c        **** 
 151:main.c        **** 
 152:main.c        **** 
 153:main.c        **** /*
 154:main.c        **** ISR(TIMER1_OVF_vect,ISR_NOBLOCK)
 155:main.c        **** {
 156:main.c        **** 	timer1_ticks_major++;
 157:main.c        **** }
 158:main.c        **** static uint32_t gettimer1ticks(void)
 159:main.c        **** {
 160:main.c        **** 	uint32_t res;
 161:main.c        **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 162:main.c        **** 	{
 163:main.c        **** 		res = TCNT1;
 164:main.c        **** 		res |= timer1_ticks_major<<8;
 165:main.c        **** 	}
 166:main.c        **** 	return res;
 167:main.c        **** }
 168:main.c        **** */
 169:main.c        **** 
 170:main.c        **** 
 171:main.c        **** #define ReportDescriptor usbHidReportDescriptor
 172:main.c        **** 
 173:main.c        **** PROGMEM
 174:main.c        **** #include "hid.h"
 175:main.c        **** 
 176:main.c        **** STATIC_ASSERT(sizeof(usbHidReportDescriptor) == USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH);
 177:main.c        **** 
 178:main.c        **** typedef struct{
 179:main.c        **** 	struct {
 180:main.c        **** 		unsigned char report_id;
 181:main.c        **** 		uchar   buttonMask;
 182:main.c        **** 	} mouse;
 183:main.c        **** }report_t;
 184:main.c        **** 
 185:main.c        **** 
 186:main.c        **** static report_t reportBuffer;
 187:main.c        **** 
 188:main.c        **** 
 189:main.c        **** usbMsgLen_t usbFunctionSetup2(uchar data[8])
 190:main.c        **** {
 217               		.loc 2 190 0
 218               		.cfi_startproc
 219               	.LVL10:
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 0 */
 223               	.L__stack_usage = 0
 191:main.c        **** 	usbRequest_t    *rq = (void *)data;
 192:main.c        **** 
 193:main.c        **** 	/* The following requests are never used. But since they are required by
 194:main.c        **** 	 * the specification, we implement them in this example.
 195:main.c        **** 	 *
 196:main.c        **** 	 */
 197:main.c        **** 	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 198:main.c        **** 		DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
 199:main.c        **** 		if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) *
 200:main.c        **** 			switch (rq->wValue.bytes[0]) {
 201:main.c        **** 			default:
 202:main.c        **** 				break;
 203:main.c        **** 			}
 204:main.c        **** 
 205:main.c        **** 		}
 206:main.c        **** 	}else{
 207:main.c        **** 		/* no vendor specific requests implemented */
 208:main.c        **** 	}
 209:main.c        **** 	return 0;   /* default for not implemented requests: return no data back to host */
 210:main.c        **** }
 224               		.loc 2 210 0
 225 0104 80E0      		ldi r24,0
 226               	.LVL11:
 227 0106 0895      		ret
 228               		.cfi_endproc
 229               	.LFE23:
 230               		.size	usbFunctionSetup2, .-usbFunctionSetup2
 231               		.section	.rodata.str1.1,"aMS",@progbits,1
 232               	.LC0:
 233 0000 6C65 6420 		.string	"led adc[%d]:\t%05u: \t%05u,\t%05u\t%05u ticks:\t%06u\tfilt:%06d   \r"
 233      6164 635B 
 233      2564 5D3A 
 233      0925 3035 
 233      753A 2009 
 234               		.section	.text.startup,"ax",@progbits
 235               	.global	main
 236               		.type	main, @function
 237               	main:
 238               	.LFB24:
 211:main.c        **** 
 212:main.c        **** 
 213:main.c        **** typedef struct {
 214:main.c        **** 	char buffer[64];
 215:main.c        **** 	uchar bufLen;
 216:main.c        **** } stdin_get_string_t;
 217:main.c        **** 
 218:main.c        **** /*
 219:main.c        **** static const char* stdin_get_string(stdin_get_string_t* b)
 220:main.c        **** {
 221:main.c        **** 	int c;
 222:main.c        **** 	if ((c = getchar()) >= 0) {
 223:main.c        **** 		if (c=='\b') {
 224:main.c        **** 			if (b->bufLen > 0) {
 225:main.c        **** 				b->bufLen--;
 226:main.c        **** 				putchar(c); //echo back
 227:main.c        **** 			}
 228:main.c        **** 		}
 229:main.c        **** 		else if (c=='\n') {
 230:main.c        **** 			b->buffer[b->bufLen] = '\0';
 231:main.c        **** 			putchar(c); //echo back
 232:main.c        **** 			b->bufLen = 0;
 233:main.c        **** 			return (const char*)b->buffer;
 234:main.c        **** 		}
 235:main.c        **** 		else if (c<20) {
 236:main.c        **** 
 237:main.c        **** 		}
 238:main.c        **** 		else {
 239:main.c        **** 			if (b->bufLen+1 < sizeof(b->buffer)) {
 240:main.c        **** 				b->buffer[b->bufLen++] = (char)c;
 241:main.c        **** 				putchar(c); //echo back
 242:main.c        **** 			}
 243:main.c        **** 		}
 244:main.c        **** 	}
 245:main.c        **** 	return 0;
 246:main.c        **** }
 247:main.c        ****  */
 248:main.c        **** /* ------------------------------------------------------------------------- */
 249:main.c        **** 
 250:main.c        **** int main(void)
 251:main.c        **** {
 239               		.loc 2 251 0
 240               		.cfi_startproc
 241 0000 A3E1      		ldi r26,lo8(19)
 242 0002 B0E0      		ldi r27,0
 243 0004 E0E0      		ldi r30,lo8(gs(1f))
 244 0006 F0E0      		ldi r31,hi8(gs(1f))
 245 0008 00C0      		rjmp __prologue_saves__+((18 - 18) * 2)
 246               	1:
 247               	.LCFI3:
 248               		.cfi_offset 2, -2
 249               		.cfi_offset 3, -3
 250               		.cfi_offset 4, -4
 251               		.cfi_offset 5, -5
 252               		.cfi_offset 6, -6
 253               		.cfi_offset 7, -7
 254               		.cfi_offset 8, -8
 255               		.cfi_offset 9, -9
 256               		.cfi_offset 10, -10
 257               		.cfi_offset 11, -11
 258               		.cfi_offset 12, -12
 259               		.cfi_offset 13, -13
 260               		.cfi_offset 14, -14
 261               		.cfi_offset 15, -15
 262               		.cfi_offset 16, -16
 263               		.cfi_offset 17, -17
 264               		.cfi_offset 28, -18
 265               		.cfi_offset 29, -19
 266               		.cfi_def_cfa 28, 39
 267               	/* prologue: function */
 268               	/* frame size = 19 */
 269               	/* stack size = 37 */
 270               	.L__stack_usage = 37
 271               	.LVL12:
 252:main.c        **** 	unsigned char buttonPressed = 0;
 253:main.c        **** 	unsigned char buttonMask = 0;
 254:main.c        **** 	unsigned char led_sensor_blink = 0;
 255:main.c        **** 	filter_iir2_t filter_iir2_data = {0,0,0,0};
 272               		.loc 2 255 0
 273 000a 88E0      		ldi r24,lo8(8)
 274 000c 1E01      		movw r2,r28
 275 000e 2BE0      		ldi r18,11
 276 0010 220E      		add r2,r18
 277 0012 311C      		adc r3,__zero_reg__
 278 0014 F101      		movw r30,r2
 279 0016 282F      		mov r18,r24
 280               		0:
 281 0018 1192      		st Z+,__zero_reg__
 282 001a 2A95      		dec r18
 283 001c 01F4      		brne 0b
 284               	.LVL13:
 285               	.LBB18:
 286               	.LBB19:
 287               		.file 3 "../hw.h"
   1:../hw.h       **** /**
   2:../hw.h       ****  * Copyright 2007 Jorgen Birkler
   3:../hw.h       ****  * jorgen.birkler)a(gmail.com
   4:../hw.h       ****  * USB HID device for current monitoring and battery switch on-off
   5:../hw.h       ****  * License: GNU GPL v2 (see License.txt) or proprietary (contact author)
   6:../hw.h       ****  */
   7:../hw.h       **** 
   8:../hw.h       **** #ifndef __hw_h_included__
   9:../hw.h       **** #define __hw_h_included__
  10:../hw.h       **** #include <avr/io.h>
  11:../hw.h       **** 
  12:../hw.h       **** #define BOOTLOADER_CONDITION_INIT()   DDRA &= ~_BV(PA3);PORTA |= _BV(PA3)
  13:../hw.h       **** #define BOOTLOADER_CONDITION (bit_is_clear(PINA,PA3))
  14:../hw.h       **** 
  15:../hw.h       **** 
  16:../hw.h       **** #define LED_RED_CHANGE() PORTB ^= _BV(PB3)
  17:../hw.h       **** #define LED_RED_ON() PORTB |= _BV(PB3)
  18:../hw.h       **** #define LED_RED_OFF() PORTB &= ~_BV(PB3)
  19:../hw.h       **** #define LED_RED_INIT() DDRB |= _BV(PB3);PORTB &= ~_BV(PB3);LED_RED_OFF()
  20:../hw.h       **** 
  21:../hw.h       **** #define LED_SENSOR_CHANGE() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB ^= _BV(PB0);PORTA &= ~_BV(PA2)
  22:../hw.h       **** #define LED_SENSOR_ON() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB |= _BV(PB0); PORTA &= ~_BV(PA2)
  23:../hw.h       **** #define LED_SENSOR_OFF() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_BV(PB0); PORTA &= ~_BV(PA2)
  24:../hw.h       **** #define LED_SENSOR_INIT() LED_SENSOR_OFF()
  25:../hw.h       **** #define LED_SENSOR_REVERSE_BIAS()  PORTA |= _BV(PA2);DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_B
  26:../hw.h       **** #define LED_SENSOR_INPUT() DDRA &= ~_BV(PA2);PORTA &= ~_BV(PA2)
  27:../hw.h       **** #define LED_SENSOR_IS_HIGH() (PINA & _BV(PA2))
  28:../hw.h       **** 
  29:../hw.h       **** 
  30:../hw.h       **** 
  31:../hw.h       **** //#define LED_SENSOR_CHANGE() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB ^= _BV(PB0);PORTA &= ~_BV(PA2
  32:../hw.h       **** //#define LED_SENSOR_ON() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB |= _BV(PB0); PORTA &= ~_BV(PA2)
  33:../hw.h       **** //#define LED_SENSOR_OFF() DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~_BV(PB0); PORTA &= ~_BV(PA2)
  34:../hw.h       **** //#define LED_SENSOR_INIT() LED_SENSOR_OFF()
  35:../hw.h       **** //#define LED_SENSOR_REVERSE_BIAS()  PORTA |= _BV(PA2);DDRA |= _BV(PA2);DDRB |= _BV(PB0);PORTB &= ~
  36:../hw.h       **** //#define LED_SENSOR_INPUT() DDRB &= ~_BV(PB0)
  37:../hw.h       **** //#define LED_SENSOR_IS_HIGH() (PINB & _BV(PB0))
  38:../hw.h       **** 
  39:../hw.h       **** 
  40:../hw.h       **** 
  41:../hw.h       **** #define LED_BUTTON_CHANGE() PORTB ^= _BV(PB1)
  42:../hw.h       **** #define LED_BUTTON_ON() PORTB |= _BV(PB1)
  43:../hw.h       **** #define LED_BUTTON_OFF() PORTB &= ~_BV(PB1)
  44:../hw.h       **** #define LED_BUTTON_INIT() DDRB |= _BV(PB1);PORTB &= ~_BV(PB1);LED_BUTTON_OFF()
  45:../hw.h       **** 
  46:../hw.h       **** #define BUTTON_INIT() DDRA &= ~_BV(PA4);PORTA |= _BV(PA4)
  47:../hw.h       **** #define BUTTON_IS_PRESSED() (!(PINA & _BV(PA4)))
  48:../hw.h       **** 
  49:../hw.h       **** #define POT_ON() PORTA |= _BV(PA0)
  50:../hw.h       **** #define POT_OFF() PORTA &= ~_BV(PA0)
  51:../hw.h       **** #define POT_INIT() DDRA |= _BV(PA0);DDRA &= ~_BV(PA1);PORTA &= ~_BV(PA1);POT_OFF()
  52:../hw.h       **** #define POT_ADC_SETUP() ADCSRA = _BV(ADEN) | _BV(ADIF) | _BV(ADPS1) | _BV(ADPS0);ADCSRB = 0x00
  53:../hw.h       **** 
  54:../hw.h       **** #define POT_ADC_START() ADMUX = 0x1;ADCSRA |= _BV(ADSC)
  55:../hw.h       **** #define POT_ADC_DONE() ADCSRA |= _BV(ADIF)
  56:../hw.h       **** 
  57:../hw.h       **** #define POT_ADC_IS_POT_CHANNEL() ((ADMUX & 0x3F) == 0x1)
  58:../hw.h       **** 
  59:../hw.h       **** #define POT_ADC_IS_COMPLETED() (!(!(ADCSRA | _BV(ADIF))))
  60:../hw.h       **** 
  61:../hw.h       **** //Channel =ADC2
  62:../hw.h       **** //#define LED_SENSOR_ADC_CH 0x02
  63:../hw.h       **** 
  64:../hw.h       **** 
  65:../hw.h       **** // Channel= (ADC2-ADC1) x 20
  66:../hw.h       **** #define LED_SENSOR_ADC_CH 0x0E
  67:../hw.h       **** 
  68:../hw.h       **** 
  69:../hw.h       **** #define LED_SENSOR_ADC_SETUP() POT_OFF();ADCSRA = _BV(ADEN) | _BV(ADIF) | _BV(ADPS1) | _BV(ADPS0);A
  70:../hw.h       **** 
  71:../hw.h       **** #define LED_SENSOR_ADC_START() ADMUX = _BV(REFS1) | LED_SENSOR_ADC_CH;ADCSRA |= _BV(ADSC)
  72:../hw.h       **** #define LED_SENSOR_ADC_DONE() ADCSRA |= _BV(ADIF)
  73:../hw.h       **** 
  74:../hw.h       **** #define LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() ((ADMUX & 0x3F) == LED_SENSOR_ADC_CH)
  75:../hw.h       **** 
  76:../hw.h       **** #define LED_SENSOR_ADC_IS_COMPLETED() (!(!(ADCSRA & _BV(ADIF))))
  77:../hw.h       **** 
  78:../hw.h       **** 
  79:../hw.h       **** 
  80:../hw.h       **** //Timer0
  81:../hw.h       **** ////////////////////////////////////
  82:../hw.h       **** 
  83:../hw.h       **** 
  84:../hw.h       **** //16bit mode. clk/1. Input capture on. noise canceler on. Negative edge (ICES0 cleared).
  85:../hw.h       **** #define TIMER0_INIT() {TCCR0A = _BV(TCW0)|_BV(ICEN0)|_BV(ICNC0); TCCR0B = _BV(CS00);}
  86:../hw.h       **** #define F_TIMER0 (F_CPU / 1)
  87:../hw.h       **** #define TIMER0_ENABLE_OVERFLOW_INTERRUPT() TIMSK |= _BV(TOIE0);
  88:../hw.h       **** #define TIMER0_DISABLE_OVERFLOW_INTERRUPT() TIMSK &= ~_BV(TOIE0);
  89:../hw.h       **** #define TIMER0_ENABLE_INPUTCAPT_INTERRUPT() TIMSK |= _BV(TICIE0);
  90:../hw.h       **** #define TIMER0_DISABLE_INPUTCAPT_INTERRUPT() TIMSK &= ~_BV(TICIE0);
  91:../hw.h       **** #define TIMER0_OVERFLOW_PERIOD_MS ((256L * 256L * 1000L) / F_CPU)
  92:../hw.h       **** #define TIMER0_OVERFLOW_PERIOD_MS_X256 ((256L * 256L *256L) / (F_CPU / 1000L))
  93:../hw.h       **** 
  94:../hw.h       **** 
  95:../hw.h       **** 
  96:../hw.h       **** //Normal mode. clk/128
  97:../hw.h       **** #define TIMER1_INIT() {TCCR1A = 0; TCCR1B = _BV(CS13); TCCR1C = 0; TCCR1D = 0; TCCR1E = 0; PLLCSR =
  98:../hw.h       **** #define F_TIMER1 (F_CPU/128)
  99:../hw.h       **** #define TIMER1_ENABLE_OVERFLOW_INTERRUPT() TIMSK |= _BV(TOIE1);
 100:../hw.h       **** #define TIMER1_DISABLE_OVERFLOW_INTERRUPT() TIMSK &= ~_BV(TOIE1);
 101:../hw.h       **** #define TIMER1_OVERFLOW_PERIOD_MS ((256L * 1000L) / F_TIMER1)
 102:../hw.h       **** #define TIMER1_OVERFLOW_PERIOD_MS_X256 ((256L *256L) / (F_TIMER1 / 1000L))
 103:../hw.h       **** 
 104:../hw.h       **** #define UARTSW_1_TX_ENABLE 1
 105:../hw.h       **** #define UARTSW_1_RX_ENABLE 0
 106:../hw.h       **** #define UARTSW_2_TX_ENABLE 0
 107:../hw.h       **** #define UARTSW_2_RX_ENABLE 1
 108:../hw.h       **** #define UARTSW_2_INVERT 1
 109:../hw.h       **** #define UARTSW_1_INVERT 1
 110:../hw.h       **** 
 111:../hw.h       **** #define UARTSW_1_BAUDRATE 9600
 112:../hw.h       **** #define UARTSW_2_BAUDRATE 9600
 113:../hw.h       **** #define UARTSW_1_RXD_PINNAME
 114:../hw.h       **** #define UARTSW_1_RXD_PINPORT
 115:../hw.h       **** #define UARTSW_1_TXD_PINNAME A
 116:../hw.h       **** #define UARTSW_1_TXD_PINPORT PA6
 117:../hw.h       **** #define UARTSW_2_RXD_PINNAME A
 118:../hw.h       **** #define UARTSW_2_RXD_PINPORT PA6
 119:../hw.h       **** #define UARTSW_2_TXD_PINNAME
 120:../hw.h       **** #define UARTSW_2_TXD_PINPORT
 121:../hw.h       **** 
 122:../hw.h       **** 
 123:../hw.h       **** #ifndef __ASSEMBLER__
 124:../hw.h       **** 
 125:../hw.h       **** static inline void hardwareInit(void) {
 126:../hw.h       **** 	BOOTLOADER_CONDITION_INIT();
 288               		.loc 3 126 0
 289 001e D398      		cbi 0x1a,3
 290 0020 DB9A      		sbi 0x1b,3
 127:../hw.h       **** 	LED_RED_INIT();
 291               		.loc 3 127 0
 292 0022 BB9A      		sbi 0x17,3
 293 0024 C398      		cbi 0x18,3
 294 0026 C398      		cbi 0x18,3
 128:../hw.h       **** 	LED_BUTTON_INIT();
 295               		.loc 3 128 0
 296 0028 B99A      		sbi 0x17,1
 297 002a C198      		cbi 0x18,1
 298 002c C198      		cbi 0x18,1
 129:../hw.h       **** 	TIMER0_INIT();
 299               		.loc 3 129 0
 300 002e 90EE      		ldi r25,lo8(-32)
 301 0030 95BB      		out 0x15,r25
 302 0032 91E0      		ldi r25,lo8(1)
 303 0034 93BF      		out 0x33,r25
 130:../hw.h       **** 	TIMER1_INIT();
 304               		.loc 3 130 0
 305 0036 10BE      		out 0x30,__zero_reg__
 306 0038 8FBD      		out 0x2f,r24
 307 003a 17BC      		out 0x27,__zero_reg__
 308 003c 16BC      		out 0x26,__zero_reg__
 309 003e 10B8      		out 0,__zero_reg__
 310 0040 19BC      		out 0x29,__zero_reg__
 131:../hw.h       **** 	BUTTON_INIT();
 311               		.loc 3 131 0
 312 0042 D498      		cbi 0x1a,4
 313 0044 DC9A      		sbi 0x1b,4
 132:../hw.h       **** 	POT_INIT();
 314               		.loc 3 132 0
 315 0046 D09A      		sbi 0x1a,0
 316 0048 D198      		cbi 0x1a,1
 317 004a D998      		cbi 0x1b,1
 318 004c D898      		cbi 0x1b,0
 319               	.LBE19:
 320               	.LBE18:
 256:main.c        **** 	q7_8_t filtered_val = 0;
 257:main.c        **** 	uint8_t led_sensor_last_random = 0;
 258:main.c        **** 	static uint16_t led_sensor_delta_time = 0;
 259:main.c        **** 	uint16_t led_sensor_trig_time = 0;
 260:main.c        **** 	uint8_t led_sensor_prev_time=0;
 261:main.c        **** 	uint16_t led_sensor_values[5];
 262:main.c        **** 	uint8_t led_sensor_nvalues = 0;
 263:main.c        **** 	static uint8_t led_sensor_nsample = 5;
 264:main.c        **** 	static uint16_t led_sensor_weigthed_sum_data[20];
 265:main.c        **** 	uint16_t led_sensor_weigthed_sum = 0;
 266:main.c        **** 	uint8_t led_sensor_weigthed_sum_idx = 0;
 267:main.c        **** 
 268:main.c        **** 	hardwareInit();
 269:main.c        **** 	stdout = &usb_out_stream;
 321               		.loc 2 269 0
 322 004e 80E0      		ldi r24,lo8(usb_out_stream)
 323 0050 90E0      		ldi r25,hi8(usb_out_stream)
 324 0052 9093 0000 		sts __iob+2+1,r25
 325 0056 8093 0000 		sts __iob+2,r24
 270:main.c        **** 	stdin = &usb_in_stream;
 326               		.loc 2 270 0
 327 005a 80E0      		ldi r24,lo8(usb_in_stream)
 328 005c 90E0      		ldi r25,hi8(usb_in_stream)
 329 005e 9093 0000 		sts __iob+1,r25
 330 0062 8093 0000 		sts __iob,r24
 271:main.c        **** 	stdin_get_string_t stdin_get_string_buffer;
 272:main.c        **** 	stdin_get_string_buffer.bufLen = 0;
 273:main.c        **** 	//const char* stdin_str;
 274:main.c        **** 
 275:main.c        **** 	printf_P(PSTR("B!\n"));
 331               		.loc 2 275 0
 332 0066 80E0      		ldi r24,lo8(__c.2386)
 333 0068 90E0      		ldi r25,hi8(__c.2386)
 334 006a 9F93      		push r25
 335 006c 8F93      		push r24
 336 006e 00D0      		rcall printf_P
 337               	.LVL14:
 276:main.c        **** 	usbDeviceDisconnect();
 338               		.loc 2 276 0
 339 0070 BC98      		cbi 0x17,4
 340 0072 C498      		cbi 0x18,4
 341               	.LVL15:
 342               	.LBB20:
 343               	.LBB21:
 344               		.file 4 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/lib/avr/include/avr/wdt.h **** 
 103:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/lib/avr/include/avr/wdt.h **** #else
 106:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/lib/avr/include/avr/wdt.h **** #endif
 108:/usr/lib/avr/include/avr/wdt.h **** 
 109:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/lib/avr/include/avr/wdt.h **** #else
 114:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/lib/avr/include/avr/wdt.h **** #endif
 116:/usr/lib/avr/include/avr/wdt.h **** 
 117:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/lib/avr/include/avr/wdt.h **** #else
 120:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/lib/avr/include/avr/wdt.h **** #endif
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/lib/avr/include/avr/wdt.h **** 
 125:/usr/lib/avr/include/avr/wdt.h **** 
 126:/usr/lib/avr/include/avr/wdt.h **** /**
 127:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/lib/avr/include/avr/wdt.h **** */
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** 
 138:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/lib/avr/include/avr/wdt.h **** 
 140:/usr/lib/avr/include/avr/wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:/usr/lib/avr/include/avr/wdt.h **** 
 142:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 143:/usr/lib/avr/include/avr/wdt.h **** do { \
 144:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 145:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 146:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"									"\n\t" \
 147:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:/usr/lib/avr/include/avr/wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:/usr/lib/avr/include/avr/wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:/usr/lib/avr/include/avr/wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:/usr/lib/avr/include/avr/wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h **** 	: [tmp]					"=r" (temp) \
 155:/usr/lib/avr/include/avr/wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:/usr/lib/avr/include/avr/wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:/usr/lib/avr/include/avr/wdt.h **** ); \
 162:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 163:/usr/lib/avr/include/avr/wdt.h **** 
 164:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 165:/usr/lib/avr/include/avr/wdt.h **** do { \
 166:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 167:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 168:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"								"\n\t" \
 169:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:/usr/lib/avr/include/avr/wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]            "=r" (temp) \
 174:/usr/lib/avr/include/avr/wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:/usr/lib/avr/include/avr/wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:/usr/lib/avr/include/avr/wdt.h **** ); \
 179:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 180:/usr/lib/avr/include/avr/wdt.h **** 
 181:/usr/lib/avr/include/avr/wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:/usr/lib/avr/include/avr/wdt.h **** 
 183:/usr/lib/avr/include/avr/wdt.h **** /*
 184:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 185:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 187:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 188:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 191:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 194:/usr/lib/avr/include/avr/wdt.h **** */
 195:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 196:/usr/lib/avr/include/avr/wdt.h **** do { \
 197:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 198:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 199:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 208:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 216:/usr/lib/avr/include/avr/wdt.h **** ); \
 217:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 218:/usr/lib/avr/include/avr/wdt.h **** 
 219:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 220:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 221:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:/usr/lib/avr/include/avr/wdt.h ****     : \
 227:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 233:/usr/lib/avr/include/avr/wdt.h **** );
 234:/usr/lib/avr/include/avr/wdt.h **** 
 235:/usr/lib/avr/include/avr/wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:/usr/lib/avr/include/avr/wdt.h **** 
 237:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 238:/usr/lib/avr/include/avr/wdt.h **** 
 239:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 240:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 241:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 243:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 244:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 248:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 254:/usr/lib/avr/include/avr/wdt.h **** )
 255:/usr/lib/avr/include/avr/wdt.h **** 
 256:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 257:/usr/lib/avr/include/avr/wdt.h **** do { \
 258:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 259:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 260:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 262:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 263:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 269:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 275:/usr/lib/avr/include/avr/wdt.h **** ); \
 276:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 277:/usr/lib/avr/include/avr/wdt.h **** 
 278:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 279:/usr/lib/avr/include/avr/wdt.h **** 
 280:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 281:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 282:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 283:/usr/lib/avr/include/avr/wdt.h **** {
 284:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:/usr/lib/avr/include/avr/wdt.h **** 	{
 286:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 287:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 289:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 290:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 294:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 300:/usr/lib/avr/include/avr/wdt.h **** 			);
 301:/usr/lib/avr/include/avr/wdt.h **** 	}
 302:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:/usr/lib/avr/include/avr/wdt.h **** 	{
 304:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 305:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 307:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 308:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 312:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 318:/usr/lib/avr/include/avr/wdt.h **** 			);
 319:/usr/lib/avr/include/avr/wdt.h **** 	}
 320:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:/usr/lib/avr/include/avr/wdt.h **** 	{
 322:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 323:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 330:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 336:/usr/lib/avr/include/avr/wdt.h **** 			);
 337:/usr/lib/avr/include/avr/wdt.h **** 	}
 338:/usr/lib/avr/include/avr/wdt.h **** 	else
 339:/usr/lib/avr/include/avr/wdt.h ****  	{
 340:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 341:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 348:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 			);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** }
 357:/usr/lib/avr/include/avr/wdt.h **** 
 358:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 359:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 360:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 361:/usr/lib/avr/include/avr/wdt.h **** {
 362:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:/usr/lib/avr/include/avr/wdt.h **** 	{
 364:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 365:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 366:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 369:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 375:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 381:/usr/lib/avr/include/avr/wdt.h **** 				);
 382:/usr/lib/avr/include/avr/wdt.h **** 	}
 383:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:/usr/lib/avr/include/avr/wdt.h **** 	{
 385:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 386:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 387:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 390:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 396:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 402:/usr/lib/avr/include/avr/wdt.h **** 				);
 403:/usr/lib/avr/include/avr/wdt.h **** 	}
 404:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:/usr/lib/avr/include/avr/wdt.h **** 	{
 406:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 407:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 408:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 417:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 423:/usr/lib/avr/include/avr/wdt.h **** 				);
 424:/usr/lib/avr/include/avr/wdt.h **** 	}
 425:/usr/lib/avr/include/avr/wdt.h **** 	else
 426:/usr/lib/avr/include/avr/wdt.h **** 	{
 427:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 428:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 429:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 438:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 444:/usr/lib/avr/include/avr/wdt.h **** 				);
 445:/usr/lib/avr/include/avr/wdt.h **** 	}
 446:/usr/lib/avr/include/avr/wdt.h **** }
 447:/usr/lib/avr/include/avr/wdt.h **** 
 448:/usr/lib/avr/include/avr/wdt.h **** #else
 449:/usr/lib/avr/include/avr/wdt.h **** 
 450:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 451:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 452:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 453:/usr/lib/avr/include/avr/wdt.h **** {
 454:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:/usr/lib/avr/include/avr/wdt.h **** 	{
 456:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 345               		.loc 4 456 0
 346 0074 9FE0      		ldi r25,lo8(15)
 347 0076 88E1      		ldi r24,lo8(24)
 348               	/* #APP */
 349               	 ;  456 "/usr/lib/avr/include/avr/wdt.h" 1
 350 0078 0FB6      		in __tmp_reg__,__SREG__
 351 007a F894      		cli
 352 007c A895      		wdr
 353 007e 81BD      		out 33, r24
 354 0080 0FBE      		out __SREG__,__tmp_reg__
 355 0082 91BD      		out 33, r25
 356               	 	
 357               	 ;  0 "" 2
 358               	.LVL16:
 359               	/* #NOAPP */
 360               	.LBE21:
 361               	.LBE20:
 277:main.c        **** 	uchar i, j;
 278:main.c        **** 	j = 0;
 279:main.c        **** 	while (--j)
 280:main.c        **** 	{ /* USB Reset by device only required on Watchdog Reset */
 281:main.c        **** 		i = 0;
 282:main.c        **** 		while (--i)
 283:main.c        **** 			; /* delay >10ms for USB reset */
 284:main.c        **** 	}
 285:main.c        **** 
 286:main.c        **** 	wdt_enable(WDTO_2S);
 287:main.c        **** 	odDebugInit();
 288:main.c        **** 	usbInit();
 362               		.loc 2 288 0
 363 0084 00D0      		rcall usbInit
 364               	.LVL17:
 289:main.c        **** 	TIMER0_ENABLE_INPUTCAPT_INTERRUPT();
 365               		.loc 2 289 0
 366 0086 89B7      		in r24,0x39
 367 0088 8160      		ori r24,lo8(1)
 368 008a 89BF      		out 0x39,r24
 290:main.c        **** 	//uartsw_init();
 291:main.c        **** 	sei();
 369               		.loc 2 291 0
 370               	/* #APP */
 371               	 ;  291 "main.c" 1
 372 008c 7894      		sei
 373               	 ;  0 "" 2
 292:main.c        **** 	usbDeviceConnect();
 374               		.loc 2 292 0
 375               	/* #NOAPP */
 376 008e BC9A      		sbi 0x17,4
 377 0090 C49A      		sbi 0x18,4
 293:main.c        **** 	LED_RED_ON();
 378               		.loc 2 293 0
 379 0092 C39A      		sbi 0x18,3
 294:main.c        **** 	LED_SENSOR_INIT();
 380               		.loc 2 294 0
 381 0094 D29A      		sbi 0x1a,2
 382 0096 B89A      		sbi 0x17,0
 383 0098 C098      		cbi 0x18,0
 384 009a DA98      		cbi 0x1b,2
 295:main.c        **** 	LED_BUTTON_OFF();
 385               		.loc 2 295 0
 386 009c C198      		cbi 0x18,1
 296:main.c        **** 	Timer_Set(TIMER_LED_BLINK,TIMER_LED_STARTUP_TIMEOUT);
 387               		.loc 2 296 0
 388 009e 60ED      		ldi r22,lo8(-48)
 389 00a0 77E0      		ldi r23,lo8(7)
 390 00a2 80E0      		ldi r24,0
 391 00a4 00D0      		rcall Timer_Set
 392               	.LVL18:
 297:main.c        **** 	Timer_Set(TIMER_LED_SENSOR_BLINK,2);
 393               		.loc 2 297 0
 394 00a6 62E0      		ldi r22,lo8(2)
 395 00a8 70E0      		ldi r23,0
 396 00aa 81E0      		ldi r24,lo8(1)
 397 00ac 00D0      		rcall Timer_Set
 398               	.LVL19:
 298:main.c        **** 	Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_STARTUP_TIMEOUT);
 399               		.loc 2 298 0
 400 00ae 60ED      		ldi r22,lo8(-48)
 401 00b0 77E0      		ldi r23,lo8(7)
 402 00b2 82E0      		ldi r24,lo8(2)
 403 00b4 00D0      		rcall Timer_Set
 404               	.LVL20:
 299:main.c        **** 	//fprintf_P(&uartsw_stream,PSTR("B!\x10\n"));
 300:main.c        **** 	/*char buffer[10];
 301:main.c        **** 	if (strcmp_P(fgets(buffer,sizeof(buffer),&uartsw_stream),PSTR("B!\x10\n")) != 0) {
 302:main.c        **** 		fprintf_P(&uartsw_stream,PSTR("Fail"));
 303:main.c        **** 	}*/
 304:main.c        **** 	filtered_val = filter_iir2(&filter_iir2_data,1000);
 405               		.loc 2 304 0
 406 00b6 68EE      		ldi r22,lo8(-24)
 407 00b8 73E0      		ldi r23,lo8(3)
 408 00ba C101      		movw r24,r2
 409 00bc 00D0      		rcall filter_iir2
 410               	.LVL21:
 411 00be 882E      		mov r8,r24
 412 00c0 9B8B      		std Y+19,r25
 413               	.LVL22:
 414 00c2 0F90      		pop __tmp_reg__
 415 00c4 0F90      		pop __tmp_reg__
 266:main.c        **** 
 416               		.loc 2 266 0
 417 00c6 B12C      		mov r11,__zero_reg__
 265:main.c        **** 	uint8_t led_sensor_weigthed_sum_idx = 0;
 418               		.loc 2 265 0
 419 00c8 C12C      		mov r12,__zero_reg__
 420 00ca D12C      		mov r13,__zero_reg__
 262:main.c        **** 	static uint8_t led_sensor_nsample = 5;
 421               		.loc 2 262 0
 422 00cc 10E0      		ldi r17,0
 260:main.c        **** 	uint16_t led_sensor_values[5];
 423               		.loc 2 260 0
 424 00ce 80E0      		ldi r24,0
 259:main.c        **** 	uint8_t led_sensor_prev_time=0;
 425               		.loc 2 259 0
 426 00d0 E12C      		mov r14,__zero_reg__
 427 00d2 F12C      		mov r15,__zero_reg__
 257:main.c        **** 	static uint16_t led_sensor_delta_time = 0;
 428               		.loc 2 257 0
 429 00d4 00E0      		ldi r16,0
 254:main.c        **** 	filter_iir2_t filter_iir2_data = {0,0,0,0};
 430               		.loc 2 254 0
 431 00d6 A12C      		mov r10,__zero_reg__
 432               	.LVL23:
 433               	.L5:
 434               	.LBB22:
 305:main.c        **** 	// main event loop
 306:main.c        **** 	for (;;)
 307:main.c        **** 	{
 308:main.c        **** 		//update delta time
 309:main.c        **** 		{
 310:main.c        **** 			uint8_t temp = TCNT1;
 435               		.loc 2 310 0
 436 00d8 9EB4      		in r9,0x2e
 437               	.LVL24:
 311:main.c        **** 			led_sensor_delta_time += (temp - led_sensor_prev_time) & 0xFF;
 438               		.loc 2 311 0
 439 00da 292D      		mov r18,r9
 440 00dc 281B      		sub r18,r24
 441 00de 8091 0000 		lds r24,led_sensor_delta_time.2376
 442 00e2 9091 0000 		lds r25,led_sensor_delta_time.2376+1
 443 00e6 820F      		add r24,r18
 444 00e8 911D      		adc r25,__zero_reg__
 445 00ea 9093 0000 		sts led_sensor_delta_time.2376+1,r25
 446 00ee 8093 0000 		sts led_sensor_delta_time.2376,r24
 447               	.LVL25:
 448               	.LBE22:
 312:main.c        **** 			led_sensor_prev_time = temp;
 313:main.c        **** 		}
 314:main.c        **** 
 315:main.c        **** 		//Watchdog
 316:main.c        **** 		wdt_reset();
 449               		.loc 2 316 0
 450               	/* #APP */
 451               	 ;  316 "main.c" 1
 452 00f2 A895      		wdr
 453               	 ;  0 "" 2
 317:main.c        **** 
 318:main.c        **** 		//Timers
 319:main.c        **** 		/////////////////////////////////////////////////////
 320:main.c        **** 		if (TIFR & _BV(TOV1)) {
 454               		.loc 2 320 0
 455               	/* #NOAPP */
 456 00f4 08B6      		in __tmp_reg__,0x38
 457 00f6 02FE      		sbrs __tmp_reg__,2
 458 00f8 00C0      		rjmp .L6
 321:main.c        **** 			TIFR |= _BV(TOV1);
 459               		.loc 2 321 0
 460 00fa 88B7      		in r24,0x38
 461 00fc 8460      		ori r24,lo8(4)
 462 00fe 88BF      		out 0x38,r24
 463               	.LVL26:
 322:main.c        **** 			Timers_DecreaseAll(TIMER1_OVERFLOW_PERIOD_MS_X256);
 464               		.loc 2 322 0
 465 0100 80E0      		ldi r24,0
 466 0102 92E0      		ldi r25,lo8(2)
 467 0104 00D0      		rcall Timers_DecreaseAll
 468               	.LVL27:
 469               	.L6:
 323:main.c        **** 		}
 324:main.c        **** 
 325:main.c        **** 		//usb
 326:main.c        **** 		/////////////////////////////////////////////////////
 327:main.c        **** 		usbPoll();
 470               		.loc 2 327 0
 471 0106 00D0      		rcall usbPoll
 472               	.LVL28:
 328:main.c        **** 
 329:main.c        **** 		//
 330:main.c        **** 		/////////////////////////////////////////////////////
 331:main.c        **** 		if (BUTTON_IS_PRESSED()) {
 473               		.loc 2 331 0
 474 0108 CC99      		sbic 0x19,4
 475 010a 00C0      		rjmp .L23
 332:main.c        **** 			LED_BUTTON_ON();
 476               		.loc 2 332 0
 477 010c C19A      		sbi 0x18,1
 478               	.LVL29:
 333:main.c        **** 			if (!(buttonPressed)) {
 334:main.c        **** 				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
 335:main.c        **** 				//uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
 336:main.c        **** 				//printf_P(PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,capture_diff_max,u
 337:main.c        **** 				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,ca
 338:main.c        **** 			}
 339:main.c        **** 			buttonPressed = 1;
 340:main.c        **** 			buttonMask |= 0x1;
 479               		.loc 2 340 0
 480 010e 81E0      		ldi r24,lo8(1)
 481 0110 00C0      		rjmp .L7
 482               	.LVL30:
 483               	.L23:
 341:main.c        **** 		}
 342:main.c        **** 		else {
 343:main.c        **** 			//LED_BUTTON_OFF();
 344:main.c        **** 			buttonMask &= ~0x1;
 484               		.loc 2 344 0
 485 0112 80E0      		ldi r24,0
 486               	.L7:
 487               	.LVL31:
 345:main.c        **** 			buttonPressed = 0;
 346:main.c        **** 		}
 347:main.c        **** 
 348:main.c        **** 		//USB interrupt
 349:main.c        **** 		/////////////////////////////////////////////////////
 350:main.c        **** 		if (usbInterruptIsReady())
 488               		.loc 2 350 0
 489 0114 9091 0000 		lds r25,usbTxStatus1
 490 0118 94FF      		sbrs r25,4
 491 011a 00C0      		rjmp .L8
 351:main.c        **** 		{
 352:main.c        **** 			if (buttonMask != reportBuffer.mouse.buttonMask) {
 492               		.loc 2 352 0
 493 011c 9091 0000 		lds r25,reportBuffer+1
 494 0120 8917      		cp r24,r25
 495 0122 01F0      		breq .L8
 353:main.c        **** 				reportBuffer.mouse.report_id = report_id_mouse;
 496               		.loc 2 353 0
 497 0124 91E0      		ldi r25,lo8(1)
 498 0126 9093 0000 		sts reportBuffer,r25
 354:main.c        **** 				reportBuffer.mouse.buttonMask = buttonMask;
 499               		.loc 2 354 0
 500 012a 8093 0000 		sts reportBuffer+1,r24
 355:main.c        **** 				usbSetInterrupt((uchar*)&reportBuffer.mouse, sizeof(reportBuffer.mouse));
 501               		.loc 2 355 0
 502 012e 62E0      		ldi r22,lo8(2)
 503 0130 80E0      		ldi r24,lo8(reportBuffer)
 504 0132 90E0      		ldi r25,hi8(reportBuffer)
 505               	.LVL32:
 506 0134 00D0      		rcall usbSetInterrupt
 507               	.LVL33:
 508               	.L8:
 356:main.c        **** 
 357:main.c        **** 			}
 358:main.c        **** 			else if (1) {
 359:main.c        **** 
 360:main.c        **** 			}
 361:main.c        **** 
 362:main.c        **** 		}
 363:main.c        **** 		/*
 364:main.c        **** 		int c;
 365:main.c        **** 		if (0 && (c = fgetc(&uartsw_stream)) != -1) {
 366:main.c        **** 			printf_P(PSTR("%c"),c);
 367:main.c        **** 			//fprintf_P(&uartsw_stream,PSTR("%c"),c);
 368:main.c        **** 		}
 369:main.c        **** 		*/
 370:main.c        **** 
 371:main.c        **** 		//stdin_str = stdin_get_string(&stdin_get_string_buffer);
 372:main.c        **** 		if (0 && getchar() >= 0) { //offending line...?
 373:main.c        **** 			//if (strcmp_P(stdin_str,PSTR("stat")) == 0 )
 374:main.c        **** 			{
 375:main.c        **** 
 376:main.c        **** 			}
 377:main.c        **** 		}
 378:main.c        **** 
 379:main.c        **** 		//
 380:main.c        **** 		///////////////////////////////////////////////////////
 381:main.c        **** 
 382:main.c        **** 
 383:main.c        **** 		//LED Timer
 384:main.c        **** 		/////////////////////////////////////////////////////
 385:main.c        **** 		if (Timer_HasExpired(TIMER_LED_BLINK)) {
 509               		.loc 2 385 0
 510 0136 80E0      		ldi r24,0
 511 0138 00D0      		rcall Timer_HasExpired
 512               	.LVL34:
 513 013a 892B      		or r24,r25
 514 013c 01F0      		breq .L9
 386:main.c        **** 			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
 515               		.loc 2 386 0
 516 013e 64EF      		ldi r22,lo8(-12)
 517 0140 71E0      		ldi r23,lo8(1)
 518 0142 80E0      		ldi r24,0
 519 0144 00D0      		rcall Timer_Set
 520               	.LVL35:
 521               	.L9:
 387:main.c        **** 			//LED_RED_CHANGE();
 388:main.c        **** 		}
 389:main.c        **** 		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
 522               		.loc 2 389 0
 523 0146 82E0      		ldi r24,lo8(2)
 524 0148 00D0      		rcall Timer_HasExpired
 525               	.LVL36:
 526 014a 892B      		or r24,r25
 527 014c 01F0      		breq .L10
 390:main.c        **** 			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
 528               		.loc 2 390 0
 529 014e 6AEF      		ldi r22,lo8(-6)
 530 0150 70E0      		ldi r23,0
 531 0152 82E0      		ldi r24,lo8(2)
 532 0154 00D0      		rcall Timer_Set
 533               	.LVL37:
 534               	.L10:
 391:main.c        **** 			//LED_BUTTON_CHANGE();
 392:main.c        **** 		}
 393:main.c        **** 		if (Timer_HasExpired(TIMER_LED_SENSOR_BLINK))
 535               		.loc 2 393 0
 536 0156 81E0      		ldi r24,lo8(1)
 537 0158 00D0      		rcall Timer_HasExpired
 538               	.LVL38:
 539 015a 892B      		or r24,r25
 540 015c 01F4      		brne .+2
 541 015e 00C0      		rjmp .L11
 542               	.LBB23:
 543               	.LBB24:
 544               		.file 5 "../util/lfsr8.h"
   1:../util/lfsr8.h **** 
   2:../util/lfsr8.h **** static uint8_t prng_lfsr8_255(void) {
   3:../util/lfsr8.h **** 	static uint8_t lfsr = 0x01;
   4:../util/lfsr8.h **** 	unsigned char lsb = lfsr & 1;  /* Get lsb (i.e., the output bit). */
   5:../util/lfsr8.h **** 	lfsr >>= 1;               /* Shift register */
   6:../util/lfsr8.h **** 	if (lsb == 1)             /* Only apply toggle mask if output bit is 1. */  //[1,2,3,7]
   7:../util/lfsr8.h **** 		lfsr ^= (1<<7 | 1<<3 | 1<<2 | 1<<1);        /* Apply toggle mask, value has 1 at bits correspondi
   8:../util/lfsr8.h **** 	return lfsr;
   9:../util/lfsr8.h **** }
  10:../util/lfsr8.h **** 
  11:../util/lfsr8.h **** static uint8_t prng_lfsr8_31(void) {
  12:../util/lfsr8.h **** 	static uint8_t lfsr = 0x01;
  13:../util/lfsr8.h **** 	unsigned char lsb = lfsr & 1;  /* Get lsb (i.e., the output bit). */
  14:../util/lfsr8.h **** 	lfsr >>= 1;               /* Shift register */
  15:../util/lfsr8.h **** 	if (lsb == 1)             /* Only apply toggle mask if output bit is 1. */  //[1,2,3,7]
  16:../util/lfsr8.h **** 		lfsr ^= (1<<3 | 1<<4 | 1<<2 | 1<<1);        /* Apply toggle mask, value has 1 at bits correspondi
  17:../util/lfsr8.h **** 	return lfsr;
  18:../util/lfsr8.h **** }
  19:../util/lfsr8.h **** 
  20:../util/lfsr8.h **** 
  21:../util/lfsr8.h **** static uint8_t prng_lfsr1_1(void) {
  22:../util/lfsr8.h **** 	static uint8_t lfsr = 0x01;
  23:../util/lfsr8.h **** 	lfsr ^= 0x1;
 545               		.loc 5 23 0
 546 0160 0091 0000 		lds r16,lfsr.2294
 547               	.LVL39:
 548 0164 E1E0      		ldi r30,lo8(1)
 549 0166 0E27      		eor r16,r30
 550 0168 0093 0000 		sts lfsr.2294,r16
 551               	.LBE24:
 552               	.LBE23:
 394:main.c        **** 		{
 395:main.c        **** 			led_sensor_last_random = prng_lfsr1_1();
 396:main.c        **** 			if (led_sensor_last_random & 0x1) {
 553               		.loc 2 396 0
 554 016c 00FF      		sbrs r16,0
 555 016e 00C0      		rjmp .L12
 397:main.c        **** 				LED_RED_ON();
 556               		.loc 2 397 0
 557 0170 C39A      		sbi 0x18,3
 558 0172 00C0      		rjmp .L13
 559               	.L12:
 398:main.c        **** 			}
 399:main.c        **** 			else {
 400:main.c        **** 				LED_RED_OFF();
 560               		.loc 2 400 0
 561 0174 C398      		cbi 0x18,3
 562               	.L13:
 401:main.c        **** 			}
 402:main.c        **** 			Timer_Set(TIMER_LED_SENSOR_BLINK,100);
 563               		.loc 2 402 0
 564 0176 64E6      		ldi r22,lo8(100)
 565 0178 70E0      		ldi r23,0
 566 017a 81E0      		ldi r24,lo8(1)
 567 017c 00D0      		rcall Timer_Set
 568               	.LVL40:
 403:main.c        **** 			LED_SENSOR_ADC_SETUP();
 569               		.loc 2 403 0
 570 017e D898      		cbi 0x1b,0
 571 0180 F3E9      		ldi r31,lo8(-109)
 572 0182 F6B9      		out 0x6,r31
 573 0184 13B8      		out 0x3,__zero_reg__
 404:main.c        **** 			//LED_SENSOR_ON();
 405:main.c        **** 			//_delay_us(200);
 406:main.c        **** 			//LED_SENSOR_REVERSE_BIAS();
 407:main.c        **** 			//_delay_us(200);
 408:main.c        **** 			LED_SENSOR_INPUT();
 574               		.loc 2 408 0
 575 0186 D298      		cbi 0x1a,2
 576 0188 DA98      		cbi 0x1b,2
 409:main.c        **** 
 410:main.c        **** 			led_sensor_blink++;
 577               		.loc 2 410 0
 578 018a A394      		inc r10
 579               	.LVL41:
 411:main.c        **** 			if (led_sensor_nvalues > 0) {
 580               		.loc 2 411 0
 581 018c 1123      		tst r17
 582 018e 01F0      		breq .L14
 412:main.c        **** 				led_sensor_weigthed_sum -= led_sensor_weigthed_sum_data[led_sensor_weigthed_sum_idx];
 583               		.loc 2 412 0
 584 0190 EB2D      		mov r30,r11
 585 0192 F0E0      		ldi r31,0
 586 0194 EE0F      		lsl r30
 587 0196 FF1F      		rol r31
 588 0198 E050      		subi r30,lo8(-(led_sensor_weigthed_sum_data.2382))
 589 019a F040      		sbci r31,hi8(-(led_sensor_weigthed_sum_data.2382))
 590 019c 2081      		ld r18,Z
 591 019e 3181      		ldd r19,Z+1
 592               	.LVL42:
 413:main.c        **** 				led_sensor_weigthed_sum_data[led_sensor_weigthed_sum_idx] = led_sensor_values[4];
 593               		.loc 2 413 0
 594 01a0 8985      		ldd r24,Y+9
 595 01a2 9A85      		ldd r25,Y+10
 596 01a4 C80E      		add r12,r24
 597 01a6 D91E      		adc r13,r25
 598               	.LVL43:
 599 01a8 9183      		std Z+1,r25
 600 01aa 8083      		st Z,r24
 414:main.c        **** 				led_sensor_weigthed_sum += led_sensor_weigthed_sum_data[led_sensor_weigthed_sum_idx];
 601               		.loc 2 414 0
 602 01ac C21A      		sub r12,r18
 603 01ae D30A      		sbc r13,r19
 604               	.LVL44:
 415:main.c        **** 
 416:main.c        **** 				led_sensor_weigthed_sum_idx++;
 605               		.loc 2 416 0
 606 01b0 B394      		inc r11
 607               	.LVL45:
 417:main.c        **** 				if (led_sensor_weigthed_sum_idx >= elements_of(led_sensor_weigthed_sum_data) ) {
 608               		.loc 2 417 0
 609 01b2 23E1      		ldi r18,lo8(19)
 610 01b4 2B15      		cp r18,r11
 611 01b6 00F4      		brsh .L15
 418:main.c        **** 					led_sensor_weigthed_sum_idx = 0;
 612               		.loc 2 418 0
 613 01b8 B12C      		mov r11,__zero_reg__
 614               	.LVL46:
 615               	.L15:
 419:main.c        **** 				}
 420:main.c        **** 
 421:main.c        **** 
 422:main.c        **** 				if ((led_sensor_blink & 0xF) == 0) {
 616               		.loc 2 422 0
 617 01ba 2A2D      		mov r18,r10
 618 01bc 2F70      		andi r18,lo8(15)
 619 01be 01F4      		brne .L14
 423:main.c        **** 					printf("led adc[%d]:\t%05u: \t%05u,\t%05u\t%05u ticks:\t%06u\tfilt:%06d   \r",
 620               		.loc 2 423 0
 621 01c0 EB89      		ldd r30,Y+19
 622 01c2 EF93      		push r30
 623 01c4 8F92      		push r8
 624 01c6 FF92      		push r15
 625 01c8 EF92      		push r14
 626 01ca 9F93      		push r25
 627 01cc 8F93      		push r24
 628 01ce 8885      		ldd r24,Y+8
 629 01d0 8F93      		push r24
 630 01d2 8F81      		ldd r24,Y+7
 631 01d4 8F93      		push r24
 632 01d6 8E81      		ldd r24,Y+6
 633 01d8 8F93      		push r24
 634 01da 8D81      		ldd r24,Y+5
 635 01dc 8F93      		push r24
 636 01de C601      		movw r24,r12
 637 01e0 64E1      		ldi r22,lo8(20)
 638 01e2 70E0      		ldi r23,0
 639 01e4 00D0      		rcall __udivmodhi4
 640 01e6 7F93      		push r23
 641 01e8 6F93      		push r22
 642 01ea 1F92      		push __zero_reg__
 643 01ec 1F93      		push r17
 644 01ee 80E0      		ldi r24,lo8(.LC0)
 645 01f0 90E0      		ldi r25,hi8(.LC0)
 646 01f2 9F93      		push r25
 647 01f4 8F93      		push r24
 648 01f6 00D0      		rcall printf
 649               	.LVL47:
 650 01f8 0FB6      		in __tmp_reg__,__SREG__
 651 01fa F894      		cli
 652 01fc DEBF      		out __SP_H__,r29
 653 01fe 0FBE      		out __SREG__,__tmp_reg__
 654 0200 CDBF      		out __SP_L__,r28
 655               	.L14:
 424:main.c        **** 							led_sensor_nvalues,
 425:main.c        **** 							led_sensor_weigthed_sum / elements_of(led_sensor_weigthed_sum_data) ,
 426:main.c        **** 							led_sensor_values[2],
 427:main.c        **** 							led_sensor_values[3],
 428:main.c        **** 							led_sensor_values[4],
 429:main.c        **** 							led_sensor_trig_time,
 430:main.c        **** 							filtered_val);
 431:main.c        **** 				}
 432:main.c        **** 			}
 433:main.c        **** 
 434:main.c        **** 			led_sensor_delta_time = 0;
 656               		.loc 2 434 0
 657 0202 1092 0000 		sts led_sensor_delta_time.2376+1,__zero_reg__
 658 0206 1092 0000 		sts led_sensor_delta_time.2376,__zero_reg__
 659               	.LVL48:
 435:main.c        **** 			led_sensor_trig_time = 0;
 436:main.c        **** 			led_sensor_nvalues = 0;
 437:main.c        **** 			led_sensor_nsample = 2;
 660               		.loc 2 437 0
 661 020a 82E0      		ldi r24,lo8(2)
 662 020c 8093 0000 		sts led_sensor_nsample.2381,r24
 436:main.c        **** 			led_sensor_nsample = 2;
 663               		.loc 2 436 0
 664 0210 10E0      		ldi r17,0
 435:main.c        **** 			led_sensor_trig_time = 0;
 665               		.loc 2 435 0
 666 0212 E12C      		mov r14,__zero_reg__
 667 0214 F12C      		mov r15,__zero_reg__
 668               	.LVL49:
 669               	.L11:
 438:main.c        **** 		}
 439:main.c        **** 
 440:main.c        **** 		//Time measurement of LED sensor discharge
 441:main.c        **** 		if (!LED_SENSOR_IS_HIGH()) {
 670               		.loc 2 441 0
 671 0216 CA99      		sbic 0x19,2
 672 0218 00C0      		rjmp .L16
 442:main.c        **** 			LED_BUTTON_OFF();
 673               		.loc 2 442 0
 674 021a C198      		cbi 0x18,1
 443:main.c        **** 			if (led_sensor_trig_time == 0) {
 675               		.loc 2 443 0
 676 021c E114      		cp r14,__zero_reg__
 677 021e F104      		cpc r15,__zero_reg__
 678 0220 01F4      		brne .L17
 444:main.c        **** 				led_sensor_trig_time = led_sensor_delta_time;
 679               		.loc 2 444 0
 680 0222 E090 0000 		lds r14,led_sensor_delta_time.2376
 681 0226 F090 0000 		lds r15,led_sensor_delta_time.2376+1
 682               	.LVL50:
 683 022a 00C0      		rjmp .L17
 684               	.L16:
 445:main.c        **** 			}
 446:main.c        **** 		}
 447:main.c        **** 		else {
 448:main.c        **** 			LED_BUTTON_ON();
 685               		.loc 2 448 0
 686 022c C19A      		sbi 0x18,1
 687               	.L17:
 449:main.c        **** 		}
 450:main.c        **** 
 451:main.c        **** 
 452:main.c        **** 		//ADC measurement of led sensor
 453:main.c        **** 		{
 454:main.c        **** 			if (led_sensor_delta_time >= us_to_ticks(4000) * led_sensor_nsample)
 688               		.loc 2 454 0
 689 022e 4090 0000 		lds r4,led_sensor_delta_time.2376
 690 0232 5090 0000 		lds r5,led_sensor_delta_time.2376+1
 691 0236 612C      		mov r6,__zero_reg__
 692 0238 712C      		mov r7,__zero_reg__
 693 023a 6091 0000 		lds r22,led_sensor_nsample.2381
 694 023e 70E0      		ldi r23,0
 695 0240 80E0      		ldi r24,0
 696 0242 90E0      		ldi r25,0
 697 0244 23E0      		ldi r18,lo8(3)
 698 0246 32E0      		ldi r19,lo8(2)
 699 0248 40E0      		ldi r20,0
 700 024a 50E0      		ldi r21,0
 701 024c 00D0      		rcall __mulsi3
 702               	.LVL51:
 703 024e 4616      		cp r4,r22
 704 0250 5706      		cpc r5,r23
 705 0252 6806      		cpc r6,r24
 706 0254 7906      		cpc r7,r25
 707 0256 00F0      		brlo .L18
 455:main.c        **** 			{
 456:main.c        **** 				LED_SENSOR_ADC_START();
 708               		.loc 2 456 0
 709 0258 9EE8      		ldi r25,lo8(-114)
 710 025a 97B9      		out 0x7,r25
 711 025c 369A      		sbi 0x6,6
 457:main.c        **** 				led_sensor_nsample++;
 712               		.loc 2 457 0
 713 025e 8091 0000 		lds r24,led_sensor_nsample.2381
 714 0262 8F5F      		subi r24,lo8(-(1))
 715 0264 8093 0000 		sts led_sensor_nsample.2381,r24
 716               	.L18:
 458:main.c        **** 			}
 459:main.c        **** 			if (LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() && LED_SENSOR_ADC_IS_COMPLETED()) {
 717               		.loc 2 459 0
 718 0268 87B1      		in r24,0x7
 719 026a 8F73      		andi r24,lo8(63)
 720 026c 8E30      		cpi r24,lo8(14)
 721 026e 01F4      		brne .L19
 722               		.loc 2 459 0 is_stmt 0 discriminator 1
 723 0270 349B      		sbis 0x6,4
 724 0272 00C0      		rjmp .L19
 460:main.c        **** 				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
 725               		.loc 2 460 0 is_stmt 1
 726 0274 1530      		cpi r17,lo8(5)
 727 0276 00F4      		brsh .L20
 461:main.c        **** 					led_sensor_values[led_sensor_nvalues] = ADC;
 728               		.loc 2 461 0
 729 0278 64B1      		in r22,0x4
 730 027a 75B1      		in r23,0x4+1
 731 027c E12F      		mov r30,r17
 732 027e F0E0      		ldi r31,0
 733 0280 EE0F      		lsl r30
 734 0282 FF1F      		rol r31
 735 0284 81E0      		ldi r24,lo8(1)
 736 0286 90E0      		ldi r25,0
 737 0288 8C0F      		add r24,r28
 738 028a 9D1F      		adc r25,r29
 739 028c E80F      		add r30,r24
 740 028e F91F      		adc r31,r25
 741 0290 7183      		std Z+1,r23
 742 0292 6083      		st Z,r22
 462:main.c        **** 					if (led_sensor_nvalues == 4) {
 743               		.loc 2 462 0
 744 0294 1430      		cpi r17,lo8(4)
 745 0296 01F4      		brne .L20
 746               	.LVL52:
 747               	.LBB25:
 463:main.c        **** 						int16_t val = led_sensor_values[led_sensor_nvalues];
 464:main.c        **** 						if ((led_sensor_last_random & 0x1)) {
 748               		.loc 2 464 0
 749 0298 00FF      		sbrs r16,0
 750 029a 00C0      		rjmp .L21
 465:main.c        **** 							val = -val;
 751               		.loc 2 465 0
 752 029c 7195      		neg r23
 753 029e 6195      		neg r22
 754 02a0 7109      		sbc r23,__zero_reg__
 755               	.LVL53:
 756               	.L21:
 466:main.c        **** 						}
 467:main.c        **** 						filtered_val = filter_iir2(&filter_iir2_data,val);
 757               		.loc 2 467 0
 758 02a2 C101      		movw r24,r2
 759 02a4 00D0      		rcall filter_iir2
 760               	.LVL54:
 761 02a6 882E      		mov r8,r24
 762 02a8 9B8B      		std Y+19,r25
 763               	.LVL55:
 764               	.L20:
 765               	.LBE25:
 468:main.c        **** 					}
 469:main.c        **** 				}
 470:main.c        **** 				led_sensor_nvalues++;
 766               		.loc 2 470 0
 767 02aa 1F5F      		subi r17,lo8(-(1))
 768               	.LVL56:
 471:main.c        **** 				LED_SENSOR_ADC_DONE();
 769               		.loc 2 471 0
 770 02ac 349A      		sbi 0x6,4
 771               	.LVL57:
 772               	.L19:
 472:main.c        **** 			}
 473:main.c        **** 		}
 474:main.c        **** 
 475:main.c        **** 
 476:main.c        **** 		if (BOOTLOADER_CONDITION) {
 773               		.loc 2 476 0
 774 02ae CB9B      		sbis 0x19,3
 775 02b0 00C0      		rjmp .L49
 776               	.L22:
 251:main.c        **** 	unsigned char buttonPressed = 0;
 777               		.loc 2 251 0
 778 02b2 892D      		mov r24,r9
 779 02b4 00C0      		rjmp .L5
 780               	.L49:
 781               	.LBB26:
 477:main.c        **** 			cli();
 782               		.loc 2 477 0
 783               	/* #APP */
 784               	 ;  477 "main.c" 1
 785 02b6 F894      		cli
 786               	 ;  0 "" 2
 478:main.c        **** 			BOOTLOADER_CONDITION_INIT();
 787               		.loc 2 478 0
 788               	/* #NOAPP */
 789 02b8 D398      		cbi 0x1a,3
 790 02ba DB9A      		sbi 0x1b,3
 791               	.LVL58:
 479:main.c        **** 			void (*reset_vec)(void) = 0;
 480:main.c        **** 			reset_vec();
 792               		.loc 2 480 0
 793 02bc E0E0      		ldi r30,0
 794 02be F0E0      		ldi r31,0
 795 02c0 0995      		icall
 796               	.LVL59:
 797 02c2 00C0      		rjmp .L22
 798               	.LBE26:
 799               		.cfi_endproc
 800               	.LFE24:
 801               		.size	main, .-main
 802               		.data
 803               		.type	lfsr.2294, @object
 804               		.size	lfsr.2294, 1
 805               	lfsr.2294:
 806 0000 01        		.byte	1
 807               		.type	led_sensor_nsample.2381, @object
 808               		.size	led_sensor_nsample.2381, 1
 809               	led_sensor_nsample.2381:
 810 0001 05        		.byte	5
 811               		.local	led_sensor_weigthed_sum_data.2382
 812               		.comm	led_sensor_weigthed_sum_data.2382,40,1
 813               		.local	led_sensor_delta_time.2376
 814               		.comm	led_sensor_delta_time.2376,2,1
 815               		.section	.progmem.data,"a",@progbits
 816               		.type	__c.2386, @object
 817               		.size	__c.2386, 4
 818               	__c.2386:
 819 0000 4221 0A00 		.string	"B!\n"
 820               		.local	reportBuffer
 821               		.comm	reportBuffer,2,1
 822               	.global	usbDescriptorHidReport
 823               		.type	usbDescriptorHidReport, @object
 824               		.size	usbDescriptorHidReport, 80
 825               	usbDescriptorHidReport:
 826 0004 05        		.byte	5
 827 0005 01        		.byte	1
 828 0006 09        		.byte	9
 829 0007 02        		.byte	2
 830 0008 A1        		.byte	-95
 831 0009 01        		.byte	1
 832 000a 09        		.byte	9
 833 000b 01        		.byte	1
 834 000c A1        		.byte	-95
 835 000d 00        		.byte	0
 836 000e 05        		.byte	5
 837 000f 09        		.byte	9
 838 0010 19        		.byte	25
 839 0011 01        		.byte	1
 840 0012 29        		.byte	41
 841 0013 03        		.byte	3
 842 0014 15        		.byte	21
 843 0015 00        		.byte	0
 844 0016 25        		.byte	37
 845 0017 01        		.byte	1
 846 0018 95        		.byte	-107
 847 0019 03        		.byte	3
 848 001a 75        		.byte	117
 849 001b 01        		.byte	1
 850 001c 85        		.byte	-123
 851 001d 01        		.byte	1
 852 001e 81        		.byte	-127
 853 001f 02        		.byte	2
 854 0020 95        		.byte	-107
 855 0021 01        		.byte	1
 856 0022 75        		.byte	117
 857 0023 05        		.byte	5
 858 0024 81        		.byte	-127
 859 0025 03        		.byte	3
 860 0026 C0        		.byte	-64
 861 0027 C0        		.byte	-64
 862 0028 0B        		.byte	11
 863 0029 00        		.byte	0
 864 002a 00        		.byte	0
 865 002b 01        		.byte	1
 866 002c 00        		.byte	0
 867 002d A1        		.byte	-95
 868 002e 00        		.byte	0
 869 002f 05        		.byte	5
 870 0030 01        		.byte	1
 871 0031 75        		.byte	117
 872 0032 10        		.byte	16
 873 0033 95        		.byte	-107
 874 0034 01        		.byte	1
 875 0035 09        		.byte	9
 876 0036 00        		.byte	0
 877 0037 85        		.byte	-123
 878 0038 7C        		.byte	124
 879 0039 B1        		.byte	-79
 880 003a 02        		.byte	2
 881 003b 09        		.byte	9
 882 003c 00        		.byte	0
 883 003d 85        		.byte	-123
 884 003e 7D        		.byte	125
 885 003f B1        		.byte	-79
 886 0040 02        		.byte	2
 887 0041 75        		.byte	117
 888 0042 08        		.byte	8
 889 0043 95        		.byte	-107
 890 0044 44        		.byte	68
 891 0045 09        		.byte	9
 892 0046 00        		.byte	0
 893 0047 85        		.byte	-123
 894 0048 7E        		.byte	126
 895 0049 B1        		.byte	-79
 896 004a 00        		.byte	0
 897 004b 09        		.byte	9
 898 004c 00        		.byte	0
 899 004d 95        		.byte	-107
 900 004e 09        		.byte	9
 901 004f 85        		.byte	-123
 902 0050 7F        		.byte	127
 903 0051 B1        		.byte	-79
 904 0052 00        		.byte	0
 905 0053 C0        		.byte	-64
 906               		.local	captured
 907               		.comm	captured,2,1
 908               		.local	capture_diff_max
 909               		.comm	capture_diff_max,2,1
 910               		.local	capture_diff
 911               		.comm	capture_diff,2,1
 912               		.text
 913               	.Letext0:
 914               		.file 6 "/usr/lib/avr/include/stdint.h"
 915               		.file 7 "/usr/lib/avr/include/stdio.h"
 916               		.file 8 "../usbdrv/usbdrv.h"
 917               		.file 9 "./usbconfig.h"
 918               		.file 10 "./timer_ids.h"
 919               		.file 11 "../util/q7_8_t.h"
 920               		.file 12 "hid.h"
 921               		.file 13 "../util/usbstream.h"
 922               		.file 14 "../util/timers.h"
 923               		.section	.debug_info,"",@progbits
 924               	.Ldebug_info0:
 925 0000 B209 0000 		.long	0x9b2
 926 0004 0200      		.word	0x2
 927 0006 0000 0000 		.long	.Ldebug_abbrev0
 928 000a 04        		.byte	0x4
 929 000b 01        		.uleb128 0x1
 930 000c 0000 0000 		.long	.LASF96
 931 0010 0C        		.byte	0xc
 932 0011 0000 0000 		.long	.LASF97
 933 0015 0000 0000 		.long	.LASF98
 934 0019 0000 0000 		.long	.Ldebug_ranges0+0
 935 001d 0000 0000 		.long	0
 936 0021 0000 0000 		.long	0
 937 0025 0000 0000 		.long	.Ldebug_line0
 938 0029 02        		.uleb128 0x2
 939 002a 0000 0000 		.long	.LASF0
 940 002e 06        		.byte	0x6
 941 002f 7D        		.byte	0x7d
 942 0030 3400 0000 		.long	0x34
 943 0034 03        		.uleb128 0x3
 944 0035 01        		.byte	0x1
 945 0036 06        		.byte	0x6
 946 0037 0000 0000 		.long	.LASF2
 947 003b 02        		.uleb128 0x2
 948 003c 0000 0000 		.long	.LASF1
 949 0040 06        		.byte	0x6
 950 0041 7E        		.byte	0x7e
 951 0042 4600 0000 		.long	0x46
 952 0046 03        		.uleb128 0x3
 953 0047 01        		.byte	0x1
 954 0048 08        		.byte	0x8
 955 0049 0000 0000 		.long	.LASF3
 956 004d 02        		.uleb128 0x2
 957 004e 0000 0000 		.long	.LASF4
 958 0052 06        		.byte	0x6
 959 0053 7F        		.byte	0x7f
 960 0054 5800 0000 		.long	0x58
 961 0058 04        		.uleb128 0x4
 962 0059 02        		.byte	0x2
 963 005a 05        		.byte	0x5
 964 005b 696E 7400 		.string	"int"
 965 005f 02        		.uleb128 0x2
 966 0060 0000 0000 		.long	.LASF5
 967 0064 06        		.byte	0x6
 968 0065 80        		.byte	0x80
 969 0066 6A00 0000 		.long	0x6a
 970 006a 03        		.uleb128 0x3
 971 006b 02        		.byte	0x2
 972 006c 07        		.byte	0x7
 973 006d 0000 0000 		.long	.LASF6
 974 0071 02        		.uleb128 0x2
 975 0072 0000 0000 		.long	.LASF7
 976 0076 06        		.byte	0x6
 977 0077 81        		.byte	0x81
 978 0078 7C00 0000 		.long	0x7c
 979 007c 03        		.uleb128 0x3
 980 007d 04        		.byte	0x4
 981 007e 05        		.byte	0x5
 982 007f 0000 0000 		.long	.LASF8
 983 0083 03        		.uleb128 0x3
 984 0084 04        		.byte	0x4
 985 0085 07        		.byte	0x7
 986 0086 0000 0000 		.long	.LASF9
 987 008a 03        		.uleb128 0x3
 988 008b 08        		.byte	0x8
 989 008c 05        		.byte	0x5
 990 008d 0000 0000 		.long	.LASF10
 991 0091 03        		.uleb128 0x3
 992 0092 08        		.byte	0x8
 993 0093 07        		.byte	0x7
 994 0094 0000 0000 		.long	.LASF11
 995 0098 05        		.uleb128 0x5
 996 0099 0000 0000 		.long	.LASF25
 997 009d 0E        		.byte	0xe
 998 009e 07        		.byte	0x7
 999 009f F4        		.byte	0xf4
 1000 00a0 1A01 0000 		.long	0x11a
 1001 00a4 06        		.uleb128 0x6
 1002 00a5 6275 6600 		.string	"buf"
 1003 00a9 07        		.byte	0x7
 1004 00aa F5        		.byte	0xf5
 1005 00ab 1A01 0000 		.long	0x11a
 1006 00af 02        		.byte	0x2
 1007 00b0 23        		.byte	0x23
 1008 00b1 00        		.uleb128 0
 1009 00b2 07        		.uleb128 0x7
 1010 00b3 0000 0000 		.long	.LASF12
 1011 00b7 07        		.byte	0x7
 1012 00b8 F6        		.byte	0xf6
 1013 00b9 4600 0000 		.long	0x46
 1014 00bd 02        		.byte	0x2
 1015 00be 23        		.byte	0x23
 1016 00bf 02        		.uleb128 0x2
 1017 00c0 07        		.uleb128 0x7
 1018 00c1 0000 0000 		.long	.LASF13
 1019 00c5 07        		.byte	0x7
 1020 00c6 F7        		.byte	0xf7
 1021 00c7 3B00 0000 		.long	0x3b
 1022 00cb 02        		.byte	0x2
 1023 00cc 23        		.byte	0x23
 1024 00cd 03        		.uleb128 0x3
 1025 00ce 08        		.uleb128 0x8
 1026 00cf 0000 0000 		.long	.LASF14
 1027 00d3 07        		.byte	0x7
 1028 00d4 0701      		.word	0x107
 1029 00d6 5800 0000 		.long	0x58
 1030 00da 02        		.byte	0x2
 1031 00db 23        		.byte	0x23
 1032 00dc 04        		.uleb128 0x4
 1033 00dd 09        		.uleb128 0x9
 1034 00de 6C65 6E00 		.string	"len"
 1035 00e2 07        		.byte	0x7
 1036 00e3 0801      		.word	0x108
 1037 00e5 5800 0000 		.long	0x58
 1038 00e9 02        		.byte	0x2
 1039 00ea 23        		.byte	0x23
 1040 00eb 06        		.uleb128 0x6
 1041 00ec 09        		.uleb128 0x9
 1042 00ed 7075 7400 		.string	"put"
 1043 00f1 07        		.byte	0x7
 1044 00f2 0901      		.word	0x109
 1045 00f4 4201 0000 		.long	0x142
 1046 00f8 02        		.byte	0x2
 1047 00f9 23        		.byte	0x23
 1048 00fa 08        		.uleb128 0x8
 1049 00fb 09        		.uleb128 0x9
 1050 00fc 6765 7400 		.string	"get"
 1051 0100 07        		.byte	0x7
 1052 0101 0A01      		.word	0x10a
 1053 0103 5801 0000 		.long	0x158
 1054 0107 02        		.byte	0x2
 1055 0108 23        		.byte	0x23
 1056 0109 0A        		.uleb128 0xa
 1057 010a 08        		.uleb128 0x8
 1058 010b 0000 0000 		.long	.LASF15
 1059 010f 07        		.byte	0x7
 1060 0110 0B01      		.word	0x10b
 1061 0112 5E01 0000 		.long	0x15e
 1062 0116 02        		.byte	0x2
 1063 0117 23        		.byte	0x23
 1064 0118 0C        		.uleb128 0xc
 1065 0119 00        		.byte	0
 1066 011a 0A        		.uleb128 0xa
 1067 011b 02        		.byte	0x2
 1068 011c 2001 0000 		.long	0x120
 1069 0120 03        		.uleb128 0x3
 1070 0121 01        		.byte	0x1
 1071 0122 08        		.byte	0x8
 1072 0123 0000 0000 		.long	.LASF16
 1073 0127 0B        		.uleb128 0xb
 1074 0128 01        		.byte	0x1
 1075 0129 5800 0000 		.long	0x58
 1076 012d 3C01 0000 		.long	0x13c
 1077 0131 0C        		.uleb128 0xc
 1078 0132 2001 0000 		.long	0x120
 1079 0136 0C        		.uleb128 0xc
 1080 0137 3C01 0000 		.long	0x13c
 1081 013b 00        		.byte	0
 1082 013c 0A        		.uleb128 0xa
 1083 013d 02        		.byte	0x2
 1084 013e 9800 0000 		.long	0x98
 1085 0142 0A        		.uleb128 0xa
 1086 0143 02        		.byte	0x2
 1087 0144 2701 0000 		.long	0x127
 1088 0148 0B        		.uleb128 0xb
 1089 0149 01        		.byte	0x1
 1090 014a 5800 0000 		.long	0x58
 1091 014e 5801 0000 		.long	0x158
 1092 0152 0C        		.uleb128 0xc
 1093 0153 3C01 0000 		.long	0x13c
 1094 0157 00        		.byte	0
 1095 0158 0A        		.uleb128 0xa
 1096 0159 02        		.byte	0x2
 1097 015a 4801 0000 		.long	0x148
 1098 015e 0D        		.uleb128 0xd
 1099 015f 02        		.byte	0x2
 1100 0160 0E        		.uleb128 0xe
 1101 0161 0000 0000 		.long	.LASF17
 1102 0165 07        		.byte	0x7
 1103 0166 1501      		.word	0x115
 1104 0168 9800 0000 		.long	0x98
 1105 016c 0F        		.uleb128 0xf
 1106 016d 01        		.byte	0x1
 1107 016e 4600 0000 		.long	0x46
 1108 0172 09        		.byte	0x9
 1109 0173 7601      		.word	0x176
 1110 0175 9E01 0000 		.long	0x19e
 1111 0179 10        		.uleb128 0x10
 1112 017a 0000 0000 		.long	.LASF18
 1113 017e 01        		.byte	0x1
 1114 017f 10        		.uleb128 0x10
 1115 0180 0000 0000 		.long	.LASF19
 1116 0184 02        		.byte	0x2
 1117 0185 10        		.uleb128 0x10
 1118 0186 0000 0000 		.long	.LASF20
 1119 018a 7C        		.byte	0x7c
 1120 018b 10        		.uleb128 0x10
 1121 018c 0000 0000 		.long	.LASF21
 1122 0190 7D        		.byte	0x7d
 1123 0191 10        		.uleb128 0x10
 1124 0192 0000 0000 		.long	.LASF22
 1125 0196 7E        		.byte	0x7e
 1126 0197 10        		.uleb128 0x10
 1127 0198 0000 0000 		.long	.LASF23
 1128 019c 7F        		.byte	0x7f
 1129 019d 00        		.byte	0
 1130 019e 03        		.uleb128 0x3
 1131 019f 02        		.byte	0x2
 1132 01a0 07        		.byte	0x7
 1133 01a1 0000 0000 		.long	.LASF24
 1134 01a5 11        		.uleb128 0x11
 1135 01a6 0000 0000 		.long	.LASF26
 1136 01aa 0C        		.byte	0xc
 1137 01ab 08        		.byte	0x8
 1138 01ac 8702      		.word	0x287
 1139 01ae D101 0000 		.long	0x1d1
 1140 01b2 09        		.uleb128 0x9
 1141 01b3 6C65 6E00 		.string	"len"
 1142 01b7 08        		.byte	0x8
 1143 01b8 8802      		.word	0x288
 1144 01ba D101 0000 		.long	0x1d1
 1145 01be 02        		.byte	0x2
 1146 01bf 23        		.byte	0x23
 1147 01c0 00        		.uleb128 0
 1148 01c1 08        		.uleb128 0x8
 1149 01c2 0000 0000 		.long	.LASF27
 1150 01c6 08        		.byte	0x8
 1151 01c7 8902      		.word	0x289
 1152 01c9 D601 0000 		.long	0x1d6
 1153 01cd 02        		.byte	0x2
 1154 01ce 23        		.byte	0x23
 1155 01cf 01        		.uleb128 0x1
 1156 01d0 00        		.byte	0
 1157 01d1 12        		.uleb128 0x12
 1158 01d2 4600 0000 		.long	0x46
 1159 01d6 13        		.uleb128 0x13
 1160 01d7 4600 0000 		.long	0x46
 1161 01db E601 0000 		.long	0x1e6
 1162 01df 14        		.uleb128 0x14
 1163 01e0 9E01 0000 		.long	0x19e
 1164 01e4 0A        		.byte	0xa
 1165 01e5 00        		.byte	0
 1166 01e6 0E        		.uleb128 0xe
 1167 01e7 0000 0000 		.long	.LASF28
 1168 01eb 08        		.byte	0x8
 1169 01ec 8A02      		.word	0x28a
 1170 01ee A501 0000 		.long	0x1a5
 1171 01f2 15        		.uleb128 0x15
 1172 01f3 0000 0000 		.long	.LASF99
 1173 01f7 02        		.byte	0x2
 1174 01f8 08        		.byte	0x8
 1175 01f9 9302      		.word	0x293
 1176 01fb 1802 0000 		.long	0x218
 1177 01ff 16        		.uleb128 0x16
 1178 0200 0000 0000 		.long	.LASF29
 1179 0204 08        		.byte	0x8
 1180 0205 9402      		.word	0x294
 1181 0207 6A00 0000 		.long	0x6a
 1182 020b 16        		.uleb128 0x16
 1183 020c 0000 0000 		.long	.LASF30
 1184 0210 08        		.byte	0x8
 1185 0211 9502      		.word	0x295
 1186 0213 1802 0000 		.long	0x218
 1187 0217 00        		.byte	0
 1188 0218 13        		.uleb128 0x13
 1189 0219 4600 0000 		.long	0x46
 1190 021d 2802 0000 		.long	0x228
 1191 0221 14        		.uleb128 0x14
 1192 0222 9E01 0000 		.long	0x19e
 1193 0226 01        		.byte	0x1
 1194 0227 00        		.byte	0
 1195 0228 0E        		.uleb128 0xe
 1196 0229 0000 0000 		.long	.LASF31
 1197 022d 08        		.byte	0x8
 1198 022e 9602      		.word	0x296
 1199 0230 F201 0000 		.long	0x1f2
 1200 0234 11        		.uleb128 0x11
 1201 0235 0000 0000 		.long	.LASF32
 1202 0239 08        		.byte	0x8
 1203 023a 08        		.byte	0x8
 1204 023b 9802      		.word	0x298
 1205 023d 8D02 0000 		.long	0x28d
 1206 0241 08        		.uleb128 0x8
 1207 0242 0000 0000 		.long	.LASF33
 1208 0246 08        		.byte	0x8
 1209 0247 9902      		.word	0x299
 1210 0249 4600 0000 		.long	0x46
 1211 024d 02        		.byte	0x2
 1212 024e 23        		.byte	0x23
 1213 024f 00        		.uleb128 0
 1214 0250 08        		.uleb128 0x8
 1215 0251 0000 0000 		.long	.LASF34
 1216 0255 08        		.byte	0x8
 1217 0256 9A02      		.word	0x29a
 1218 0258 4600 0000 		.long	0x46
 1219 025c 02        		.byte	0x2
 1220 025d 23        		.byte	0x23
 1221 025e 01        		.uleb128 0x1
 1222 025f 08        		.uleb128 0x8
 1223 0260 0000 0000 		.long	.LASF35
 1224 0264 08        		.byte	0x8
 1225 0265 9B02      		.word	0x29b
 1226 0267 2802 0000 		.long	0x228
 1227 026b 02        		.byte	0x2
 1228 026c 23        		.byte	0x23
 1229 026d 02        		.uleb128 0x2
 1230 026e 08        		.uleb128 0x8
 1231 026f 0000 0000 		.long	.LASF36
 1232 0273 08        		.byte	0x8
 1233 0274 9C02      		.word	0x29c
 1234 0276 2802 0000 		.long	0x228
 1235 027a 02        		.byte	0x2
 1236 027b 23        		.byte	0x23
 1237 027c 04        		.uleb128 0x4
 1238 027d 08        		.uleb128 0x8
 1239 027e 0000 0000 		.long	.LASF37
 1240 0282 08        		.byte	0x8
 1241 0283 9D02      		.word	0x29d
 1242 0285 2802 0000 		.long	0x228
 1243 0289 02        		.byte	0x2
 1244 028a 23        		.byte	0x23
 1245 028b 06        		.uleb128 0x6
 1246 028c 00        		.byte	0
 1247 028d 0E        		.uleb128 0xe
 1248 028e 0000 0000 		.long	.LASF38
 1249 0292 08        		.byte	0x8
 1250 0293 9E02      		.word	0x29e
 1251 0295 3402 0000 		.long	0x234
 1252 0299 17        		.uleb128 0x17
 1253 029a 01        		.byte	0x1
 1254 029b 4600 0000 		.long	0x46
 1255 029f 0A        		.byte	0xa
 1256 02a0 12        		.byte	0x12
 1257 02a1 DC02 0000 		.long	0x2dc
 1258 02a5 10        		.uleb128 0x10
 1259 02a6 0000 0000 		.long	.LASF39
 1260 02aa 00        		.byte	0
 1261 02ab 10        		.uleb128 0x10
 1262 02ac 0000 0000 		.long	.LASF40
 1263 02b0 01        		.byte	0x1
 1264 02b1 10        		.uleb128 0x10
 1265 02b2 0000 0000 		.long	.LASF41
 1266 02b6 02        		.byte	0x2
 1267 02b7 10        		.uleb128 0x10
 1268 02b8 0000 0000 		.long	.LASF42
 1269 02bc 03        		.byte	0x3
 1270 02bd 10        		.uleb128 0x10
 1271 02be 0000 0000 		.long	.LASF43
 1272 02c2 04        		.byte	0x4
 1273 02c3 10        		.uleb128 0x10
 1274 02c4 0000 0000 		.long	.LASF44
 1275 02c8 05        		.byte	0x5
 1276 02c9 10        		.uleb128 0x10
 1277 02ca 0000 0000 		.long	.LASF45
 1278 02ce 06        		.byte	0x6
 1279 02cf 10        		.uleb128 0x10
 1280 02d0 0000 0000 		.long	.LASF46
 1281 02d4 07        		.byte	0x7
 1282 02d5 10        		.uleb128 0x10
 1283 02d6 0000 0000 		.long	.LASF47
 1284 02da 08        		.byte	0x8
 1285 02db 00        		.byte	0
 1286 02dc 02        		.uleb128 0x2
 1287 02dd 0000 0000 		.long	.LASF48
 1288 02e1 0B        		.byte	0xb
 1289 02e2 0B        		.byte	0xb
 1290 02e3 4D00 0000 		.long	0x4d
 1291 02e7 18        		.uleb128 0x18
 1292 02e8 08        		.byte	0x8
 1293 02e9 01        		.byte	0x1
 1294 02ea 18        		.byte	0x18
 1295 02eb 2803 0000 		.long	0x328
 1296 02ef 06        		.uleb128 0x6
 1297 02f0 795F 3100 		.string	"y_1"
 1298 02f4 01        		.byte	0x1
 1299 02f5 19        		.byte	0x19
 1300 02f6 DC02 0000 		.long	0x2dc
 1301 02fa 02        		.byte	0x2
 1302 02fb 23        		.byte	0x23
 1303 02fc 00        		.uleb128 0
 1304 02fd 06        		.uleb128 0x6
 1305 02fe 795F 3200 		.string	"y_2"
 1306 0302 01        		.byte	0x1
 1307 0303 1A        		.byte	0x1a
 1308 0304 DC02 0000 		.long	0x2dc
 1309 0308 02        		.byte	0x2
 1310 0309 23        		.byte	0x23
 1311 030a 02        		.uleb128 0x2
 1312 030b 06        		.uleb128 0x6
 1313 030c 785F 3100 		.string	"x_1"
 1314 0310 01        		.byte	0x1
 1315 0311 1B        		.byte	0x1b
 1316 0312 DC02 0000 		.long	0x2dc
 1317 0316 02        		.byte	0x2
 1318 0317 23        		.byte	0x23
 1319 0318 04        		.uleb128 0x4
 1320 0319 06        		.uleb128 0x6
 1321 031a 785F 3200 		.string	"x_2"
 1322 031e 01        		.byte	0x1
 1323 031f 1C        		.byte	0x1c
 1324 0320 DC02 0000 		.long	0x2dc
 1325 0324 02        		.byte	0x2
 1326 0325 23        		.byte	0x23
 1327 0326 06        		.uleb128 0x6
 1328 0327 00        		.byte	0
 1329 0328 02        		.uleb128 0x2
 1330 0329 0000 0000 		.long	.LASF49
 1331 032d 01        		.byte	0x1
 1332 032e 1D        		.byte	0x1d
 1333 032f E702 0000 		.long	0x2e7
 1334 0333 18        		.uleb128 0x18
 1335 0334 02        		.byte	0x2
 1336 0335 02        		.byte	0x2
 1337 0336 B3        		.byte	0xb3
 1338 0337 5803 0000 		.long	0x358
 1339 033b 07        		.uleb128 0x7
 1340 033c 0000 0000 		.long	.LASF50
 1341 0340 02        		.byte	0x2
 1342 0341 B4        		.byte	0xb4
 1343 0342 4600 0000 		.long	0x46
 1344 0346 02        		.byte	0x2
 1345 0347 23        		.byte	0x23
 1346 0348 00        		.uleb128 0
 1347 0349 07        		.uleb128 0x7
 1348 034a 0000 0000 		.long	.LASF51
 1349 034e 02        		.byte	0x2
 1350 034f B5        		.byte	0xb5
 1351 0350 4600 0000 		.long	0x46
 1352 0354 02        		.byte	0x2
 1353 0355 23        		.byte	0x23
 1354 0356 01        		.uleb128 0x1
 1355 0357 00        		.byte	0
 1356 0358 18        		.uleb128 0x18
 1357 0359 02        		.byte	0x2
 1358 035a 02        		.byte	0x2
 1359 035b B2        		.byte	0xb2
 1360 035c 6F03 0000 		.long	0x36f
 1361 0360 07        		.uleb128 0x7
 1362 0361 0000 0000 		.long	.LASF52
 1363 0365 02        		.byte	0x2
 1364 0366 B6        		.byte	0xb6
 1365 0367 3303 0000 		.long	0x333
 1366 036b 02        		.byte	0x2
 1367 036c 23        		.byte	0x23
 1368 036d 00        		.uleb128 0
 1369 036e 00        		.byte	0
 1370 036f 02        		.uleb128 0x2
 1371 0370 0000 0000 		.long	.LASF53
 1372 0374 02        		.byte	0x2
 1373 0375 B7        		.byte	0xb7
 1374 0376 5803 0000 		.long	0x358
 1375 037a 18        		.uleb128 0x18
 1376 037b 41        		.byte	0x41
 1377 037c 02        		.byte	0x2
 1378 037d D5        		.byte	0xd5
 1379 037e 9F03 0000 		.long	0x39f
 1380 0382 07        		.uleb128 0x7
 1381 0383 0000 0000 		.long	.LASF27
 1382 0387 02        		.byte	0x2
 1383 0388 D6        		.byte	0xd6
 1384 0389 9F03 0000 		.long	0x39f
 1385 038d 02        		.byte	0x2
 1386 038e 23        		.byte	0x23
 1387 038f 00        		.uleb128 0
 1388 0390 07        		.uleb128 0x7
 1389 0391 0000 0000 		.long	.LASF54
 1390 0395 02        		.byte	0x2
 1391 0396 D7        		.byte	0xd7
 1392 0397 4600 0000 		.long	0x46
 1393 039b 02        		.byte	0x2
 1394 039c 23        		.byte	0x23
 1395 039d 40        		.uleb128 0x40
 1396 039e 00        		.byte	0
 1397 039f 13        		.uleb128 0x13
 1398 03a0 2001 0000 		.long	0x120
 1399 03a4 AF03 0000 		.long	0x3af
 1400 03a8 14        		.uleb128 0x14
 1401 03a9 9E01 0000 		.long	0x19e
 1402 03ad 3F        		.byte	0x3f
 1403 03ae 00        		.byte	0
 1404 03af 02        		.uleb128 0x2
 1405 03b0 0000 0000 		.long	.LASF55
 1406 03b4 02        		.byte	0x2
 1407 03b5 D8        		.byte	0xd8
 1408 03b6 7A03 0000 		.long	0x37a
 1409 03ba 19        		.uleb128 0x19
 1410 03bb 0000 0000 		.long	.LASF100
 1411 03bf 04        		.byte	0x4
 1412 03c0 C401      		.word	0x1c4
 1413 03c2 01        		.byte	0x1
 1414 03c3 03        		.byte	0x3
 1415 03c4 D503 0000 		.long	0x3d5
 1416 03c8 1A        		.uleb128 0x1a
 1417 03c9 0000 0000 		.long	.LASF101
 1418 03cd 04        		.byte	0x4
 1419 03ce C401      		.word	0x1c4
 1420 03d0 D503 0000 		.long	0x3d5
 1421 03d4 00        		.byte	0
 1422 03d5 1B        		.uleb128 0x1b
 1423 03d6 3B00 0000 		.long	0x3b
 1424 03da 1C        		.uleb128 0x1c
 1425 03db 01        		.byte	0x1
 1426 03dc 0000 0000 		.long	.LASF58
 1427 03e0 01        		.byte	0x1
 1428 03e1 92        		.byte	0x92
 1429 03e2 01        		.byte	0x1
 1430 03e3 DC02 0000 		.long	0x2dc
 1431 03e7 0000 0000 		.long	.LFB21
 1432 03eb 0000 0000 		.long	.LFE21
 1433 03ef 0000 0000 		.long	.LLST0
 1434 03f3 01        		.byte	0x1
 1435 03f4 7004 0000 		.long	0x470
 1436 03f8 1D        		.uleb128 0x1d
 1437 03f9 0000 0000 		.long	.LASF56
 1438 03fd 01        		.byte	0x1
 1439 03fe 92        		.byte	0x92
 1440 03ff 7004 0000 		.long	0x470
 1441 0403 0000 0000 		.long	.LLST1
 1442 0407 1E        		.uleb128 0x1e
 1443 0408 696E 00   		.string	"in"
 1444 040b 01        		.byte	0x1
 1445 040c 92        		.byte	0x92
 1446 040d DC02 0000 		.long	0x2dc
 1447 0411 0000 0000 		.long	.LLST2
 1448 0415 1F        		.uleb128 0x1f
 1449 0416 6130 00   		.string	"a0"
 1450 0419 01        		.byte	0x1
 1451 041a 94        		.byte	0x94
 1452 041b 7604 0000 		.long	0x476
 1453 041f 05        		.byte	0x5
 1454 0420 1F        		.uleb128 0x1f
 1455 0421 6131 00   		.string	"a1"
 1456 0424 01        		.byte	0x1
 1457 0425 95        		.byte	0x95
 1458 0426 7604 0000 		.long	0x476
 1459 042a 0A        		.byte	0xa
 1460 042b 1F        		.uleb128 0x1f
 1461 042c 6132 00   		.string	"a2"
 1462 042f 01        		.byte	0x1
 1463 0430 96        		.byte	0x96
 1464 0431 7604 0000 		.long	0x476
 1465 0435 05        		.byte	0x5
 1466 0436 20        		.uleb128 0x20
 1467 0437 0000 0000 		.long	.LASF57
 1468 043b 01        		.byte	0x1
 1469 043c 97        		.byte	0x97
 1470 043d 7604 0000 		.long	0x476
 1471 0441 0001      		.word	0x100
 1472 0443 21        		.uleb128 0x21
 1473 0444 5F62 3100 		.string	"_b1"
 1474 0448 01        		.byte	0x1
 1475 0449 98        		.byte	0x98
 1476 044a 7604 0000 		.long	0x476
 1477 044e 9E01      		.word	0x19e
 1478 0450 22        		.uleb128 0x22
 1479 0451 5F62 3200 		.string	"_b2"
 1480 0455 01        		.byte	0x1
 1481 0456 99        		.byte	0x99
 1482 0457 7604 0000 		.long	0x476
 1483 045b CB7E      		.sleb128 -181
 1484 045d 23        		.uleb128 0x23
 1485 045e 7265 7300 		.string	"res"
 1486 0462 01        		.byte	0x1
 1487 0463 9B        		.byte	0x9b
 1488 0464 DC02 0000 		.long	0x2dc
 1489 0468 06        		.byte	0x6
 1490 0469 68        		.byte	0x68
 1491 046a 93        		.byte	0x93
 1492 046b 01        		.uleb128 0x1
 1493 046c 69        		.byte	0x69
 1494 046d 93        		.byte	0x93
 1495 046e 01        		.uleb128 0x1
 1496 046f 00        		.byte	0
 1497 0470 0A        		.uleb128 0xa
 1498 0471 02        		.byte	0x2
 1499 0472 2803 0000 		.long	0x328
 1500 0476 1B        		.uleb128 0x1b
 1501 0477 DC02 0000 		.long	0x2dc
 1502 047b 24        		.uleb128 0x24
 1503 047c 01        		.byte	0x1
 1504 047d 0000 0000 		.long	.LASF102
 1505 0481 02        		.byte	0x2
 1506 0482 86        		.byte	0x86
 1507 0483 01        		.byte	0x1
 1508 0484 0000 0000 		.long	.LFB22
 1509 0488 0000 0000 		.long	.LFE22
 1510 048c 0000 0000 		.long	.LLST3
 1511 0490 01        		.byte	0x1
 1512 0491 25        		.uleb128 0x25
 1513 0492 01        		.byte	0x1
 1514 0493 0000 0000 		.long	.LASF59
 1515 0497 02        		.byte	0x2
 1516 0498 BD        		.byte	0xbd
 1517 0499 01        		.byte	0x1
 1518 049a 4600 0000 		.long	0x46
 1519 049e 0000 0000 		.long	.LFB23
 1520 04a2 0000 0000 		.long	.LFE23
 1521 04a6 03        		.byte	0x3
 1522 04a7 92        		.byte	0x92
 1523 04a8 20        		.uleb128 0x20
 1524 04a9 02        		.sleb128 2
 1525 04aa 01        		.byte	0x1
 1526 04ab CD04 0000 		.long	0x4cd
 1527 04af 1D        		.uleb128 0x1d
 1528 04b0 0000 0000 		.long	.LASF60
 1529 04b4 02        		.byte	0x2
 1530 04b5 BD        		.byte	0xbd
 1531 04b6 CD04 0000 		.long	0x4cd
 1532 04ba 0000 0000 		.long	.LLST4
 1533 04be 26        		.uleb128 0x26
 1534 04bf 7271 00   		.string	"rq"
 1535 04c2 02        		.byte	0x2
 1536 04c3 BF        		.byte	0xbf
 1537 04c4 D304 0000 		.long	0x4d3
 1538 04c8 0000 0000 		.long	.LLST5
 1539 04cc 00        		.byte	0
 1540 04cd 0A        		.uleb128 0xa
 1541 04ce 02        		.byte	0x2
 1542 04cf 4600 0000 		.long	0x46
 1543 04d3 0A        		.uleb128 0xa
 1544 04d4 02        		.byte	0x2
 1545 04d5 8D02 0000 		.long	0x28d
 1546 04d9 27        		.uleb128 0x27
 1547 04da 0000 0000 		.long	.LASF103
 1548 04de 03        		.byte	0x3
 1549 04df 7D        		.byte	0x7d
 1550 04e0 01        		.byte	0x1
 1551 04e1 03        		.byte	0x3
 1552 04e2 28        		.uleb128 0x28
 1553 04e3 0000 0000 		.long	.LASF104
 1554 04e7 05        		.byte	0x5
 1555 04e8 15        		.byte	0x15
 1556 04e9 01        		.byte	0x1
 1557 04ea 3B00 0000 		.long	0x3b
 1558 04ee 01        		.byte	0x1
 1559 04ef FF04 0000 		.long	0x4ff
 1560 04f3 29        		.uleb128 0x29
 1561 04f4 0000 0000 		.long	.LASF75
 1562 04f8 05        		.byte	0x5
 1563 04f9 16        		.byte	0x16
 1564 04fa 3B00 0000 		.long	0x3b
 1565 04fe 00        		.byte	0
 1566 04ff 2A        		.uleb128 0x2a
 1567 0500 01        		.byte	0x1
 1568 0501 0000 0000 		.long	.LASF105
 1569 0505 02        		.byte	0x2
 1570 0506 FA        		.byte	0xfa
 1571 0507 01        		.byte	0x1
 1572 0508 5800 0000 		.long	0x58
 1573 050c 01        		.byte	0x1
 1574 050d 0000 0000 		.long	.LFB24
 1575 0511 0000 0000 		.long	.LFE24
 1576 0515 0000 0000 		.long	.LLST6
 1577 0519 01        		.byte	0x1
 1578 051a 6D08 0000 		.long	0x86d
 1579 051e 2B        		.uleb128 0x2b
 1580 051f 0000 0000 		.long	.LASF61
 1581 0523 02        		.byte	0x2
 1582 0524 FC        		.byte	0xfc
 1583 0525 4600 0000 		.long	0x46
 1584 0529 0000 0000 		.long	.LLST7
 1585 052d 2B        		.uleb128 0x2b
 1586 052e 0000 0000 		.long	.LASF51
 1587 0532 02        		.byte	0x2
 1588 0533 FD        		.byte	0xfd
 1589 0534 4600 0000 		.long	0x46
 1590 0538 0000 0000 		.long	.LLST8
 1591 053c 2B        		.uleb128 0x2b
 1592 053d 0000 0000 		.long	.LASF62
 1593 0541 02        		.byte	0x2
 1594 0542 FE        		.byte	0xfe
 1595 0543 4600 0000 		.long	0x46
 1596 0547 0000 0000 		.long	.LLST9
 1597 054b 2C        		.uleb128 0x2c
 1598 054c 0000 0000 		.long	.LASF63
 1599 0550 02        		.byte	0x2
 1600 0551 FF        		.byte	0xff
 1601 0552 2803 0000 		.long	0x328
 1602 0556 02        		.byte	0x2
 1603 0557 8C        		.byte	0x8c
 1604 0558 0B        		.sleb128 11
 1605 0559 2D        		.uleb128 0x2d
 1606 055a 0000 0000 		.long	.LASF64
 1607 055e 02        		.byte	0x2
 1608 055f 0001      		.word	0x100
 1609 0561 DC02 0000 		.long	0x2dc
 1610 0565 0000 0000 		.long	.LLST10
 1611 0569 2D        		.uleb128 0x2d
 1612 056a 0000 0000 		.long	.LASF65
 1613 056e 02        		.byte	0x2
 1614 056f 0101      		.word	0x101
 1615 0571 3B00 0000 		.long	0x3b
 1616 0575 0000 0000 		.long	.LLST11
 1617 0579 2E        		.uleb128 0x2e
 1618 057a 0000 0000 		.long	.LASF66
 1619 057e 02        		.byte	0x2
 1620 057f 0201      		.word	0x102
 1621 0581 5F00 0000 		.long	0x5f
 1622 0585 05        		.byte	0x5
 1623 0586 03        		.byte	0x3
 1624 0587 0000 0000 		.long	led_sensor_delta_time.2376
 1625 058b 2D        		.uleb128 0x2d
 1626 058c 0000 0000 		.long	.LASF67
 1627 0590 02        		.byte	0x2
 1628 0591 0301      		.word	0x103
 1629 0593 5F00 0000 		.long	0x5f
 1630 0597 0000 0000 		.long	.LLST12
 1631 059b 2D        		.uleb128 0x2d
 1632 059c 0000 0000 		.long	.LASF68
 1633 05a0 02        		.byte	0x2
 1634 05a1 0401      		.word	0x104
 1635 05a3 3B00 0000 		.long	0x3b
 1636 05a7 0000 0000 		.long	.LLST13
 1637 05ab 2E        		.uleb128 0x2e
 1638 05ac 0000 0000 		.long	.LASF69
 1639 05b0 02        		.byte	0x2
 1640 05b1 0501      		.word	0x105
 1641 05b3 6D08 0000 		.long	0x86d
 1642 05b7 02        		.byte	0x2
 1643 05b8 8C        		.byte	0x8c
 1644 05b9 01        		.sleb128 1
 1645 05ba 2D        		.uleb128 0x2d
 1646 05bb 0000 0000 		.long	.LASF70
 1647 05bf 02        		.byte	0x2
 1648 05c0 0601      		.word	0x106
 1649 05c2 3B00 0000 		.long	0x3b
 1650 05c6 0000 0000 		.long	.LLST14
 1651 05ca 2E        		.uleb128 0x2e
 1652 05cb 0000 0000 		.long	.LASF71
 1653 05cf 02        		.byte	0x2
 1654 05d0 0701      		.word	0x107
 1655 05d2 3B00 0000 		.long	0x3b
 1656 05d6 05        		.byte	0x5
 1657 05d7 03        		.byte	0x3
 1658 05d8 0000 0000 		.long	led_sensor_nsample.2381
 1659 05dc 2E        		.uleb128 0x2e
 1660 05dd 0000 0000 		.long	.LASF72
 1661 05e1 02        		.byte	0x2
 1662 05e2 0801      		.word	0x108
 1663 05e4 7D08 0000 		.long	0x87d
 1664 05e8 05        		.byte	0x5
 1665 05e9 03        		.byte	0x3
 1666 05ea 0000 0000 		.long	led_sensor_weigthed_sum_data.2382
 1667 05ee 2D        		.uleb128 0x2d
 1668 05ef 0000 0000 		.long	.LASF73
 1669 05f3 02        		.byte	0x2
 1670 05f4 0901      		.word	0x109
 1671 05f6 5F00 0000 		.long	0x5f
 1672 05fa 0000 0000 		.long	.LLST15
 1673 05fe 2D        		.uleb128 0x2d
 1674 05ff 0000 0000 		.long	.LASF74
 1675 0603 02        		.byte	0x2
 1676 0604 0A01      		.word	0x10a
 1677 0606 3B00 0000 		.long	0x3b
 1678 060a 0000 0000 		.long	.LLST16
 1679 060e 2F        		.uleb128 0x2f
 1680 060f 0000 0000 		.long	.LASF76
 1681 0613 02        		.byte	0x2
 1682 0614 0F01      		.word	0x10f
 1683 0616 AF03 0000 		.long	0x3af
 1684 061a 30        		.uleb128 0x30
 1685 061b 6900      		.string	"i"
 1686 061d 02        		.byte	0x2
 1687 061e 1501      		.word	0x115
 1688 0620 4600 0000 		.long	0x46
 1689 0624 31        		.uleb128 0x31
 1690 0625 6A00      		.string	"j"
 1691 0627 02        		.byte	0x2
 1692 0628 1501      		.word	0x115
 1693 062a 4600 0000 		.long	0x46
 1694 062e 7F        		.sleb128 -1
 1695 062f 32        		.uleb128 0x32
 1696 0630 D904 0000 		.long	0x4d9
 1697 0634 0000 0000 		.long	.LBB18
 1698 0638 0000 0000 		.long	.LBE18
 1699 063c 02        		.byte	0x2
 1700 063d 0C01      		.word	0x10c
 1701 063f 33        		.uleb128 0x33
 1702 0640 BA03 0000 		.long	0x3ba
 1703 0644 0000 0000 		.long	.LBB20
 1704 0648 0000 0000 		.long	.LBE20
 1705 064c 02        		.byte	0x2
 1706 064d 1E01      		.word	0x11e
 1707 064f 5D06 0000 		.long	0x65d
 1708 0653 34        		.uleb128 0x34
 1709 0654 C803 0000 		.long	0x3c8
 1710 0658 0000 0000 		.long	.LLST17
 1711 065c 00        		.byte	0
 1712 065d 35        		.uleb128 0x35
 1713 065e 0000 0000 		.long	.LBB22
 1714 0662 0000 0000 		.long	.LBE22
 1715 0666 7906 0000 		.long	0x679
 1716 066a 2E        		.uleb128 0x2e
 1717 066b 0000 0000 		.long	.LASF77
 1718 066f 02        		.byte	0x2
 1719 0670 3601      		.word	0x136
 1720 0672 3B00 0000 		.long	0x3b
 1721 0676 01        		.byte	0x1
 1722 0677 59        		.byte	0x59
 1723 0678 00        		.byte	0
 1724 0679 33        		.uleb128 0x33
 1725 067a E204 0000 		.long	0x4e2
 1726 067e 0000 0000 		.long	.LBB23
 1727 0682 0000 0000 		.long	.LBE23
 1728 0686 02        		.byte	0x2
 1729 0687 8B01      		.word	0x18b
 1730 0689 A306 0000 		.long	0x6a3
 1731 068d 36        		.uleb128 0x36
 1732 068e 0000 0000 		.long	.LBB24
 1733 0692 0000 0000 		.long	.LBE24
 1734 0696 37        		.uleb128 0x37
 1735 0697 F304 0000 		.long	0x4f3
 1736 069b 05        		.byte	0x5
 1737 069c 03        		.byte	0x3
 1738 069d 0000 0000 		.long	lfsr.2294
 1739 06a1 00        		.byte	0
 1740 06a2 00        		.byte	0
 1741 06a3 35        		.uleb128 0x35
 1742 06a4 0000 0000 		.long	.LBB25
 1743 06a8 0000 0000 		.long	.LBE25
 1744 06ac D606 0000 		.long	0x6d6
 1745 06b0 38        		.uleb128 0x38
 1746 06b1 7661 6C00 		.string	"val"
 1747 06b5 02        		.byte	0x2
 1748 06b6 CF01      		.word	0x1cf
 1749 06b8 4D00 0000 		.long	0x4d
 1750 06bc 0000 0000 		.long	.LLST18
 1751 06c0 39        		.uleb128 0x39
 1752 06c1 0000 0000 		.long	.LVL54
 1753 06c5 DA03 0000 		.long	0x3da
 1754 06c9 3A        		.uleb128 0x3a
 1755 06ca 06        		.byte	0x6
 1756 06cb 68        		.byte	0x68
 1757 06cc 93        		.byte	0x93
 1758 06cd 01        		.uleb128 0x1
 1759 06ce 69        		.byte	0x69
 1760 06cf 93        		.byte	0x93
 1761 06d0 01        		.uleb128 0x1
 1762 06d1 02        		.byte	0x2
 1763 06d2 72        		.byte	0x72
 1764 06d3 00        		.sleb128 0
 1765 06d4 00        		.byte	0
 1766 06d5 00        		.byte	0
 1767 06d6 35        		.uleb128 0x35
 1768 06d7 0000 0000 		.long	.LBB26
 1769 06db 0000 0000 		.long	.LBE26
 1770 06df F906 0000 		.long	0x6f9
 1771 06e3 3B        		.uleb128 0x3b
 1772 06e4 0000 0000 		.long	.LASF78
 1773 06e8 02        		.byte	0x2
 1774 06e9 DF01      		.word	0x1df
 1775 06eb 8F08 0000 		.long	0x88f
 1776 06ef 00        		.byte	0
 1777 06f0 3C        		.uleb128 0x3c
 1778 06f1 0000 0000 		.long	.LVL59
 1779 06f5 02        		.byte	0x2
 1780 06f6 76        		.byte	0x76
 1781 06f7 00        		.sleb128 0
 1782 06f8 00        		.byte	0
 1783 06f9 3D        		.uleb128 0x3d
 1784 06fa 0000 0000 		.long	.LVL14
 1785 06fe 4B09 0000 		.long	0x94b
 1786 0702 3D        		.uleb128 0x3d
 1787 0703 0000 0000 		.long	.LVL17
 1788 0707 5909 0000 		.long	0x959
 1789 070b 3E        		.uleb128 0x3e
 1790 070c 0000 0000 		.long	.LVL18
 1791 0710 6609 0000 		.long	0x966
 1792 0714 2A07 0000 		.long	0x72a
 1793 0718 3A        		.uleb128 0x3a
 1794 0719 01        		.byte	0x1
 1795 071a 68        		.byte	0x68
 1796 071b 01        		.byte	0x1
 1797 071c 30        		.byte	0x30
 1798 071d 3A        		.uleb128 0x3a
 1799 071e 06        		.byte	0x6
 1800 071f 66        		.byte	0x66
 1801 0720 93        		.byte	0x93
 1802 0721 01        		.uleb128 0x1
 1803 0722 67        		.byte	0x67
 1804 0723 93        		.byte	0x93
 1805 0724 01        		.uleb128 0x1
 1806 0725 03        		.byte	0x3
 1807 0726 0A        		.byte	0xa
 1808 0727 D007      		.word	0x7d0
 1809 0729 00        		.byte	0
 1810 072a 3E        		.uleb128 0x3e
 1811 072b 0000 0000 		.long	.LVL19
 1812 072f 6609 0000 		.long	0x966
 1813 0733 4707 0000 		.long	0x747
 1814 0737 3A        		.uleb128 0x3a
 1815 0738 01        		.byte	0x1
 1816 0739 68        		.byte	0x68
 1817 073a 01        		.byte	0x1
 1818 073b 31        		.byte	0x31
 1819 073c 3A        		.uleb128 0x3a
 1820 073d 06        		.byte	0x6
 1821 073e 66        		.byte	0x66
 1822 073f 93        		.byte	0x93
 1823 0740 01        		.uleb128 0x1
 1824 0741 67        		.byte	0x67
 1825 0742 93        		.byte	0x93
 1826 0743 01        		.uleb128 0x1
 1827 0744 01        		.byte	0x1
 1828 0745 32        		.byte	0x32
 1829 0746 00        		.byte	0
 1830 0747 3E        		.uleb128 0x3e
 1831 0748 0000 0000 		.long	.LVL20
 1832 074c 6609 0000 		.long	0x966
 1833 0750 6607 0000 		.long	0x766
 1834 0754 3A        		.uleb128 0x3a
 1835 0755 01        		.byte	0x1
 1836 0756 68        		.byte	0x68
 1837 0757 01        		.byte	0x1
 1838 0758 32        		.byte	0x32
 1839 0759 3A        		.uleb128 0x3a
 1840 075a 06        		.byte	0x6
 1841 075b 66        		.byte	0x66
 1842 075c 93        		.byte	0x93
 1843 075d 01        		.uleb128 0x1
 1844 075e 67        		.byte	0x67
 1845 075f 93        		.byte	0x93
 1846 0760 01        		.uleb128 0x1
 1847 0761 03        		.byte	0x3
 1848 0762 0A        		.byte	0xa
 1849 0763 D007      		.word	0x7d0
 1850 0765 00        		.byte	0
 1851 0766 3E        		.uleb128 0x3e
 1852 0767 0000 0000 		.long	.LVL21
 1853 076b DA03 0000 		.long	0x3da
 1854 076f 8B07 0000 		.long	0x78b
 1855 0773 3A        		.uleb128 0x3a
 1856 0774 06        		.byte	0x6
 1857 0775 68        		.byte	0x68
 1858 0776 93        		.byte	0x93
 1859 0777 01        		.uleb128 0x1
 1860 0778 69        		.byte	0x69
 1861 0779 93        		.byte	0x93
 1862 077a 01        		.uleb128 0x1
 1863 077b 02        		.byte	0x2
 1864 077c 72        		.byte	0x72
 1865 077d 00        		.sleb128 0
 1866 077e 3A        		.uleb128 0x3a
 1867 077f 06        		.byte	0x6
 1868 0780 66        		.byte	0x66
 1869 0781 93        		.byte	0x93
 1870 0782 01        		.uleb128 0x1
 1871 0783 67        		.byte	0x67
 1872 0784 93        		.byte	0x93
 1873 0785 01        		.uleb128 0x1
 1874 0786 03        		.byte	0x3
 1875 0787 0A        		.byte	0xa
 1876 0788 E803      		.word	0x3e8
 1877 078a 00        		.byte	0
 1878 078b 3E        		.uleb128 0x3e
 1879 078c 0000 0000 		.long	.LVL27
 1880 0790 7309 0000 		.long	0x973
 1881 0794 A507 0000 		.long	0x7a5
 1882 0798 3A        		.uleb128 0x3a
 1883 0799 06        		.byte	0x6
 1884 079a 68        		.byte	0x68
 1885 079b 93        		.byte	0x93
 1886 079c 01        		.uleb128 0x1
 1887 079d 69        		.byte	0x69
 1888 079e 93        		.byte	0x93
 1889 079f 01        		.uleb128 0x1
 1890 07a0 03        		.byte	0x3
 1891 07a1 0A        		.byte	0xa
 1892 07a2 0002      		.word	0x200
 1893 07a4 00        		.byte	0
 1894 07a5 3D        		.uleb128 0x3d
 1895 07a6 0000 0000 		.long	.LVL28
 1896 07aa 8009 0000 		.long	0x980
 1897 07ae 3E        		.uleb128 0x3e
 1898 07af 0000 0000 		.long	.LVL33
 1899 07b3 8D09 0000 		.long	0x98d
 1900 07b7 CF07 0000 		.long	0x7cf
 1901 07bb 3A        		.uleb128 0x3a
 1902 07bc 06        		.byte	0x6
 1903 07bd 68        		.byte	0x68
 1904 07be 93        		.byte	0x93
 1905 07bf 01        		.uleb128 0x1
 1906 07c0 69        		.byte	0x69
 1907 07c1 93        		.byte	0x93
 1908 07c2 01        		.uleb128 0x1
 1909 07c3 05        		.byte	0x5
 1910 07c4 03        		.byte	0x3
 1911 07c5 0000 0000 		.long	reportBuffer
 1912 07c9 3A        		.uleb128 0x3a
 1913 07ca 01        		.byte	0x1
 1914 07cb 66        		.byte	0x66
 1915 07cc 01        		.byte	0x1
 1916 07cd 32        		.byte	0x32
 1917 07ce 00        		.byte	0
 1918 07cf 3E        		.uleb128 0x3e
 1919 07d0 0000 0000 		.long	.LVL34
 1920 07d4 9A09 0000 		.long	0x99a
 1921 07d8 E207 0000 		.long	0x7e2
 1922 07dc 3A        		.uleb128 0x3a
 1923 07dd 01        		.byte	0x1
 1924 07de 68        		.byte	0x68
 1925 07df 01        		.byte	0x1
 1926 07e0 30        		.byte	0x30
 1927 07e1 00        		.byte	0
 1928 07e2 3E        		.uleb128 0x3e
 1929 07e3 0000 0000 		.long	.LVL35
 1930 07e7 6609 0000 		.long	0x966
 1931 07eb 0108 0000 		.long	0x801
 1932 07ef 3A        		.uleb128 0x3a
 1933 07f0 01        		.byte	0x1
 1934 07f1 68        		.byte	0x68
 1935 07f2 01        		.byte	0x1
 1936 07f3 30        		.byte	0x30
 1937 07f4 3A        		.uleb128 0x3a
 1938 07f5 06        		.byte	0x6
 1939 07f6 66        		.byte	0x66
 1940 07f7 93        		.byte	0x93
 1941 07f8 01        		.uleb128 0x1
 1942 07f9 67        		.byte	0x67
 1943 07fa 93        		.byte	0x93
 1944 07fb 01        		.uleb128 0x1
 1945 07fc 03        		.byte	0x3
 1946 07fd 0A        		.byte	0xa
 1947 07fe F401      		.word	0x1f4
 1948 0800 00        		.byte	0
 1949 0801 3E        		.uleb128 0x3e
 1950 0802 0000 0000 		.long	.LVL36
 1951 0806 9A09 0000 		.long	0x99a
 1952 080a 1408 0000 		.long	0x814
 1953 080e 3A        		.uleb128 0x3a
 1954 080f 01        		.byte	0x1
 1955 0810 68        		.byte	0x68
 1956 0811 01        		.byte	0x1
 1957 0812 32        		.byte	0x32
 1958 0813 00        		.byte	0
 1959 0814 3E        		.uleb128 0x3e
 1960 0815 0000 0000 		.long	.LVL37
 1961 0819 6609 0000 		.long	0x966
 1962 081d 3208 0000 		.long	0x832
 1963 0821 3A        		.uleb128 0x3a
 1964 0822 01        		.byte	0x1
 1965 0823 68        		.byte	0x68
 1966 0824 01        		.byte	0x1
 1967 0825 32        		.byte	0x32
 1968 0826 3A        		.uleb128 0x3a
 1969 0827 06        		.byte	0x6
 1970 0828 66        		.byte	0x66
 1971 0829 93        		.byte	0x93
 1972 082a 01        		.uleb128 0x1
 1973 082b 67        		.byte	0x67
 1974 082c 93        		.byte	0x93
 1975 082d 01        		.uleb128 0x1
 1976 082e 02        		.byte	0x2
 1977 082f 08        		.byte	0x8
 1978 0830 FA        		.byte	0xfa
 1979 0831 00        		.byte	0
 1980 0832 3E        		.uleb128 0x3e
 1981 0833 0000 0000 		.long	.LVL38
 1982 0837 9A09 0000 		.long	0x99a
 1983 083b 4508 0000 		.long	0x845
 1984 083f 3A        		.uleb128 0x3a
 1985 0840 01        		.byte	0x1
 1986 0841 68        		.byte	0x68
 1987 0842 01        		.byte	0x1
 1988 0843 31        		.byte	0x31
 1989 0844 00        		.byte	0
 1990 0845 3E        		.uleb128 0x3e
 1991 0846 0000 0000 		.long	.LVL40
 1992 084a 6609 0000 		.long	0x966
 1993 084e 6308 0000 		.long	0x863
 1994 0852 3A        		.uleb128 0x3a
 1995 0853 01        		.byte	0x1
 1996 0854 68        		.byte	0x68
 1997 0855 01        		.byte	0x1
 1998 0856 31        		.byte	0x31
 1999 0857 3A        		.uleb128 0x3a
 2000 0858 06        		.byte	0x6
 2001 0859 66        		.byte	0x66
 2002 085a 93        		.byte	0x93
 2003 085b 01        		.uleb128 0x1
 2004 085c 67        		.byte	0x67
 2005 085d 93        		.byte	0x93
 2006 085e 01        		.uleb128 0x1
 2007 085f 02        		.byte	0x2
 2008 0860 08        		.byte	0x8
 2009 0861 64        		.byte	0x64
 2010 0862 00        		.byte	0
 2011 0863 3D        		.uleb128 0x3d
 2012 0864 0000 0000 		.long	.LVL47
 2013 0868 A709 0000 		.long	0x9a7
 2014 086c 00        		.byte	0
 2015 086d 13        		.uleb128 0x13
 2016 086e 5F00 0000 		.long	0x5f
 2017 0872 7D08 0000 		.long	0x87d
 2018 0876 14        		.uleb128 0x14
 2019 0877 9E01 0000 		.long	0x19e
 2020 087b 04        		.byte	0x4
 2021 087c 00        		.byte	0
 2022 087d 13        		.uleb128 0x13
 2023 087e 5F00 0000 		.long	0x5f
 2024 0882 8D08 0000 		.long	0x88d
 2025 0886 14        		.uleb128 0x14
 2026 0887 9E01 0000 		.long	0x19e
 2027 088b 13        		.byte	0x13
 2028 088c 00        		.byte	0
 2029 088d 3F        		.uleb128 0x3f
 2030 088e 01        		.byte	0x1
 2031 088f 0A        		.uleb128 0xa
 2032 0890 02        		.byte	0x2
 2033 0891 8D08 0000 		.long	0x88d
 2034 0895 2C        		.uleb128 0x2c
 2035 0896 0000 0000 		.long	.LASF79
 2036 089a 02        		.byte	0x2
 2037 089b 81        		.byte	0x81
 2038 089c A608 0000 		.long	0x8a6
 2039 08a0 05        		.byte	0x5
 2040 08a1 03        		.byte	0x3
 2041 08a2 0000 0000 		.long	capture_diff
 2042 08a6 12        		.uleb128 0x12
 2043 08a7 5F00 0000 		.long	0x5f
 2044 08ab 2C        		.uleb128 0x2c
 2045 08ac 0000 0000 		.long	.LASF80
 2046 08b0 02        		.byte	0x2
 2047 08b1 82        		.byte	0x82
 2048 08b2 A608 0000 		.long	0x8a6
 2049 08b6 05        		.byte	0x5
 2050 08b7 03        		.byte	0x3
 2051 08b8 0000 0000 		.long	capture_diff_max
 2052 08bc 2C        		.uleb128 0x2c
 2053 08bd 0000 0000 		.long	.LASF81
 2054 08c1 02        		.byte	0x2
 2055 08c2 83        		.byte	0x83
 2056 08c3 A608 0000 		.long	0x8a6
 2057 08c7 05        		.byte	0x5
 2058 08c8 03        		.byte	0x3
 2059 08c9 0000 0000 		.long	captured
 2060 08cd 2C        		.uleb128 0x2c
 2061 08ce 0000 0000 		.long	.LASF82
 2062 08d2 02        		.byte	0x2
 2063 08d3 BA        		.byte	0xba
 2064 08d4 6F03 0000 		.long	0x36f
 2065 08d8 05        		.byte	0x5
 2066 08d9 03        		.byte	0x3
 2067 08da 0000 0000 		.long	reportBuffer
 2068 08de 13        		.uleb128 0x13
 2069 08df 3C01 0000 		.long	0x13c
 2070 08e3 E908 0000 		.long	0x8e9
 2071 08e7 40        		.uleb128 0x40
 2072 08e8 00        		.byte	0
 2073 08e9 41        		.uleb128 0x41
 2074 08ea 0000 0000 		.long	.LASF83
 2075 08ee 07        		.byte	0x7
 2076 08ef 9701      		.word	0x197
 2077 08f1 DE08 0000 		.long	0x8de
 2078 08f5 01        		.byte	0x1
 2079 08f6 01        		.byte	0x1
 2080 08f7 13        		.uleb128 0x13
 2081 08f8 0709 0000 		.long	0x907
 2082 08fc 0709 0000 		.long	0x907
 2083 0900 14        		.uleb128 0x14
 2084 0901 9E01 0000 		.long	0x19e
 2085 0905 4F        		.byte	0x4f
 2086 0906 00        		.byte	0
 2087 0907 1B        		.uleb128 0x1b
 2088 0908 2001 0000 		.long	0x120
 2089 090c 42        		.uleb128 0x42
 2090 090d 0000 0000 		.long	.LASF84
 2091 0911 0C        		.byte	0xc
 2092 0912 03        		.byte	0x3
 2093 0913 1E09 0000 		.long	0x91e
 2094 0917 01        		.byte	0x1
 2095 0918 05        		.byte	0x5
 2096 0919 03        		.byte	0x3
 2097 091a 0000 0000 		.long	usbDescriptorHidReport
 2098 091e 1B        		.uleb128 0x1b
 2099 091f F708 0000 		.long	0x8f7
 2100 0923 41        		.uleb128 0x41
 2101 0924 0000 0000 		.long	.LASF85
 2102 0928 08        		.byte	0x8
 2103 0929 8C02      		.word	0x28c
 2104 092b E601 0000 		.long	0x1e6
 2105 092f 01        		.byte	0x1
 2106 0930 01        		.byte	0x1
 2107 0931 43        		.uleb128 0x43
 2108 0932 0000 0000 		.long	.LASF86
 2109 0936 0D        		.byte	0xd
 2110 0937 0D        		.byte	0xd
 2111 0938 6001 0000 		.long	0x160
 2112 093c 01        		.byte	0x1
 2113 093d 01        		.byte	0x1
 2114 093e 43        		.uleb128 0x43
 2115 093f 0000 0000 		.long	.LASF87
 2116 0943 0D        		.byte	0xd
 2117 0944 0E        		.byte	0xe
 2118 0945 6001 0000 		.long	0x160
 2119 0949 01        		.byte	0x1
 2120 094a 01        		.byte	0x1
 2121 094b 44        		.uleb128 0x44
 2122 094c 01        		.byte	0x1
 2123 094d 01        		.byte	0x1
 2124 094e 0000 0000 		.long	.LASF88
 2125 0952 0000 0000 		.long	.LASF88
 2126 0956 07        		.byte	0x7
 2127 0957 9102      		.word	0x291
 2128 0959 45        		.uleb128 0x45
 2129 095a 01        		.byte	0x1
 2130 095b 01        		.byte	0x1
 2131 095c 0000 0000 		.long	.LASF89
 2132 0960 0000 0000 		.long	.LASF89
 2133 0964 08        		.byte	0x8
 2134 0965 A8        		.byte	0xa8
 2135 0966 45        		.uleb128 0x45
 2136 0967 01        		.byte	0x1
 2137 0968 01        		.byte	0x1
 2138 0969 0000 0000 		.long	.LASF90
 2139 096d 0000 0000 		.long	.LASF90
 2140 0971 0E        		.byte	0xe
 2141 0972 20        		.byte	0x20
 2142 0973 45        		.uleb128 0x45
 2143 0974 01        		.byte	0x1
 2144 0975 01        		.byte	0x1
 2145 0976 0000 0000 		.long	.LASF91
 2146 097a 0000 0000 		.long	.LASF91
 2147 097e 0E        		.byte	0xe
 2148 097f 19        		.byte	0x19
 2149 0980 45        		.uleb128 0x45
 2150 0981 01        		.byte	0x1
 2151 0982 01        		.byte	0x1
 2152 0983 0000 0000 		.long	.LASF92
 2153 0987 0000 0000 		.long	.LASF92
 2154 098b 08        		.byte	0x8
 2155 098c AE        		.byte	0xae
 2156 098d 45        		.uleb128 0x45
 2157 098e 01        		.byte	0x1
 2158 098f 01        		.byte	0x1
 2159 0990 0000 0000 		.long	.LASF93
 2160 0994 0000 0000 		.long	.LASF93
 2161 0998 08        		.byte	0x8
 2162 0999 DC        		.byte	0xdc
 2163 099a 45        		.uleb128 0x45
 2164 099b 01        		.byte	0x1
 2165 099c 01        		.byte	0x1
 2166 099d 0000 0000 		.long	.LASF94
 2167 09a1 0000 0000 		.long	.LASF94
 2168 09a5 0E        		.byte	0xe
 2169 09a6 1C        		.byte	0x1c
 2170 09a7 44        		.uleb128 0x44
 2171 09a8 01        		.byte	0x1
 2172 09a9 01        		.byte	0x1
 2173 09aa 0000 0000 		.long	.LASF95
 2174 09ae 0000 0000 		.long	.LASF95
 2175 09b2 07        		.byte	0x7
 2176 09b3 8B02      		.word	0x28b
 2177 09b5 00        		.byte	0
 2178               		.section	.debug_abbrev,"",@progbits
 2179               	.Ldebug_abbrev0:
 2180 0000 01        		.uleb128 0x1
 2181 0001 11        		.uleb128 0x11
 2182 0002 01        		.byte	0x1
 2183 0003 25        		.uleb128 0x25
 2184 0004 0E        		.uleb128 0xe
 2185 0005 13        		.uleb128 0x13
 2186 0006 0B        		.uleb128 0xb
 2187 0007 03        		.uleb128 0x3
 2188 0008 0E        		.uleb128 0xe
 2189 0009 1B        		.uleb128 0x1b
 2190 000a 0E        		.uleb128 0xe
 2191 000b 55        		.uleb128 0x55
 2192 000c 06        		.uleb128 0x6
 2193 000d 11        		.uleb128 0x11
 2194 000e 01        		.uleb128 0x1
 2195 000f 52        		.uleb128 0x52
 2196 0010 01        		.uleb128 0x1
 2197 0011 10        		.uleb128 0x10
 2198 0012 06        		.uleb128 0x6
 2199 0013 00        		.byte	0
 2200 0014 00        		.byte	0
 2201 0015 02        		.uleb128 0x2
 2202 0016 16        		.uleb128 0x16
 2203 0017 00        		.byte	0
 2204 0018 03        		.uleb128 0x3
 2205 0019 0E        		.uleb128 0xe
 2206 001a 3A        		.uleb128 0x3a
 2207 001b 0B        		.uleb128 0xb
 2208 001c 3B        		.uleb128 0x3b
 2209 001d 0B        		.uleb128 0xb
 2210 001e 49        		.uleb128 0x49
 2211 001f 13        		.uleb128 0x13
 2212 0020 00        		.byte	0
 2213 0021 00        		.byte	0
 2214 0022 03        		.uleb128 0x3
 2215 0023 24        		.uleb128 0x24
 2216 0024 00        		.byte	0
 2217 0025 0B        		.uleb128 0xb
 2218 0026 0B        		.uleb128 0xb
 2219 0027 3E        		.uleb128 0x3e
 2220 0028 0B        		.uleb128 0xb
 2221 0029 03        		.uleb128 0x3
 2222 002a 0E        		.uleb128 0xe
 2223 002b 00        		.byte	0
 2224 002c 00        		.byte	0
 2225 002d 04        		.uleb128 0x4
 2226 002e 24        		.uleb128 0x24
 2227 002f 00        		.byte	0
 2228 0030 0B        		.uleb128 0xb
 2229 0031 0B        		.uleb128 0xb
 2230 0032 3E        		.uleb128 0x3e
 2231 0033 0B        		.uleb128 0xb
 2232 0034 03        		.uleb128 0x3
 2233 0035 08        		.uleb128 0x8
 2234 0036 00        		.byte	0
 2235 0037 00        		.byte	0
 2236 0038 05        		.uleb128 0x5
 2237 0039 13        		.uleb128 0x13
 2238 003a 01        		.byte	0x1
 2239 003b 03        		.uleb128 0x3
 2240 003c 0E        		.uleb128 0xe
 2241 003d 0B        		.uleb128 0xb
 2242 003e 0B        		.uleb128 0xb
 2243 003f 3A        		.uleb128 0x3a
 2244 0040 0B        		.uleb128 0xb
 2245 0041 3B        		.uleb128 0x3b
 2246 0042 0B        		.uleb128 0xb
 2247 0043 01        		.uleb128 0x1
 2248 0044 13        		.uleb128 0x13
 2249 0045 00        		.byte	0
 2250 0046 00        		.byte	0
 2251 0047 06        		.uleb128 0x6
 2252 0048 0D        		.uleb128 0xd
 2253 0049 00        		.byte	0
 2254 004a 03        		.uleb128 0x3
 2255 004b 08        		.uleb128 0x8
 2256 004c 3A        		.uleb128 0x3a
 2257 004d 0B        		.uleb128 0xb
 2258 004e 3B        		.uleb128 0x3b
 2259 004f 0B        		.uleb128 0xb
 2260 0050 49        		.uleb128 0x49
 2261 0051 13        		.uleb128 0x13
 2262 0052 38        		.uleb128 0x38
 2263 0053 0A        		.uleb128 0xa
 2264 0054 00        		.byte	0
 2265 0055 00        		.byte	0
 2266 0056 07        		.uleb128 0x7
 2267 0057 0D        		.uleb128 0xd
 2268 0058 00        		.byte	0
 2269 0059 03        		.uleb128 0x3
 2270 005a 0E        		.uleb128 0xe
 2271 005b 3A        		.uleb128 0x3a
 2272 005c 0B        		.uleb128 0xb
 2273 005d 3B        		.uleb128 0x3b
 2274 005e 0B        		.uleb128 0xb
 2275 005f 49        		.uleb128 0x49
 2276 0060 13        		.uleb128 0x13
 2277 0061 38        		.uleb128 0x38
 2278 0062 0A        		.uleb128 0xa
 2279 0063 00        		.byte	0
 2280 0064 00        		.byte	0
 2281 0065 08        		.uleb128 0x8
 2282 0066 0D        		.uleb128 0xd
 2283 0067 00        		.byte	0
 2284 0068 03        		.uleb128 0x3
 2285 0069 0E        		.uleb128 0xe
 2286 006a 3A        		.uleb128 0x3a
 2287 006b 0B        		.uleb128 0xb
 2288 006c 3B        		.uleb128 0x3b
 2289 006d 05        		.uleb128 0x5
 2290 006e 49        		.uleb128 0x49
 2291 006f 13        		.uleb128 0x13
 2292 0070 38        		.uleb128 0x38
 2293 0071 0A        		.uleb128 0xa
 2294 0072 00        		.byte	0
 2295 0073 00        		.byte	0
 2296 0074 09        		.uleb128 0x9
 2297 0075 0D        		.uleb128 0xd
 2298 0076 00        		.byte	0
 2299 0077 03        		.uleb128 0x3
 2300 0078 08        		.uleb128 0x8
 2301 0079 3A        		.uleb128 0x3a
 2302 007a 0B        		.uleb128 0xb
 2303 007b 3B        		.uleb128 0x3b
 2304 007c 05        		.uleb128 0x5
 2305 007d 49        		.uleb128 0x49
 2306 007e 13        		.uleb128 0x13
 2307 007f 38        		.uleb128 0x38
 2308 0080 0A        		.uleb128 0xa
 2309 0081 00        		.byte	0
 2310 0082 00        		.byte	0
 2311 0083 0A        		.uleb128 0xa
 2312 0084 0F        		.uleb128 0xf
 2313 0085 00        		.byte	0
 2314 0086 0B        		.uleb128 0xb
 2315 0087 0B        		.uleb128 0xb
 2316 0088 49        		.uleb128 0x49
 2317 0089 13        		.uleb128 0x13
 2318 008a 00        		.byte	0
 2319 008b 00        		.byte	0
 2320 008c 0B        		.uleb128 0xb
 2321 008d 15        		.uleb128 0x15
 2322 008e 01        		.byte	0x1
 2323 008f 27        		.uleb128 0x27
 2324 0090 0C        		.uleb128 0xc
 2325 0091 49        		.uleb128 0x49
 2326 0092 13        		.uleb128 0x13
 2327 0093 01        		.uleb128 0x1
 2328 0094 13        		.uleb128 0x13
 2329 0095 00        		.byte	0
 2330 0096 00        		.byte	0
 2331 0097 0C        		.uleb128 0xc
 2332 0098 05        		.uleb128 0x5
 2333 0099 00        		.byte	0
 2334 009a 49        		.uleb128 0x49
 2335 009b 13        		.uleb128 0x13
 2336 009c 00        		.byte	0
 2337 009d 00        		.byte	0
 2338 009e 0D        		.uleb128 0xd
 2339 009f 0F        		.uleb128 0xf
 2340 00a0 00        		.byte	0
 2341 00a1 0B        		.uleb128 0xb
 2342 00a2 0B        		.uleb128 0xb
 2343 00a3 00        		.byte	0
 2344 00a4 00        		.byte	0
 2345 00a5 0E        		.uleb128 0xe
 2346 00a6 16        		.uleb128 0x16
 2347 00a7 00        		.byte	0
 2348 00a8 03        		.uleb128 0x3
 2349 00a9 0E        		.uleb128 0xe
 2350 00aa 3A        		.uleb128 0x3a
 2351 00ab 0B        		.uleb128 0xb
 2352 00ac 3B        		.uleb128 0x3b
 2353 00ad 05        		.uleb128 0x5
 2354 00ae 49        		.uleb128 0x49
 2355 00af 13        		.uleb128 0x13
 2356 00b0 00        		.byte	0
 2357 00b1 00        		.byte	0
 2358 00b2 0F        		.uleb128 0xf
 2359 00b3 04        		.uleb128 0x4
 2360 00b4 01        		.byte	0x1
 2361 00b5 0B        		.uleb128 0xb
 2362 00b6 0B        		.uleb128 0xb
 2363 00b7 49        		.uleb128 0x49
 2364 00b8 13        		.uleb128 0x13
 2365 00b9 3A        		.uleb128 0x3a
 2366 00ba 0B        		.uleb128 0xb
 2367 00bb 3B        		.uleb128 0x3b
 2368 00bc 05        		.uleb128 0x5
 2369 00bd 01        		.uleb128 0x1
 2370 00be 13        		.uleb128 0x13
 2371 00bf 00        		.byte	0
 2372 00c0 00        		.byte	0
 2373 00c1 10        		.uleb128 0x10
 2374 00c2 28        		.uleb128 0x28
 2375 00c3 00        		.byte	0
 2376 00c4 03        		.uleb128 0x3
 2377 00c5 0E        		.uleb128 0xe
 2378 00c6 1C        		.uleb128 0x1c
 2379 00c7 0B        		.uleb128 0xb
 2380 00c8 00        		.byte	0
 2381 00c9 00        		.byte	0
 2382 00ca 11        		.uleb128 0x11
 2383 00cb 13        		.uleb128 0x13
 2384 00cc 01        		.byte	0x1
 2385 00cd 03        		.uleb128 0x3
 2386 00ce 0E        		.uleb128 0xe
 2387 00cf 0B        		.uleb128 0xb
 2388 00d0 0B        		.uleb128 0xb
 2389 00d1 3A        		.uleb128 0x3a
 2390 00d2 0B        		.uleb128 0xb
 2391 00d3 3B        		.uleb128 0x3b
 2392 00d4 05        		.uleb128 0x5
 2393 00d5 01        		.uleb128 0x1
 2394 00d6 13        		.uleb128 0x13
 2395 00d7 00        		.byte	0
 2396 00d8 00        		.byte	0
 2397 00d9 12        		.uleb128 0x12
 2398 00da 35        		.uleb128 0x35
 2399 00db 00        		.byte	0
 2400 00dc 49        		.uleb128 0x49
 2401 00dd 13        		.uleb128 0x13
 2402 00de 00        		.byte	0
 2403 00df 00        		.byte	0
 2404 00e0 13        		.uleb128 0x13
 2405 00e1 01        		.uleb128 0x1
 2406 00e2 01        		.byte	0x1
 2407 00e3 49        		.uleb128 0x49
 2408 00e4 13        		.uleb128 0x13
 2409 00e5 01        		.uleb128 0x1
 2410 00e6 13        		.uleb128 0x13
 2411 00e7 00        		.byte	0
 2412 00e8 00        		.byte	0
 2413 00e9 14        		.uleb128 0x14
 2414 00ea 21        		.uleb128 0x21
 2415 00eb 00        		.byte	0
 2416 00ec 49        		.uleb128 0x49
 2417 00ed 13        		.uleb128 0x13
 2418 00ee 2F        		.uleb128 0x2f
 2419 00ef 0B        		.uleb128 0xb
 2420 00f0 00        		.byte	0
 2421 00f1 00        		.byte	0
 2422 00f2 15        		.uleb128 0x15
 2423 00f3 17        		.uleb128 0x17
 2424 00f4 01        		.byte	0x1
 2425 00f5 03        		.uleb128 0x3
 2426 00f6 0E        		.uleb128 0xe
 2427 00f7 0B        		.uleb128 0xb
 2428 00f8 0B        		.uleb128 0xb
 2429 00f9 3A        		.uleb128 0x3a
 2430 00fa 0B        		.uleb128 0xb
 2431 00fb 3B        		.uleb128 0x3b
 2432 00fc 05        		.uleb128 0x5
 2433 00fd 01        		.uleb128 0x1
 2434 00fe 13        		.uleb128 0x13
 2435 00ff 00        		.byte	0
 2436 0100 00        		.byte	0
 2437 0101 16        		.uleb128 0x16
 2438 0102 0D        		.uleb128 0xd
 2439 0103 00        		.byte	0
 2440 0104 03        		.uleb128 0x3
 2441 0105 0E        		.uleb128 0xe
 2442 0106 3A        		.uleb128 0x3a
 2443 0107 0B        		.uleb128 0xb
 2444 0108 3B        		.uleb128 0x3b
 2445 0109 05        		.uleb128 0x5
 2446 010a 49        		.uleb128 0x49
 2447 010b 13        		.uleb128 0x13
 2448 010c 00        		.byte	0
 2449 010d 00        		.byte	0
 2450 010e 17        		.uleb128 0x17
 2451 010f 04        		.uleb128 0x4
 2452 0110 01        		.byte	0x1
 2453 0111 0B        		.uleb128 0xb
 2454 0112 0B        		.uleb128 0xb
 2455 0113 49        		.uleb128 0x49
 2456 0114 13        		.uleb128 0x13
 2457 0115 3A        		.uleb128 0x3a
 2458 0116 0B        		.uleb128 0xb
 2459 0117 3B        		.uleb128 0x3b
 2460 0118 0B        		.uleb128 0xb
 2461 0119 01        		.uleb128 0x1
 2462 011a 13        		.uleb128 0x13
 2463 011b 00        		.byte	0
 2464 011c 00        		.byte	0
 2465 011d 18        		.uleb128 0x18
 2466 011e 13        		.uleb128 0x13
 2467 011f 01        		.byte	0x1
 2468 0120 0B        		.uleb128 0xb
 2469 0121 0B        		.uleb128 0xb
 2470 0122 3A        		.uleb128 0x3a
 2471 0123 0B        		.uleb128 0xb
 2472 0124 3B        		.uleb128 0x3b
 2473 0125 0B        		.uleb128 0xb
 2474 0126 01        		.uleb128 0x1
 2475 0127 13        		.uleb128 0x13
 2476 0128 00        		.byte	0
 2477 0129 00        		.byte	0
 2478 012a 19        		.uleb128 0x19
 2479 012b 2E        		.uleb128 0x2e
 2480 012c 01        		.byte	0x1
 2481 012d 03        		.uleb128 0x3
 2482 012e 0E        		.uleb128 0xe
 2483 012f 3A        		.uleb128 0x3a
 2484 0130 0B        		.uleb128 0xb
 2485 0131 3B        		.uleb128 0x3b
 2486 0132 05        		.uleb128 0x5
 2487 0133 27        		.uleb128 0x27
 2488 0134 0C        		.uleb128 0xc
 2489 0135 20        		.uleb128 0x20
 2490 0136 0B        		.uleb128 0xb
 2491 0137 01        		.uleb128 0x1
 2492 0138 13        		.uleb128 0x13
 2493 0139 00        		.byte	0
 2494 013a 00        		.byte	0
 2495 013b 1A        		.uleb128 0x1a
 2496 013c 05        		.uleb128 0x5
 2497 013d 00        		.byte	0
 2498 013e 03        		.uleb128 0x3
 2499 013f 0E        		.uleb128 0xe
 2500 0140 3A        		.uleb128 0x3a
 2501 0141 0B        		.uleb128 0xb
 2502 0142 3B        		.uleb128 0x3b
 2503 0143 05        		.uleb128 0x5
 2504 0144 49        		.uleb128 0x49
 2505 0145 13        		.uleb128 0x13
 2506 0146 00        		.byte	0
 2507 0147 00        		.byte	0
 2508 0148 1B        		.uleb128 0x1b
 2509 0149 26        		.uleb128 0x26
 2510 014a 00        		.byte	0
 2511 014b 49        		.uleb128 0x49
 2512 014c 13        		.uleb128 0x13
 2513 014d 00        		.byte	0
 2514 014e 00        		.byte	0
 2515 014f 1C        		.uleb128 0x1c
 2516 0150 2E        		.uleb128 0x2e
 2517 0151 01        		.byte	0x1
 2518 0152 3F        		.uleb128 0x3f
 2519 0153 0C        		.uleb128 0xc
 2520 0154 03        		.uleb128 0x3
 2521 0155 0E        		.uleb128 0xe
 2522 0156 3A        		.uleb128 0x3a
 2523 0157 0B        		.uleb128 0xb
 2524 0158 3B        		.uleb128 0x3b
 2525 0159 0B        		.uleb128 0xb
 2526 015a 27        		.uleb128 0x27
 2527 015b 0C        		.uleb128 0xc
 2528 015c 49        		.uleb128 0x49
 2529 015d 13        		.uleb128 0x13
 2530 015e 11        		.uleb128 0x11
 2531 015f 01        		.uleb128 0x1
 2532 0160 12        		.uleb128 0x12
 2533 0161 01        		.uleb128 0x1
 2534 0162 40        		.uleb128 0x40
 2535 0163 06        		.uleb128 0x6
 2536 0164 9642      		.uleb128 0x2116
 2537 0166 0C        		.uleb128 0xc
 2538 0167 01        		.uleb128 0x1
 2539 0168 13        		.uleb128 0x13
 2540 0169 00        		.byte	0
 2541 016a 00        		.byte	0
 2542 016b 1D        		.uleb128 0x1d
 2543 016c 05        		.uleb128 0x5
 2544 016d 00        		.byte	0
 2545 016e 03        		.uleb128 0x3
 2546 016f 0E        		.uleb128 0xe
 2547 0170 3A        		.uleb128 0x3a
 2548 0171 0B        		.uleb128 0xb
 2549 0172 3B        		.uleb128 0x3b
 2550 0173 0B        		.uleb128 0xb
 2551 0174 49        		.uleb128 0x49
 2552 0175 13        		.uleb128 0x13
 2553 0176 02        		.uleb128 0x2
 2554 0177 06        		.uleb128 0x6
 2555 0178 00        		.byte	0
 2556 0179 00        		.byte	0
 2557 017a 1E        		.uleb128 0x1e
 2558 017b 05        		.uleb128 0x5
 2559 017c 00        		.byte	0
 2560 017d 03        		.uleb128 0x3
 2561 017e 08        		.uleb128 0x8
 2562 017f 3A        		.uleb128 0x3a
 2563 0180 0B        		.uleb128 0xb
 2564 0181 3B        		.uleb128 0x3b
 2565 0182 0B        		.uleb128 0xb
 2566 0183 49        		.uleb128 0x49
 2567 0184 13        		.uleb128 0x13
 2568 0185 02        		.uleb128 0x2
 2569 0186 06        		.uleb128 0x6
 2570 0187 00        		.byte	0
 2571 0188 00        		.byte	0
 2572 0189 1F        		.uleb128 0x1f
 2573 018a 34        		.uleb128 0x34
 2574 018b 00        		.byte	0
 2575 018c 03        		.uleb128 0x3
 2576 018d 08        		.uleb128 0x8
 2577 018e 3A        		.uleb128 0x3a
 2578 018f 0B        		.uleb128 0xb
 2579 0190 3B        		.uleb128 0x3b
 2580 0191 0B        		.uleb128 0xb
 2581 0192 49        		.uleb128 0x49
 2582 0193 13        		.uleb128 0x13
 2583 0194 1C        		.uleb128 0x1c
 2584 0195 0B        		.uleb128 0xb
 2585 0196 00        		.byte	0
 2586 0197 00        		.byte	0
 2587 0198 20        		.uleb128 0x20
 2588 0199 34        		.uleb128 0x34
 2589 019a 00        		.byte	0
 2590 019b 03        		.uleb128 0x3
 2591 019c 0E        		.uleb128 0xe
 2592 019d 3A        		.uleb128 0x3a
 2593 019e 0B        		.uleb128 0xb
 2594 019f 3B        		.uleb128 0x3b
 2595 01a0 0B        		.uleb128 0xb
 2596 01a1 49        		.uleb128 0x49
 2597 01a2 13        		.uleb128 0x13
 2598 01a3 1C        		.uleb128 0x1c
 2599 01a4 05        		.uleb128 0x5
 2600 01a5 00        		.byte	0
 2601 01a6 00        		.byte	0
 2602 01a7 21        		.uleb128 0x21
 2603 01a8 34        		.uleb128 0x34
 2604 01a9 00        		.byte	0
 2605 01aa 03        		.uleb128 0x3
 2606 01ab 08        		.uleb128 0x8
 2607 01ac 3A        		.uleb128 0x3a
 2608 01ad 0B        		.uleb128 0xb
 2609 01ae 3B        		.uleb128 0x3b
 2610 01af 0B        		.uleb128 0xb
 2611 01b0 49        		.uleb128 0x49
 2612 01b1 13        		.uleb128 0x13
 2613 01b2 1C        		.uleb128 0x1c
 2614 01b3 05        		.uleb128 0x5
 2615 01b4 00        		.byte	0
 2616 01b5 00        		.byte	0
 2617 01b6 22        		.uleb128 0x22
 2618 01b7 34        		.uleb128 0x34
 2619 01b8 00        		.byte	0
 2620 01b9 03        		.uleb128 0x3
 2621 01ba 08        		.uleb128 0x8
 2622 01bb 3A        		.uleb128 0x3a
 2623 01bc 0B        		.uleb128 0xb
 2624 01bd 3B        		.uleb128 0x3b
 2625 01be 0B        		.uleb128 0xb
 2626 01bf 49        		.uleb128 0x49
 2627 01c0 13        		.uleb128 0x13
 2628 01c1 1C        		.uleb128 0x1c
 2629 01c2 0D        		.uleb128 0xd
 2630 01c3 00        		.byte	0
 2631 01c4 00        		.byte	0
 2632 01c5 23        		.uleb128 0x23
 2633 01c6 34        		.uleb128 0x34
 2634 01c7 00        		.byte	0
 2635 01c8 03        		.uleb128 0x3
 2636 01c9 08        		.uleb128 0x8
 2637 01ca 3A        		.uleb128 0x3a
 2638 01cb 0B        		.uleb128 0xb
 2639 01cc 3B        		.uleb128 0x3b
 2640 01cd 0B        		.uleb128 0xb
 2641 01ce 49        		.uleb128 0x49
 2642 01cf 13        		.uleb128 0x13
 2643 01d0 02        		.uleb128 0x2
 2644 01d1 0A        		.uleb128 0xa
 2645 01d2 00        		.byte	0
 2646 01d3 00        		.byte	0
 2647 01d4 24        		.uleb128 0x24
 2648 01d5 2E        		.uleb128 0x2e
 2649 01d6 00        		.byte	0
 2650 01d7 3F        		.uleb128 0x3f
 2651 01d8 0C        		.uleb128 0xc
 2652 01d9 03        		.uleb128 0x3
 2653 01da 0E        		.uleb128 0xe
 2654 01db 3A        		.uleb128 0x3a
 2655 01dc 0B        		.uleb128 0xb
 2656 01dd 3B        		.uleb128 0x3b
 2657 01de 0B        		.uleb128 0xb
 2658 01df 27        		.uleb128 0x27
 2659 01e0 0C        		.uleb128 0xc
 2660 01e1 11        		.uleb128 0x11
 2661 01e2 01        		.uleb128 0x1
 2662 01e3 12        		.uleb128 0x12
 2663 01e4 01        		.uleb128 0x1
 2664 01e5 40        		.uleb128 0x40
 2665 01e6 06        		.uleb128 0x6
 2666 01e7 9742      		.uleb128 0x2117
 2667 01e9 0C        		.uleb128 0xc
 2668 01ea 00        		.byte	0
 2669 01eb 00        		.byte	0
 2670 01ec 25        		.uleb128 0x25
 2671 01ed 2E        		.uleb128 0x2e
 2672 01ee 01        		.byte	0x1
 2673 01ef 3F        		.uleb128 0x3f
 2674 01f0 0C        		.uleb128 0xc
 2675 01f1 03        		.uleb128 0x3
 2676 01f2 0E        		.uleb128 0xe
 2677 01f3 3A        		.uleb128 0x3a
 2678 01f4 0B        		.uleb128 0xb
 2679 01f5 3B        		.uleb128 0x3b
 2680 01f6 0B        		.uleb128 0xb
 2681 01f7 27        		.uleb128 0x27
 2682 01f8 0C        		.uleb128 0xc
 2683 01f9 49        		.uleb128 0x49
 2684 01fa 13        		.uleb128 0x13
 2685 01fb 11        		.uleb128 0x11
 2686 01fc 01        		.uleb128 0x1
 2687 01fd 12        		.uleb128 0x12
 2688 01fe 01        		.uleb128 0x1
 2689 01ff 40        		.uleb128 0x40
 2690 0200 0A        		.uleb128 0xa
 2691 0201 9742      		.uleb128 0x2117
 2692 0203 0C        		.uleb128 0xc
 2693 0204 01        		.uleb128 0x1
 2694 0205 13        		.uleb128 0x13
 2695 0206 00        		.byte	0
 2696 0207 00        		.byte	0
 2697 0208 26        		.uleb128 0x26
 2698 0209 34        		.uleb128 0x34
 2699 020a 00        		.byte	0
 2700 020b 03        		.uleb128 0x3
 2701 020c 08        		.uleb128 0x8
 2702 020d 3A        		.uleb128 0x3a
 2703 020e 0B        		.uleb128 0xb
 2704 020f 3B        		.uleb128 0x3b
 2705 0210 0B        		.uleb128 0xb
 2706 0211 49        		.uleb128 0x49
 2707 0212 13        		.uleb128 0x13
 2708 0213 02        		.uleb128 0x2
 2709 0214 06        		.uleb128 0x6
 2710 0215 00        		.byte	0
 2711 0216 00        		.byte	0
 2712 0217 27        		.uleb128 0x27
 2713 0218 2E        		.uleb128 0x2e
 2714 0219 00        		.byte	0
 2715 021a 03        		.uleb128 0x3
 2716 021b 0E        		.uleb128 0xe
 2717 021c 3A        		.uleb128 0x3a
 2718 021d 0B        		.uleb128 0xb
 2719 021e 3B        		.uleb128 0x3b
 2720 021f 0B        		.uleb128 0xb
 2721 0220 27        		.uleb128 0x27
 2722 0221 0C        		.uleb128 0xc
 2723 0222 20        		.uleb128 0x20
 2724 0223 0B        		.uleb128 0xb
 2725 0224 00        		.byte	0
 2726 0225 00        		.byte	0
 2727 0226 28        		.uleb128 0x28
 2728 0227 2E        		.uleb128 0x2e
 2729 0228 01        		.byte	0x1
 2730 0229 03        		.uleb128 0x3
 2731 022a 0E        		.uleb128 0xe
 2732 022b 3A        		.uleb128 0x3a
 2733 022c 0B        		.uleb128 0xb
 2734 022d 3B        		.uleb128 0x3b
 2735 022e 0B        		.uleb128 0xb
 2736 022f 27        		.uleb128 0x27
 2737 0230 0C        		.uleb128 0xc
 2738 0231 49        		.uleb128 0x49
 2739 0232 13        		.uleb128 0x13
 2740 0233 20        		.uleb128 0x20
 2741 0234 0B        		.uleb128 0xb
 2742 0235 01        		.uleb128 0x1
 2743 0236 13        		.uleb128 0x13
 2744 0237 00        		.byte	0
 2745 0238 00        		.byte	0
 2746 0239 29        		.uleb128 0x29
 2747 023a 34        		.uleb128 0x34
 2748 023b 00        		.byte	0
 2749 023c 03        		.uleb128 0x3
 2750 023d 0E        		.uleb128 0xe
 2751 023e 3A        		.uleb128 0x3a
 2752 023f 0B        		.uleb128 0xb
 2753 0240 3B        		.uleb128 0x3b
 2754 0241 0B        		.uleb128 0xb
 2755 0242 49        		.uleb128 0x49
 2756 0243 13        		.uleb128 0x13
 2757 0244 00        		.byte	0
 2758 0245 00        		.byte	0
 2759 0246 2A        		.uleb128 0x2a
 2760 0247 2E        		.uleb128 0x2e
 2761 0248 01        		.byte	0x1
 2762 0249 3F        		.uleb128 0x3f
 2763 024a 0C        		.uleb128 0xc
 2764 024b 03        		.uleb128 0x3
 2765 024c 0E        		.uleb128 0xe
 2766 024d 3A        		.uleb128 0x3a
 2767 024e 0B        		.uleb128 0xb
 2768 024f 3B        		.uleb128 0x3b
 2769 0250 0B        		.uleb128 0xb
 2770 0251 27        		.uleb128 0x27
 2771 0252 0C        		.uleb128 0xc
 2772 0253 49        		.uleb128 0x49
 2773 0254 13        		.uleb128 0x13
 2774 0255 8701      		.uleb128 0x87
 2775 0257 0C        		.uleb128 0xc
 2776 0258 11        		.uleb128 0x11
 2777 0259 01        		.uleb128 0x1
 2778 025a 12        		.uleb128 0x12
 2779 025b 01        		.uleb128 0x1
 2780 025c 40        		.uleb128 0x40
 2781 025d 06        		.uleb128 0x6
 2782 025e 9642      		.uleb128 0x2116
 2783 0260 0C        		.uleb128 0xc
 2784 0261 01        		.uleb128 0x1
 2785 0262 13        		.uleb128 0x13
 2786 0263 00        		.byte	0
 2787 0264 00        		.byte	0
 2788 0265 2B        		.uleb128 0x2b
 2789 0266 34        		.uleb128 0x34
 2790 0267 00        		.byte	0
 2791 0268 03        		.uleb128 0x3
 2792 0269 0E        		.uleb128 0xe
 2793 026a 3A        		.uleb128 0x3a
 2794 026b 0B        		.uleb128 0xb
 2795 026c 3B        		.uleb128 0x3b
 2796 026d 0B        		.uleb128 0xb
 2797 026e 49        		.uleb128 0x49
 2798 026f 13        		.uleb128 0x13
 2799 0270 02        		.uleb128 0x2
 2800 0271 06        		.uleb128 0x6
 2801 0272 00        		.byte	0
 2802 0273 00        		.byte	0
 2803 0274 2C        		.uleb128 0x2c
 2804 0275 34        		.uleb128 0x34
 2805 0276 00        		.byte	0
 2806 0277 03        		.uleb128 0x3
 2807 0278 0E        		.uleb128 0xe
 2808 0279 3A        		.uleb128 0x3a
 2809 027a 0B        		.uleb128 0xb
 2810 027b 3B        		.uleb128 0x3b
 2811 027c 0B        		.uleb128 0xb
 2812 027d 49        		.uleb128 0x49
 2813 027e 13        		.uleb128 0x13
 2814 027f 02        		.uleb128 0x2
 2815 0280 0A        		.uleb128 0xa
 2816 0281 00        		.byte	0
 2817 0282 00        		.byte	0
 2818 0283 2D        		.uleb128 0x2d
 2819 0284 34        		.uleb128 0x34
 2820 0285 00        		.byte	0
 2821 0286 03        		.uleb128 0x3
 2822 0287 0E        		.uleb128 0xe
 2823 0288 3A        		.uleb128 0x3a
 2824 0289 0B        		.uleb128 0xb
 2825 028a 3B        		.uleb128 0x3b
 2826 028b 05        		.uleb128 0x5
 2827 028c 49        		.uleb128 0x49
 2828 028d 13        		.uleb128 0x13
 2829 028e 02        		.uleb128 0x2
 2830 028f 06        		.uleb128 0x6
 2831 0290 00        		.byte	0
 2832 0291 00        		.byte	0
 2833 0292 2E        		.uleb128 0x2e
 2834 0293 34        		.uleb128 0x34
 2835 0294 00        		.byte	0
 2836 0295 03        		.uleb128 0x3
 2837 0296 0E        		.uleb128 0xe
 2838 0297 3A        		.uleb128 0x3a
 2839 0298 0B        		.uleb128 0xb
 2840 0299 3B        		.uleb128 0x3b
 2841 029a 05        		.uleb128 0x5
 2842 029b 49        		.uleb128 0x49
 2843 029c 13        		.uleb128 0x13
 2844 029d 02        		.uleb128 0x2
 2845 029e 0A        		.uleb128 0xa
 2846 029f 00        		.byte	0
 2847 02a0 00        		.byte	0
 2848 02a1 2F        		.uleb128 0x2f
 2849 02a2 34        		.uleb128 0x34
 2850 02a3 00        		.byte	0
 2851 02a4 03        		.uleb128 0x3
 2852 02a5 0E        		.uleb128 0xe
 2853 02a6 3A        		.uleb128 0x3a
 2854 02a7 0B        		.uleb128 0xb
 2855 02a8 3B        		.uleb128 0x3b
 2856 02a9 05        		.uleb128 0x5
 2857 02aa 49        		.uleb128 0x49
 2858 02ab 13        		.uleb128 0x13
 2859 02ac 00        		.byte	0
 2860 02ad 00        		.byte	0
 2861 02ae 30        		.uleb128 0x30
 2862 02af 34        		.uleb128 0x34
 2863 02b0 00        		.byte	0
 2864 02b1 03        		.uleb128 0x3
 2865 02b2 08        		.uleb128 0x8
 2866 02b3 3A        		.uleb128 0x3a
 2867 02b4 0B        		.uleb128 0xb
 2868 02b5 3B        		.uleb128 0x3b
 2869 02b6 05        		.uleb128 0x5
 2870 02b7 49        		.uleb128 0x49
 2871 02b8 13        		.uleb128 0x13
 2872 02b9 00        		.byte	0
 2873 02ba 00        		.byte	0
 2874 02bb 31        		.uleb128 0x31
 2875 02bc 34        		.uleb128 0x34
 2876 02bd 00        		.byte	0
 2877 02be 03        		.uleb128 0x3
 2878 02bf 08        		.uleb128 0x8
 2879 02c0 3A        		.uleb128 0x3a
 2880 02c1 0B        		.uleb128 0xb
 2881 02c2 3B        		.uleb128 0x3b
 2882 02c3 05        		.uleb128 0x5
 2883 02c4 49        		.uleb128 0x49
 2884 02c5 13        		.uleb128 0x13
 2885 02c6 1C        		.uleb128 0x1c
 2886 02c7 0D        		.uleb128 0xd
 2887 02c8 00        		.byte	0
 2888 02c9 00        		.byte	0
 2889 02ca 32        		.uleb128 0x32
 2890 02cb 1D        		.uleb128 0x1d
 2891 02cc 00        		.byte	0
 2892 02cd 31        		.uleb128 0x31
 2893 02ce 13        		.uleb128 0x13
 2894 02cf 11        		.uleb128 0x11
 2895 02d0 01        		.uleb128 0x1
 2896 02d1 12        		.uleb128 0x12
 2897 02d2 01        		.uleb128 0x1
 2898 02d3 58        		.uleb128 0x58
 2899 02d4 0B        		.uleb128 0xb
 2900 02d5 59        		.uleb128 0x59
 2901 02d6 05        		.uleb128 0x5
 2902 02d7 00        		.byte	0
 2903 02d8 00        		.byte	0
 2904 02d9 33        		.uleb128 0x33
 2905 02da 1D        		.uleb128 0x1d
 2906 02db 01        		.byte	0x1
 2907 02dc 31        		.uleb128 0x31
 2908 02dd 13        		.uleb128 0x13
 2909 02de 11        		.uleb128 0x11
 2910 02df 01        		.uleb128 0x1
 2911 02e0 12        		.uleb128 0x12
 2912 02e1 01        		.uleb128 0x1
 2913 02e2 58        		.uleb128 0x58
 2914 02e3 0B        		.uleb128 0xb
 2915 02e4 59        		.uleb128 0x59
 2916 02e5 05        		.uleb128 0x5
 2917 02e6 01        		.uleb128 0x1
 2918 02e7 13        		.uleb128 0x13
 2919 02e8 00        		.byte	0
 2920 02e9 00        		.byte	0
 2921 02ea 34        		.uleb128 0x34
 2922 02eb 05        		.uleb128 0x5
 2923 02ec 00        		.byte	0
 2924 02ed 31        		.uleb128 0x31
 2925 02ee 13        		.uleb128 0x13
 2926 02ef 02        		.uleb128 0x2
 2927 02f0 06        		.uleb128 0x6
 2928 02f1 00        		.byte	0
 2929 02f2 00        		.byte	0
 2930 02f3 35        		.uleb128 0x35
 2931 02f4 0B        		.uleb128 0xb
 2932 02f5 01        		.byte	0x1
 2933 02f6 11        		.uleb128 0x11
 2934 02f7 01        		.uleb128 0x1
 2935 02f8 12        		.uleb128 0x12
 2936 02f9 01        		.uleb128 0x1
 2937 02fa 01        		.uleb128 0x1
 2938 02fb 13        		.uleb128 0x13
 2939 02fc 00        		.byte	0
 2940 02fd 00        		.byte	0
 2941 02fe 36        		.uleb128 0x36
 2942 02ff 0B        		.uleb128 0xb
 2943 0300 01        		.byte	0x1
 2944 0301 11        		.uleb128 0x11
 2945 0302 01        		.uleb128 0x1
 2946 0303 12        		.uleb128 0x12
 2947 0304 01        		.uleb128 0x1
 2948 0305 00        		.byte	0
 2949 0306 00        		.byte	0
 2950 0307 37        		.uleb128 0x37
 2951 0308 34        		.uleb128 0x34
 2952 0309 00        		.byte	0
 2953 030a 31        		.uleb128 0x31
 2954 030b 13        		.uleb128 0x13
 2955 030c 02        		.uleb128 0x2
 2956 030d 0A        		.uleb128 0xa
 2957 030e 00        		.byte	0
 2958 030f 00        		.byte	0
 2959 0310 38        		.uleb128 0x38
 2960 0311 34        		.uleb128 0x34
 2961 0312 00        		.byte	0
 2962 0313 03        		.uleb128 0x3
 2963 0314 08        		.uleb128 0x8
 2964 0315 3A        		.uleb128 0x3a
 2965 0316 0B        		.uleb128 0xb
 2966 0317 3B        		.uleb128 0x3b
 2967 0318 05        		.uleb128 0x5
 2968 0319 49        		.uleb128 0x49
 2969 031a 13        		.uleb128 0x13
 2970 031b 02        		.uleb128 0x2
 2971 031c 06        		.uleb128 0x6
 2972 031d 00        		.byte	0
 2973 031e 00        		.byte	0
 2974 031f 39        		.uleb128 0x39
 2975 0320 8982 01   		.uleb128 0x4109
 2976 0323 01        		.byte	0x1
 2977 0324 11        		.uleb128 0x11
 2978 0325 01        		.uleb128 0x1
 2979 0326 31        		.uleb128 0x31
 2980 0327 13        		.uleb128 0x13
 2981 0328 00        		.byte	0
 2982 0329 00        		.byte	0
 2983 032a 3A        		.uleb128 0x3a
 2984 032b 8A82 01   		.uleb128 0x410a
 2985 032e 00        		.byte	0
 2986 032f 02        		.uleb128 0x2
 2987 0330 0A        		.uleb128 0xa
 2988 0331 9142      		.uleb128 0x2111
 2989 0333 0A        		.uleb128 0xa
 2990 0334 00        		.byte	0
 2991 0335 00        		.byte	0
 2992 0336 3B        		.uleb128 0x3b
 2993 0337 34        		.uleb128 0x34
 2994 0338 00        		.byte	0
 2995 0339 03        		.uleb128 0x3
 2996 033a 0E        		.uleb128 0xe
 2997 033b 3A        		.uleb128 0x3a
 2998 033c 0B        		.uleb128 0xb
 2999 033d 3B        		.uleb128 0x3b
 3000 033e 05        		.uleb128 0x5
 3001 033f 49        		.uleb128 0x49
 3002 0340 13        		.uleb128 0x13
 3003 0341 1C        		.uleb128 0x1c
 3004 0342 0B        		.uleb128 0xb
 3005 0343 00        		.byte	0
 3006 0344 00        		.byte	0
 3007 0345 3C        		.uleb128 0x3c
 3008 0346 8982 01   		.uleb128 0x4109
 3009 0349 00        		.byte	0
 3010 034a 11        		.uleb128 0x11
 3011 034b 01        		.uleb128 0x1
 3012 034c 9342      		.uleb128 0x2113
 3013 034e 0A        		.uleb128 0xa
 3014 034f 00        		.byte	0
 3015 0350 00        		.byte	0
 3016 0351 3D        		.uleb128 0x3d
 3017 0352 8982 01   		.uleb128 0x4109
 3018 0355 00        		.byte	0
 3019 0356 11        		.uleb128 0x11
 3020 0357 01        		.uleb128 0x1
 3021 0358 31        		.uleb128 0x31
 3022 0359 13        		.uleb128 0x13
 3023 035a 00        		.byte	0
 3024 035b 00        		.byte	0
 3025 035c 3E        		.uleb128 0x3e
 3026 035d 8982 01   		.uleb128 0x4109
 3027 0360 01        		.byte	0x1
 3028 0361 11        		.uleb128 0x11
 3029 0362 01        		.uleb128 0x1
 3030 0363 31        		.uleb128 0x31
 3031 0364 13        		.uleb128 0x13
 3032 0365 01        		.uleb128 0x1
 3033 0366 13        		.uleb128 0x13
 3034 0367 00        		.byte	0
 3035 0368 00        		.byte	0
 3036 0369 3F        		.uleb128 0x3f
 3037 036a 15        		.uleb128 0x15
 3038 036b 00        		.byte	0
 3039 036c 27        		.uleb128 0x27
 3040 036d 0C        		.uleb128 0xc
 3041 036e 00        		.byte	0
 3042 036f 00        		.byte	0
 3043 0370 40        		.uleb128 0x40
 3044 0371 21        		.uleb128 0x21
 3045 0372 00        		.byte	0
 3046 0373 00        		.byte	0
 3047 0374 00        		.byte	0
 3048 0375 41        		.uleb128 0x41
 3049 0376 34        		.uleb128 0x34
 3050 0377 00        		.byte	0
 3051 0378 03        		.uleb128 0x3
 3052 0379 0E        		.uleb128 0xe
 3053 037a 3A        		.uleb128 0x3a
 3054 037b 0B        		.uleb128 0xb
 3055 037c 3B        		.uleb128 0x3b
 3056 037d 05        		.uleb128 0x5
 3057 037e 49        		.uleb128 0x49
 3058 037f 13        		.uleb128 0x13
 3059 0380 3F        		.uleb128 0x3f
 3060 0381 0C        		.uleb128 0xc
 3061 0382 3C        		.uleb128 0x3c
 3062 0383 0C        		.uleb128 0xc
 3063 0384 00        		.byte	0
 3064 0385 00        		.byte	0
 3065 0386 42        		.uleb128 0x42
 3066 0387 34        		.uleb128 0x34
 3067 0388 00        		.byte	0
 3068 0389 03        		.uleb128 0x3
 3069 038a 0E        		.uleb128 0xe
 3070 038b 3A        		.uleb128 0x3a
 3071 038c 0B        		.uleb128 0xb
 3072 038d 3B        		.uleb128 0x3b
 3073 038e 0B        		.uleb128 0xb
 3074 038f 49        		.uleb128 0x49
 3075 0390 13        		.uleb128 0x13
 3076 0391 3F        		.uleb128 0x3f
 3077 0392 0C        		.uleb128 0xc
 3078 0393 02        		.uleb128 0x2
 3079 0394 0A        		.uleb128 0xa
 3080 0395 00        		.byte	0
 3081 0396 00        		.byte	0
 3082 0397 43        		.uleb128 0x43
 3083 0398 34        		.uleb128 0x34
 3084 0399 00        		.byte	0
 3085 039a 03        		.uleb128 0x3
 3086 039b 0E        		.uleb128 0xe
 3087 039c 3A        		.uleb128 0x3a
 3088 039d 0B        		.uleb128 0xb
 3089 039e 3B        		.uleb128 0x3b
 3090 039f 0B        		.uleb128 0xb
 3091 03a0 49        		.uleb128 0x49
 3092 03a1 13        		.uleb128 0x13
 3093 03a2 3F        		.uleb128 0x3f
 3094 03a3 0C        		.uleb128 0xc
 3095 03a4 3C        		.uleb128 0x3c
 3096 03a5 0C        		.uleb128 0xc
 3097 03a6 00        		.byte	0
 3098 03a7 00        		.byte	0
 3099 03a8 44        		.uleb128 0x44
 3100 03a9 2E        		.uleb128 0x2e
 3101 03aa 00        		.byte	0
 3102 03ab 3F        		.uleb128 0x3f
 3103 03ac 0C        		.uleb128 0xc
 3104 03ad 3C        		.uleb128 0x3c
 3105 03ae 0C        		.uleb128 0xc
 3106 03af 8740      		.uleb128 0x2007
 3107 03b1 0E        		.uleb128 0xe
 3108 03b2 03        		.uleb128 0x3
 3109 03b3 0E        		.uleb128 0xe
 3110 03b4 3A        		.uleb128 0x3a
 3111 03b5 0B        		.uleb128 0xb
 3112 03b6 3B        		.uleb128 0x3b
 3113 03b7 05        		.uleb128 0x5
 3114 03b8 00        		.byte	0
 3115 03b9 00        		.byte	0
 3116 03ba 45        		.uleb128 0x45
 3117 03bb 2E        		.uleb128 0x2e
 3118 03bc 00        		.byte	0
 3119 03bd 3F        		.uleb128 0x3f
 3120 03be 0C        		.uleb128 0xc
 3121 03bf 3C        		.uleb128 0x3c
 3122 03c0 0C        		.uleb128 0xc
 3123 03c1 8740      		.uleb128 0x2007
 3124 03c3 0E        		.uleb128 0xe
 3125 03c4 03        		.uleb128 0x3
 3126 03c5 0E        		.uleb128 0xe
 3127 03c6 3A        		.uleb128 0x3a
 3128 03c7 0B        		.uleb128 0xb
 3129 03c8 3B        		.uleb128 0x3b
 3130 03c9 0B        		.uleb128 0xb
 3131 03ca 00        		.byte	0
 3132 03cb 00        		.byte	0
 3133 03cc 00        		.byte	0
 3134               		.section	.debug_loc,"",@progbits
 3135               	.Ldebug_loc0:
 3136               	.LLST0:
 3137 0000 0000 0000 		.long	.LFB21
 3138 0004 0000 0000 		.long	.LCFI0
 3139 0008 0300      		.word	0x3
 3140 000a 92        		.byte	0x92
 3141 000b 20        		.uleb128 0x20
 3142 000c 02        		.sleb128 2
 3143 000d 0000 0000 		.long	.LCFI0
 3144 0011 0000 0000 		.long	.LFE21
 3145 0015 0300      		.word	0x3
 3146 0017 92        		.byte	0x92
 3147 0018 20        		.uleb128 0x20
 3148 0019 12        		.sleb128 18
 3149 001a 0000 0000 		.long	0
 3150 001e 0000 0000 		.long	0
 3151               	.LLST1:
 3152 0022 0000 0000 		.long	.LVL0
 3153 0026 0000 0000 		.long	.LVL3-1
 3154 002a 0600      		.word	0x6
 3155 002c 68        		.byte	0x68
 3156 002d 93        		.byte	0x93
 3157 002e 01        		.uleb128 0x1
 3158 002f 69        		.byte	0x69
 3159 0030 93        		.byte	0x93
 3160 0031 01        		.uleb128 0x1
 3161 0032 0000 0000 		.long	.LVL3-1
 3162 0036 0000 0000 		.long	.LVL9
 3163 003a 0600      		.word	0x6
 3164 003c 6C        		.byte	0x6c
 3165 003d 93        		.byte	0x93
 3166 003e 01        		.uleb128 0x1
 3167 003f 6D        		.byte	0x6d
 3168 0040 93        		.byte	0x93
 3169 0041 01        		.uleb128 0x1
 3170 0042 0000 0000 		.long	.LVL9
 3171 0046 0000 0000 		.long	.LFE21
 3172 004a 0400      		.word	0x4
 3173 004c F3        		.byte	0xf3
 3174 004d 01        		.uleb128 0x1
 3175 004e 68        		.byte	0x68
 3176 004f 9F        		.byte	0x9f
 3177 0050 0000 0000 		.long	0
 3178 0054 0000 0000 		.long	0
 3179               	.LLST2:
 3180 0058 0000 0000 		.long	.LVL0
 3181 005c 0000 0000 		.long	.LVL2
 3182 0060 0600      		.word	0x6
 3183 0062 66        		.byte	0x66
 3184 0063 93        		.byte	0x93
 3185 0064 01        		.uleb128 0x1
 3186 0065 67        		.byte	0x67
 3187 0066 93        		.byte	0x93
 3188 0067 01        		.uleb128 0x1
 3189 0068 0000 0000 		.long	.LVL2
 3190 006c 0000 0000 		.long	.LFE21
 3191 0070 0600      		.word	0x6
 3192 0072 60        		.byte	0x60
 3193 0073 93        		.byte	0x93
 3194 0074 01        		.uleb128 0x1
 3195 0075 61        		.byte	0x61
 3196 0076 93        		.byte	0x93
 3197 0077 01        		.uleb128 0x1
 3198 0078 0000 0000 		.long	0
 3199 007c 0000 0000 		.long	0
 3200               	.LLST3:
 3201 0080 0000 0000 		.long	.LFB22
 3202 0084 0000 0000 		.long	.LCFI1
 3203 0088 0300      		.word	0x3
 3204 008a 92        		.byte	0x92
 3205 008b 20        		.uleb128 0x20
 3206 008c 02        		.sleb128 2
 3207 008d 0000 0000 		.long	.LCFI1
 3208 0091 0000 0000 		.long	.LCFI2
 3209 0095 0300      		.word	0x3
 3210 0097 92        		.byte	0x92
 3211 0098 20        		.uleb128 0x20
 3212 0099 03        		.sleb128 3
 3213 009a 0000 0000 		.long	.LCFI2
 3214 009e 0000 0000 		.long	.LFE22
 3215 00a2 0300      		.word	0x3
 3216 00a4 92        		.byte	0x92
 3217 00a5 20        		.uleb128 0x20
 3218 00a6 04        		.sleb128 4
 3219 00a7 0000 0000 		.long	0
 3220 00ab 0000 0000 		.long	0
 3221               	.LLST4:
 3222 00af 0000 0000 		.long	.LVL10
 3223 00b3 0000 0000 		.long	.LVL11
 3224 00b7 0600      		.word	0x6
 3225 00b9 68        		.byte	0x68
 3226 00ba 93        		.byte	0x93
 3227 00bb 01        		.uleb128 0x1
 3228 00bc 69        		.byte	0x69
 3229 00bd 93        		.byte	0x93
 3230 00be 01        		.uleb128 0x1
 3231 00bf 0000 0000 		.long	.LVL11
 3232 00c3 0000 0000 		.long	.LFE23
 3233 00c7 0400      		.word	0x4
 3234 00c9 F3        		.byte	0xf3
 3235 00ca 01        		.uleb128 0x1
 3236 00cb 68        		.byte	0x68
 3237 00cc 9F        		.byte	0x9f
 3238 00cd 0000 0000 		.long	0
 3239 00d1 0000 0000 		.long	0
 3240               	.LLST5:
 3241 00d5 0000 0000 		.long	.LVL10
 3242 00d9 0000 0000 		.long	.LVL11
 3243 00dd 0600      		.word	0x6
 3244 00df 68        		.byte	0x68
 3245 00e0 93        		.byte	0x93
 3246 00e1 01        		.uleb128 0x1
 3247 00e2 69        		.byte	0x69
 3248 00e3 93        		.byte	0x93
 3249 00e4 01        		.uleb128 0x1
 3250 00e5 0000 0000 		.long	.LVL11
 3251 00e9 0000 0000 		.long	.LFE23
 3252 00ed 0400      		.word	0x4
 3253 00ef F3        		.byte	0xf3
 3254 00f0 01        		.uleb128 0x1
 3255 00f1 68        		.byte	0x68
 3256 00f2 9F        		.byte	0x9f
 3257 00f3 0000 0000 		.long	0
 3258 00f7 0000 0000 		.long	0
 3259               	.LLST6:
 3260 00fb 0000 0000 		.long	.LFB24
 3261 00ff 0000 0000 		.long	.LCFI3
 3262 0103 0300      		.word	0x3
 3263 0105 92        		.byte	0x92
 3264 0106 20        		.uleb128 0x20
 3265 0107 02        		.sleb128 2
 3266 0108 0000 0000 		.long	.LCFI3
 3267 010c 0000 0000 		.long	.LFE24
 3268 0110 0200      		.word	0x2
 3269 0112 8C        		.byte	0x8c
 3270 0113 27        		.sleb128 39
 3271 0114 0000 0000 		.long	0
 3272 0118 0000 0000 		.long	0
 3273               	.LLST7:
 3274 011c 0000 0000 		.long	.LVL12
 3275 0120 0000 0000 		.long	.LVL23
 3276 0124 0200      		.word	0x2
 3277 0126 30        		.byte	0x30
 3278 0127 9F        		.byte	0x9f
 3279 0128 0000 0000 		.long	.LVL29
 3280 012c 0000 0000 		.long	.LVL30
 3281 0130 0200      		.word	0x2
 3282 0132 31        		.byte	0x31
 3283 0133 9F        		.byte	0x9f
 3284 0134 0000 0000 		.long	0
 3285 0138 0000 0000 		.long	0
 3286               	.LLST8:
 3287 013c 0000 0000 		.long	.LVL12
 3288 0140 0000 0000 		.long	.LVL23
 3289 0144 0200      		.word	0x2
 3290 0146 30        		.byte	0x30
 3291 0147 9F        		.byte	0x9f
 3292 0148 0000 0000 		.long	.LVL29
 3293 014c 0000 0000 		.long	.LVL30
 3294 0150 0200      		.word	0x2
 3295 0152 31        		.byte	0x31
 3296 0153 9F        		.byte	0x9f
 3297 0154 0000 0000 		.long	.LVL31
 3298 0158 0000 0000 		.long	.LVL32
 3299 015c 0100      		.word	0x1
 3300 015e 68        		.byte	0x68
 3301 015f 0000 0000 		.long	.LVL32
 3302 0163 0000 0000 		.long	.LVL33-1
 3303 0167 0500      		.word	0x5
 3304 0169 03        		.byte	0x3
 3305 016a 0000 0000 		.long	reportBuffer+1
 3306 016e 0000 0000 		.long	0
 3307 0172 0000 0000 		.long	0
 3308               	.LLST9:
 3309 0176 0000 0000 		.long	.LVL12
 3310 017a 0000 0000 		.long	.LVL23
 3311 017e 0200      		.word	0x2
 3312 0180 30        		.byte	0x30
 3313 0181 9F        		.byte	0x9f
 3314 0182 0000 0000 		.long	.LVL23
 3315 0186 0000 0000 		.long	.LFE24
 3316 018a 0100      		.word	0x1
 3317 018c 5A        		.byte	0x5a
 3318 018d 0000 0000 		.long	0
 3319 0191 0000 0000 		.long	0
 3320               	.LLST10:
 3321 0195 0000 0000 		.long	.LVL13
 3322 0199 0000 0000 		.long	.LVL22
 3323 019d 0200      		.word	0x2
 3324 019f 30        		.byte	0x30
 3325 01a0 9F        		.byte	0x9f
 3326 01a1 0000 0000 		.long	.LVL22
 3327 01a5 0000 0000 		.long	.LVL23
 3328 01a9 0600      		.word	0x6
 3329 01ab 58        		.byte	0x58
 3330 01ac 93        		.byte	0x93
 3331 01ad 01        		.uleb128 0x1
 3332 01ae 69        		.byte	0x69
 3333 01af 93        		.byte	0x93
 3334 01b0 01        		.uleb128 0x1
 3335 01b1 0000 0000 		.long	.LVL23
 3336 01b5 0000 0000 		.long	.LVL26
 3337 01b9 0700      		.word	0x7
 3338 01bb 58        		.byte	0x58
 3339 01bc 93        		.byte	0x93
 3340 01bd 01        		.uleb128 0x1
 3341 01be 8C        		.byte	0x8c
 3342 01bf 13        		.sleb128 19
 3343 01c0 93        		.byte	0x93
 3344 01c1 01        		.uleb128 0x1
 3345 01c2 0000 0000 		.long	.LVL55
 3346 01c6 0000 0000 		.long	.LFE24
 3347 01ca 0700      		.word	0x7
 3348 01cc 58        		.byte	0x58
 3349 01cd 93        		.byte	0x93
 3350 01ce 01        		.uleb128 0x1
 3351 01cf 8C        		.byte	0x8c
 3352 01d0 13        		.sleb128 19
 3353 01d1 93        		.byte	0x93
 3354 01d2 01        		.uleb128 0x1
 3355 01d3 0000 0000 		.long	0
 3356 01d7 0000 0000 		.long	0
 3357               	.LLST11:
 3358 01db 0000 0000 		.long	.LVL13
 3359 01df 0000 0000 		.long	.LVL23
 3360 01e3 0200      		.word	0x2
 3361 01e5 30        		.byte	0x30
 3362 01e6 9F        		.byte	0x9f
 3363 01e7 0000 0000 		.long	.LVL23
 3364 01eb 0000 0000 		.long	.LVL39
 3365 01ef 0100      		.word	0x1
 3366 01f1 60        		.byte	0x60
 3367 01f2 0000 0000 		.long	.LVL49
 3368 01f6 0000 0000 		.long	.LFE24
 3369 01fa 0100      		.word	0x1
 3370 01fc 60        		.byte	0x60
 3371 01fd 0000 0000 		.long	0
 3372 0201 0000 0000 		.long	0
 3373               	.LLST12:
 3374 0205 0000 0000 		.long	.LVL13
 3375 0209 0000 0000 		.long	.LVL23
 3376 020d 0200      		.word	0x2
 3377 020f 30        		.byte	0x30
 3378 0210 9F        		.byte	0x9f
 3379 0211 0000 0000 		.long	.LVL23
 3380 0215 0000 0000 		.long	.LVL48
 3381 0219 0600      		.word	0x6
 3382 021b 5E        		.byte	0x5e
 3383 021c 93        		.byte	0x93
 3384 021d 01        		.uleb128 0x1
 3385 021e 5F        		.byte	0x5f
 3386 021f 93        		.byte	0x93
 3387 0220 01        		.uleb128 0x1
 3388 0221 0000 0000 		.long	.LVL48
 3389 0225 0000 0000 		.long	.LVL49
 3390 0229 0200      		.word	0x2
 3391 022b 30        		.byte	0x30
 3392 022c 9F        		.byte	0x9f
 3393 022d 0000 0000 		.long	.LVL49
 3394 0231 0000 0000 		.long	.LFE24
 3395 0235 0600      		.word	0x6
 3396 0237 5E        		.byte	0x5e
 3397 0238 93        		.byte	0x93
 3398 0239 01        		.uleb128 0x1
 3399 023a 5F        		.byte	0x5f
 3400 023b 93        		.byte	0x93
 3401 023c 01        		.uleb128 0x1
 3402 023d 0000 0000 		.long	0
 3403 0241 0000 0000 		.long	0
 3404               	.LLST13:
 3405 0245 0000 0000 		.long	.LVL13
 3406 0249 0000 0000 		.long	.LVL23
 3407 024d 0200      		.word	0x2
 3408 024f 30        		.byte	0x30
 3409 0250 9F        		.byte	0x9f
 3410 0251 0000 0000 		.long	.LVL23
 3411 0255 0000 0000 		.long	.LVL24
 3412 0259 0100      		.word	0x1
 3413 025b 68        		.byte	0x68
 3414 025c 0000 0000 		.long	.LVL25
 3415 0260 0000 0000 		.long	.LFE24
 3416 0264 0100      		.word	0x1
 3417 0266 59        		.byte	0x59
 3418 0267 0000 0000 		.long	0
 3419 026b 0000 0000 		.long	0
 3420               	.LLST14:
 3421 026f 0000 0000 		.long	.LVL13
 3422 0273 0000 0000 		.long	.LVL23
 3423 0277 0200      		.word	0x2
 3424 0279 30        		.byte	0x30
 3425 027a 9F        		.byte	0x9f
 3426 027b 0000 0000 		.long	.LVL23
 3427 027f 0000 0000 		.long	.LVL48
 3428 0283 0100      		.word	0x1
 3429 0285 61        		.byte	0x61
 3430 0286 0000 0000 		.long	.LVL48
 3431 028a 0000 0000 		.long	.LVL49
 3432 028e 0200      		.word	0x2
 3433 0290 30        		.byte	0x30
 3434 0291 9F        		.byte	0x9f
 3435 0292 0000 0000 		.long	.LVL49
 3436 0296 0000 0000 		.long	.LFE24
 3437 029a 0100      		.word	0x1
 3438 029c 61        		.byte	0x61
 3439 029d 0000 0000 		.long	0
 3440 02a1 0000 0000 		.long	0
 3441               	.LLST15:
 3442 02a5 0000 0000 		.long	.LVL13
 3443 02a9 0000 0000 		.long	.LVL23
 3444 02ad 0200      		.word	0x2
 3445 02af 30        		.byte	0x30
 3446 02b0 9F        		.byte	0x9f
 3447 02b1 0000 0000 		.long	.LVL23
 3448 02b5 0000 0000 		.long	.LVL42
 3449 02b9 0600      		.word	0x6
 3450 02bb 5C        		.byte	0x5c
 3451 02bc 93        		.byte	0x93
 3452 02bd 01        		.uleb128 0x1
 3453 02be 5D        		.byte	0x5d
 3454 02bf 93        		.byte	0x93
 3455 02c0 01        		.uleb128 0x1
 3456 02c1 0000 0000 		.long	.LVL42
 3457 02c5 0000 0000 		.long	.LVL43
 3458 02c9 0600      		.word	0x6
 3459 02cb 7C        		.byte	0x7c
 3460 02cc 00        		.sleb128 0
 3461 02cd 82        		.byte	0x82
 3462 02ce 00        		.sleb128 0
 3463 02cf 1C        		.byte	0x1c
 3464 02d0 9F        		.byte	0x9f
 3465 02d1 0000 0000 		.long	.LVL44
 3466 02d5 0000 0000 		.long	.LFE24
 3467 02d9 0600      		.word	0x6
 3468 02db 5C        		.byte	0x5c
 3469 02dc 93        		.byte	0x93
 3470 02dd 01        		.uleb128 0x1
 3471 02de 5D        		.byte	0x5d
 3472 02df 93        		.byte	0x93
 3473 02e0 01        		.uleb128 0x1
 3474 02e1 0000 0000 		.long	0
 3475 02e5 0000 0000 		.long	0
 3476               	.LLST16:
 3477 02e9 0000 0000 		.long	.LVL13
 3478 02ed 0000 0000 		.long	.LVL23
 3479 02f1 0200      		.word	0x2
 3480 02f3 30        		.byte	0x30
 3481 02f4 9F        		.byte	0x9f
 3482 02f5 0000 0000 		.long	.LVL23
 3483 02f9 0000 0000 		.long	.LFE24
 3484 02fd 0100      		.word	0x1
 3485 02ff 5B        		.byte	0x5b
 3486 0300 0000 0000 		.long	0
 3487 0304 0000 0000 		.long	0
 3488               	.LLST17:
 3489 0308 0000 0000 		.long	.LVL15
 3490 030c 0000 0000 		.long	.LVL16
 3491 0310 0200      		.word	0x2
 3492 0312 37        		.byte	0x37
 3493 0313 9F        		.byte	0x9f
 3494 0314 0000 0000 		.long	0
 3495 0318 0000 0000 		.long	0
 3496               	.LLST18:
 3497 031c 0000 0000 		.long	.LVL52
 3498 0320 0000 0000 		.long	.LVL54-1
 3499 0324 0600      		.word	0x6
 3500 0326 66        		.byte	0x66
 3501 0327 93        		.byte	0x93
 3502 0328 01        		.uleb128 0x1
 3503 0329 67        		.byte	0x67
 3504 032a 93        		.byte	0x93
 3505 032b 01        		.uleb128 0x1
 3506 032c 0000 0000 		.long	0
 3507 0330 0000 0000 		.long	0
 3508               		.section	.debug_aranges,"",@progbits
 3509 0000 2400 0000 		.long	0x24
 3510 0004 0200      		.word	0x2
 3511 0006 0000 0000 		.long	.Ldebug_info0
 3512 000a 04        		.byte	0x4
 3513 000b 00        		.byte	0
 3514 000c 0000      		.word	0
 3515 000e 0000      		.word	0
 3516 0010 0000 0000 		.long	.Ltext0
 3517 0014 0801 0000 		.long	.Letext0-.Ltext0
 3518 0018 0000 0000 		.long	.LFB24
 3519 001c C402 0000 		.long	.LFE24-.LFB24
 3520 0020 0000 0000 		.long	0
 3521 0024 0000 0000 		.long	0
 3522               		.section	.debug_ranges,"",@progbits
 3523               	.Ldebug_ranges0:
 3524 0000 0000 0000 		.long	.Ltext0
 3525 0004 0000 0000 		.long	.Letext0
 3526 0008 0000 0000 		.long	.LFB24
 3527 000c 0000 0000 		.long	.LFE24
 3528 0010 0000 0000 		.long	0
 3529 0014 0000 0000 		.long	0
 3530               		.section	.debug_line,"",@progbits
 3531               	.Ldebug_line0:
 3532 0000 BE03 0000 		.section	.debug_str,"MS",@progbits,1
 3532      0200 FC00 
 3532      0000 0201 
 3532      FB0E 0A00 
 3532      0101 0101 
 3533               	.LASF29:
 3534 0000 776F 7264 		.string	"word"
 3534      00
 3535               	.LASF75:
 3536 0005 6C66 7372 		.string	"lfsr"
 3536      00
 3537               	.LASF79:
 3538 000a 6361 7074 		.string	"capture_diff"
 3538      7572 655F 
 3538      6469 6666 
 3538      00
 3539               	.LASF90:
 3540 0017 5469 6D65 		.string	"Timer_Set"
 3540      725F 5365 
 3540      7400 
 3541               	.LASF18:
 3542 0021 7265 706F 		.string	"report_id_mouse"
 3542      7274 5F69 
 3542      645F 6D6F 
 3542      7573 6500 
 3543               	.LASF67:
 3544 0031 6C65 645F 		.string	"led_sensor_trig_time"
 3544      7365 6E73 
 3544      6F72 5F74 
 3544      7269 675F 
 3544      7469 6D65 
 3545               	.LASF0:
 3546 0046 696E 7438 		.string	"int8_t"
 3546      5F74 00
 3547               	.LASF34:
 3548 004d 6252 6571 		.string	"bRequest"
 3548      7565 7374 
 3548      00
 3549               	.LASF77:
 3550 0056 7465 6D70 		.string	"temp"
 3550      00
 3551               	.LASF63:
 3552 005b 6669 6C74 		.string	"filter_iir2_data"
 3552      6572 5F69 
 3552      6972 325F 
 3552      6461 7461 
 3552      00
 3553               	.LASF24:
 3554 006c 7369 7A65 		.string	"sizetype"
 3554      7479 7065 
 3554      00
 3555               	.LASF69:
 3556 0075 6C65 645F 		.string	"led_sensor_values"
 3556      7365 6E73 
 3556      6F72 5F76 
 3556      616C 7565 
 3556      7300 
 3557               	.LASF80:
 3558 0087 6361 7074 		.string	"capture_diff_max"
 3558      7572 655F 
 3558      6469 6666 
 3558      5F6D 6178 
 3558      00
 3559               	.LASF105:
 3560 0098 6D61 696E 		.string	"main"
 3560      00
 3561               	.LASF87:
 3562 009d 7573 625F 		.string	"usb_in_stream"
 3562      696E 5F73 
 3562      7472 6561 
 3562      6D00 
 3563               	.LASF21:
 3564 00ab 7265 706F 		.string	"report_id_buf_in_getwritepos"
 3564      7274 5F69 
 3564      645F 6275 
 3564      665F 696E 
 3564      5F67 6574 
 3565               	.LASF32:
 3566 00c8 7573 6252 		.string	"usbRequest"
 3566      6571 7565 
 3566      7374 00
 3567               	.LASF62:
 3568 00d3 6C65 645F 		.string	"led_sensor_blink"
 3568      7365 6E73 
 3568      6F72 5F62 
 3568      6C69 6E6B 
 3568      00
 3569               	.LASF101:
 3570 00e4 7661 6C75 		.string	"value"
 3570      6500 
 3571               	.LASF73:
 3572 00ea 6C65 645F 		.string	"led_sensor_weigthed_sum"
 3572      7365 6E73 
 3572      6F72 5F77 
 3572      6569 6774 
 3572      6865 645F 
 3573               	.LASF92:
 3574 0102 7573 6250 		.string	"usbPoll"
 3574      6F6C 6C00 
 3575               	.LASF23:
 3576 010a 7265 706F 		.string	"report_id_buf_in_data"
 3576      7274 5F69 
 3576      645F 6275 
 3576      665F 696E 
 3576      5F64 6174 
 3577               	.LASF40:
 3578 0120 5449 4D45 		.string	"TIMER_LED_SENSOR_BLINK"
 3578      525F 4C45 
 3578      445F 5345 
 3578      4E53 4F52 
 3578      5F42 4C49 
 3579               	.LASF81:
 3580 0137 6361 7074 		.string	"captured"
 3580      7572 6564 
 3580      00
 3581               	.LASF1:
 3582 0140 7569 6E74 		.string	"uint8_t"
 3582      385F 7400 
 3583               	.LASF96:
 3584 0148 474E 5520 		.string	"GNU C99 5.4.0 -mn-flash=1 -mno-skip-bug -mcall-prologues -mmcu=avr25 -gdwarf-2 -Os -std=c
 3584      4339 3920 
 3584      352E 342E 
 3584      3020 2D6D 
 3584      6E2D 666C 
 3585               	.LASF43:
 3586 01e5 5449 4D45 		.string	"TIMER_SEND_KEY_DOWN"
 3586      525F 5345 
 3586      4E44 5F4B 
 3586      4559 5F44 
 3586      4F57 4E00 
 3587               	.LASF51:
 3588 01f9 6275 7474 		.string	"buttonMask"
 3588      6F6E 4D61 
 3588      736B 00
 3589               	.LASF44:
 3590 0204 5449 4D45 		.string	"TIMER_MEASURE_POT"
 3590      525F 4D45 
 3590      4153 5552 
 3590      455F 504F 
 3590      5400 
 3591               	.LASF48:
 3592 0216 7137 5F38 		.string	"q7_8_t"
 3592      5F74 00
 3593               	.LASF88:
 3594 021d 7072 696E 		.string	"printf_P"
 3594      7466 5F50 
 3594      00
 3595               	.LASF89:
 3596 0226 7573 6249 		.string	"usbInit"
 3596      6E69 7400 
 3597               	.LASF49:
 3598 022e 6669 6C74 		.string	"filter_iir2_t"
 3598      6572 5F69 
 3598      6972 325F 
 3598      7400 
 3599               	.LASF10:
 3600 023c 6C6F 6E67 		.string	"long long int"
 3600      206C 6F6E 
 3600      6720 696E 
 3600      7400 
 3601               	.LASF93:
 3602 024a 7573 6253 		.string	"usbSetInterrupt"
 3602      6574 496E 
 3602      7465 7272 
 3602      7570 7400 
 3603               	.LASF56:
 3604 025a 6969 7232 		.string	"iir2"
 3604      00
 3605               	.LASF61:
 3606 025f 6275 7474 		.string	"buttonPressed"
 3606      6F6E 5072 
 3606      6573 7365 
 3606      6400 
 3607               	.LASF8:
 3608 026d 6C6F 6E67 		.string	"long int"
 3608      2069 6E74 
 3608      00
 3609               	.LASF76:
 3610 0276 7374 6469 		.string	"stdin_get_string_buffer"
 3610      6E5F 6765 
 3610      745F 7374 
 3610      7269 6E67 
 3610      5F62 7566 
 3611               	.LASF95:
 3612 028e 7072 696E 		.string	"printf"
 3612      7466 00
 3613               	.LASF41:
 3614 0295 5449 4D45 		.string	"TIMER_LED_BUTTON_BLINK"
 3614      525F 4C45 
 3614      445F 4255 
 3614      5454 4F4E 
 3614      5F42 4C49 
 3615               	.LASF22:
 3616 02ac 7265 706F 		.string	"report_id_buf_out_data"
 3616      7274 5F69 
 3616      645F 6275 
 3616      665F 6F75 
 3616      745F 6461 
 3617               	.LASF47:
 3618 02c3 5449 4D45 		.string	"TIMER_LAST"
 3618      525F 4C41 
 3618      5354 00
 3619               	.LASF55:
 3620 02ce 7374 6469 		.string	"stdin_get_string_t"
 3620      6E5F 6765 
 3620      745F 7374 
 3620      7269 6E67 
 3620      5F74 00
 3621               	.LASF19:
 3622 02e1 7265 706F 		.string	"report_id_keyboard"
 3622      7274 5F69 
 3622      645F 6B65 
 3622      7962 6F61 
 3622      7264 00
 3623               	.LASF91:
 3624 02f4 5469 6D65 		.string	"Timers_DecreaseAll"
 3624      7273 5F44 
 3624      6563 7265 
 3624      6173 6541 
 3624      6C6C 00
 3625               	.LASF98:
 3626 0307 2F68 6F6D 		.string	"/home/birkler/src/birkler/avrtinybootloader/app_hid"
 3626      652F 6269 
 3626      726B 6C65 
 3626      722F 7372 
 3626      632F 6269 
 3627               	.LASF35:
 3628 033b 7756 616C 		.string	"wValue"
 3628      7565 00
 3629               	.LASF100:
 3630 0342 7764 745F 		.string	"wdt_enable"
 3630      656E 6162 
 3630      6C65 00
 3631               	.LASF85:
 3632 034d 7573 6254 		.string	"usbTxStatus1"
 3632      7853 7461 
 3632      7475 7331 
 3632      00
 3633               	.LASF3:
 3634 035a 756E 7369 		.string	"unsigned char"
 3634      676E 6564 
 3634      2063 6861 
 3634      7200 
 3635               	.LASF25:
 3636 0368 5F5F 6669 		.string	"__file"
 3636      6C65 00
 3637               	.LASF2:
 3638 036f 7369 676E 		.string	"signed char"
 3638      6564 2063 
 3638      6861 7200 
 3639               	.LASF13:
 3640 037b 666C 6167 		.string	"flags"
 3640      7300 
 3641               	.LASF11:
 3642 0381 6C6F 6E67 		.string	"long long unsigned int"
 3642      206C 6F6E 
 3642      6720 756E 
 3642      7369 676E 
 3642      6564 2069 
 3643               	.LASF26:
 3644 0398 7573 6254 		.string	"usbTxStatus"
 3644      7853 7461 
 3644      7475 7300 
 3645               	.LASF6:
 3646 03a4 756E 7369 		.string	"unsigned int"
 3646      676E 6564 
 3646      2069 6E74 
 3646      00
 3647               	.LASF5:
 3648 03b1 7569 6E74 		.string	"uint16_t"
 3648      3136 5F74 
 3648      00
 3649               	.LASF84:
 3650 03ba 7573 6244 		.string	"usbDescriptorHidReport"
 3650      6573 6372 
 3650      6970 746F 
 3650      7248 6964 
 3650      5265 706F 
 3651               	.LASF12:
 3652 03d1 756E 6765 		.string	"unget"
 3652      7400 
 3653               	.LASF52:
 3654 03d7 6D6F 7573 		.string	"mouse"
 3654      6500 
 3655               	.LASF70:
 3656 03dd 6C65 645F 		.string	"led_sensor_nvalues"
 3656      7365 6E73 
 3656      6F72 5F6E 
 3656      7661 6C75 
 3656      6573 00
 3657               	.LASF99:
 3658 03f0 7573 6257 		.string	"usbWord"
 3658      6F72 6400 
 3659               	.LASF57:
 3660 03f8 696E 765F 		.string	"inv_b0"
 3660      6230 00
 3661               	.LASF15:
 3662 03ff 7564 6174 		.string	"udata"
 3662      6100 
 3663               	.LASF82:
 3664 0405 7265 706F 		.string	"reportBuffer"
 3664      7274 4275 
 3664      6666 6572 
 3664      00
 3665               	.LASF16:
 3666 0412 6368 6172 		.string	"char"
 3666      00
 3667               	.LASF68:
 3668 0417 6C65 645F 		.string	"led_sensor_prev_time"
 3668      7365 6E73 
 3668      6F72 5F70 
 3668      7265 765F 
 3668      7469 6D65 
 3669               	.LASF7:
 3670 042c 696E 7433 		.string	"int32_t"
 3670      325F 7400 
 3671               	.LASF71:
 3672 0434 6C65 645F 		.string	"led_sensor_nsample"
 3672      7365 6E73 
 3672      6F72 5F6E 
 3672      7361 6D70 
 3672      6C65 00
 3673               	.LASF28:
 3674 0447 7573 6254 		.string	"usbTxStatus_t"
 3674      7853 7461 
 3674      7475 735F 
 3674      7400 
 3675               	.LASF46:
 3676 0455 5449 4D45 		.string	"TIMER_SELF_TEST"
 3676      525F 5345 
 3676      4C46 5F54 
 3676      4553 5400 
 3677               	.LASF4:
 3678 0465 696E 7431 		.string	"int16_t"
 3678      365F 7400 
 3679               	.LASF86:
 3680 046d 7573 625F 		.string	"usb_out_stream"
 3680      6F75 745F 
 3680      7374 7265 
 3680      616D 00
 3681               	.LASF33:
 3682 047c 626D 5265 		.string	"bmRequestType"
 3682      7175 6573 
 3682      7454 7970 
 3682      6500 
 3683               	.LASF103:
 3684 048a 6861 7264 		.string	"hardwareInit"
 3684      7761 7265 
 3684      496E 6974 
 3684      00
 3685               	.LASF20:
 3686 0497 7265 706F 		.string	"report_id_buf_out_setreadpos"
 3686      7274 5F69 
 3686      645F 6275 
 3686      665F 6F75 
 3686      745F 7365 
 3687               	.LASF60:
 3688 04b4 6461 7461 		.string	"data"
 3688      00
 3689               	.LASF53:
 3690 04b9 7265 706F 		.string	"report_t"
 3690      7274 5F74 
 3690      00
 3691               	.LASF27:
 3692 04c2 6275 6666 		.string	"buffer"
 3692      6572 00
 3693               	.LASF58:
 3694 04c9 6669 6C74 		.string	"filter_iir2"
 3694      6572 5F69 
 3694      6972 3200 
 3695               	.LASF97:
 3696 04d5 6D61 696E 		.string	"main.c"
 3696      2E63 00
 3697               	.LASF9:
 3698 04dc 6C6F 6E67 		.string	"long unsigned int"
 3698      2075 6E73 
 3698      6967 6E65 
 3698      6420 696E 
 3698      7400 
 3699               	.LASF30:
 3700 04ee 6279 7465 		.string	"bytes"
 3700      7300 
 3701               	.LASF94:
 3702 04f4 5469 6D65 		.string	"Timer_HasExpired"
 3702      725F 4861 
 3702      7345 7870 
 3702      6972 6564 
 3702      00
 3703               	.LASF42:
 3704 0505 5449 4D45 		.string	"TIMER_SEND_KEY_UP"
 3704      525F 5345 
 3704      4E44 5F4B 
 3704      4559 5F55 
 3704      5000 
 3705               	.LASF65:
 3706 0517 6C65 645F 		.string	"led_sensor_last_random"
 3706      7365 6E73 
 3706      6F72 5F6C 
 3706      6173 745F 
 3706      7261 6E64 
 3707               	.LASF14:
 3708 052e 7369 7A65 		.string	"size"
 3708      00
 3709               	.LASF45:
 3710 0533 5449 4D45 		.string	"TIMER_DATA_CHANGE"
 3710      525F 4441 
 3710      5441 5F43 
 3710      4841 4E47 
 3710      4500 
 3711               	.LASF38:
 3712 0545 7573 6252 		.string	"usbRequest_t"
 3712      6571 7565 
 3712      7374 5F74 
 3712      00
 3713               	.LASF74:
 3714 0552 6C65 645F 		.string	"led_sensor_weigthed_sum_idx"
 3714      7365 6E73 
 3714      6F72 5F77 
 3714      6569 6774 
 3714      6865 645F 
 3715               	.LASF83:
 3716 056e 5F5F 696F 		.string	"__iob"
 3716      6200 
 3717               	.LASF31:
 3718 0574 7573 6257 		.string	"usbWord_t"
 3718      6F72 645F 
 3718      7400 
 3719               	.LASF78:
 3720 057e 7265 7365 		.string	"reset_vec"
 3720      745F 7665 
 3720      6300 
 3721               	.LASF50:
 3722 0588 7265 706F 		.string	"report_id"
 3722      7274 5F69 
 3722      6400 
 3723               	.LASF64:
 3724 0592 6669 6C74 		.string	"filtered_val"
 3724      6572 6564 
 3724      5F76 616C 
 3724      00
 3725               	.LASF66:
 3726 059f 6C65 645F 		.string	"led_sensor_delta_time"
 3726      7365 6E73 
 3726      6F72 5F64 
 3726      656C 7461 
 3726      5F74 696D 
 3727               	.LASF72:
 3728 05b5 6C65 645F 		.string	"led_sensor_weigthed_sum_data"
 3728      7365 6E73 
 3728      6F72 5F77 
 3728      6569 6774 
 3728      6865 645F 
 3729               	.LASF102:
 3730 05d2 5F5F 7665 		.string	"__vector_16"
 3730      6374 6F72 
 3730      5F31 3600 
 3731               	.LASF17:
 3732 05de 4649 4C45 		.string	"FILE"
 3732      00
 3733               	.LASF37:
 3734 05e3 774C 656E 		.string	"wLength"
 3734      6774 6800 
 3735               	.LASF54:
 3736 05eb 6275 664C 		.string	"bufLen"
 3736      656E 00
 3737               	.LASF36:
 3738 05f2 7749 6E64 		.string	"wIndex"
 3738      6578 00
 3739               	.LASF104:
 3740 05f9 7072 6E67 		.string	"prng_lfsr1_1"
 3740      5F6C 6673 
 3740      7231 5F31 
 3740      00
 3741               	.LASF59:
 3742 0606 7573 6246 		.string	"usbFunctionSetup2"
 3742      756E 6374 
 3742      696F 6E53 
 3742      6574 7570 
 3742      3200 
 3743               	.LASF39:
 3744 0618 5449 4D45 		.string	"TIMER_LED_BLINK"
 3744      525F 4C45 
 3744      445F 424C 
 3744      494E 4B00 
 3745               		.ident	"GCC: (GNU) 5.4.0"
 3746               	.global __do_copy_data
 3747               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccVrx8b2.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccVrx8b2.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccVrx8b2.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccVrx8b2.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccVrx8b2.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccVrx8b2.s:13     .text:0000000000000000 filter_iir2
     /tmp/ccVrx8b2.s:182    .text:00000000000000ee __vector_16
     /tmp/ccVrx8b2.s:215    .text:0000000000000104 usbFunctionSetup2
     /tmp/ccVrx8b2.s:237    .text.startup:0000000000000000 main
     /tmp/ccVrx8b2.s:818    .progmem.data:0000000000000000 __c.2386
     /tmp/ccVrx8b2.s:812    .bss:0000000000000028 led_sensor_delta_time.2376
     /tmp/ccVrx8b2.s:814    .bss:000000000000002a reportBuffer
     /tmp/ccVrx8b2.s:805    .data:0000000000000000 lfsr.2294
                             .bss:0000000000000000 led_sensor_weigthed_sum_data.2382
     /tmp/ccVrx8b2.s:809    .data:0000000000000001 led_sensor_nsample.2381
     /tmp/ccVrx8b2.s:825    .progmem.data:0000000000000004 usbDescriptorHidReport
     /tmp/ccVrx8b2.s:821    .bss:000000000000002c captured
     /tmp/ccVrx8b2.s:907    .bss:000000000000002e capture_diff_max
     /tmp/ccVrx8b2.s:909    .bss:0000000000000030 capture_diff

UNDEFINED SYMBOLS
__mulsi3
__prologue_saves__
__epilogue_restores__
usb_out_stream
__iob
usb_in_stream
printf_P
usbInit
Timer_Set
Timers_DecreaseAll
usbPoll
usbTxStatus1
usbSetInterrupt
Timer_HasExpired
__udivmodhi4
printf
__do_copy_data
__do_clear_bss
