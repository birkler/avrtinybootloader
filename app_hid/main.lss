
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  000012fa  0000138e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010a  008000be  008000be  000013ec  2**0
                  ALLOC
  3 .stab         00001254  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000005a  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000269a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026ac  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000240e  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000010c3  00000000  00000000  00004bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000c2c  00000000  00000000  00005c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002e4  00000000  00000000  000068c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000c9f  00000000  00000000  00006bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001268  00000000  00000000  0000784b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000098  00000000  00000000  00008ab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	70 c4       	rjmp	.+2272   	; 0x8e4 <__vector_1>
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	99 c0       	rjmp	.+306    	; 0x13a <__bad_interrupt>
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	97 c0       	rjmp	.+302    	; 0x13a <__bad_interrupt>
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	95 c0       	rjmp	.+298    	; 0x13a <__bad_interrupt>
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	93 c0       	rjmp	.+294    	; 0x13a <__bad_interrupt>
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	91 c0       	rjmp	.+290    	; 0x13a <__bad_interrupt>
      18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
      1a:	8f c0       	rjmp	.+286    	; 0x13a <__bad_interrupt>
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	8d c0       	rjmp	.+282    	; 0x13a <__bad_interrupt>
      20:	a4 c2       	rjmp	.+1352   	; 0x56a <__vector_16>
      22:	8b c0       	rjmp	.+278    	; 0x13a <__bad_interrupt>
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>

00000026 <__trampolines_end>:
      26:	09 02       	muls	r16, r25
      28:	22 00       	.word	0x0022	; ????
      2a:	01 01       	movw	r0, r2
      2c:	00 80       	ld	r0, Z
      2e:	32 09       	sbc	r19, r2
      30:	04 00       	.word	0x0004	; ????
      32:	00 01       	movw	r0, r0
      34:	03 00       	.word	0x0003	; ????
      36:	00 00       	nop
      38:	09 21       	and	r16, r9
      3a:	01 01       	movw	r0, r2
      3c:	00 01       	movw	r0, r0
      3e:	22 50       	subi	r18, 0x02	; 2
      40:	00 07       	cpc	r16, r16
      42:	05 81       	ldd	r16, Z+5	; 0x05
      44:	03 08       	sbc	r0, r3
      46:	00 64       	ori	r16, 0x40	; 64

00000048 <usbDescriptorDevice>:
      48:	12 01 10 01 00 00 00 08 42 42 55 e4 09 00 01 02     ........BBU.....
      58:	00 01                                               ..

0000005a <usbDescriptorStringDevice>:
      5a:	24 03 42 00 69 00 72 00 6b 00 6c 00 65 00 72 00     $.B.i.r.k.l.e.r.
      6a:	20 00 53 00 69 00 6d 00 70 00 6c 00 65 00 48 00      .S.i.m.p.l.e.H.
      7a:	49 00 44 00                                         I.D.

0000007e <usbDescriptorStringVendor>:
      7e:	16 03 62 00 69 00 72 00 6b 00 6c 00 65 00 72 00     ..b.i.r.k.l.e.r.
      8e:	2e 00 73 00 65 00                                   ..s.e.

00000094 <usbDescriptorString0>:
      94:	04 03 09 04                                         ....

00000098 <__c.2386>:
      98:	42 21 0a 00                                         B!..

0000009c <usbDescriptorHidReport>:
      9c:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
      ac:	15 00 25 01 95 03 75 01 85 01 81 02 95 01 75 05     ..%...u.......u.
      bc:	81 03 c0 c0 0b 00 00 01 00 a1 00 05 01 75 10 95     .............u..
      cc:	01 09 00 85 7c b1 02 09 00 85 7d b1 02 75 08 95     ....|.....}..u..
      dc:	44 09 00 85 7e b1 00 09 00 95 09 85 7f b1 00 c0     D...~...........

000000ec <__c.2320>:
      ec:	45 46 47 65 66 67 00                                EFGefg.

000000f3 <__c.2314>:
      f3:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
     103:	00                                                  .

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf e5       	ldi	r28, 0x5F	; 95
     10a:	d2 e0       	ldi	r29, 0x02	; 2
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	10 e0       	ldi	r17, 0x00	; 0
     112:	a0 e6       	ldi	r26, 0x60	; 96
     114:	b0 e0       	ldi	r27, 0x00	; 0
     116:	ea ef       	ldi	r30, 0xFA	; 250
     118:	f2 e1       	ldi	r31, 0x12	; 18
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	ae 3b       	cpi	r26, 0xBE	; 190
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
     126:	21 e0       	ldi	r18, 0x01	; 1
     128:	ae eb       	ldi	r26, 0xBE	; 190
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a8 3c       	cpi	r26, 0xC8	; 200
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
     136:	34 d5       	rcall	.+2664   	; 0xba0 <main>
     138:	de c8       	rjmp	.-3652   	; 0xfffff2f6 <__eeprom_end+0xff7ef2f6>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     13c:	cf 93       	push	r28
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
     13e:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <usbTxStatus1>
     142:	2e 31       	cpi	r18, 0x1E	; 30
     144:	f1 f0       	breq	.+60     	; 0x182 <usbSetInterrupt+0x46>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     146:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <usbTxStatus1>
     14a:	24 ff       	sbrs	r18, 4
     14c:	0b c0       	rjmp	.+22     	; 0x164 <usbSetInterrupt+0x28>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     14e:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <usbTxStatus1+0x1>
     152:	28 e8       	ldi	r18, 0x88	; 136
     154:	23 27       	eor	r18, r19
     156:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <usbTxStatus1+0x1>
     15a:	fc 01       	movw	r30, r24
     15c:	a9 e9       	ldi	r26, 0x99	; 153
     15e:	b1 e0       	ldi	r27, 0x01	; 1
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     160:	86 2f       	mov	r24, r22
     162:	04 c0       	rjmp	.+8      	; 0x16c <usbSetInterrupt+0x30>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     164:	2a e5       	ldi	r18, 0x5A	; 90
     166:	20 93 97 01 	sts	0x0197, r18	; 0x800197 <usbTxStatus1>
     16a:	f7 cf       	rjmp	.-18     	; 0x15a <usbSetInterrupt+0x1e>
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     16c:	91 91       	ld	r25, Z+
     16e:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     170:	81 50       	subi	r24, 0x01	; 1
     172:	e1 f7       	brne	.-8      	; 0x16c <usbSetInterrupt+0x30>
     174:	c6 2f       	mov	r28, r22
    usbCrc16Append(&txStatus->buffer[1], len);
     176:	89 e9       	ldi	r24, 0x99	; 153
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	9d d3       	rcall	.+1850   	; 0x8b6 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     17c:	cc 5f       	subi	r28, 0xFC	; 252
     17e:	c0 93 97 01 	sts	0x0197, r28	; 0x800197 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     18a:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <usbRxLen>
     18e:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     190:	67 fd       	sbrc	r22, 7
     192:	e9 c0       	rjmp	.+466    	; 0x366 <__stack+0x107>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     194:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <usbInputBufOffset>
     198:	cc e0       	ldi	r28, 0x0C	; 12
     19a:	d0 e0       	ldi	r29, 0x00	; 0
     19c:	c8 1b       	sub	r28, r24
     19e:	d1 09       	sbc	r29, r1
     1a0:	c4 55       	subi	r28, 0x54	; 84
     1a2:	de 4f       	sbci	r29, 0xFE	; 254
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     1a4:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <usbRxToken>
     1a8:	8d 32       	cpi	r24, 0x2D	; 45
     1aa:	09 f0       	breq	.+2      	; 0x1ae <usbPoll+0x28>
     1ac:	cb c0       	rjmp	.+406    	; 0x344 <__stack+0xe5>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     1ae:	68 30       	cpi	r22, 0x08	; 8
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <usbPoll+0x2e>
     1b2:	d7 c0       	rjmp	.+430    	; 0x362 <__stack+0x103>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     1b4:	83 ec       	ldi	r24, 0xC3	; 195
     1b6:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     1ba:	8a e5       	ldi	r24, 0x5A	; 90
     1bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
        usbMsgFlags = 0;
     1c0:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     1c4:	28 81       	ld	r18, Y
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     1c6:	82 2f       	mov	r24, r18
     1c8:	80 76       	andi	r24, 0x60	; 96
     1ca:	31 f0       	breq	.+12     	; 0x1d8 <usbPoll+0x52>
            replyLen = usbFunctionSetup(data);
     1cc:	ce 01       	movw	r24, r28
     1ce:	fa d2       	rcall	.+1524   	; 0x7c4 <usbFunctionSetup>
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     1d0:	8f 3f       	cpi	r24, 0xFF	; 255
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <usbPoll+0x50>
     1d4:	a6 c0       	rjmp	.+332    	; 0x322 <__stack+0xc3>
     1d6:	ac c0       	rjmp	.+344    	; 0x330 <__stack+0xd1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     1d8:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
     1da:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     1dc:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     1e2:	81 11       	cpse	r24, r1
     1e4:	13 c0       	rjmp	.+38     	; 0x20c <usbPoll+0x86>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
     1e6:	2f 71       	andi	r18, 0x1F	; 31
     1e8:	22 30       	cpi	r18, 0x02	; 2
     1ea:	51 f4       	brne	.+20     	; 0x200 <usbPoll+0x7a>
     1ec:	31 38       	cpi	r19, 0x81	; 129
     1ee:	41 f4       	brne	.+16     	; 0x200 <usbPoll+0x7a>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
     1f0:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <usbTxStatus1>
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	9e 31       	cpi	r25, 0x1E	; 30
     1f8:	09 f0       	breq	.+2      	; 0x1fc <usbPoll+0x76>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <usbTxBuf+0x9>
#endif
        dataPtr[1] = 0;
     200:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <usbTxBuf+0xa>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
     204:	25 e9       	ldi	r18, 0x95	; 149
     206:	31 e0       	ldi	r19, 0x01	; 1
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	86 c0       	rjmp	.+268    	; 0x318 <__stack+0xb9>
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
     20c:	28 2f       	mov	r18, r24
     20e:	2d 7f       	andi	r18, 0xFD	; 253
     210:	21 30       	cpi	r18, 0x01	; 1
     212:	81 f4       	brne	.+32     	; 0x234 <usbPoll+0xae>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
     214:	91 11       	cpse	r25, r1
     216:	7d c0       	rjmp	.+250    	; 0x312 <__stack+0xb3>
     218:	31 38       	cpi	r19, 0x81	; 129
     21a:	09 f0       	breq	.+2      	; 0x21e <usbPoll+0x98>
     21c:	7a c0       	rjmp	.+244    	; 0x312 <__stack+0xb3>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	11 f0       	breq	.+4      	; 0x226 <usbPoll+0xa0>
     222:	8e e1       	ldi	r24, 0x1E	; 30
     224:	01 c0       	rjmp	.+2      	; 0x228 <usbPoll+0xa2>
     226:	8a e5       	ldi	r24, 0x5A	; 90
     228:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <usbTxStatus1>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     22c:	8b e4       	ldi	r24, 0x4B	; 75
     22e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <usbTxStatus1+0x1>
     232:	6f c0       	rjmp	.+222    	; 0x312 <__stack+0xb3>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     234:	85 30       	cpi	r24, 0x05	; 5
     236:	19 f4       	brne	.+6      	; 0x23e <usbPoll+0xb8>
        usbNewDeviceAddr = value;
     238:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <usbNewDeviceAddr>
     23c:	6a c0       	rjmp	.+212    	; 0x312 <__stack+0xb3>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     23e:	86 30       	cpi	r24, 0x06	; 6
     240:	09 f0       	breq	.+2      	; 0x244 <usbPoll+0xbe>
     242:	4e c0       	rjmp	.+156    	; 0x2e0 <__stack+0x81>
     244:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	41 f4       	brne	.+16     	; 0x25a <usbPoll+0xd4>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     24a:	88 e4       	ldi	r24, 0x48	; 72
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <usbMsgPtr+0x1>
     252:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <usbMsgPtr>
     256:	82 e1       	ldi	r24, 0x12	; 18
     258:	3f c0       	rjmp	.+126    	; 0x2d8 <__stack+0x79>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     25a:	82 30       	cpi	r24, 0x02	; 2
     25c:	41 f4       	brne	.+16     	; 0x26e <__stack+0xf>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     25e:	86 e2       	ldi	r24, 0x26	; 38
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <usbMsgPtr+0x1>
     266:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <usbMsgPtr>
     26a:	82 e2       	ldi	r24, 0x22	; 34
     26c:	35 c0       	rjmp	.+106    	; 0x2d8 <__stack+0x79>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	f1 f4       	brne	.+60     	; 0x2ae <__stack+0x4f>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
     272:	91 11       	cpse	r25, r1
     274:	08 c0       	rjmp	.+16     	; 0x286 <__stack+0x27>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     276:	84 e9       	ldi	r24, 0x94	; 148
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <usbMsgPtr+0x1>
     27e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <usbMsgPtr>
     282:	84 e0       	ldi	r24, 0x04	; 4
     284:	29 c0       	rjmp	.+82     	; 0x2d8 <__stack+0x79>
        SWITCH_CASE(1)
     286:	91 30       	cpi	r25, 0x01	; 1
     288:	41 f4       	brne	.+16     	; 0x29a <__stack+0x3b>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     28a:	8e e7       	ldi	r24, 0x7E	; 126
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <usbMsgPtr+0x1>
     292:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <usbMsgPtr>
     296:	86 e1       	ldi	r24, 0x16	; 22
     298:	1f c0       	rjmp	.+62     	; 0x2d8 <__stack+0x79>
        SWITCH_CASE(2)
     29a:	92 30       	cpi	r25, 0x02	; 2
     29c:	e1 f4       	brne	.+56     	; 0x2d6 <__stack+0x77>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     29e:	8a e5       	ldi	r24, 0x5A	; 90
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <usbMsgPtr+0x1>
     2a6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <usbMsgPtr>
     2aa:	84 e2       	ldi	r24, 0x24	; 36
     2ac:	15 c0       	rjmp	.+42     	; 0x2d8 <__stack+0x79>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     2ae:	81 32       	cpi	r24, 0x21	; 33
     2b0:	41 f4       	brne	.+16     	; 0x2c2 <__stack+0x63>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     2b2:	88 e3       	ldi	r24, 0x38	; 56
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <usbMsgPtr+0x1>
     2ba:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <usbMsgPtr>
     2be:	89 e0       	ldi	r24, 0x09	; 9
     2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <__stack+0x79>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     2c2:	82 32       	cpi	r24, 0x22	; 34
     2c4:	41 f4       	brne	.+16     	; 0x2d6 <__stack+0x77>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     2c6:	8c e9       	ldi	r24, 0x9C	; 156
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <usbMsgPtr+0x1>
     2ce:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <usbMsgPtr>
     2d2:	80 e5       	ldi	r24, 0x50	; 80
     2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <__stack+0x79>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     2d6:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     2d8:	90 e4       	ldi	r25, 0x40	; 64
     2da:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <usbMsgFlags>
     2de:	28 c0       	rjmp	.+80     	; 0x330 <__stack+0xd1>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     2e0:	88 30       	cpi	r24, 0x08	; 8
     2e2:	81 f0       	breq	.+32     	; 0x304 <__stack+0xa5>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     2e4:	89 30       	cpi	r24, 0x09	; 9
     2e6:	19 f4       	brne	.+6      	; 0x2ee <__stack+0x8f>
        usbConfiguration = value;
     2e8:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <usbConfiguration>
     2ec:	07 c0       	rjmp	.+14     	; 0x2fc <__stack+0x9d>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     2ee:	8a 30       	cpi	r24, 0x0A	; 10
     2f0:	61 f0       	breq	.+24     	; 0x30a <__stack+0xab>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     2f2:	8b 30       	cpi	r24, 0x0B	; 11
     2f4:	71 f4       	brne	.+28     	; 0x312 <__stack+0xb3>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     2f6:	8b e4       	ldi	r24, 0x4B	; 75
     2f8:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <usbTxStatus1+0x1>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     2fc:	8a e5       	ldi	r24, 0x5A	; 90
     2fe:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <usbTxStatus1>
     302:	07 c0       	rjmp	.+14     	; 0x312 <__stack+0xb3>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
     304:	2b ea       	ldi	r18, 0xAB	; 171
     306:	31 e0       	ldi	r19, 0x01	; 1
     308:	02 c0       	rjmp	.+4      	; 0x30e <__stack+0xaf>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
     30a:	25 e9       	ldi	r18, 0x95	; 149
     30c:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	03 c0       	rjmp	.+6      	; 0x318 <__stack+0xb9>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
     312:	25 e9       	ldi	r18, 0x95	; 149
     314:	31 e0       	ldi	r19, 0x01	; 1
     316:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     318:	30 93 a7 01 	sts	0x01A7, r19	; 0x8001a7 <usbMsgPtr+0x1>
     31c:	20 93 a6 01 	sts	0x01A6, r18	; 0x8001a6 <usbMsgPtr>
     320:	07 c0       	rjmp	.+14     	; 0x330 <__stack+0xd1>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     322:	98 81       	ld	r25, Y
     324:	97 fd       	sbrc	r25, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     326:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     328:	90 e8       	ldi	r25, 0x80	; 128
     32a:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <usbMsgFlags>
     32e:	07 c0       	rjmp	.+14     	; 0x33e <__stack+0xdf>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     330:	9f 81       	ldd	r25, Y+7	; 0x07
     332:	91 11       	cpse	r25, r1
     334:	04 c0       	rjmp	.+8      	; 0x33e <__stack+0xdf>
     336:	9e 81       	ldd	r25, Y+6	; 0x06
     338:	98 17       	cp	r25, r24
     33a:	08 f4       	brcc	.+2      	; 0x33e <__stack+0xdf>
     33c:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     33e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     342:	0f c0       	rjmp	.+30     	; 0x362 <__stack+0x103>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     344:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <usbMsgFlags>
     348:	87 ff       	sbrs	r24, 7
     34a:	0b c0       	rjmp	.+22     	; 0x362 <__stack+0x103>
            uchar rval = usbFunctionWrite(data, len);
     34c:	ce 01       	movw	r24, r28
     34e:	82 d2       	rcall	.+1284   	; 0x854 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     350:	8f 3f       	cpi	r24, 0xFF	; 255
     352:	21 f4       	brne	.+8      	; 0x35c <__stack+0xfd>
                usbTxLen = USBPID_STALL;
     354:	8e e1       	ldi	r24, 0x1E	; 30
     356:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
     35a:	03 c0       	rjmp	.+6      	; 0x362 <__stack+0x103>
            }else if(rval != 0){    /* This was the final package */
     35c:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     35e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     362:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     366:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbTxLen>
     36a:	84 ff       	sbrs	r24, 4
     36c:	55 c0       	rjmp	.+170    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     36e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     372:	8f 3f       	cpi	r24, 0xFF	; 255
     374:	09 f4       	brne	.+2      	; 0x378 <__stack+0x119>
     376:	50 c0       	rjmp	.+160    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     378:	c8 2f       	mov	r28, r24
     37a:	89 30       	cpi	r24, 0x09	; 9
     37c:	08 f0       	brcs	.+2      	; 0x380 <__stack+0x121>
     37e:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     380:	8c 1b       	sub	r24, r28
     382:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     386:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <usbTxBuf>
     38a:	88 e8       	ldi	r24, 0x88	; 136
     38c:	89 27       	eor	r24, r25
     38e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <usbTxBuf>
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     392:	cc 23       	and	r28, r28
     394:	09 f4       	brne	.+2      	; 0x398 <__stack+0x139>
     396:	5c c0       	rjmp	.+184    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     398:	20 91 bf 00 	lds	r18, 0x00BF	; 0x8000bf <usbMsgFlags>
     39c:	27 ff       	sbrs	r18, 7
     39e:	08 c0       	rjmp	.+16     	; 0x3b0 <__stack+0x151>
            len = usbFunctionRead(data, len);
     3a0:	6c 2f       	mov	r22, r28
     3a2:	8d e8       	ldi	r24, 0x8D	; 141
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	2c d2       	rcall	.+1112   	; 0x800 <usbFunctionRead>
     3a8:	c8 2f       	mov	r28, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
     3aa:	89 30       	cpi	r24, 0x09	; 9
     3ac:	78 f5       	brcc	.+94     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3ae:	23 c0       	rjmp	.+70     	; 0x3f6 <__stack+0x197>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
     3b0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <usbMsgPtr>
     3b4:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     3b8:	26 ff       	sbrs	r18, 6
     3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <__stack+0x171>
     3bc:	ad e8       	ldi	r26, 0x8D	; 141
     3be:	b1 e0       	ldi	r27, 0x01	; 1
     3c0:	fc 01       	movw	r30, r24
     3c2:	2c 2f       	mov	r18, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     3c4:	34 91       	lpm	r19, Z
                    *data++ = c;
     3c6:	3d 93       	st	X+, r19
                    r++;
     3c8:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
     3ca:	21 50       	subi	r18, 0x01	; 1
     3cc:	d9 f7       	brne	.-10     	; 0x3c4 <__stack+0x165>
     3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <__stack+0x181>
     3d0:	dc 01       	movw	r26, r24
     3d2:	ed e8       	ldi	r30, 0x8D	; 141
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     3d6:	2c 2f       	mov	r18, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
     3d8:	3d 91       	ld	r19, X+
     3da:	31 93       	st	Z+, r19
                }while(--i);
     3dc:	21 50       	subi	r18, 0x01	; 1
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <__stack+0x179>
     3e0:	2f ef       	ldi	r18, 0xFF	; 255
     3e2:	2c 0f       	add	r18, r28
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	2f 5f       	subi	r18, 0xFF	; 255
     3e8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ea:	82 0f       	add	r24, r18
     3ec:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
     3ee:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <usbMsgPtr+0x1>
     3f2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     3f6:	6c 2f       	mov	r22, r28
     3f8:	8d e8       	ldi	r24, 0x8D	; 141
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	5c d2       	rcall	.+1208   	; 0x8b6 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     3fe:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     400:	cc 30       	cpi	r28, 0x0C	; 12
     402:	41 f0       	breq	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
            usbMsgLen = USB_NO_MSG;
     404:	8f ef       	ldi	r24, 0xFF	; 255
     406:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     40a:	04 c0       	rjmp	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     412:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
     414:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <usbTxLen>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     418:	84 e1       	ldi	r24, 0x14	; 20
        uchar usbLineStatus = USBIN & USBMASK;
     41a:	96 b3       	in	r25, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
     41c:	94 74       	andi	r25, 0x44	; 68
     41e:	49 f4       	brne	.+18     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     420:	81 50       	subi	r24, 0x01	; 1
     422:	d9 f7       	brne	.-10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     424:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
     428:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <usbDeviceAddr>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     42c:	9a e5       	ldi	r25, 0x5A	; 90
     42e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <usbTxStatus1>

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
     432:	c1 e0       	ldi	r28, 0x01	; 1
     434:	81 11       	cpse	r24, r1
     436:	c0 e0       	ldi	r28, 0x00	; 0

    if(wasReset != isReset){
     438:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <__data_end>
     43c:	c9 17       	cp	r28, r25
     43e:	71 f0       	breq	.+28     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
        USB_RESET_HOOK(isReset);
     440:	88 23       	and	r24, r24
     442:	19 f0       	breq	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	f8 94       	cli
     446:	9e d0       	rcall	.+316    	; 0x584 <calibrateOscillator>
     448:	78 94       	sei
        wasReset = isReset;
     44a:	c0 93 be 00 	sts	0x00BE, r28	; 0x8000be <__data_end>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     44e:	06 c0       	rjmp	.+12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	8d e8       	ldi	r24, 0x8D	; 141
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	2f d2       	rcall	.+1118   	; 0x8b6 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     458:	c4 e0       	ldi	r28, 0x04	; 4
     45a:	d4 cf       	rjmp	.-88     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     462:	85 b7       	in	r24, 0x35	; 53
     464:	82 60       	ori	r24, 0x02	; 2
     466:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     468:	8b b7       	in	r24, 0x3b	; 59
     46a:	80 64       	ori	r24, 0x40	; 64
     46c:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     46e:	e7 e9       	ldi	r30, 0x97	; 151
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	8b e4       	ldi	r24, 0x4B	; 75
     474:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     476:	8a e5       	ldi	r24, 0x5A	; 90
     478:	80 83       	st	Z, r24
     47a:	08 95       	ret

0000047c <filter_iir2>:
	return res;
}
*/

q7_8_t filter_iir2(filter_iir2_t* iir2,q7_8_t in)
{
     47c:	a0 e0       	ldi	r26, 0x00	; 0
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e3 e4       	ldi	r30, 0x43	; 67
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	26 c6       	rjmp	.+3148   	; 0x10d2 <__prologue_saves__+0x4>
     486:	ec 01       	movw	r28, r24
     488:	8b 01       	movw	r16, r22
	const q7_8_t inv_b0 = q7_8_float(1/1.0);
	const q7_8_t _b1 = -q7_8_float(-1.6185197);
	const q7_8_t _b2 = -q7_8_float(0.71059346);

	q7_8_t res;
	res =  q7_8_mul(inv_b0,q7_8_sum(
     48a:	ec 80       	ldd	r14, Y+4	; 0x04
     48c:	fd 80       	ldd	r15, Y+5	; 0x05
     48e:	c8 80       	ld	r12, Y
     490:	d9 80       	ldd	r13, Y+1	; 0x01
     492:	07 2e       	mov	r0, r23
     494:	00 0c       	add	r0, r0
     496:	88 0b       	sbc	r24, r24
     498:	99 0b       	sbc	r25, r25
     49a:	25 e0       	ldi	r18, 0x05	; 5
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	e8 d5       	rcall	.+3024   	; 0x1074 <__mulsi3>
     4a4:	47 2e       	mov	r4, r23
     4a6:	58 2e       	mov	r5, r24
     4a8:	69 2e       	mov	r6, r25
     4aa:	77 24       	eor	r7, r7
     4ac:	67 fc       	sbrc	r6, 7
     4ae:	7a 94       	dec	r7
     4b0:	b7 01       	movw	r22, r14
     4b2:	0f 2c       	mov	r0, r15
     4b4:	00 0c       	add	r0, r0
     4b6:	88 0b       	sbc	r24, r24
     4b8:	99 0b       	sbc	r25, r25
     4ba:	2a e0       	ldi	r18, 0x0A	; 10
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	d8 d5       	rcall	.+2992   	; 0x1074 <__mulsi3>
     4c4:	bb 27       	eor	r27, r27
     4c6:	97 fd       	sbrc	r25, 7
     4c8:	ba 95       	dec	r27
     4ca:	a9 2f       	mov	r26, r25
     4cc:	98 2f       	mov	r25, r24
     4ce:	87 2f       	mov	r24, r23
     4d0:	32 01       	movw	r6, r4
     4d2:	68 0e       	add	r6, r24
     4d4:	79 1e       	adc	r7, r25
     4d6:	6e 81       	ldd	r22, Y+6	; 0x06
     4d8:	7f 81       	ldd	r23, Y+7	; 0x07
     4da:	07 2e       	mov	r0, r23
     4dc:	00 0c       	add	r0, r0
     4de:	88 0b       	sbc	r24, r24
     4e0:	99 0b       	sbc	r25, r25
     4e2:	25 e0       	ldi	r18, 0x05	; 5
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	c4 d5       	rcall	.+2952   	; 0x1074 <__mulsi3>
     4ec:	bb 27       	eor	r27, r27
     4ee:	97 fd       	sbrc	r25, 7
     4f0:	ba 95       	dec	r27
     4f2:	a9 2f       	mov	r26, r25
     4f4:	98 2f       	mov	r25, r24
     4f6:	87 2f       	mov	r24, r23
     4f8:	43 01       	movw	r8, r6
     4fa:	88 0e       	add	r8, r24
     4fc:	99 1e       	adc	r9, r25
     4fe:	b6 01       	movw	r22, r12
     500:	0d 2c       	mov	r0, r13
     502:	00 0c       	add	r0, r0
     504:	88 0b       	sbc	r24, r24
     506:	99 0b       	sbc	r25, r25
     508:	2e e9       	ldi	r18, 0x9E	; 158
     50a:	31 e0       	ldi	r19, 0x01	; 1
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	b1 d5       	rcall	.+2914   	; 0x1074 <__mulsi3>
     512:	bb 27       	eor	r27, r27
     514:	97 fd       	sbrc	r25, 7
     516:	ba 95       	dec	r27
     518:	a9 2f       	mov	r26, r25
     51a:	98 2f       	mov	r25, r24
     51c:	87 2f       	mov	r24, r23
     51e:	54 01       	movw	r10, r8
     520:	a8 0e       	add	r10, r24
     522:	b9 1e       	adc	r11, r25
     524:	6a 81       	ldd	r22, Y+2	; 0x02
     526:	7b 81       	ldd	r23, Y+3	; 0x03
     528:	07 2e       	mov	r0, r23
     52a:	00 0c       	add	r0, r0
     52c:	88 0b       	sbc	r24, r24
     52e:	99 0b       	sbc	r25, r25
     530:	2b e4       	ldi	r18, 0x4B	; 75
     532:	3f ef       	ldi	r19, 0xFF	; 255
     534:	4f ef       	ldi	r20, 0xFF	; 255
     536:	5f ef       	ldi	r21, 0xFF	; 255
     538:	9d d5       	rcall	.+2874   	; 0x1074 <__mulsi3>
     53a:	bb 27       	eor	r27, r27
     53c:	97 fd       	sbrc	r25, 7
     53e:	ba 95       	dec	r27
     540:	a9 2f       	mov	r26, r25
     542:	98 2f       	mov	r25, r24
     544:	87 2f       	mov	r24, r23
     546:	8a 0d       	add	r24, r10
     548:	9b 1d       	adc	r25, r11
     54a:	09 2e       	mov	r0, r25
     54c:	00 0c       	add	r0, r0
     54e:	aa 0b       	sbc	r26, r26
     550:	bb 0b       	sbc	r27, r27
			q7_8_mul(a1,iir2->x_1),
			q7_8_mul(a2,iir2->x_2),
			q7_8_mul(_b1,iir2->y_1),
			q7_8_mul(_b2,iir2->y_2)));
	//printf("%f,",iir2->b0);
	iir2->y_2 = iir2->y_1;
     552:	db 82       	std	Y+3, r13	; 0x03
     554:	ca 82       	std	Y+2, r12	; 0x02
	iir2->y_1 = res;
     556:	99 83       	std	Y+1, r25	; 0x01
     558:	88 83       	st	Y, r24
	iir2->x_2 = iir2->x_1;
     55a:	ff 82       	std	Y+7, r15	; 0x07
     55c:	ee 82       	std	Y+6, r14	; 0x06
	iir2->x_1 = in;
     55e:	1d 83       	std	Y+5, r17	; 0x05
     560:	0c 83       	std	Y+4, r16	; 0x04
	return res;
}
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	e0 e1       	ldi	r30, 0x10	; 16
     568:	d0 c5       	rjmp	.+2976   	; 0x110a <__epilogue_restores__+0x4>

0000056a <__vector_16>:
static volatile uint16_t capture_diff_max;
static volatile uint16_t captured;


ISR(TIMER0_CAPT_vect,ISR_NOBLOCK )
{
     56a:	78 94       	sei
     56c:	1f 92       	push	r1
     56e:	0f 92       	push	r0
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	0f 92       	push	r0
     574:	11 24       	eor	r1, r1
	if (capture_diff > capture_diff_max) {
		capture_diff_max = capture_diff;
	}
	captured++;
*/
}
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <usbFunctionSetup2>:
		}
	}else{
		/* no vendor specific requests implemented */
	}
	return 0;   /* default for not implemented requests: return no data back to host */
}
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	08 95       	ret

00000584 <calibrateOscillator>:
 * signal (a single SE0 bit) repeating every millisecond immediately after
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	e7 ec       	ldi	r30, 0xC7	; 199
     58a:	f2 e0       	ldi	r31, 0x02	; 2
     58c:	ab c5       	rjmp	.+2902   	; 0x10e4 <__prologue_saves__+0x16>
     58e:	08 e0       	ldi	r16, 0x08	; 8
     590:	10 e0       	ldi	r17, 0x00	; 0
uchar       step = 128;
uchar       trialValue = 0, optimumValue;
     592:	c0 e0       	ldi	r28, 0x00	; 0
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
uchar       step = 128;
     594:	d0 e8       	ldi	r29, 0x80	; 128
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
     596:	dd 2e       	mov	r13, r29
     598:	dc 0e       	add	r13, r28
     59a:	d1 be       	out	0x31, r13	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
     59c:	90 d1       	rcall	.+800    	; 0x8be <usbMeasureFrameLength>
     59e:	7c 01       	movw	r14, r24
        if(x < targetValue)             /* frequency still too low */
     5a0:	84 e3       	ldi	r24, 0x34	; 52
     5a2:	e8 16       	cp	r14, r24
     5a4:	89 e0       	ldi	r24, 0x09	; 9
     5a6:	f8 06       	cpc	r15, r24
     5a8:	0c f4       	brge	.+2      	; 0x5ac <calibrateOscillator+0x28>
            trialValue += step;
     5aa:	cd 2d       	mov	r28, r13
        step >>= 1;
     5ac:	d6 95       	lsr	r29
     5ae:	01 50       	subi	r16, 0x01	; 1
     5b0:	11 09       	sbc	r17, r1
    }while(step > 0);
     5b2:	89 f7       	brne	.-30     	; 0x596 <calibrateOscillator+0x12>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
     5b6:	8c 0f       	add	r24, r28
     5b8:	81 bf       	out	0x31, r24	; 49
     5ba:	0c 2f       	mov	r16, r28
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	81 b7       	in	r24, 0x31	; 49
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	08 17       	cp	r16, r24
     5c8:	19 07       	cpc	r17, r25
     5ca:	8c f0       	brlt	.+34     	; 0x5ee <calibrateOscillator+0x6a>
        x = usbMeasureFrameLength() - targetValue;
     5cc:	78 d1       	rcall	.+752    	; 0x8be <usbMeasureFrameLength>
     5ce:	84 53       	subi	r24, 0x34	; 52
     5d0:	99 40       	sbci	r25, 0x09	; 9
     5d2:	97 ff       	sbrs	r25, 7
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <calibrateOscillator+0x58>
     5d6:	91 95       	neg	r25
     5d8:	81 95       	neg	r24
     5da:	91 09       	sbc	r25, r1
        if(x < 0)
            x = -x;
        if(x < optimumDev){
     5dc:	8e 15       	cp	r24, r14
     5de:	9f 05       	cpc	r25, r15
     5e0:	14 f4       	brge	.+4      	; 0x5e6 <calibrateOscillator+0x62>
            optimumDev = x;
            optimumValue = OSCCAL;
     5e2:	c1 b7       	in	r28, 0x31	; 49
     5e4:	7c 01       	movw	r14, r24
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     5e6:	81 b7       	in	r24, 0x31	; 49
     5e8:	8f 5f       	subi	r24, 0xFF	; 255
     5ea:	81 bf       	out	0x31, r24	; 49
     5ec:	ea cf       	rjmp	.-44     	; 0x5c2 <calibrateOscillator+0x3e>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
     5ee:	c1 bf       	out	0x31, r28	; 49
}
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	e7 e0       	ldi	r30, 0x07	; 7
     5f6:	92 c5       	rjmp	.+2852   	; 0x111c <__epilogue_restores__+0x16>

000005f8 <Timers_Init>:
static volatile milliseconds_t Timers[TIMER_LAST];

#define ATOMIC_BLOCK(x)

void Timers_Init(void)
{
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
	TimerId_t id;
	for (id=0; id < TIMER_LAST;id++)
	{
    Timers[id]=TIMER_RESET;
     5fc:	2f ef       	ldi	r18, 0xFF	; 255
     5fe:	3f ef       	ldi	r19, 0xFF	; 255
     600:	fc 01       	movw	r30, r24
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ed 50       	subi	r30, 0x0D	; 13
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	31 83       	std	Z+1, r19	; 0x01
     60c:	20 83       	st	Z, r18
     60e:	01 96       	adiw	r24, 0x01	; 1
#define ATOMIC_BLOCK(x)

void Timers_Init(void)
{
	TimerId_t id;
	for (id=0; id < TIMER_LAST;id++)
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	91 05       	cpc	r25, r1
     614:	a9 f7       	brne	.-22     	; 0x600 <Timers_Init+0x8>
	{
    Timers[id]=TIMER_RESET;
  }
}
     616:	08 95       	ret

00000618 <Timers_DecreaseAll>:

milliseconds_t Timers_DecreaseAll(milliseconds_x256_t delta_x256)
{
     618:	cf 93       	push	r28
	static unsigned char frag = 0;
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
     61a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <frag.1471>
     61e:	82 0f       	add	r24, r18
     620:	91 1d       	adc	r25, r1
	frag = delta_x256 & 0xFF;
     622:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <frag.1471>
	milliseconds_t delta = delta_x256>>8;
     626:	49 2f       	mov	r20, r25
     628:	55 27       	eor	r21, r21
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	70 e0       	ldi	r23, 0x00	; 0

milliseconds_t Timers_DecreaseAll(milliseconds_x256_t delta_x256)
{
	static unsigned char frag = 0;
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
     62e:	8f ef       	ldi	r24, 0xFF	; 255
     630:	9f ef       	ldi	r25, 0xFF	; 255
	delta_x256 += frag;
	frag = delta_x256 & 0xFF;
	milliseconds_t delta = delta_x256>>8;
	for (id=0; id < TIMER_LAST;id++)
	{
		milliseconds_t tempTime = Timers[id];
     632:	fb 01       	movw	r30, r22
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	df 01       	movw	r26, r30
     63a:	ad 50       	subi	r26, 0x0D	; 13
     63c:	bf 4f       	sbci	r27, 0xFF	; 255
     63e:	2d 91       	ld	r18, X+
     640:	3c 91       	ld	r19, X
     642:	11 97       	sbiw	r26, 0x01	; 1
		if (tempTime != TIMER_RESET)
     644:	2f 3f       	cpi	r18, 0xFF	; 255
     646:	cf ef       	ldi	r28, 0xFF	; 255
     648:	3c 07       	cpc	r19, r28
     64a:	89 f0       	breq	.+34     	; 0x66e <Timers_DecreaseAll+0x56>
		{
			if (tempTime > delta)
     64c:	42 17       	cp	r20, r18
     64e:	53 07       	cpc	r21, r19
     650:	58 f4       	brcc	.+22     	; 0x668 <Timers_DecreaseAll+0x50>
			{
				tempTime-=delta;
     652:	24 1b       	sub	r18, r20
     654:	35 0b       	sbc	r19, r21
     656:	28 17       	cp	r18, r24
     658:	39 07       	cpc	r19, r25
     65a:	08 f4       	brcc	.+2      	; 0x65e <Timers_DecreaseAll+0x46>
     65c:	c9 01       	movw	r24, r18
				if (tempTime < nextTime) 
				{
					nextTime = tempTime;
				}

				Timers[id] = tempTime;
     65e:	ed 50       	subi	r30, 0x0D	; 13
     660:	ff 4f       	sbci	r31, 0xFF	; 255
     662:	31 83       	std	Z+1, r19	; 0x01
     664:	20 83       	st	Z, r18
     666:	03 c0       	rjmp	.+6      	; 0x66e <Timers_DecreaseAll+0x56>
			}
			else {
				Timers[id] = TIMER_HAS_EXPIRED;
     668:	11 96       	adiw	r26, 0x01	; 1
     66a:	1c 92       	st	X, r1
     66c:	1e 92       	st	-X, r1
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
	frag = delta_x256 & 0xFF;
	milliseconds_t delta = delta_x256>>8;
	for (id=0; id < TIMER_LAST;id++)
     672:	68 30       	cpi	r22, 0x08	; 8
     674:	71 05       	cpc	r23, r1
     676:	e9 f6       	brne	.-70     	; 0x632 <Timers_DecreaseAll+0x1a>
				Timers[id] = TIMER_HAS_EXPIRED;
			}
		}
	}
	return nextTime;
}
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <Timer_HasExpired>:
int Timer_HasExpired(const TimerId_t TimerId)
{
	int result;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if (Timers[TimerId]==TIMER_HAS_EXPIRED)
     67c:	e8 2f       	mov	r30, r24
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	ed 50       	subi	r30, 0x0D	; 13
     686:	ff 4f       	sbci	r31, 0xFF	; 255
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	89 2b       	or	r24, r25
     68e:	39 f4       	brne	.+14     	; 0x69e <Timer_HasExpired+0x22>
		{
			Timers[TimerId]=TIMER_RESET;
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	9f ef       	ldi	r25, 0xFF	; 255
     694:	91 83       	std	Z+1, r25	; 0x01
     696:	80 83       	st	Z, r24
			result = 1;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	08 95       	ret
		}
		else {
			result = 0;
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     6a2:	08 95       	ret

000006a4 <Timer_Reset>:

void Timer_Reset(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_RESET;
     6a4:	e8 2f       	mov	r30, r24
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ed 50       	subi	r30, 0x0D	; 13
     6ae:	ff 4f       	sbci	r31, 0xFF	; 255
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	9f ef       	ldi	r25, 0xFF	; 255
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	80 83       	st	Z, r24
     6b8:	08 95       	ret

000006ba <Timer_SetExpired>:
}
void Timer_SetExpired(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_HAS_EXPIRED;
     6ba:	e8 2f       	mov	r30, r24
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	ed 50       	subi	r30, 0x0D	; 13
     6c4:	ff 4f       	sbci	r31, 0xFF	; 255
     6c6:	11 82       	std	Z+1, r1	; 0x01
     6c8:	10 82       	st	Z, r1
     6ca:	08 95       	ret

000006cc <Timer_Set>:

void Timer_Set(const TimerId_t TimerId,const milliseconds_t setTimeout)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=setTimeout;
     6cc:	e8 2f       	mov	r30, r24
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ed 50       	subi	r30, 0x0D	; 13
     6d6:	ff 4f       	sbci	r31, 0xFF	; 255
     6d8:	71 83       	std	Z+1, r23	; 0x01
     6da:	60 83       	st	Z, r22
     6dc:	08 95       	ret

000006de <stream_putchar>:
#include <stddef.h>

#include "stream.h"

int stream_putchar(stream_buffer_t* s, char c)
{
     6de:	fc 01       	movw	r30, r24
	uint8_t newWritePos = (s->write + 1) & s->bufmask;
     6e0:	23 81       	ldd	r18, Z+3	; 0x03
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	82 0f       	add	r24, r18
     6e8:	89 23       	and	r24, r25
	if (newWritePos == s->read) {
     6ea:	32 81       	ldd	r19, Z+2	; 0x02
     6ec:	83 13       	cpse	r24, r19
     6ee:	07 c0       	rjmp	.+14     	; 0x6fe <stream_putchar+0x20>
		if (s->flags & STREAM_FLAG_OVERWRITE) {
     6f0:	30 81       	ld	r19, Z
     6f2:	30 ff       	sbrs	r19, 0
     6f4:	0d c0       	rjmp	.+26     	; 0x710 <stream_putchar+0x32>
			s->read++;
			s->read &= s->bufmask;
     6f6:	31 e0       	ldi	r19, 0x01	; 1
     6f8:	38 0f       	add	r19, r24
     6fa:	93 23       	and	r25, r19
     6fc:	92 83       	std	Z+2, r25	; 0x02
		}
		else {
			return -1;
		}
	}
	s->data[s->write] = c;
     6fe:	df 01       	movw	r26, r30
     700:	a2 0f       	add	r26, r18
     702:	b1 1d       	adc	r27, r1
     704:	14 96       	adiw	r26, 0x04	; 4
     706:	6c 93       	st	X, r22
	s->write = newWritePos;
     708:	83 83       	std	Z+3, r24	; 0x03
	return c;
     70a:	86 2f       	mov	r24, r22
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	08 95       	ret
		if (s->flags & STREAM_FLAG_OVERWRITE) {
			s->read++;
			s->read &= s->bufmask;
		}
		else {
			return -1;
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
	s->data[s->write] = c;
	s->write = newWritePos;
	return c;
}
     714:	08 95       	ret

00000716 <stream_getchar_nowait>:


int stream_getchar_nowait(stream_buffer_t* s)
{
     716:	fc 01       	movw	r30, r24
	int res = -1;
	if (s->read != s->write) {
     718:	92 81       	ldd	r25, Z+2	; 0x02
     71a:	83 81       	ldd	r24, Z+3	; 0x03
     71c:	98 17       	cp	r25, r24
     71e:	59 f0       	breq	.+22     	; 0x736 <stream_getchar_nowait+0x20>
		res = s->data[s->read++];
     720:	df 01       	movw	r26, r30
     722:	a9 0f       	add	r26, r25
     724:	b1 1d       	adc	r27, r1
     726:	14 96       	adiw	r26, 0x04	; 4
     728:	2c 91       	ld	r18, X
     72a:	30 e0       	ldi	r19, 0x00	; 0
		s->read &= s->bufmask;
     72c:	9f 5f       	subi	r25, 0xFF	; 255
     72e:	81 81       	ldd	r24, Z+1	; 0x01
     730:	98 23       	and	r25, r24
     732:	92 83       	std	Z+2, r25	; 0x02
     734:	02 c0       	rjmp	.+4      	; 0x73a <stream_getchar_nowait+0x24>
}


int stream_getchar_nowait(stream_buffer_t* s)
{
	int res = -1;
     736:	2f ef       	ldi	r18, 0xFF	; 255
     738:	3f ef       	ldi	r19, 0xFF	; 255
	if (s->read != s->write) {
		res = s->data[s->read++];
		s->read &= s->bufmask;
	}
	return res;
}
     73a:	c9 01       	movw	r24, r18
     73c:	08 95       	ret

0000073e <stream_getchar_wait>:

int stream_getchar_wait(stream_buffer_t* s)
{
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24

	int res;
	do {
		res = stream_getchar_nowait(s);
     744:	ce 01       	movw	r24, r28
     746:	e7 df       	rcall	.-50     	; 0x716 <stream_getchar_nowait>
	} while (res == -1);
     748:	8f 3f       	cpi	r24, 0xFF	; 255
     74a:	2f ef       	ldi	r18, 0xFF	; 255
     74c:	92 07       	cpc	r25, r18
     74e:	d1 f3       	breq	.-12     	; 0x744 <stream_getchar_wait+0x6>
	return res;
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <usb_stream_init>:

#define USB_STREAM_MAGIX 0xBABE
#define USB_STREAM_OVERWRITE 0x01

static noinline void usb_stream_init(usb_stream_buffer_internal_t* s)
{
     756:	fc 01       	movw	r30, r24
	if (initialized == 0) {
     758:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <initialized>
     75c:	81 11       	cpse	r24, r1
     75e:	08 c0       	rjmp	.+16     	; 0x770 <usb_stream_init+0x1a>
		usb_out_stream_buffer.internal.base.bufmask = 0x7F;
     760:	8f e7       	ldi	r24, 0x7F	; 127
     762:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <usb_out_stream_buffer+0x3>
		usb_out_stream_buffer.internal.base.flags = USB_STREAM_OVERWRITE;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <usb_out_stream_buffer+0x2>
#ifdef USBSTREAM_ENABLE_RX
		usb_in_stream_buffer.internal.base.bufmask = 0x0F;
		usb_in_stream_buffer.internal.base.flags = 0;
#endif
		initialized = 1;
     76c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <initialized>
	}
	if (s->magic != USB_STREAM_MAGIX) {
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	8e 3b       	cpi	r24, 0xBE	; 190
     776:	9a 4b       	sbci	r25, 0xBA	; 186
     778:	31 f0       	breq	.+12     	; 0x786 <usb_stream_init+0x30>
		s->magic = USB_STREAM_MAGIX;
     77a:	8e eb       	ldi	r24, 0xBE	; 190
     77c:	9a eb       	ldi	r25, 0xBA	; 186
     77e:	91 83       	std	Z+1, r25	; 0x01
     780:	80 83       	st	Z, r24
		s->base.read = 0;
     782:	14 82       	std	Z+4, r1	; 0x04
		s->base.write = 0;
     784:	15 82       	std	Z+5, r1	; 0x05
     786:	08 95       	ret

00000788 <usb_stream_putchar>:
	}
}

static noinline int usb_stream_putchar(char c, FILE *stream)
{
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	18 2f       	mov	r17, r24
	usb_stream_buffer_internal_t* s = fdev_get_udata(stream);
     790:	fb 01       	movw	r30, r22
     792:	c4 85       	ldd	r28, Z+12	; 0x0c
     794:	d5 85       	ldd	r29, Z+13	; 0x0d
	usb_stream_init(s);
     796:	ce 01       	movw	r24, r28
     798:	de df       	rcall	.-68     	; 0x756 <usb_stream_init>
	return stream_putchar(&s->base,c);
     79a:	61 2f       	mov	r22, r17
     79c:	ce 01       	movw	r24, r28
     79e:	02 96       	adiw	r24, 0x02	; 2
     7a0:	9e df       	rcall	.-196    	; 0x6de <stream_putchar>
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	08 95       	ret

000007aa <usb_stream_getchar>:

static noinline int usb_stream_getchar(FILE *stream)
{
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
	usb_stream_buffer_internal_t* s = fdev_get_udata(stream);
     7ae:	fc 01       	movw	r30, r24
     7b0:	c4 85       	ldd	r28, Z+12	; 0x0c
     7b2:	d5 85       	ldd	r29, Z+13	; 0x0d
	usb_stream_init(s);
     7b4:	ce 01       	movw	r24, r28
     7b6:	cf df       	rcall	.-98     	; 0x756 <usb_stream_init>
	return stream_getchar_nowait(&s->base);
     7b8:	ce 01       	movw	r24, r28
     7ba:	02 96       	adiw	r24, 0x02	; 2
     7bc:	ac df       	rcall	.-168    	; 0x716 <stream_getchar_nowait>
}
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <usbFunctionSetup>:
static uchar usb_buf_state;
static uchar usb_buf_report_id;


usbMsgLen_t usbFunctionSetup(uchar data[8])
{
     7c4:	fc 01       	movw	r30, r24
	usbRequest_t    *rq = (void *)data;
	usb_buf_report_id = rq->wValue.bytes[0];
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
     7c8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <usb_buf_report_id>
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     7cc:	90 81       	ld	r25, Z
     7ce:	90 76       	andi	r25, 0x60	; 96
     7d0:	90 32       	cpi	r25, 0x20	; 32
     7d2:	79 f4       	brne	.+30     	; 0x7f2 <usbFunctionSetup+0x2e>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	91 30       	cpi	r25, 0x01	; 1
     7d8:	19 f4       	brne	.+6      	; 0x7e0 <usbFunctionSetup+0x1c>

        	switch (rq->wValue.bytes[0]) {
     7da:	8e 37       	cpi	r24, 0x7E	; 126
     7dc:	39 f0       	breq	.+14     	; 0x7ec <usbFunctionSetup+0x28>
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <usbFunctionSetup+0x2e>
        			return sizeof(usb_in_stream_buffer.internal.base.write);
#endif //#ifdef USBSTREAM_ENABLE_RX
        		default:
        			break;
        	}
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
     7e0:	99 30       	cpi	r25, 0x09	; 9
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <usbFunctionSetup+0x2e>
        	switch (rq->wValue.bytes[0]) {
     7e4:	8c 37       	cpi	r24, 0x7C	; 124
     7e6:	41 f0       	breq	.+16     	; 0x7f8 <usbFunctionSetup+0x34>
     7e8:	8f 37       	cpi	r24, 0x7F	; 127
     7ea:	19 f4       	brne	.+6      	; 0x7f2 <usbFunctionSetup+0x2e>
        		case report_id_buf_out_setreadpos:
        			return USB_NO_MSG;

        		case report_id_buf_in_data:
        			usb_buf_state = 0;
     7ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <usb_buf_state>
     7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <usbFunctionSetup+0x34>
     7f2:	cf 01       	movw	r24, r30
        		default:
        			break;
        	}
        }
    }
    return usbFunctionSetup2(data);
     7f4:	c5 de       	rcall	.-630    	; 0x580 <usbFunctionSetup2>
     7f6:	08 95       	ret
        			break;
        	}
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
        	switch (rq->wValue.bytes[0]) {
        		case report_id_buf_out_setreadpos:
        			return USB_NO_MSG;
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
        			break;
        	}
        }
    }
    return usbFunctionSetup2(data);
}
     7fa:	08 95       	ret

000007fc <usbFunctionRead2>:
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	08 95       	ret

00000800 <usbFunctionRead>:


uchar usbFunctionRead(uchar *data, uchar len)
{
	if (usb_buf_report_id == report_id_buf_out_data) {
     800:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <usb_buf_report_id>
     804:	2e 37       	cpi	r18, 0x7E	; 126
     806:	11 f5       	brne	.+68     	; 0x84c <usbFunctionRead+0x4c>
     808:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <usb_buf_state>
     80c:	dc 01       	movw	r26, r24
     80e:	96 2f       	mov	r25, r22
     810:	92 0f       	add	r25, r18
		uchar i;
		for (i = 0;i<len;i++) {
     812:	29 17       	cp	r18, r25
     814:	b9 f0       	breq	.+46     	; 0x844 <usbFunctionRead+0x44>
			if (usb_buf_state < sizeof(usb_out_stream_buffer.internal.base))
     816:	24 30       	cpi	r18, 0x04	; 4
     818:	30 f4       	brcc	.+12     	; 0x826 <usbFunctionRead+0x26>
			{
				data[i] = ((uchar*)&(usb_out_stream_buffer.internal.base))[usb_buf_state];
     81a:	e2 2f       	mov	r30, r18
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	e8 5f       	subi	r30, 0xF8	; 248
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	80 81       	ld	r24, Z
     824:	0b c0       	rjmp	.+22     	; 0x83c <usbFunctionRead+0x3c>
			}
			else {
				uchar read_pos = usb_out_stream_buffer.internal.base.read + usb_buf_state - sizeof(usb_out_stream_buffer.internal.base);
     826:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <usb_out_stream_buffer+0x4>
     82a:	e4 50       	subi	r30, 0x04	; 4
     82c:	e2 0f       	add	r30, r18
				read_pos &= usb_out_stream_buffer.internal.base.bufmask;
				data[i] = usb_out_stream_buffer.internal.base.data[read_pos];
     82e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <usb_out_stream_buffer+0x3>
     832:	e8 23       	and	r30, r24
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	ea 5f       	subi	r30, 0xFA	; 250
     838:	fe 4f       	sbci	r31, 0xFE	; 254
     83a:	86 81       	ldd	r24, Z+6	; 0x06
     83c:	8c 93       	st	X, r24
			}
			usb_buf_state++;
     83e:	2f 5f       	subi	r18, 0xFF	; 255
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	e7 cf       	rjmp	.-50     	; 0x812 <usbFunctionRead+0x12>
     844:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <usb_buf_state>

uchar usbFunctionRead(uchar *data, uchar len)
{
	if (usb_buf_report_id == report_id_buf_out_data) {
		uchar i;
		for (i = 0;i<len;i++) {
     848:	86 2f       	mov	r24, r22
     84a:	08 95       	ret
			}
			usb_buf_state++;
		}
		return len;
	}
	return usbFunctionRead2(data,len);
     84c:	d7 df       	rcall	.-82     	; 0x7fc <usbFunctionRead2>
}
     84e:	08 95       	ret

00000850 <usbFunctionWrite2>:
	return 0;
}
uchar __attribute__((__weak__)) usbFunctionWrite2(uchar *data, uchar len)
{
	return 0;
}
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	08 95       	ret

00000854 <usbFunctionWrite>:
#endif


uchar usbFunctionWrite(uchar *data, uchar len)
{
	if (usb_buf_report_id == report_id_buf_out_setreadpos)
     854:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <usb_buf_report_id>
     858:	2c 37       	cpi	r18, 0x7C	; 124
     85a:	31 f4       	brne	.+12     	; 0x868 <usbFunctionWrite+0x14>
	{
		usb_out_stream_buffer.internal.base.read = *((uint16_t*)&data[1]);
     85c:	fc 01       	movw	r30, r24
     85e:	81 81       	ldd	r24, Z+1	; 0x01
     860:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <usb_out_stream_buffer+0x4>
		return len;
     864:	86 2f       	mov	r24, r22
     866:	08 95       	ret
			}
		}
		return len;
	}
#endif //#ifdef USBSTREAM_ENABLE_RX
	return usbFunctionWrite2(data,len);
     868:	f3 df       	rcall	.-26     	; 0x850 <usbFunctionWrite2>
}
     86a:	08 95       	ret

0000086c <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     86c:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     86e:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     870:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     872:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     874:	1b c0       	rjmp	.+54     	; 0x8ac <usbCrc16LoopTest>

00000876 <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     876:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     878:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     87a:	28 2f       	mov	r18, r24
    swap    byte
     87c:	22 95       	swap	r18
    eor     byte, resCrcL
     87e:	28 27       	eor	r18, r24
    mov     scratch, byte
     880:	72 2f       	mov	r23, r18
    lsr     byte
     882:	26 95       	lsr	r18
    lsr     byte
     884:	26 95       	lsr	r18
    eor     byte, scratch
     886:	27 27       	eor	r18, r23
    inc     byte
     888:	23 95       	inc	r18
    lsr     byte
     88a:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     88c:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     88e:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     890:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     892:	82 27       	eor	r24, r18
    neg     byte
     894:	21 95       	neg	r18
    andi    byte, 0xc0
     896:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     898:	92 2f       	mov	r25, r18
    clr     byte
     89a:	22 27       	eor	r18, r18
    lsr     scratch
     89c:	76 95       	lsr	r23
    ror     byte
     89e:	27 95       	ror	r18
    eor     resCrcH, scratch
     8a0:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     8a2:	82 27       	eor	r24, r18
    lsr     scratch
     8a4:	76 95       	lsr	r23
    ror     byte
     8a6:	27 95       	ror	r18
    eor     resCrcH, scratch
     8a8:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     8aa:	82 27       	eor	r24, r18

000008ac <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     8ac:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     8ae:	18 f7       	brcc	.-58     	; 0x876 <usbCrc16ByteLoop>
    com     resCrcL
     8b0:	80 95       	com	r24
    com     resCrcH
     8b2:	90 95       	com	r25
    ret
     8b4:	08 95       	ret

000008b6 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     8b6:	da df       	rcall	.-76     	; 0x86c <usbCrc16>
    st      ptr+, resCrcL
     8b8:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     8ba:	9d 93       	st	X+, r25
    ret
     8bc:	08 95       	ret

000008be <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     8be:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     8c0:	88 27       	eor	r24, r24
    clr     cnt16H
     8c2:	99 27       	eor	r25, r25

000008c4 <usbMFTime16>:
usbMFTime16:
    dec     cntH
     8c4:	aa 95       	dec	r26
    breq    usbMFTimeout
     8c6:	69 f0       	breq	.+26     	; 0x8e2 <usbMFTimeout>

000008c8 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     8c8:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     8ca:	e1 f3       	breq	.-8      	; 0x8c4 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     8cc:	b2 99       	sbic	0x16, 2	; 22
    rjmp    usbMFWaitStrobe ;[4]
     8ce:	fc cf       	rjmp	.-8      	; 0x8c8 <usbMFWaitStrobe>

000008d0 <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     8d0:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    usbMFWaitIdle   ;2
     8d2:	fe cf       	rjmp	.-4      	; 0x8d0 <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     8d4:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     8d6:	99 27       	eor	r25, r25

000008d8 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     8d8:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     8da:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     8de:	a4 74       	andi	r26, 0x44	; 68
    brne    usbMFWaitLoop   ;[5]
     8e0:	d9 f7       	brne	.-10     	; 0x8d8 <usbMFWaitLoop>

000008e2 <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     8e2:	08 95       	ret

000008e4 <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
     8e4:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
     8e6:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
     8e8:	cf 93       	push	r28

000008ea <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     8ea:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     8ec:	b2 9b       	sbis	0x16, 2	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     8ee:	e9 f7       	brne	.-6      	; 0x8ea <waitForJ>

000008f0 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     8f0:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK              ;[-14]
     8f2:	0b c0       	rjmp	.+22     	; 0x90a <foundK>
    sbis    USBIN, USBMINUS
     8f4:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <foundK>
    sbis    USBIN, USBMINUS
     8f8:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     8fa:	07 c0       	rjmp	.+14     	; 0x90a <foundK>
    sbis    USBIN, USBMINUS
     8fc:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     8fe:	05 c0       	rjmp	.+10     	; 0x90a <foundK>
    sbis    USBIN, USBMINUS
     900:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     902:	03 c0       	rjmp	.+6      	; 0x90a <foundK>
    sbis    USBIN, USBMINUS
     904:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     906:	01 c0       	rjmp	.+2      	; 0x90a <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     908:	d5 c0       	rjmp	.+426    	; 0xab4 <sofError>

0000090a <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
     90a:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
     90c:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
     90e:	c0 91 a5 01 	lds	r28, 0x01A5	; 0x8001a5 <usbInputBufOffset>
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
     912:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
     914:	c4 55       	subi	r28, 0x54	; 84
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
     916:	de 4f       	sbci	r29, 0xFE	; 254
    mov     r0, x2              ;[-3] [rx loop init]
     918:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     91a:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    haveTwoBitsK        ;[-1]
     91c:	03 c0       	rjmp	.+6      	; 0x924 <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
     91e:	df 91       	pop	r29
    pop     r0                  ;[2]
     920:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     922:	e6 cf       	rjmp	.-52     	; 0x8f0 <waitForK>

00000924 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
     924:	2f 93       	push	r18
    push    x1              ;[3]
     926:	0f 93       	push	r16
    push    x2              ;[5]
     928:	1f 93       	push	r17
    push    x3              ;[7]
     92a:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
     92c:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
     92e:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
     930:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
     932:	02 fb       	bst	r16, 2
    bld     shift, 0        ;[13]
     934:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
     936:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
     938:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
     93a:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
     93c:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
     93e:	65 c0       	rjmp	.+202    	; 0xa0a <rxbit1>

00000940 <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
     940:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
     942:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
     944:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
     946:	52 fd       	sbrc	r21, 2
    lpm                     ;[059] optional nop3; modifies r0
     948:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
     94a:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
     94c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
     94e:	02 fb       	bst	r16, 2
    bld     shift, 5        ;[063]
     950:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
     952:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
     954:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
     956:	b1 f0       	breq	.+44     	; 0x984 <unstuff5>
    eor     phase, x1       ;[067]
     958:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
     95a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
     95c:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[070]
     95e:	26 f9       	bld	r18, 6

00000960 <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
     960:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
     962:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
     964:	f0 f0       	brcs	.+60     	; 0x9a2 <unstuff6>

00000966 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
     966:	00 c0       	rjmp	.+0      	; 0x968 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
     968:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
     96a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
     96c:	02 fb       	bst	r16, 2
    bld     shift, 7        ;[079]
     96e:	27 f9       	bld	r18, 7

00000970 <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
     970:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
     972:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
     974:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
     976:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
     978:	e8 f5       	brcc	.+122    	; 0x9f4 <rxLoop>

0000097a <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
     97a:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
     97c:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
     97e:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
     980:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
     982:	f6 cf       	rjmp	.-20     	; 0x970 <didUnstuff7>

00000984 <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
     984:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
     986:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
     988:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
     98a:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
     98c:	10 2f       	mov	r17, r16
    nop                     ;[073]
     98e:	00 00       	nop
    nop2                    ;[074]
     990:	00 c0       	rjmp	.+0      	; 0x992 <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
     992:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
     994:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
     996:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
     998:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
     99a:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
     99c:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
     99e:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
     9a0:	e2 cf       	rjmp	.-60     	; 0x966 <didUnstuff5>

000009a2 <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
     9a2:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
     9a4:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
     9a6:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
     9aa:	da cf       	rjmp	.-76     	; 0x960 <didUnstuff6>

000009ac <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
     9ac:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
     9ae:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
     9b0:	14 74       	andi	r17, 0x44	; 68
    in      r0, USBIN       ;[017] <-- phase
     9b2:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
     9b4:	69 f1       	breq	.+90     	; 0xa10 <didUnstuff0>
    andi    x3, ~0x01       ;[019]
     9b6:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
     9b8:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
     9ba:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
     9bc:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
     9be:	28 c0       	rjmp	.+80     	; 0xa10 <didUnstuff0>

000009c0 <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
     9c0:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
     9c2:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
     9c4:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
     9c6:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
     9c8:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
     9ca:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
     9cc:	29 c0       	rjmp	.+82     	; 0xa20 <didUnstuff1>

000009ce <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
     9ce:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
     9d0:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
     9d2:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
     9d4:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
     9d6:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
     9d8:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
     9da:	2d c0       	rjmp	.+90     	; 0xa36 <didUnstuff2>

000009dc <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
     9dc:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
     9de:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
     9e0:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
     9e2:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
     9e4:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
     9e6:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
     9e8:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
     9ea:	2e c0       	rjmp	.+92     	; 0xa48 <didUnstuff3>

000009ec <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
     9ec:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
     9ee:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
     9f0:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
     9f2:	30 c0       	rjmp	.+96     	; 0xa54 <didUnstuff4>

000009f4 <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     9f4:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
     9f6:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
     9f8:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
     9fa:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
     9fc:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
     9fe:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
     a00:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
     a02:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
     a04:	12 fb       	bst	r17, 2
    bld     shift, 0        ;[009]
     a06:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
     a08:	29 7f       	andi	r18, 0xF9	; 249

00000a0a <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
     a0a:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
     a0c:	79 f2       	breq	.-98     	; 0x9ac <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
     a0e:	14 74       	andi	r17, 0x44	; 68

00000a10 <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
     a10:	59 f1       	breq	.+86     	; 0xa68 <se0>
    eor     r0, x2          ;[015]
     a12:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
     a14:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
     a16:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
     a18:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
     a1a:	02 fb       	bst	r16, 2
    bld     shift, 1        ;[020]
     a1c:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
     a1e:	23 7f       	andi	r18, 0xF3	; 243

00000a20 <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
     a20:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
     a22:	71 f2       	breq	.-100    	; 0x9c0 <unstuff1>
    eor     r0, x1          ;[024]
     a24:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
     a26:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
     a28:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
     a2a:	d0 f0       	brcs	.+52     	; 0xa60 <overflow>
    in      r0, USBIN       ;[028] <-- phase
     a2c:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
     a2e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
     a30:	12 fb       	bst	r17, 2
    bld     shift, 2        ;[031]
     a32:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
     a34:	27 7e       	andi	r18, 0xE7	; 231

00000a36 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
     a36:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
     a38:	51 f2       	breq	.-108    	; 0x9ce <unstuff2>
    eor     r0, x2          ;[035]
     a3a:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
     a3c:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
     a3e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
     a40:	02 fb       	bst	r16, 2
    in      r0, USBIN       ;[039] <-- phase
     a42:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
     a44:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
     a46:	2f 7c       	andi	r18, 0xCF	; 207

00000a48 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
     a48:	49 f2       	breq	.-110    	; 0x9dc <unstuff3>
    nop                     ;[043]
     a4a:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
     a4c:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
     a4e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
     a50:	12 fb       	bst	r17, 2
    bld     shift, 4        ;[047]
     a52:	24 f9       	bld	r18, 4

00000a54 <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
     a54:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
     a56:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
     a58:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
     a5a:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
     a5c:	39 f2       	breq	.-114    	; 0x9ec <unstuff4>
    rjmp    continueWithBit5;[053]
     a5e:	70 cf       	rjmp	.-288    	; 0x940 <continueWithBit5>

00000a60 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     a60:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     a62:	1a bf       	out	0x3a, r17	; 58

00000a64 <ignorePacket>:
ignorePacket:
    clr     token
     a64:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     a66:	19 c0       	rjmp	.+50     	; 0xa9a <handleSetupOrOut>

00000a68 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     a68:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     a6a:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     a6c:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     a6e:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     a70:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     a72:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     a74:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     a76:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     a78:	09 f1       	breq	.+66     	; 0xabc <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     a7a:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     a7c:	f9 f0       	breq	.+62     	; 0xabc <handleData>
    lds     shift, usbDeviceAddr;[17]
     a7e:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     a82:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     a84:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     a86:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     a88:	ed cf       	rjmp	.-38     	; 0xa64 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     a8a:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     a8c:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     a8e:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     a90:	51 f1       	breq	.+84     	; 0xae6 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     a92:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     a94:	11 f0       	breq	.+4      	; 0xa9a <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     a96:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     a98:	29 f7       	brne	.-54     	; 0xa64 <ignorePacket>

00000a9a <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     a9a:	00 93 aa 01 	sts	0x01AA, r16	; 0x8001aa <usbCurrentTok>

00000a9e <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     a9e:	3f 91       	pop	r19
     aa0:	5f 91       	pop	r21
     aa2:	4f 91       	pop	r20
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	2f 91       	pop	r18
     aaa:	df 91       	pop	r29
     aac:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
     aae:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     ab0:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     ab2:	1b cf       	rjmp	.-458    	; 0x8ea <waitForJ>

00000ab4 <sofError>:
sofError:
    POP_RETI                    ;macro call
     ab4:	cf 91       	pop	r28
     ab6:	cf bf       	out	0x3f, r28	; 63
     ab8:	cf 91       	pop	r28
    reti
     aba:	18 95       	reti

00000abc <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     abc:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <usbCurrentTok>
    tst     shift               ;[20]
     ac0:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     ac2:	69 f3       	breq	.-38     	; 0xa9e <doReturn>
    lds     x2, usbRxLen        ;[22]
     ac4:	10 91 a8 01 	lds	r17, 0x01A8	; 0x8001a8 <usbRxLen>
    tst     x2                  ;[24]
     ac8:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     aca:	79 f5       	brne	.+94     	; 0xb2a <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     acc:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     ace:	7a f1       	brmi	.+94     	; 0xb2e <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     ad0:	30 93 a8 01 	sts	0x01A8, r19	; 0x8001a8 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
     ad4:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
     ad8:	10 91 a5 01 	lds	r17, 0x01A5	; 0x8001a5 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
     adc:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     ade:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     ae0:	30 93 a5 01 	sts	0x01A5, r19	; 0x8001a5 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     ae4:	24 c0       	rjmp	.+72     	; 0xb2e <sendAckAndReti>

00000ae6 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     ae6:	00 91 a8 01 	lds	r16, 0x01A8	; 0x8001a8 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     aea:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     aec:	f4 f4       	brge	.+60     	; 0xb2a <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     aee:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     af0:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     af2:	49 f4       	brne	.+18     	; 0xb06 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     af4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     af8:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     afa:	1a c0       	rjmp	.+52     	; 0xb30 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     afc:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
     b00:	cc e8       	ldi	r28, 0x8C	; 140
    ldi     YH, hi8(usbTxBuf)   ;[44]
     b02:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     b04:	19 c0       	rjmp	.+50     	; 0xb38 <usbSendAndReti>

00000b06 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     b06:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     b0a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     b0c:	11 c0       	rjmp	.+34     	; 0xb30 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     b0e:	00 93 97 01 	sts	0x0197, r16	; 0x800197 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     b12:	c8 e9       	ldi	r28, 0x98	; 152
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     b14:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     b16:	10 c0       	rjmp	.+32     	; 0xb38 <usbSendAndReti>

00000b18 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
     b18:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
     b1a:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
     b1e:	21 c0       	rjmp	.+66     	; 0xb62 <didStuff7>

00000b20 <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
     b20:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
     b22:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
     b24:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
     b26:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
     b28:	14 c0       	rjmp	.+40     	; 0xb52 <didStuffN>

00000b2a <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
     b2a:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <sendCntAndReti>

00000b2e <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     b2e:	32 ed       	ldi	r19, 0xD2	; 210

00000b30 <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
     b30:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
     b32:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
     b34:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     b36:	32 e0       	ldi	r19, 0x02	; 2

00000b38 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     b38:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
     b3a:	14 64       	ori	r17, 0x44	; 68
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     b3c:	c2 9a       	sbi	0x18, 2	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     b3e:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
     b40:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     b42:	54 e4       	ldi	r21, 0x44	; 68
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     b44:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
     b46:	4f ef       	ldi	r20, 0xFF	; 255

00000b48 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
     b48:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
     b4a:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
     b4c:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
     b4e:	27 95       	ror	r18
    ror     x2              ;[1]
     b50:	17 95       	ror	r17

00000b52 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
     b52:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
     b54:	28 f7       	brcc	.-54     	; 0xb20 <bitstuffN>
    nop                     ;[4]
     b56:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
     b58:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
     b5a:	b0 f7       	brcc	.-20     	; 0xb48 <bitloop>
    sbrs    shift, 0        ;[7]
     b5c:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
     b5e:	05 27       	eor	r16, r21
    ror     shift           ;[9]
     b60:	27 95       	ror	r18

00000b62 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
     b62:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
     b64:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
     b66:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
     b68:	b8 f6       	brcc	.-82     	; 0xb18 <bitstuff7>
    ld      shift, y+       ;[3]
     b6a:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
     b6c:	3a 95       	dec	r19
    brne    byteloop        ;[6]
     b6e:	61 f7       	brne	.-40     	; 0xb48 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
     b70:	0b 7b       	andi	r16, 0xBB	; 187
    lds     x2, usbNewDeviceAddr;[8]
     b72:	10 91 a9 01 	lds	r17, 0x01A9	; 0x8001a9 <usbNewDeviceAddr>
    lsl     x2              ;[10] we compare with left shifted address
     b76:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     b78:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
     b7a:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
     b7c:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
     b7e:	11 f0       	breq	.+4      	; 0xb84 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     b80:	10 93 a3 01 	sts	0x01A3, r17	; 0x8001a3 <usbDeviceAddr>

00000b84 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     b84:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
     b86:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
     b88:	04 60       	ori	r16, 0x04	; 4
    in      x2, USBDDR      ;[7]
     b8a:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
     b8c:	1b 7b       	andi	r17, 0xBB	; 187
    mov     x3, x1          ;[9]
     b8e:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
     b90:	4b 7b       	andi	r20, 0xBB	; 187
    ldi     x4, 4           ;[11]
     b92:	54 e0       	ldi	r21, 0x04	; 4

00000b94 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
     b94:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
     b96:	f1 f7       	brne	.-4      	; 0xb94 <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
     b98:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
     b9a:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
     b9c:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     b9e:	7f cf       	rjmp	.-258    	; 0xa9e <doReturn>

00000ba0 <main>:
}
 */
/* ------------------------------------------------------------------------- */

int main(void)
{
     ba0:	a3 e1       	ldi	r26, 0x13	; 19
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e5 ed       	ldi	r30, 0xD5	; 213
     ba6:	f5 e0       	ldi	r31, 0x05	; 5
     ba8:	92 c2       	rjmp	.+1316   	; 0x10ce <__prologue_saves__>
	unsigned char buttonPressed = 0;
	unsigned char buttonMask = 0;
	unsigned char led_sensor_blink = 0;
	filter_iir2_t filter_iir2_data = {0,0,0,0};
     baa:	88 e0       	ldi	r24, 0x08	; 8
     bac:	1e 01       	movw	r2, r28
     bae:	2b e0       	ldi	r18, 0x0B	; 11
     bb0:	22 0e       	add	r2, r18
     bb2:	31 1c       	adc	r3, r1
     bb4:	f1 01       	movw	r30, r2
     bb6:	28 2f       	mov	r18, r24
     bb8:	11 92       	st	Z+, r1
     bba:	2a 95       	dec	r18
     bbc:	e9 f7       	brne	.-6      	; 0xbb8 <main+0x18>


#ifndef __ASSEMBLER__

static inline void hardwareInit(void) {
	BOOTLOADER_CONDITION_INIT();
     bbe:	d3 98       	cbi	0x1a, 3	; 26
     bc0:	db 9a       	sbi	0x1b, 3	; 27
	LED_RED_INIT();
     bc2:	bb 9a       	sbi	0x17, 3	; 23
     bc4:	c3 98       	cbi	0x18, 3	; 24
     bc6:	c3 98       	cbi	0x18, 3	; 24
	LED_BUTTON_INIT();
     bc8:	b9 9a       	sbi	0x17, 1	; 23
     bca:	c1 98       	cbi	0x18, 1	; 24
     bcc:	c1 98       	cbi	0x18, 1	; 24
	TIMER0_INIT();
     bce:	90 ee       	ldi	r25, 0xE0	; 224
     bd0:	95 bb       	out	0x15, r25	; 21
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	93 bf       	out	0x33, r25	; 51
	TIMER1_INIT();
     bd6:	10 be       	out	0x30, r1	; 48
     bd8:	8f bd       	out	0x2f, r24	; 47
     bda:	17 bc       	out	0x27, r1	; 39
     bdc:	16 bc       	out	0x26, r1	; 38
     bde:	10 b8       	out	0x00, r1	; 0
     be0:	19 bc       	out	0x29, r1	; 41
	BUTTON_INIT();
     be2:	d4 98       	cbi	0x1a, 4	; 26
     be4:	dc 9a       	sbi	0x1b, 4	; 27
	POT_INIT();
     be6:	d0 9a       	sbi	0x1a, 0	; 26
     be8:	d1 98       	cbi	0x1a, 1	; 26
     bea:	d9 98       	cbi	0x1b, 1	; 27
     bec:	d8 98       	cbi	0x1b, 0	; 27
	static uint16_t led_sensor_weigthed_sum_data[20];
	uint16_t led_sensor_weigthed_sum = 0;
	uint8_t led_sensor_weigthed_sum_idx = 0;

	hardwareInit();
	stdout = &usb_out_stream;
     bee:	82 e7       	ldi	r24, 0x72	; 114
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <__iob+0x3>
     bf6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__iob+0x2>
	stdin = &usb_in_stream;
     bfa:	84 e6       	ldi	r24, 0x64	; 100
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <__iob+0x1>
     c02:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__iob>
	stdin_get_string_t stdin_get_string_buffer;
	stdin_get_string_buffer.bufLen = 0;
	//const char* stdin_str;

	printf_P(PSTR("B!\n"));
     c06:	88 e9       	ldi	r24, 0x98	; 152
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9f 93       	push	r25
     c0c:	8f 93       	push	r24
     c0e:	f0 d2       	rcall	.+1504   	; 0x11f0 <printf_P>
	usbDeviceDisconnect();
     c10:	bc 98       	cbi	0x17, 4	; 23
     c12:	c4 98       	cbi	0x18, 4	; 24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     c14:	9f e0       	ldi	r25, 0x0F	; 15
     c16:	88 e1       	ldi	r24, 0x18	; 24
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	a8 95       	wdr
     c1e:	81 bd       	out	0x21, r24	; 33
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	91 bd       	out	0x21, r25	; 33
			; /* delay >10ms for USB reset */
	}

	wdt_enable(WDTO_2S);
	odDebugInit();
	usbInit();
     c24:	1e dc       	rcall	.-1988   	; 0x462 <usbInit>
	TIMER0_ENABLE_INPUTCAPT_INTERRUPT();
     c26:	89 b7       	in	r24, 0x39	; 57
     c28:	81 60       	ori	r24, 0x01	; 1
     c2a:	89 bf       	out	0x39, r24	; 57
	//uartsw_init();
	sei();
     c2c:	78 94       	sei
	usbDeviceConnect();
     c2e:	bc 9a       	sbi	0x17, 4	; 23
     c30:	c4 9a       	sbi	0x18, 4	; 24
	LED_RED_ON();
     c32:	c3 9a       	sbi	0x18, 3	; 24
	LED_SENSOR_INIT();
     c34:	d2 9a       	sbi	0x1a, 2	; 26
     c36:	b8 9a       	sbi	0x17, 0	; 23
     c38:	c0 98       	cbi	0x18, 0	; 24
     c3a:	da 98       	cbi	0x1b, 2	; 27
	LED_BUTTON_OFF();
     c3c:	c1 98       	cbi	0x18, 1	; 24
	Timer_Set(TIMER_LED_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     c3e:	60 ed       	ldi	r22, 0xD0	; 208
     c40:	77 e0       	ldi	r23, 0x07	; 7
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	43 dd       	rcall	.-1402   	; 0x6cc <Timer_Set>
	Timer_Set(TIMER_LED_SENSOR_BLINK,2);
     c46:	62 e0       	ldi	r22, 0x02	; 2
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	3f dd       	rcall	.-1410   	; 0x6cc <Timer_Set>
	Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     c4e:	60 ed       	ldi	r22, 0xD0	; 208
     c50:	77 e0       	ldi	r23, 0x07	; 7
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	3b dd       	rcall	.-1418   	; 0x6cc <Timer_Set>
	//fprintf_P(&uartsw_stream,PSTR("B!\x10\n"));
	/*char buffer[10];
	if (strcmp_P(fgets(buffer,sizeof(buffer),&uartsw_stream),PSTR("B!\x10\n")) != 0) {
		fprintf_P(&uartsw_stream,PSTR("Fail"));
	}*/
	filtered_val = filter_iir2(&filter_iir2_data,1000);
     c56:	68 ee       	ldi	r22, 0xE8	; 232
     c58:	73 e0       	ldi	r23, 0x03	; 3
     c5a:	c1 01       	movw	r24, r2
     c5c:	0f dc       	rcall	.-2018   	; 0x47c <filter_iir2>
     c5e:	88 2e       	mov	r8, r24
     c60:	9b 8b       	std	Y+19, r25	; 0x13
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
	uint16_t led_sensor_values[5];
	uint8_t led_sensor_nvalues = 0;
	static uint8_t led_sensor_nsample = 5;
	static uint16_t led_sensor_weigthed_sum_data[20];
	uint16_t led_sensor_weigthed_sum = 0;
	uint8_t led_sensor_weigthed_sum_idx = 0;
     c66:	b1 2c       	mov	r11, r1
	uint8_t led_sensor_prev_time=0;
	uint16_t led_sensor_values[5];
	uint8_t led_sensor_nvalues = 0;
	static uint8_t led_sensor_nsample = 5;
	static uint16_t led_sensor_weigthed_sum_data[20];
	uint16_t led_sensor_weigthed_sum = 0;
     c68:	c1 2c       	mov	r12, r1
     c6a:	d1 2c       	mov	r13, r1
	uint8_t led_sensor_last_random = 0;
	static uint16_t led_sensor_delta_time = 0;
	uint16_t led_sensor_trig_time = 0;
	uint8_t led_sensor_prev_time=0;
	uint16_t led_sensor_values[5];
	uint8_t led_sensor_nvalues = 0;
     c6c:	10 e0       	ldi	r17, 0x00	; 0
	filter_iir2_t filter_iir2_data = {0,0,0,0};
	q7_8_t filtered_val = 0;
	uint8_t led_sensor_last_random = 0;
	static uint16_t led_sensor_delta_time = 0;
	uint16_t led_sensor_trig_time = 0;
	uint8_t led_sensor_prev_time=0;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char led_sensor_blink = 0;
	filter_iir2_t filter_iir2_data = {0,0,0,0};
	q7_8_t filtered_val = 0;
	uint8_t led_sensor_last_random = 0;
	static uint16_t led_sensor_delta_time = 0;
	uint16_t led_sensor_trig_time = 0;
     c70:	e1 2c       	mov	r14, r1
     c72:	f1 2c       	mov	r15, r1
	unsigned char buttonPressed = 0;
	unsigned char buttonMask = 0;
	unsigned char led_sensor_blink = 0;
	filter_iir2_t filter_iir2_data = {0,0,0,0};
	q7_8_t filtered_val = 0;
	uint8_t led_sensor_last_random = 0;
     c74:	00 e0       	ldi	r16, 0x00	; 0

int main(void)
{
	unsigned char buttonPressed = 0;
	unsigned char buttonMask = 0;
	unsigned char led_sensor_blink = 0;
     c76:	a1 2c       	mov	r10, r1
	// main event loop
	for (;;)
	{
		//update delta time
		{
			uint8_t temp = TCNT1;
     c78:	9e b4       	in	r9, 0x2e	; 46
			led_sensor_delta_time += (temp - led_sensor_prev_time) & 0xFF;
     c7a:	29 2d       	mov	r18, r9
     c7c:	28 1b       	sub	r18, r24
     c7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <led_sensor_delta_time.2376>
     c82:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <led_sensor_delta_time.2376+0x1>
     c86:	82 0f       	add	r24, r18
     c88:	91 1d       	adc	r25, r1
     c8a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <led_sensor_delta_time.2376+0x1>
     c8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <led_sensor_delta_time.2376>
			led_sensor_prev_time = temp;
		}

		//Watchdog
		wdt_reset();
     c92:	a8 95       	wdr

		//Timers
		/////////////////////////////////////////////////////
		if (TIFR & _BV(TOV1)) {
     c94:	08 b6       	in	r0, 0x38	; 56
     c96:	02 fe       	sbrs	r0, 2
     c98:	06 c0       	rjmp	.+12     	; 0xca6 <main+0x106>
			TIFR |= _BV(TOV1);
     c9a:	88 b7       	in	r24, 0x38	; 56
     c9c:	84 60       	ori	r24, 0x04	; 4
     c9e:	88 bf       	out	0x38, r24	; 56
			Timers_DecreaseAll(TIMER1_OVERFLOW_PERIOD_MS_X256);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	b9 dc       	rcall	.-1678   	; 0x618 <Timers_DecreaseAll>
		}

		//usb
		/////////////////////////////////////////////////////
		usbPoll();
     ca6:	6f da       	rcall	.-2850   	; 0x186 <usbPoll>

		//
		/////////////////////////////////////////////////////
		if (BUTTON_IS_PRESSED()) {
     ca8:	cc 9b       	sbis	0x19, 4	; 25
			LED_BUTTON_ON();
     caa:	c1 9a       	sbi	0x18, 1	; 24
			buttonPressed = 0;
		}

		//USB interrupt
		/////////////////////////////////////////////////////
		if (usbInterruptIsReady())
     cac:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <usbTxStatus1>
     cb0:	84 ff       	sbrs	r24, 4
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <main+0x12e>
		{
			if (buttonMask != reportBuffer.mouse.buttonMask) {
     cb4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <reportBuffer+0x1>
     cb8:	88 23       	and	r24, r24
     cba:	49 f0       	breq	.+18     	; 0xcce <main+0x12e>
				reportBuffer.mouse.report_id = report_id_mouse;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <reportBuffer>
				reportBuffer.mouse.buttonMask = buttonMask;
     cc2:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <reportBuffer+0x1>
				usbSetInterrupt((uchar*)&reportBuffer.mouse, sizeof(reportBuffer.mouse));
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	8a ee       	ldi	r24, 0xEA	; 234
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	37 da       	rcall	.-2962   	; 0x13c <usbSetInterrupt>
		///////////////////////////////////////////////////////


		//LED Timer
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_LED_BLINK)) {
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	d5 dc       	rcall	.-1622   	; 0x67c <Timer_HasExpired>
     cd2:	89 2b       	or	r24, r25
     cd4:	21 f0       	breq	.+8      	; 0xcde <main+0x13e>
			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
     cd6:	64 ef       	ldi	r22, 0xF4	; 244
     cd8:	71 e0       	ldi	r23, 0x01	; 1
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	f7 dc       	rcall	.-1554   	; 0x6cc <Timer_Set>
			//LED_RED_CHANGE();
		}
		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	cd dc       	rcall	.-1638   	; 0x67c <Timer_HasExpired>
     ce2:	89 2b       	or	r24, r25
     ce4:	21 f0       	breq	.+8      	; 0xcee <main+0x14e>
			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
     ce6:	6a ef       	ldi	r22, 0xFA	; 250
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	ef dc       	rcall	.-1570   	; 0x6cc <Timer_Set>
			//LED_BUTTON_CHANGE();
		}
		if (Timer_HasExpired(TIMER_LED_SENSOR_BLINK))
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	c5 dc       	rcall	.-1654   	; 0x67c <Timer_HasExpired>
     cf2:	89 2b       	or	r24, r25
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <main+0x158>
     cf6:	5b c0       	rjmp	.+182    	; 0xdae <main+0x20e>
}


static uint8_t prng_lfsr1_1(void) {
	static uint8_t lfsr = 0x01;
	lfsr ^= 0x1;
     cf8:	00 91 62 00 	lds	r16, 0x0062	; 0x800062 <lfsr.2294>
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	09 27       	eor	r16, r25
     d00:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <lfsr.2294>
		{
			led_sensor_last_random = prng_lfsr1_1();
			if (led_sensor_last_random & 0x1) {
     d04:	00 ff       	sbrs	r16, 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <main+0x16c>
				LED_RED_ON();
     d08:	c3 9a       	sbi	0x18, 3	; 24
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <main+0x16e>
			}
			else {
				LED_RED_OFF();
     d0c:	c3 98       	cbi	0x18, 3	; 24
			}
			Timer_Set(TIMER_LED_SENSOR_BLINK,100);
     d0e:	64 e6       	ldi	r22, 0x64	; 100
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	db dc       	rcall	.-1610   	; 0x6cc <Timer_Set>
			LED_SENSOR_ADC_SETUP();
     d16:	d8 98       	cbi	0x1b, 0	; 27
     d18:	e3 e9       	ldi	r30, 0x93	; 147
     d1a:	e6 b9       	out	0x06, r30	; 6
     d1c:	13 b8       	out	0x03, r1	; 3
			//LED_SENSOR_ON();
			//_delay_us(200);
			//LED_SENSOR_REVERSE_BIAS();
			//_delay_us(200);
			LED_SENSOR_INPUT();
     d1e:	d2 98       	cbi	0x1a, 2	; 26
     d20:	da 98       	cbi	0x1b, 2	; 27

			led_sensor_blink++;
     d22:	a3 94       	inc	r10
			if (led_sensor_nvalues > 0) {
     d24:	11 23       	and	r17, r17
     d26:	c9 f1       	breq	.+114    	; 0xd9a <main+0x1fa>
				led_sensor_weigthed_sum -= led_sensor_weigthed_sum_data[led_sensor_weigthed_sum_idx];
     d28:	eb 2d       	mov	r30, r11
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	ee 0f       	add	r30, r30
     d2e:	ff 1f       	adc	r31, r31
     d30:	e0 54       	subi	r30, 0x40	; 64
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	20 81       	ld	r18, Z
     d36:	31 81       	ldd	r19, Z+1	; 0x01
				led_sensor_weigthed_sum_data[led_sensor_weigthed_sum_idx] = led_sensor_values[4];
     d38:	89 85       	ldd	r24, Y+9	; 0x09
     d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3c:	c8 0e       	add	r12, r24
     d3e:	d9 1e       	adc	r13, r25
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
				led_sensor_weigthed_sum += led_sensor_weigthed_sum_data[led_sensor_weigthed_sum_idx];
     d44:	c2 1a       	sub	r12, r18
     d46:	d3 0a       	sbc	r13, r19

				led_sensor_weigthed_sum_idx++;
     d48:	b3 94       	inc	r11
				if (led_sensor_weigthed_sum_idx >= elements_of(led_sensor_weigthed_sum_data) ) {
     d4a:	f3 e1       	ldi	r31, 0x13	; 19
     d4c:	fb 15       	cp	r31, r11
     d4e:	08 f4       	brcc	.+2      	; 0xd52 <main+0x1b2>
					led_sensor_weigthed_sum_idx = 0;
     d50:	b1 2c       	mov	r11, r1
				}


				if ((led_sensor_blink & 0xF) == 0) {
     d52:	2a 2d       	mov	r18, r10
     d54:	2f 70       	andi	r18, 0x0F	; 15
     d56:	09 f5       	brne	.+66     	; 0xd9a <main+0x1fa>
					printf("led adc[%d]:\t%05u: \t%05u,\t%05u\t%05u ticks:\t%06u\tfilt:%06d   \r",
     d58:	2b 89       	ldd	r18, Y+19	; 0x13
     d5a:	2f 93       	push	r18
     d5c:	8f 92       	push	r8
     d5e:	ff 92       	push	r15
     d60:	ef 92       	push	r14
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	88 85       	ldd	r24, Y+8	; 0x08
     d68:	8f 93       	push	r24
     d6a:	8f 81       	ldd	r24, Y+7	; 0x07
     d6c:	8f 93       	push	r24
     d6e:	8e 81       	ldd	r24, Y+6	; 0x06
     d70:	8f 93       	push	r24
     d72:	8d 81       	ldd	r24, Y+5	; 0x05
     d74:	8f 93       	push	r24
     d76:	c6 01       	movw	r24, r12
     d78:	64 e1       	ldi	r22, 0x14	; 20
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	94 d1       	rcall	.+808    	; 0x10a6 <__udivmodhi4>
     d7e:	7f 93       	push	r23
     d80:	6f 93       	push	r22
     d82:	1f 92       	push	r1
     d84:	1f 93       	push	r17
     d86:	80 e8       	ldi	r24, 0x80	; 128
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9f 93       	push	r25
     d8c:	8f 93       	push	r24
     d8e:	1d d2       	rcall	.+1082   	; 0x11ca <printf>
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
							led_sensor_trig_time,
							filtered_val);
				}
			}

			led_sensor_delta_time = 0;
     d9a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <led_sensor_delta_time.2376+0x1>
     d9e:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <led_sensor_delta_time.2376>
			led_sensor_trig_time = 0;
			led_sensor_nvalues = 0;
			led_sensor_nsample = 2;
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <led_sensor_nsample.2381>
				}
			}

			led_sensor_delta_time = 0;
			led_sensor_trig_time = 0;
			led_sensor_nvalues = 0;
     da8:	10 e0       	ldi	r17, 0x00	; 0
							filtered_val);
				}
			}

			led_sensor_delta_time = 0;
			led_sensor_trig_time = 0;
     daa:	e1 2c       	mov	r14, r1
     dac:	f1 2c       	mov	r15, r1
			led_sensor_nvalues = 0;
			led_sensor_nsample = 2;
		}

		//Time measurement of LED sensor discharge
		if (!LED_SENSOR_IS_HIGH()) {
     dae:	ca 99       	sbic	0x19, 2	; 25
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <main+0x224>
			LED_BUTTON_OFF();
     db2:	c1 98       	cbi	0x18, 1	; 24
			if (led_sensor_trig_time == 0) {
     db4:	e1 14       	cp	r14, r1
     db6:	f1 04       	cpc	r15, r1
     db8:	31 f4       	brne	.+12     	; 0xdc6 <main+0x226>
				led_sensor_trig_time = led_sensor_delta_time;
     dba:	e0 90 e8 00 	lds	r14, 0x00E8	; 0x8000e8 <led_sensor_delta_time.2376>
     dbe:	f0 90 e9 00 	lds	r15, 0x00E9	; 0x8000e9 <led_sensor_delta_time.2376+0x1>
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <main+0x226>
			}
		}
		else {
			LED_BUTTON_ON();
     dc4:	c1 9a       	sbi	0x18, 1	; 24
		}


		//ADC measurement of led sensor
		{
			if (led_sensor_delta_time >= us_to_ticks(4000) * led_sensor_nsample)
     dc6:	40 90 e8 00 	lds	r4, 0x00E8	; 0x8000e8 <led_sensor_delta_time.2376>
     dca:	50 90 e9 00 	lds	r5, 0x00E9	; 0x8000e9 <led_sensor_delta_time.2376+0x1>
     dce:	61 2c       	mov	r6, r1
     dd0:	71 2c       	mov	r7, r1
     dd2:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <led_sensor_nsample.2381>
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	23 e0       	ldi	r18, 0x03	; 3
     dde:	32 e0       	ldi	r19, 0x02	; 2
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	47 d1       	rcall	.+654    	; 0x1074 <__mulsi3>
     de6:	46 16       	cp	r4, r22
     de8:	57 06       	cpc	r5, r23
     dea:	68 06       	cpc	r6, r24
     dec:	79 06       	cpc	r7, r25
     dee:	40 f0       	brcs	.+16     	; 0xe00 <main+0x260>
			{
				LED_SENSOR_ADC_START();
     df0:	9e e8       	ldi	r25, 0x8E	; 142
     df2:	97 b9       	out	0x07, r25	; 7
     df4:	36 9a       	sbi	0x06, 6	; 6
				led_sensor_nsample++;
     df6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <led_sensor_nsample.2381>
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <led_sensor_nsample.2381>
			}
			if (LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() && LED_SENSOR_ADC_IS_COMPLETED()) {
     e00:	87 b1       	in	r24, 0x07	; 7
     e02:	8f 73       	andi	r24, 0x3F	; 63
     e04:	8e 30       	cpi	r24, 0x0E	; 14
     e06:	f9 f4       	brne	.+62     	; 0xe46 <main+0x2a6>
     e08:	34 9b       	sbis	0x06, 4	; 6
     e0a:	1d c0       	rjmp	.+58     	; 0xe46 <main+0x2a6>
				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
     e0c:	15 30       	cpi	r17, 0x05	; 5
     e0e:	c8 f4       	brcc	.+50     	; 0xe42 <main+0x2a2>
					led_sensor_values[led_sensor_nvalues] = ADC;
     e10:	64 b1       	in	r22, 0x04	; 4
     e12:	75 b1       	in	r23, 0x05	; 5
     e14:	e1 2f       	mov	r30, r17
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	8c 0f       	add	r24, r28
     e22:	9d 1f       	adc	r25, r29
     e24:	e8 0f       	add	r30, r24
     e26:	f9 1f       	adc	r31, r25
     e28:	71 83       	std	Z+1, r23	; 0x01
     e2a:	60 83       	st	Z, r22
					if (led_sensor_nvalues == 4) {
     e2c:	14 30       	cpi	r17, 0x04	; 4
     e2e:	49 f4       	brne	.+18     	; 0xe42 <main+0x2a2>
						int16_t val = led_sensor_values[led_sensor_nvalues];
						if ((led_sensor_last_random & 0x1)) {
     e30:	00 ff       	sbrs	r16, 0
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <main+0x29a>
							val = -val;
     e34:	71 95       	neg	r23
     e36:	61 95       	neg	r22
     e38:	71 09       	sbc	r23, r1
						}
						filtered_val = filter_iir2(&filter_iir2_data,val);
     e3a:	c1 01       	movw	r24, r2
     e3c:	1f db       	rcall	.-2498   	; 0x47c <filter_iir2>
     e3e:	88 2e       	mov	r8, r24
     e40:	9b 8b       	std	Y+19, r25	; 0x13
					}
				}
				led_sensor_nvalues++;
     e42:	1f 5f       	subi	r17, 0xFF	; 255
				LED_SENSOR_ADC_DONE();
     e44:	34 9a       	sbi	0x06, 4	; 6
			}
		}


		if (BOOTLOADER_CONDITION) {
     e46:	cb 9b       	sbis	0x19, 3	; 25
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <main+0x2ae>
}
 */
/* ------------------------------------------------------------------------- */

int main(void)
{
     e4a:	89 2d       	mov	r24, r9
     e4c:	15 cf       	rjmp	.-470    	; 0xc78 <main+0xd8>
			}
		}


		if (BOOTLOADER_CONDITION) {
			cli();
     e4e:	f8 94       	cli
			BOOTLOADER_CONDITION_INIT();
     e50:	d3 98       	cbi	0x1a, 3	; 26
     e52:	db 9a       	sbi	0x1b, 3	; 27
			void (*reset_vec)(void) = 0;
			reset_vec();
     e54:	e0 e0       	ldi	r30, 0x00	; 0
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	09 95       	icall
     e5a:	f7 cf       	rjmp	.-18     	; 0xe4a <main+0x2aa>

00000e5c <vfprintf>:
     e5c:	ab e0       	ldi	r26, 0x0B	; 11
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e3 e3       	ldi	r30, 0x33	; 51
     e62:	f7 e0       	ldi	r31, 0x07	; 7
     e64:	38 c1       	rjmp	.+624    	; 0x10d6 <__prologue_saves__+0x8>
     e66:	6c 01       	movw	r12, r24
     e68:	7b 01       	movw	r14, r22
     e6a:	3a 01       	movw	r6, r20
     e6c:	fc 01       	movw	r30, r24
     e6e:	17 82       	std	Z+7, r1	; 0x07
     e70:	16 82       	std	Z+6, r1	; 0x06
     e72:	83 81       	ldd	r24, Z+3	; 0x03
     e74:	81 ff       	sbrs	r24, 1
     e76:	f9 c0       	rjmp	.+498    	; 0x106a <vfprintf+0x20e>
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	4c 01       	movw	r8, r24
     e7e:	f6 01       	movw	r30, r12
     e80:	b3 80       	ldd	r11, Z+3	; 0x03
     e82:	f7 01       	movw	r30, r14
     e84:	b3 fc       	sbrc	r11, 3
     e86:	05 91       	lpm	r16, Z+
     e88:	b3 fe       	sbrs	r11, 3
     e8a:	01 91       	ld	r16, Z+
     e8c:	7f 01       	movw	r14, r30
     e8e:	00 23       	and	r16, r16
     e90:	09 f4       	brne	.+2      	; 0xe94 <vfprintf+0x38>
     e92:	e7 c0       	rjmp	.+462    	; 0x1062 <vfprintf+0x206>
     e94:	05 32       	cpi	r16, 0x25	; 37
     e96:	49 f4       	brne	.+18     	; 0xeaa <vfprintf+0x4e>
     e98:	b3 fc       	sbrc	r11, 3
     e9a:	05 91       	lpm	r16, Z+
     e9c:	b3 fe       	sbrs	r11, 3
     e9e:	01 91       	ld	r16, Z+
     ea0:	7f 01       	movw	r14, r30
     ea2:	05 32       	cpi	r16, 0x25	; 37
     ea4:	11 f0       	breq	.+4      	; 0xeaa <vfprintf+0x4e>
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	17 c0       	rjmp	.+46     	; 0xed8 <vfprintf+0x7c>
     eaa:	b6 01       	movw	r22, r12
     eac:	80 2f       	mov	r24, r16
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	50 d1       	rcall	.+672    	; 0x1152 <fputc>
     eb2:	53 01       	movw	r10, r6
     eb4:	35 01       	movw	r6, r10
     eb6:	e3 cf       	rjmp	.-58     	; 0xe7e <vfprintf+0x22>
     eb8:	00 23       	and	r16, r16
     eba:	09 f4       	brne	.+2      	; 0xebe <vfprintf+0x62>
     ebc:	d2 c0       	rjmp	.+420    	; 0x1062 <vfprintf+0x206>
     ebe:	60 2f       	mov	r22, r16
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	83 ef       	ldi	r24, 0xF3	; 243
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	3a d1       	rcall	.+628    	; 0x113c <strchr_P>
     ec8:	89 2b       	or	r24, r25
     eca:	49 f0       	breq	.+18     	; 0xede <vfprintf+0x82>
     ecc:	f7 01       	movw	r30, r14
     ece:	b3 fc       	sbrc	r11, 3
     ed0:	05 91       	lpm	r16, Z+
     ed2:	b3 fe       	sbrs	r11, 3
     ed4:	01 91       	ld	r16, Z+
     ed6:	7f 01       	movw	r14, r30
     ed8:	17 ff       	sbrs	r17, 7
     eda:	ee cf       	rjmp	.-36     	; 0xeb8 <vfprintf+0x5c>
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <vfprintf+0x8a>
     ede:	03 32       	cpi	r16, 0x23	; 35
     ee0:	39 f0       	breq	.+14     	; 0xef0 <vfprintf+0x94>
     ee2:	0c 36       	cpi	r16, 0x6C	; 108
     ee4:	19 f0       	breq	.+6      	; 0xeec <vfprintf+0x90>
     ee6:	01 11       	cpse	r16, r1
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <vfprintf+0x98>
     eea:	bb c0       	rjmp	.+374    	; 0x1062 <vfprintf+0x206>
     eec:	10 68       	ori	r17, 0x80	; 128
     eee:	ee cf       	rjmp	.-36     	; 0xecc <vfprintf+0x70>
     ef0:	10 e1       	ldi	r17, 0x10	; 16
     ef2:	ec cf       	rjmp	.-40     	; 0xecc <vfprintf+0x70>
     ef4:	60 2f       	mov	r22, r16
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	8c ee       	ldi	r24, 0xEC	; 236
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	1f d1       	rcall	.+574    	; 0x113c <strchr_P>
     efe:	89 2b       	or	r24, r25
     f00:	41 f0       	breq	.+16     	; 0xf12 <vfprintf+0xb6>
     f02:	53 01       	movw	r10, r6
     f04:	f4 e0       	ldi	r31, 0x04	; 4
     f06:	af 0e       	add	r10, r31
     f08:	b1 1c       	adc	r11, r1
     f0a:	b6 01       	movw	r22, r12
     f0c:	8f e3       	ldi	r24, 0x3F	; 63
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	10 c0       	rjmp	.+32     	; 0xf32 <vfprintf+0xd6>
     f12:	03 36       	cpi	r16, 0x63	; 99
     f14:	31 f0       	breq	.+12     	; 0xf22 <vfprintf+0xc6>
     f16:	03 37       	cpi	r16, 0x73	; 115
     f18:	71 f0       	breq	.+28     	; 0xf36 <vfprintf+0xda>
     f1a:	03 35       	cpi	r16, 0x53	; 83
     f1c:	01 f5       	brne	.+64     	; 0xf5e <vfprintf+0x102>
     f1e:	11 60       	ori	r17, 0x01	; 1
     f20:	0a c0       	rjmp	.+20     	; 0xf36 <vfprintf+0xda>
     f22:	53 01       	movw	r10, r6
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	a8 0e       	add	r10, r24
     f28:	b1 1c       	adc	r11, r1
     f2a:	b6 01       	movw	r22, r12
     f2c:	f3 01       	movw	r30, r6
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	0f d1       	rcall	.+542    	; 0x1152 <fputc>
     f34:	bf cf       	rjmp	.-130    	; 0xeb4 <vfprintf+0x58>
     f36:	53 01       	movw	r10, r6
     f38:	f2 e0       	ldi	r31, 0x02	; 2
     f3a:	af 0e       	add	r10, r31
     f3c:	b1 1c       	adc	r11, r1
     f3e:	f3 01       	movw	r30, r6
     f40:	60 80       	ld	r6, Z
     f42:	71 80       	ldd	r7, Z+1	; 0x01
     f44:	f3 01       	movw	r30, r6
     f46:	10 fd       	sbrc	r17, 0
     f48:	85 91       	lpm	r24, Z+
     f4a:	10 ff       	sbrs	r17, 0
     f4c:	81 91       	ld	r24, Z+
     f4e:	3f 01       	movw	r6, r30
     f50:	88 23       	and	r24, r24
     f52:	09 f4       	brne	.+2      	; 0xf56 <vfprintf+0xfa>
     f54:	af cf       	rjmp	.-162    	; 0xeb4 <vfprintf+0x58>
     f56:	b6 01       	movw	r22, r12
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	fb d0       	rcall	.+502    	; 0x1152 <fputc>
     f5c:	f3 cf       	rjmp	.-26     	; 0xf44 <vfprintf+0xe8>
     f5e:	04 36       	cpi	r16, 0x64	; 100
     f60:	11 f0       	breq	.+4      	; 0xf66 <vfprintf+0x10a>
     f62:	09 36       	cpi	r16, 0x69	; 105
     f64:	21 f5       	brne	.+72     	; 0xfae <vfprintf+0x152>
     f66:	53 01       	movw	r10, r6
     f68:	17 ff       	sbrs	r17, 7
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <vfprintf+0x122>
     f6c:	f4 e0       	ldi	r31, 0x04	; 4
     f6e:	af 0e       	add	r10, r31
     f70:	b1 1c       	adc	r11, r1
     f72:	f3 01       	movw	r30, r6
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	93 81       	ldd	r25, Z+3	; 0x03
     f7c:	0a c0       	rjmp	.+20     	; 0xf92 <vfprintf+0x136>
     f7e:	f2 e0       	ldi	r31, 0x02	; 2
     f80:	af 0e       	add	r10, r31
     f82:	b1 1c       	adc	r11, r1
     f84:	f3 01       	movw	r30, r6
     f86:	60 81       	ld	r22, Z
     f88:	71 81       	ldd	r23, Z+1	; 0x01
     f8a:	07 2e       	mov	r0, r23
     f8c:	00 0c       	add	r0, r0
     f8e:	88 0b       	sbc	r24, r24
     f90:	99 0b       	sbc	r25, r25
     f92:	1f 7e       	andi	r17, 0xEF	; 239
     f94:	97 ff       	sbrs	r25, 7
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <vfprintf+0x14c>
     f98:	90 95       	com	r25
     f9a:	80 95       	com	r24
     f9c:	70 95       	com	r23
     f9e:	61 95       	neg	r22
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	8f 4f       	sbci	r24, 0xFF	; 255
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	10 64       	ori	r17, 0x40	; 64
     fa8:	2a e0       	ldi	r18, 0x0A	; 10
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	30 c0       	rjmp	.+96     	; 0x100e <vfprintf+0x1b2>
     fae:	00 37       	cpi	r16, 0x70	; 112
     fb0:	91 f0       	breq	.+36     	; 0xfd6 <vfprintf+0x17a>
     fb2:	40 f4       	brcc	.+16     	; 0xfc4 <vfprintf+0x168>
     fb4:	08 35       	cpi	r16, 0x58	; 88
     fb6:	a1 f0       	breq	.+40     	; 0xfe0 <vfprintf+0x184>
     fb8:	0f 36       	cpi	r16, 0x6F	; 111
     fba:	09 f0       	breq	.+2      	; 0xfbe <vfprintf+0x162>
     fbc:	52 c0       	rjmp	.+164    	; 0x1062 <vfprintf+0x206>
     fbe:	28 e0       	ldi	r18, 0x08	; 8
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	11 c0       	rjmp	.+34     	; 0xfe6 <vfprintf+0x18a>
     fc4:	05 37       	cpi	r16, 0x75	; 117
     fc6:	19 f0       	breq	.+6      	; 0xfce <vfprintf+0x172>
     fc8:	08 37       	cpi	r16, 0x78	; 120
     fca:	31 f0       	breq	.+12     	; 0xfd8 <vfprintf+0x17c>
     fcc:	4a c0       	rjmp	.+148    	; 0x1062 <vfprintf+0x206>
     fce:	1f 7e       	andi	r17, 0xEF	; 239
     fd0:	2a e0       	ldi	r18, 0x0A	; 10
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <vfprintf+0x18a>
     fd6:	10 61       	ori	r17, 0x10	; 16
     fd8:	14 62       	ori	r17, 0x24	; 36
     fda:	20 e1       	ldi	r18, 0x10	; 16
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <vfprintf+0x18a>
     fe0:	14 60       	ori	r17, 0x04	; 4
     fe2:	20 e1       	ldi	r18, 0x10	; 16
     fe4:	32 e0       	ldi	r19, 0x02	; 2
     fe6:	53 01       	movw	r10, r6
     fe8:	17 ff       	sbrs	r17, 7
     fea:	09 c0       	rjmp	.+18     	; 0xffe <vfprintf+0x1a2>
     fec:	f4 e0       	ldi	r31, 0x04	; 4
     fee:	af 0e       	add	r10, r31
     ff0:	b1 1c       	adc	r11, r1
     ff2:	f3 01       	movw	r30, r6
     ff4:	60 81       	ld	r22, Z
     ff6:	71 81       	ldd	r23, Z+1	; 0x01
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	93 81       	ldd	r25, Z+3	; 0x03
     ffc:	08 c0       	rjmp	.+16     	; 0x100e <vfprintf+0x1b2>
     ffe:	f2 e0       	ldi	r31, 0x02	; 2
    1000:	af 0e       	add	r10, r31
    1002:	b1 1c       	adc	r11, r1
    1004:	f3 01       	movw	r30, r6
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a4 01       	movw	r20, r8
    1010:	12 d1       	rcall	.+548    	; 0x1236 <__ultoa_invert>
    1012:	08 2f       	mov	r16, r24
    1014:	08 19       	sub	r16, r8
    1016:	16 ff       	sbrs	r17, 6
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <vfprintf+0x1c6>
    101a:	b6 01       	movw	r22, r12
    101c:	8d e2       	ldi	r24, 0x2D	; 45
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	98 d0       	rcall	.+304    	; 0x1152 <fputc>
    1022:	14 ff       	sbrs	r17, 4
    1024:	13 c0       	rjmp	.+38     	; 0x104c <vfprintf+0x1f0>
    1026:	fe 01       	movw	r30, r28
    1028:	e0 0f       	add	r30, r16
    102a:	f1 1d       	adc	r31, r1
    102c:	80 81       	ld	r24, Z
    102e:	80 33       	cpi	r24, 0x30	; 48
    1030:	69 f0       	breq	.+26     	; 0x104c <vfprintf+0x1f0>
    1032:	b6 01       	movw	r22, r12
    1034:	80 e3       	ldi	r24, 0x30	; 48
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	8c d0       	rcall	.+280    	; 0x1152 <fputc>
    103a:	12 ff       	sbrs	r17, 2
    103c:	07 c0       	rjmp	.+14     	; 0x104c <vfprintf+0x1f0>
    103e:	10 72       	andi	r17, 0x20	; 32
    1040:	81 2f       	mov	r24, r17
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	b6 01       	movw	r22, r12
    1046:	88 5a       	subi	r24, 0xA8	; 168
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	83 d0       	rcall	.+262    	; 0x1152 <fputc>
    104c:	01 50       	subi	r16, 0x01	; 1
    104e:	f4 01       	movw	r30, r8
    1050:	e0 0f       	add	r30, r16
    1052:	f1 1d       	adc	r31, r1
    1054:	80 81       	ld	r24, Z
    1056:	b6 01       	movw	r22, r12
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	7b d0       	rcall	.+246    	; 0x1152 <fputc>
    105c:	01 11       	cpse	r16, r1
    105e:	f6 cf       	rjmp	.-20     	; 0x104c <vfprintf+0x1f0>
    1060:	29 cf       	rjmp	.-430    	; 0xeb4 <vfprintf+0x58>
    1062:	f6 01       	movw	r30, r12
    1064:	86 81       	ldd	r24, Z+6	; 0x06
    1066:	97 81       	ldd	r25, Z+7	; 0x07
    1068:	02 c0       	rjmp	.+4      	; 0x106e <vfprintf+0x212>
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	9f ef       	ldi	r25, 0xFF	; 255
    106e:	2b 96       	adiw	r28, 0x0b	; 11
    1070:	ee e0       	ldi	r30, 0x0E	; 14
    1072:	4d c0       	rjmp	.+154    	; 0x110e <__epilogue_restores__+0x8>

00001074 <__mulsi3>:
    1074:	ee 27       	eor	r30, r30
    1076:	ff 27       	eor	r31, r31

00001078 <__mulsi3_helper>:
    1078:	aa 27       	eor	r26, r26
    107a:	bb 27       	eor	r27, r27
    107c:	08 c0       	rjmp	.+16     	; 0x108e <__mulsi3_helper+0x16>
    107e:	a2 0f       	add	r26, r18
    1080:	b3 1f       	adc	r27, r19
    1082:	e4 1f       	adc	r30, r20
    1084:	f5 1f       	adc	r31, r21
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	44 1f       	adc	r20, r20
    108c:	55 1f       	adc	r21, r21
    108e:	96 95       	lsr	r25
    1090:	87 95       	ror	r24
    1092:	77 95       	ror	r23
    1094:	67 95       	ror	r22
    1096:	98 f3       	brcs	.-26     	; 0x107e <__mulsi3_helper+0x6>
    1098:	70 40       	sbci	r23, 0x00	; 0
    109a:	a9 f7       	brne	.-22     	; 0x1086 <__mulsi3_helper+0xe>
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	99 f7       	brne	.-26     	; 0x1086 <__mulsi3_helper+0xe>
    10a0:	bd 01       	movw	r22, r26
    10a2:	cf 01       	movw	r24, r30
    10a4:	08 95       	ret

000010a6 <__udivmodhi4>:
    10a6:	aa 1b       	sub	r26, r26
    10a8:	bb 1b       	sub	r27, r27
    10aa:	51 e1       	ldi	r21, 0x11	; 17
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <__udivmodhi4_ep>

000010ae <__udivmodhi4_loop>:
    10ae:	aa 1f       	adc	r26, r26
    10b0:	bb 1f       	adc	r27, r27
    10b2:	a6 17       	cp	r26, r22
    10b4:	b7 07       	cpc	r27, r23
    10b6:	10 f0       	brcs	.+4      	; 0x10bc <__udivmodhi4_ep>
    10b8:	a6 1b       	sub	r26, r22
    10ba:	b7 0b       	sbc	r27, r23

000010bc <__udivmodhi4_ep>:
    10bc:	88 1f       	adc	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	5a 95       	dec	r21
    10c2:	a9 f7       	brne	.-22     	; 0x10ae <__udivmodhi4_loop>
    10c4:	80 95       	com	r24
    10c6:	90 95       	com	r25
    10c8:	bc 01       	movw	r22, r24
    10ca:	cd 01       	movw	r24, r26
    10cc:	08 95       	ret

000010ce <__prologue_saves__>:
    10ce:	2f 92       	push	r2
    10d0:	3f 92       	push	r3
    10d2:	4f 92       	push	r4
    10d4:	5f 92       	push	r5
    10d6:	6f 92       	push	r6
    10d8:	7f 92       	push	r7
    10da:	8f 92       	push	r8
    10dc:	9f 92       	push	r9
    10de:	af 92       	push	r10
    10e0:	bf 92       	push	r11
    10e2:	cf 92       	push	r12
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	ca 1b       	sub	r28, r26
    10f8:	db 0b       	sbc	r29, r27
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	09 94       	ijmp

00001106 <__epilogue_restores__>:
    1106:	2a 88       	ldd	r2, Y+18	; 0x12
    1108:	39 88       	ldd	r3, Y+17	; 0x11
    110a:	48 88       	ldd	r4, Y+16	; 0x10
    110c:	5f 84       	ldd	r5, Y+15	; 0x0f
    110e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1110:	7d 84       	ldd	r7, Y+13	; 0x0d
    1112:	8c 84       	ldd	r8, Y+12	; 0x0c
    1114:	9b 84       	ldd	r9, Y+11	; 0x0b
    1116:	aa 84       	ldd	r10, Y+10	; 0x0a
    1118:	b9 84       	ldd	r11, Y+9	; 0x09
    111a:	c8 84       	ldd	r12, Y+8	; 0x08
    111c:	df 80       	ldd	r13, Y+7	; 0x07
    111e:	ee 80       	ldd	r14, Y+6	; 0x06
    1120:	fd 80       	ldd	r15, Y+5	; 0x05
    1122:	0c 81       	ldd	r16, Y+4	; 0x04
    1124:	1b 81       	ldd	r17, Y+3	; 0x03
    1126:	aa 81       	ldd	r26, Y+2	; 0x02
    1128:	b9 81       	ldd	r27, Y+1	; 0x01
    112a:	ce 0f       	add	r28, r30
    112c:	d1 1d       	adc	r29, r1
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	ed 01       	movw	r28, r26
    113a:	08 95       	ret

0000113c <strchr_P>:
    113c:	fc 01       	movw	r30, r24
    113e:	05 90       	lpm	r0, Z+
    1140:	06 16       	cp	r0, r22
    1142:	21 f0       	breq	.+8      	; 0x114c <strchr_P+0x10>
    1144:	00 20       	and	r0, r0
    1146:	d9 f7       	brne	.-10     	; 0x113e <strchr_P+0x2>
    1148:	c0 01       	movw	r24, r0
    114a:	08 95       	ret
    114c:	31 97       	sbiw	r30, 0x01	; 1
    114e:	cf 01       	movw	r24, r30
    1150:	08 95       	ret

00001152 <fputc>:
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	fb 01       	movw	r30, r22
    115c:	23 81       	ldd	r18, Z+3	; 0x03
    115e:	21 fd       	sbrc	r18, 1
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <fputc+0x16>
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	9f ef       	ldi	r25, 0xFF	; 255
    1166:	2c c0       	rjmp	.+88     	; 0x11c0 <fputc+0x6e>
    1168:	22 ff       	sbrs	r18, 2
    116a:	16 c0       	rjmp	.+44     	; 0x1198 <fputc+0x46>
    116c:	46 81       	ldd	r20, Z+6	; 0x06
    116e:	57 81       	ldd	r21, Z+7	; 0x07
    1170:	24 81       	ldd	r18, Z+4	; 0x04
    1172:	35 81       	ldd	r19, Z+5	; 0x05
    1174:	42 17       	cp	r20, r18
    1176:	53 07       	cpc	r21, r19
    1178:	44 f4       	brge	.+16     	; 0x118a <fputc+0x38>
    117a:	a0 81       	ld	r26, Z
    117c:	b1 81       	ldd	r27, Z+1	; 0x01
    117e:	9d 01       	movw	r18, r26
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	31 83       	std	Z+1, r19	; 0x01
    1186:	20 83       	st	Z, r18
    1188:	8c 93       	st	X, r24
    118a:	26 81       	ldd	r18, Z+6	; 0x06
    118c:	37 81       	ldd	r19, Z+7	; 0x07
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	37 83       	std	Z+7, r19	; 0x07
    1194:	26 83       	std	Z+6, r18	; 0x06
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <fputc+0x6e>
    1198:	8b 01       	movw	r16, r22
    119a:	ec 01       	movw	r28, r24
    119c:	fb 01       	movw	r30, r22
    119e:	00 84       	ldd	r0, Z+8	; 0x08
    11a0:	f1 85       	ldd	r31, Z+9	; 0x09
    11a2:	e0 2d       	mov	r30, r0
    11a4:	09 95       	icall
    11a6:	89 2b       	or	r24, r25
    11a8:	e1 f6       	brne	.-72     	; 0x1162 <fputc+0x10>
    11aa:	d8 01       	movw	r26, r16
    11ac:	16 96       	adiw	r26, 0x06	; 6
    11ae:	8d 91       	ld	r24, X+
    11b0:	9c 91       	ld	r25, X
    11b2:	17 97       	sbiw	r26, 0x07	; 7
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	17 96       	adiw	r26, 0x07	; 7
    11b8:	9c 93       	st	X, r25
    11ba:	8e 93       	st	-X, r24
    11bc:	16 97       	sbiw	r26, 0x06	; 6
    11be:	ce 01       	movw	r24, r28
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <printf>:
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	ea ee       	ldi	r30, 0xEA	; 234
    11d0:	f8 e0       	ldi	r31, 0x08	; 8
    11d2:	8d cf       	rjmp	.-230    	; 0x10ee <__prologue_saves__+0x20>
    11d4:	ae 01       	movw	r20, r28
    11d6:	4b 5f       	subi	r20, 0xFB	; 251
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	fa 01       	movw	r30, r20
    11dc:	61 91       	ld	r22, Z+
    11de:	71 91       	ld	r23, Z+
    11e0:	af 01       	movw	r20, r30
    11e2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__iob+0x2>
    11e6:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <__iob+0x3>
    11ea:	38 de       	rcall	.-912    	; 0xe5c <vfprintf>
    11ec:	e2 e0       	ldi	r30, 0x02	; 2
    11ee:	9b cf       	rjmp	.-202    	; 0x1126 <__epilogue_restores__+0x20>

000011f0 <printf_P>:
    11f0:	a0 e0       	ldi	r26, 0x00	; 0
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ed ef       	ldi	r30, 0xFD	; 253
    11f6:	f8 e0       	ldi	r31, 0x08	; 8
    11f8:	78 cf       	rjmp	.-272    	; 0x10ea <__prologue_saves__+0x1c>
    11fa:	ae 01       	movw	r20, r28
    11fc:	49 5f       	subi	r20, 0xF9	; 249
    11fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1200:	da 01       	movw	r26, r20
    1202:	6d 91       	ld	r22, X+
    1204:	7d 91       	ld	r23, X+
    1206:	ad 01       	movw	r20, r26
    1208:	02 ec       	ldi	r16, 0xC2	; 194
    120a:	11 e0       	ldi	r17, 0x01	; 1
    120c:	f8 01       	movw	r30, r16
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	dc 01       	movw	r26, r24
    1214:	13 96       	adiw	r26, 0x03	; 3
    1216:	2c 91       	ld	r18, X
    1218:	13 97       	sbiw	r26, 0x03	; 3
    121a:	28 60       	ori	r18, 0x08	; 8
    121c:	13 96       	adiw	r26, 0x03	; 3
    121e:	2c 93       	st	X, r18
    1220:	1d de       	rcall	.-966    	; 0xe5c <vfprintf>
    1222:	d8 01       	movw	r26, r16
    1224:	12 96       	adiw	r26, 0x02	; 2
    1226:	ed 91       	ld	r30, X+
    1228:	fc 91       	ld	r31, X
    122a:	13 97       	sbiw	r26, 0x03	; 3
    122c:	23 81       	ldd	r18, Z+3	; 0x03
    122e:	27 7f       	andi	r18, 0xF7	; 247
    1230:	23 83       	std	Z+3, r18	; 0x03
    1232:	e4 e0       	ldi	r30, 0x04	; 4
    1234:	76 cf       	rjmp	.-276    	; 0x1122 <__epilogue_restores__+0x1c>

00001236 <__ultoa_invert>:
    1236:	fa 01       	movw	r30, r20
    1238:	aa 27       	eor	r26, r26
    123a:	28 30       	cpi	r18, 0x08	; 8
    123c:	61 f1       	breq	.+88     	; 0x1296 <__ultoa_invert+0x60>
    123e:	20 31       	cpi	r18, 0x10	; 16
    1240:	91 f1       	breq	.+100    	; 0x12a6 <__ultoa_invert+0x70>
    1242:	e8 94       	clt
    1244:	6f 93       	push	r22
    1246:	6e 7f       	andi	r22, 0xFE	; 254
    1248:	6e 5f       	subi	r22, 0xFE	; 254
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	af 4f       	sbci	r26, 0xFF	; 255
    1252:	b1 e0       	ldi	r27, 0x01	; 1
    1254:	40 d0       	rcall	.+128    	; 0x12d6 <__ultoa_invert+0xa0>
    1256:	b4 e0       	ldi	r27, 0x04	; 4
    1258:	3e d0       	rcall	.+124    	; 0x12d6 <__ultoa_invert+0xa0>
    125a:	67 0f       	add	r22, r23
    125c:	78 1f       	adc	r23, r24
    125e:	89 1f       	adc	r24, r25
    1260:	9a 1f       	adc	r25, r26
    1262:	a1 1d       	adc	r26, r1
    1264:	68 0f       	add	r22, r24
    1266:	79 1f       	adc	r23, r25
    1268:	8a 1f       	adc	r24, r26
    126a:	91 1d       	adc	r25, r1
    126c:	a1 1d       	adc	r26, r1
    126e:	6a 0f       	add	r22, r26
    1270:	71 1d       	adc	r23, r1
    1272:	81 1d       	adc	r24, r1
    1274:	91 1d       	adc	r25, r1
    1276:	a1 1d       	adc	r26, r1
    1278:	22 d0       	rcall	.+68     	; 0x12be <__ultoa_invert+0x88>
    127a:	09 f4       	brne	.+2      	; 0x127e <__ultoa_invert+0x48>
    127c:	68 94       	set
    127e:	3f 91       	pop	r19
    1280:	06 2e       	mov	r0, r22
    1282:	00 0c       	add	r0, r0
    1284:	30 19       	sub	r19, r0
    1286:	00 0c       	add	r0, r0
    1288:	00 0c       	add	r0, r0
    128a:	30 19       	sub	r19, r0
    128c:	30 5d       	subi	r19, 0xD0	; 208
    128e:	31 93       	st	Z+, r19
    1290:	ce f6       	brtc	.-78     	; 0x1244 <__ultoa_invert+0xe>
    1292:	cf 01       	movw	r24, r30
    1294:	08 95       	ret
    1296:	46 2f       	mov	r20, r22
    1298:	47 70       	andi	r20, 0x07	; 7
    129a:	40 5d       	subi	r20, 0xD0	; 208
    129c:	41 93       	st	Z+, r20
    129e:	b3 e0       	ldi	r27, 0x03	; 3
    12a0:	0f d0       	rcall	.+30     	; 0x12c0 <__ultoa_invert+0x8a>
    12a2:	c9 f7       	brne	.-14     	; 0x1296 <__ultoa_invert+0x60>
    12a4:	f6 cf       	rjmp	.-20     	; 0x1292 <__ultoa_invert+0x5c>
    12a6:	46 2f       	mov	r20, r22
    12a8:	4f 70       	andi	r20, 0x0F	; 15
    12aa:	40 5d       	subi	r20, 0xD0	; 208
    12ac:	4a 33       	cpi	r20, 0x3A	; 58
    12ae:	18 f0       	brcs	.+6      	; 0x12b6 <__ultoa_invert+0x80>
    12b0:	49 5d       	subi	r20, 0xD9	; 217
    12b2:	31 fd       	sbrc	r19, 1
    12b4:	40 52       	subi	r20, 0x20	; 32
    12b6:	41 93       	st	Z+, r20
    12b8:	02 d0       	rcall	.+4      	; 0x12be <__ultoa_invert+0x88>
    12ba:	a9 f7       	brne	.-22     	; 0x12a6 <__ultoa_invert+0x70>
    12bc:	ea cf       	rjmp	.-44     	; 0x1292 <__ultoa_invert+0x5c>
    12be:	b4 e0       	ldi	r27, 0x04	; 4
    12c0:	a6 95       	lsr	r26
    12c2:	97 95       	ror	r25
    12c4:	87 95       	ror	r24
    12c6:	77 95       	ror	r23
    12c8:	67 95       	ror	r22
    12ca:	ba 95       	dec	r27
    12cc:	c9 f7       	brne	.-14     	; 0x12c0 <__ultoa_invert+0x8a>
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	61 05       	cpc	r22, r1
    12d2:	71 05       	cpc	r23, r1
    12d4:	08 95       	ret
    12d6:	9b 01       	movw	r18, r22
    12d8:	ac 01       	movw	r20, r24
    12da:	0a 2e       	mov	r0, r26
    12dc:	06 94       	lsr	r0
    12de:	57 95       	ror	r21
    12e0:	47 95       	ror	r20
    12e2:	37 95       	ror	r19
    12e4:	27 95       	ror	r18
    12e6:	ba 95       	dec	r27
    12e8:	c9 f7       	brne	.-14     	; 0x12dc <__ultoa_invert+0xa6>
    12ea:	62 0f       	add	r22, r18
    12ec:	73 1f       	adc	r23, r19
    12ee:	84 1f       	adc	r24, r20
    12f0:	95 1f       	adc	r25, r21
    12f2:	a0 1d       	adc	r26, r0
    12f4:	08 95       	ret

000012f6 <_exit>:
    12f6:	f8 94       	cli

000012f8 <__stop_program>:
    12f8:	ff cf       	rjmp	.-2      	; 0x12f8 <__stop_program>
