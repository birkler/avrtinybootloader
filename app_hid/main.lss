
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00001388  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e2  00800094  00800094  00001450  2**0
                  ALLOC
  3 .stab         00001254  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000005a  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000026fe  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000026a8  00000000  00000000  0000282c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000113a  00000000  00000000  00004ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000caa  00000000  00000000  0000600e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000380  00000000  00000000  00006cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d70  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000014a8  00000000  00000000  00007da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b0  00000000  00000000  00009250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
       2:	11 c5       	rjmp	.+2594   	; 0xa26 <__vector_1>
       4:	9f c0       	rjmp	.+318    	; 0x144 <__bad_interrupt>
       6:	9e c0       	rjmp	.+316    	; 0x144 <__bad_interrupt>
       8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
       a:	9c c0       	rjmp	.+312    	; 0x144 <__bad_interrupt>
       c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
       e:	9a c0       	rjmp	.+308    	; 0x144 <__bad_interrupt>
      10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
      12:	98 c0       	rjmp	.+304    	; 0x144 <__bad_interrupt>
      14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
      16:	96 c0       	rjmp	.+300    	; 0x144 <__bad_interrupt>
      18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
      1a:	94 c0       	rjmp	.+296    	; 0x144 <__bad_interrupt>
      1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
      1e:	92 c0       	rjmp	.+292    	; 0x144 <__bad_interrupt>
      20:	a9 c2       	rjmp	.+1362   	; 0x574 <__vector_16>
      22:	90 c0       	rjmp	.+288    	; 0x144 <__bad_interrupt>
      24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>

00000026 <__trampolines_end>:
      26:	09 02       	muls	r16, r25
      28:	22 00       	.word	0x0022	; ????
      2a:	01 01       	movw	r0, r2
      2c:	00 80       	ld	r0, Z
      2e:	32 09       	sbc	r19, r2
      30:	04 00       	.word	0x0004	; ????
      32:	00 01       	movw	r0, r0
      34:	03 00       	.word	0x0003	; ????
      36:	00 00       	nop
      38:	09 21       	and	r16, r9
      3a:	01 01       	movw	r0, r2
      3c:	00 01       	movw	r0, r0
      3e:	22 50       	subi	r18, 0x02	; 2
      40:	00 07       	cpc	r16, r16
      42:	05 81       	ldd	r16, Z+5	; 0x05
      44:	03 08       	sbc	r0, r3
      46:	00 64       	ori	r16, 0x40	; 64

00000048 <usbDescriptorDevice>:
      48:	12 01 10 01 00 00 00 08 42 42 55 e4 09 00 01 02     ........BBU.....
      58:	00 01                                               ..

0000005a <usbDescriptorStringDevice>:
      5a:	24 03 42 00 69 00 72 00 6b 00 6c 00 65 00 72 00     $.B.i.r.k.l.e.r.
      6a:	20 00 53 00 69 00 6d 00 70 00 6c 00 65 00 48 00      .S.i.m.p.l.e.H.
      7a:	49 00 44 00                                         I.D.

0000007e <usbDescriptorStringVendor>:
      7e:	16 03 62 00 69 00 72 00 6b 00 6c 00 65 00 72 00     ..b.i.r.k.l.e.r.
      8e:	2e 00 73 00 65 00                                   ..s.e.

00000094 <usbDescriptorString0>:
      94:	04 03 09 04                                         ....

00000098 <__c.2487>:
      98:	42 75 74 74 6f 6e 21 0d 0a 00                       Button!...

000000a2 <__c.2476>:
      a2:	42 21 0a 00                                         B!..

000000a6 <usbDescriptorHidReport>:
      a6:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
      b6:	15 00 25 01 95 03 75 01 85 01 81 02 95 01 75 05     ..%...u.......u.
      c6:	81 03 c0 c0 0b 00 00 01 00 a1 00 05 01 75 10 95     .............u..
      d6:	01 09 00 85 7c b1 02 09 00 85 7d b1 02 75 08 95     ....|.....}..u..
      e6:	44 09 00 85 7e b1 00 09 00 95 09 85 7f b1 00 c0     D...~...........

000000f6 <__c.2320>:
      f6:	45 46 47 65 66 67 00                                EFGefg.

000000fd <__c.2314>:
      fd:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
     10d:	00                                                  .

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf e5       	ldi	r28, 0x5F	; 95
     114:	d2 e0       	ldi	r29, 0x02	; 2
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	10 e0       	ldi	r17, 0x00	; 0
     11c:	a0 e6       	ldi	r26, 0x60	; 96
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	e8 e8       	ldi	r30, 0x88	; 136
     122:	f3 e1       	ldi	r31, 0x13	; 19
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a4 39       	cpi	r26, 0x94	; 148
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	21 e0       	ldi	r18, 0x01	; 1
     132:	a4 e9       	ldi	r26, 0x94	; 148
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	a6 37       	cpi	r26, 0x76	; 118
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	d0 d5       	rcall	.+2976   	; 0xce2 <main>
     142:	20 c9       	rjmp	.-3520   	; 0xfffff384 <__eeprom_end+0xff7ef384>

00000144 <__bad_interrupt>:
     144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     146:	cf 93       	push	r28
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
     148:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <usbTxStatus1>
     14c:	2e 31       	cpi	r18, 0x1E	; 30
     14e:	f1 f0       	breq	.+60     	; 0x18c <usbSetInterrupt+0x46>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     150:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <usbTxStatus1>
     154:	24 ff       	sbrs	r18, 4
     156:	0b c0       	rjmp	.+22     	; 0x16e <usbSetInterrupt+0x28>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     158:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <usbTxStatus1+0x1>
     15c:	28 e8       	ldi	r18, 0x88	; 136
     15e:	23 27       	eor	r18, r19
     160:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <usbTxStatus1+0x1>
     164:	fc 01       	movw	r30, r24
     166:	a7 e4       	ldi	r26, 0x47	; 71
     168:	b1 e0       	ldi	r27, 0x01	; 1
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     16a:	86 2f       	mov	r24, r22
     16c:	04 c0       	rjmp	.+8      	; 0x176 <usbSetInterrupt+0x30>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     16e:	2a e5       	ldi	r18, 0x5A	; 90
     170:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <usbTxStatus1>
     174:	f7 cf       	rjmp	.-18     	; 0x164 <usbSetInterrupt+0x1e>
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     176:	91 91       	ld	r25, Z+
     178:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     17a:	81 50       	subi	r24, 0x01	; 1
     17c:	e1 f7       	brne	.-8      	; 0x176 <usbSetInterrupt+0x30>
     17e:	c6 2f       	mov	r28, r22
    usbCrc16Append(&txStatus->buffer[1], len);
     180:	87 e4       	ldi	r24, 0x47	; 71
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	39 d4       	rcall	.+2162   	; 0x9f8 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     186:	cc 5f       	subi	r28, 0xFC	; 252
     188:	c0 93 45 01 	sts	0x0145, r28	; 0x800145 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     18c:	cf 91       	pop	r28
     18e:	08 95       	ret

00000190 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     194:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <usbRxLen>
     198:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     19a:	67 fd       	sbrc	r22, 7
     19c:	e9 c0       	rjmp	.+466    	; 0x370 <__stack+0x111>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     19e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <usbInputBufOffset>
     1a2:	cc e0       	ldi	r28, 0x0C	; 12
     1a4:	d0 e0       	ldi	r29, 0x00	; 0
     1a6:	c8 1b       	sub	r28, r24
     1a8:	d1 09       	sbc	r29, r1
     1aa:	c6 5a       	subi	r28, 0xA6	; 166
     1ac:	de 4f       	sbci	r29, 0xFE	; 254
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     1ae:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <usbRxToken>
     1b2:	8d 32       	cpi	r24, 0x2D	; 45
     1b4:	09 f0       	breq	.+2      	; 0x1b8 <usbPoll+0x28>
     1b6:	cb c0       	rjmp	.+406    	; 0x34e <__stack+0xef>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     1b8:	68 30       	cpi	r22, 0x08	; 8
     1ba:	09 f0       	breq	.+2      	; 0x1be <usbPoll+0x2e>
     1bc:	d7 c0       	rjmp	.+430    	; 0x36c <__stack+0x10d>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     1be:	83 ec       	ldi	r24, 0xC3	; 195
     1c0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     1c4:	8a e5       	ldi	r24, 0x5A	; 90
     1c6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
        usbMsgFlags = 0;
     1ca:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     1ce:	28 81       	ld	r18, Y
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     1d0:	82 2f       	mov	r24, r18
     1d2:	80 76       	andi	r24, 0x60	; 96
     1d4:	31 f0       	breq	.+12     	; 0x1e2 <usbPoll+0x52>
            replyLen = usbFunctionSetup(data);
     1d6:	ce 01       	movw	r24, r28
     1d8:	96 d3       	rcall	.+1836   	; 0x906 <usbFunctionSetup>
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     1da:	8f 3f       	cpi	r24, 0xFF	; 255
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <usbPoll+0x50>
     1de:	a6 c0       	rjmp	.+332    	; 0x32c <__stack+0xcd>
     1e0:	ac c0       	rjmp	.+344    	; 0x33a <__stack+0xdb>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     1e2:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
     1e4:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     1e6:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     1ec:	81 11       	cpse	r24, r1
     1ee:	13 c0       	rjmp	.+38     	; 0x216 <usbPoll+0x86>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
     1f0:	2f 71       	andi	r18, 0x1F	; 31
     1f2:	22 30       	cpi	r18, 0x02	; 2
     1f4:	51 f4       	brne	.+20     	; 0x20a <usbPoll+0x7a>
     1f6:	31 38       	cpi	r19, 0x81	; 129
     1f8:	41 f4       	brne	.+16     	; 0x20a <usbPoll+0x7a>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
     1fa:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <usbTxStatus1>
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	9e 31       	cpi	r25, 0x1E	; 30
     202:	09 f0       	breq	.+2      	; 0x206 <usbPoll+0x76>
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <usbTxBuf+0x9>
#endif
        dataPtr[1] = 0;
     20a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <usbTxBuf+0xa>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
     20e:	23 e4       	ldi	r18, 0x43	; 67
     210:	31 e0       	ldi	r19, 0x01	; 1
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	86 c0       	rjmp	.+268    	; 0x322 <__stack+0xc3>
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
     216:	28 2f       	mov	r18, r24
     218:	2d 7f       	andi	r18, 0xFD	; 253
     21a:	21 30       	cpi	r18, 0x01	; 1
     21c:	81 f4       	brne	.+32     	; 0x23e <usbPoll+0xae>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
     21e:	91 11       	cpse	r25, r1
     220:	7d c0       	rjmp	.+250    	; 0x31c <__stack+0xbd>
     222:	31 38       	cpi	r19, 0x81	; 129
     224:	09 f0       	breq	.+2      	; 0x228 <usbPoll+0x98>
     226:	7a c0       	rjmp	.+244    	; 0x31c <__stack+0xbd>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	11 f0       	breq	.+4      	; 0x230 <usbPoll+0xa0>
     22c:	8e e1       	ldi	r24, 0x1E	; 30
     22e:	01 c0       	rjmp	.+2      	; 0x232 <usbPoll+0xa2>
     230:	8a e5       	ldi	r24, 0x5A	; 90
     232:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <usbTxStatus1>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     236:	8b e4       	ldi	r24, 0x4B	; 75
     238:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <usbTxStatus1+0x1>
     23c:	6f c0       	rjmp	.+222    	; 0x31c <__stack+0xbd>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     23e:	85 30       	cpi	r24, 0x05	; 5
     240:	19 f4       	brne	.+6      	; 0x248 <usbPoll+0xb8>
        usbNewDeviceAddr = value;
     242:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <usbNewDeviceAddr>
     246:	6a c0       	rjmp	.+212    	; 0x31c <__stack+0xbd>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     248:	86 30       	cpi	r24, 0x06	; 6
     24a:	09 f0       	breq	.+2      	; 0x24e <usbPoll+0xbe>
     24c:	4e c0       	rjmp	.+156    	; 0x2ea <__stack+0x8b>
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	41 f4       	brne	.+16     	; 0x264 <__stack+0x5>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     254:	88 e4       	ldi	r24, 0x48	; 72
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <usbMsgPtr+0x1>
     25c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <usbMsgPtr>
     260:	82 e1       	ldi	r24, 0x12	; 18
     262:	3f c0       	rjmp	.+126    	; 0x2e2 <__stack+0x83>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     264:	82 30       	cpi	r24, 0x02	; 2
     266:	41 f4       	brne	.+16     	; 0x278 <__stack+0x19>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     268:	86 e2       	ldi	r24, 0x26	; 38
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <usbMsgPtr+0x1>
     270:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <usbMsgPtr>
     274:	82 e2       	ldi	r24, 0x22	; 34
     276:	35 c0       	rjmp	.+106    	; 0x2e2 <__stack+0x83>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	f1 f4       	brne	.+60     	; 0x2b8 <__stack+0x59>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
     27c:	91 11       	cpse	r25, r1
     27e:	08 c0       	rjmp	.+16     	; 0x290 <__stack+0x31>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     280:	84 e9       	ldi	r24, 0x94	; 148
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <usbMsgPtr+0x1>
     288:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <usbMsgPtr>
     28c:	84 e0       	ldi	r24, 0x04	; 4
     28e:	29 c0       	rjmp	.+82     	; 0x2e2 <__stack+0x83>
        SWITCH_CASE(1)
     290:	91 30       	cpi	r25, 0x01	; 1
     292:	41 f4       	brne	.+16     	; 0x2a4 <__stack+0x45>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     294:	8e e7       	ldi	r24, 0x7E	; 126
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <usbMsgPtr+0x1>
     29c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <usbMsgPtr>
     2a0:	86 e1       	ldi	r24, 0x16	; 22
     2a2:	1f c0       	rjmp	.+62     	; 0x2e2 <__stack+0x83>
        SWITCH_CASE(2)
     2a4:	92 30       	cpi	r25, 0x02	; 2
     2a6:	e1 f4       	brne	.+56     	; 0x2e0 <__stack+0x81>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     2a8:	8a e5       	ldi	r24, 0x5A	; 90
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <usbMsgPtr+0x1>
     2b0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <usbMsgPtr>
     2b4:	84 e2       	ldi	r24, 0x24	; 36
     2b6:	15 c0       	rjmp	.+42     	; 0x2e2 <__stack+0x83>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     2b8:	81 32       	cpi	r24, 0x21	; 33
     2ba:	41 f4       	brne	.+16     	; 0x2cc <__stack+0x6d>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     2bc:	88 e3       	ldi	r24, 0x38	; 56
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <usbMsgPtr+0x1>
     2c4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <usbMsgPtr>
     2c8:	89 e0       	ldi	r24, 0x09	; 9
     2ca:	0b c0       	rjmp	.+22     	; 0x2e2 <__stack+0x83>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     2cc:	82 32       	cpi	r24, 0x22	; 34
     2ce:	41 f4       	brne	.+16     	; 0x2e0 <__stack+0x81>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     2d0:	86 ea       	ldi	r24, 0xA6	; 166
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <usbMsgPtr+0x1>
     2d8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <usbMsgPtr>
     2dc:	80 e5       	ldi	r24, 0x50	; 80
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <__stack+0x83>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     2e0:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     2e2:	90 e4       	ldi	r25, 0x40	; 64
     2e4:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgFlags>
     2e8:	28 c0       	rjmp	.+80     	; 0x33a <__stack+0xdb>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     2ea:	88 30       	cpi	r24, 0x08	; 8
     2ec:	81 f0       	breq	.+32     	; 0x30e <__stack+0xaf>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     2ee:	89 30       	cpi	r24, 0x09	; 9
     2f0:	19 f4       	brne	.+6      	; 0x2f8 <__stack+0x99>
        usbConfiguration = value;
     2f2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <usbConfiguration>
     2f6:	07 c0       	rjmp	.+14     	; 0x306 <__stack+0xa7>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     2f8:	8a 30       	cpi	r24, 0x0A	; 10
     2fa:	61 f0       	breq	.+24     	; 0x314 <__stack+0xb5>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     2fc:	8b 30       	cpi	r24, 0x0B	; 11
     2fe:	71 f4       	brne	.+28     	; 0x31c <__stack+0xbd>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     300:	8b e4       	ldi	r24, 0x4B	; 75
     302:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <usbTxStatus1+0x1>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     306:	8a e5       	ldi	r24, 0x5A	; 90
     308:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <usbTxStatus1>
     30c:	07 c0       	rjmp	.+14     	; 0x31c <__stack+0xbd>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
     30e:	29 e5       	ldi	r18, 0x59	; 89
     310:	31 e0       	ldi	r19, 0x01	; 1
     312:	02 c0       	rjmp	.+4      	; 0x318 <__stack+0xb9>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
     314:	23 e4       	ldi	r18, 0x43	; 67
     316:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	03 c0       	rjmp	.+6      	; 0x322 <__stack+0xc3>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
     31c:	23 e4       	ldi	r18, 0x43	; 67
     31e:	31 e0       	ldi	r19, 0x01	; 1
     320:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     322:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <usbMsgPtr+0x1>
     326:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <usbMsgPtr>
     32a:	07 c0       	rjmp	.+14     	; 0x33a <__stack+0xdb>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     32c:	98 81       	ld	r25, Y
     32e:	97 fd       	sbrc	r25, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     330:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     332:	90 e8       	ldi	r25, 0x80	; 128
     334:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgFlags>
     338:	07 c0       	rjmp	.+14     	; 0x348 <__stack+0xe9>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     33a:	9f 81       	ldd	r25, Y+7	; 0x07
     33c:	91 11       	cpse	r25, r1
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__stack+0xe9>
     340:	9e 81       	ldd	r25, Y+6	; 0x06
     342:	98 17       	cp	r25, r24
     344:	08 f4       	brcc	.+2      	; 0x348 <__stack+0xe9>
     346:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     348:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     34c:	0f c0       	rjmp	.+30     	; 0x36c <__stack+0x10d>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     34e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <usbMsgFlags>
     352:	87 ff       	sbrs	r24, 7
     354:	0b c0       	rjmp	.+22     	; 0x36c <__stack+0x10d>
            uchar rval = usbFunctionWrite(data, len);
     356:	ce 01       	movw	r24, r28
     358:	1e d3       	rcall	.+1596   	; 0x996 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     35a:	8f 3f       	cpi	r24, 0xFF	; 255
     35c:	21 f4       	brne	.+8      	; 0x366 <__stack+0x107>
                usbTxLen = USBPID_STALL;
     35e:	8e e1       	ldi	r24, 0x1E	; 30
     360:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
     364:	03 c0       	rjmp	.+6      	; 0x36c <__stack+0x10d>
            }else if(rval != 0){    /* This was the final package */
     366:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     368:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     36c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     370:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbTxLen>
     374:	84 ff       	sbrs	r24, 4
     376:	55 c0       	rjmp	.+170    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     378:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     37c:	8f 3f       	cpi	r24, 0xFF	; 255
     37e:	09 f4       	brne	.+2      	; 0x382 <__stack+0x123>
     380:	50 c0       	rjmp	.+160    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     382:	c8 2f       	mov	r28, r24
     384:	89 30       	cpi	r24, 0x09	; 9
     386:	08 f0       	brcs	.+2      	; 0x38a <__stack+0x12b>
     388:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     38a:	8c 1b       	sub	r24, r28
     38c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     390:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <usbTxBuf>
     394:	88 e8       	ldi	r24, 0x88	; 136
     396:	89 27       	eor	r24, r25
     398:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <usbTxBuf>
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     39c:	cc 23       	and	r28, r28
     39e:	09 f4       	brne	.+2      	; 0x3a2 <__stack+0x143>
     3a0:	5c c0       	rjmp	.+184    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     3a2:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <usbMsgFlags>
     3a6:	27 ff       	sbrs	r18, 7
     3a8:	08 c0       	rjmp	.+16     	; 0x3ba <__stack+0x15b>
            len = usbFunctionRead(data, len);
     3aa:	6c 2f       	mov	r22, r28
     3ac:	8b e3       	ldi	r24, 0x3B	; 59
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	c8 d2       	rcall	.+1424   	; 0x942 <usbFunctionRead>
     3b2:	c8 2f       	mov	r28, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
     3b4:	89 30       	cpi	r24, 0x09	; 9
     3b6:	78 f5       	brcc	.+94     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3b8:	23 c0       	rjmp	.+70     	; 0x400 <__LOCK_REGION_LENGTH__>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
     3ba:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <usbMsgPtr>
     3be:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     3c2:	26 ff       	sbrs	r18, 6
     3c4:	0a c0       	rjmp	.+20     	; 0x3da <__stack+0x17b>
     3c6:	ab e3       	ldi	r26, 0x3B	; 59
     3c8:	b1 e0       	ldi	r27, 0x01	; 1
     3ca:	fc 01       	movw	r30, r24
     3cc:	2c 2f       	mov	r18, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     3ce:	34 91       	lpm	r19, Z
                    *data++ = c;
     3d0:	3d 93       	st	X+, r19
                    r++;
     3d2:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
     3d4:	21 50       	subi	r18, 0x01	; 1
     3d6:	d9 f7       	brne	.-10     	; 0x3ce <__stack+0x16f>
     3d8:	08 c0       	rjmp	.+16     	; 0x3ea <__stack+0x18b>
     3da:	dc 01       	movw	r26, r24
     3dc:	eb e3       	ldi	r30, 0x3B	; 59
     3de:	f1 e0       	ldi	r31, 0x01	; 1
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     3e0:	2c 2f       	mov	r18, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
     3e2:	3d 91       	ld	r19, X+
     3e4:	31 93       	st	Z+, r19
                }while(--i);
     3e6:	21 50       	subi	r18, 0x01	; 1
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <__stack+0x183>
     3ea:	2f ef       	ldi	r18, 0xFF	; 255
     3ec:	2c 0f       	add	r18, r28
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	2f 5f       	subi	r18, 0xFF	; 255
     3f2:	3f 4f       	sbci	r19, 0xFF	; 255
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
     3f8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <usbMsgPtr+0x1>
     3fc:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     400:	6c 2f       	mov	r22, r28
     402:	8b e3       	ldi	r24, 0x3B	; 59
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	f8 d2       	rcall	.+1520   	; 0x9f8 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     408:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     40a:	cc 30       	cpi	r28, 0x0C	; 12
     40c:	41 f0       	breq	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
            usbMsgLen = USB_NO_MSG;
     40e:	8f ef       	ldi	r24, 0xFF	; 255
     410:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     414:	04 c0       	rjmp	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
     416:	8f ef       	ldi	r24, 0xFF	; 255
     418:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     41c:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
     41e:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <usbTxLen>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     422:	84 e1       	ldi	r24, 0x14	; 20
        uchar usbLineStatus = USBIN & USBMASK;
     424:	96 b3       	in	r25, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
     426:	94 74       	andi	r25, 0x44	; 68
     428:	49 f4       	brne	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     42a:	81 50       	subi	r24, 0x01	; 1
     42c:	d9 f7       	brne	.-10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     42e:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
     432:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <usbDeviceAddr>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     436:	9a e5       	ldi	r25, 0x5A	; 90
     438:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <usbTxStatus1>

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
     43c:	c1 e0       	ldi	r28, 0x01	; 1
     43e:	81 11       	cpse	r24, r1
     440:	c0 e0       	ldi	r28, 0x00	; 0

    if(wasReset != isReset){
     442:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
     446:	c9 17       	cp	r28, r25
     448:	71 f0       	breq	.+28     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
        USB_RESET_HOOK(isReset);
     44a:	88 23       	and	r24, r24
     44c:	19 f0       	breq	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     44e:	f8 94       	cli
     450:	3a d1       	rcall	.+628    	; 0x6c6 <calibrateOscillator>
     452:	78 94       	sei
        wasReset = isReset;
     454:	c0 93 94 00 	sts	0x0094, r28	; 0x800094 <__data_end>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     458:	06 c0       	rjmp	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	8b e3       	ldi	r24, 0x3B	; 59
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	cb d2       	rcall	.+1430   	; 0x9f8 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     462:	c4 e0       	ldi	r28, 0x04	; 4
     464:	d4 cf       	rjmp	.-88     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     46c:	85 b7       	in	r24, 0x35	; 53
     46e:	82 60       	ori	r24, 0x02	; 2
     470:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     472:	8b b7       	in	r24, 0x3b	; 59
     474:	80 64       	ori	r24, 0x40	; 64
     476:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     478:	e5 e4       	ldi	r30, 0x45	; 69
     47a:	f1 e0       	ldi	r31, 0x01	; 1
     47c:	8b e4       	ldi	r24, 0x4B	; 75
     47e:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     480:	8a e5       	ldi	r24, 0x5A	; 90
     482:	80 83       	st	Z, r24
     484:	08 95       	ret

00000486 <filter_iir2>:
	return res;
}
*/

q7_8_t filter_iir2(filter_iir2_t* iir2,q7_8_t in)
{
     486:	a0 e0       	ldi	r26, 0x00	; 0
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	e8 e4       	ldi	r30, 0x48	; 72
     48c:	f2 e0       	ldi	r31, 0x02	; 2
     48e:	67 c6       	rjmp	.+3278   	; 0x115e <__prologue_saves__+0x4>
     490:	ec 01       	movw	r28, r24
     492:	8b 01       	movw	r16, r22
	const q7_8_t inv_b0 = q7_8_float(1/1.0);
	const q7_8_t _b1 = -q7_8_float(-1.6185197);
	const q7_8_t _b2 = -q7_8_float(0.71059346);

	q7_8_t res;
	res =  q7_8_mul(inv_b0,q7_8_sum(
     494:	ec 80       	ldd	r14, Y+4	; 0x04
     496:	fd 80       	ldd	r15, Y+5	; 0x05
     498:	c8 80       	ld	r12, Y
     49a:	d9 80       	ldd	r13, Y+1	; 0x01
     49c:	07 2e       	mov	r0, r23
     49e:	00 0c       	add	r0, r0
     4a0:	88 0b       	sbc	r24, r24
     4a2:	99 0b       	sbc	r25, r25
     4a4:	25 e0       	ldi	r18, 0x05	; 5
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	2a d6       	rcall	.+3156   	; 0x1102 <__mulsi3>
     4ae:	47 2e       	mov	r4, r23
     4b0:	58 2e       	mov	r5, r24
     4b2:	69 2e       	mov	r6, r25
     4b4:	77 24       	eor	r7, r7
     4b6:	67 fc       	sbrc	r6, 7
     4b8:	7a 94       	dec	r7
     4ba:	b7 01       	movw	r22, r14
     4bc:	0f 2c       	mov	r0, r15
     4be:	00 0c       	add	r0, r0
     4c0:	88 0b       	sbc	r24, r24
     4c2:	99 0b       	sbc	r25, r25
     4c4:	2a e0       	ldi	r18, 0x0A	; 10
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	1a d6       	rcall	.+3124   	; 0x1102 <__mulsi3>
     4ce:	bb 27       	eor	r27, r27
     4d0:	97 fd       	sbrc	r25, 7
     4d2:	ba 95       	dec	r27
     4d4:	a9 2f       	mov	r26, r25
     4d6:	98 2f       	mov	r25, r24
     4d8:	87 2f       	mov	r24, r23
     4da:	32 01       	movw	r6, r4
     4dc:	68 0e       	add	r6, r24
     4de:	79 1e       	adc	r7, r25
     4e0:	6e 81       	ldd	r22, Y+6	; 0x06
     4e2:	7f 81       	ldd	r23, Y+7	; 0x07
     4e4:	07 2e       	mov	r0, r23
     4e6:	00 0c       	add	r0, r0
     4e8:	88 0b       	sbc	r24, r24
     4ea:	99 0b       	sbc	r25, r25
     4ec:	25 e0       	ldi	r18, 0x05	; 5
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	06 d6       	rcall	.+3084   	; 0x1102 <__mulsi3>
     4f6:	bb 27       	eor	r27, r27
     4f8:	97 fd       	sbrc	r25, 7
     4fa:	ba 95       	dec	r27
     4fc:	a9 2f       	mov	r26, r25
     4fe:	98 2f       	mov	r25, r24
     500:	87 2f       	mov	r24, r23
     502:	43 01       	movw	r8, r6
     504:	88 0e       	add	r8, r24
     506:	99 1e       	adc	r9, r25
     508:	b6 01       	movw	r22, r12
     50a:	0d 2c       	mov	r0, r13
     50c:	00 0c       	add	r0, r0
     50e:	88 0b       	sbc	r24, r24
     510:	99 0b       	sbc	r25, r25
     512:	2e e9       	ldi	r18, 0x9E	; 158
     514:	31 e0       	ldi	r19, 0x01	; 1
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	f3 d5       	rcall	.+3046   	; 0x1102 <__mulsi3>
     51c:	bb 27       	eor	r27, r27
     51e:	97 fd       	sbrc	r25, 7
     520:	ba 95       	dec	r27
     522:	a9 2f       	mov	r26, r25
     524:	98 2f       	mov	r25, r24
     526:	87 2f       	mov	r24, r23
     528:	54 01       	movw	r10, r8
     52a:	a8 0e       	add	r10, r24
     52c:	b9 1e       	adc	r11, r25
     52e:	6a 81       	ldd	r22, Y+2	; 0x02
     530:	7b 81       	ldd	r23, Y+3	; 0x03
     532:	07 2e       	mov	r0, r23
     534:	00 0c       	add	r0, r0
     536:	88 0b       	sbc	r24, r24
     538:	99 0b       	sbc	r25, r25
     53a:	2b e4       	ldi	r18, 0x4B	; 75
     53c:	3f ef       	ldi	r19, 0xFF	; 255
     53e:	4f ef       	ldi	r20, 0xFF	; 255
     540:	5f ef       	ldi	r21, 0xFF	; 255
     542:	df d5       	rcall	.+3006   	; 0x1102 <__mulsi3>
     544:	bb 27       	eor	r27, r27
     546:	97 fd       	sbrc	r25, 7
     548:	ba 95       	dec	r27
     54a:	a9 2f       	mov	r26, r25
     54c:	98 2f       	mov	r25, r24
     54e:	87 2f       	mov	r24, r23
     550:	8a 0d       	add	r24, r10
     552:	9b 1d       	adc	r25, r11
     554:	09 2e       	mov	r0, r25
     556:	00 0c       	add	r0, r0
     558:	aa 0b       	sbc	r26, r26
     55a:	bb 0b       	sbc	r27, r27
			q7_8_mul(a1,iir2->x_1),
			q7_8_mul(a2,iir2->x_2),
			q7_8_mul(_b1,iir2->y_1),
			q7_8_mul(_b2,iir2->y_2)));
	//printf("%f,",iir2->b0);
	iir2->y_2 = iir2->y_1;
     55c:	db 82       	std	Y+3, r13	; 0x03
     55e:	ca 82       	std	Y+2, r12	; 0x02
	iir2->y_1 = res;
     560:	99 83       	std	Y+1, r25	; 0x01
     562:	88 83       	st	Y, r24
	iir2->x_2 = iir2->x_1;
     564:	ff 82       	std	Y+7, r15	; 0x07
     566:	ee 82       	std	Y+6, r14	; 0x06
	iir2->x_1 = in;
     568:	1d 83       	std	Y+5, r17	; 0x05
     56a:	0c 83       	std	Y+4, r16	; 0x04
	return res;
}
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	e0 e1       	ldi	r30, 0x10	; 16
     572:	11 c6       	rjmp	.+3106   	; 0x1196 <__epilogue_restores__+0x4>

00000574 <__vector_16>:
static volatile uint16_t capture_diff_max;
static volatile uint16_t captured;


ISR(TIMER0_CAPT_vect,ISR_NOBLOCK )
{
     574:	78 94       	sei
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
	if (capture_diff > capture_diff_max) {
		capture_diff_max = capture_diff;
	}
	captured++;
*/
}
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti

0000058a <usbFunctionSetup2>:
		}
	}else{
		/* no vendor specific requests implemented */
	}
	return 0;   /* default for not implemented requests: return no data back to host */
}
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	08 95       	ret

0000058e <unpack_color_red>:
	base &= ~0b111;
	uint8_t res = base << 5;
	res |= base << 2;
	res |= base >> 1;
	return res;
}
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	08 95       	ret

00000592 <unpack_color_green>:


uint8_t unpack_color_green(rgb332_t rgb) {
	uint8_t base = rgb >> 2;
     592:	86 95       	lsr	r24
     594:	86 95       	lsr	r24
	base &= ~0b111;
     596:	98 2f       	mov	r25, r24
     598:	98 7f       	andi	r25, 0xF8	; 248
	uint8_t res = base << 5;
	res |= base << 2;
     59a:	89 2f       	mov	r24, r25
     59c:	88 0f       	add	r24, r24
     59e:	88 0f       	add	r24, r24
	res |= base >> 1;
	return res;
     5a0:	96 95       	lsr	r25
}
     5a2:	89 2b       	or	r24, r25
     5a4:	08 95       	ret

000005a6 <unpack_color_blue>:

uint8_t unpack_color_blue(rgb332_t rgb) {
	uint8_t base = rgb;
	base &= ~0b11;
     5a6:	8c 7f       	andi	r24, 0xFC	; 252
	uint8_t res = base << 6;
	res |= base << 4;
     5a8:	28 2f       	mov	r18, r24
     5aa:	30 e0       	ldi	r19, 0x00	; 0
	res |= base << 2;
     5ac:	a9 01       	movw	r20, r18
     5ae:	94 e0       	ldi	r25, 0x04	; 4
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	9a 95       	dec	r25
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <unpack_color_blue+0xa>
     5b8:	22 0f       	add	r18, r18
     5ba:	33 1f       	adc	r19, r19
     5bc:	22 0f       	add	r18, r18
     5be:	33 1f       	adc	r19, r19
     5c0:	24 2b       	or	r18, r20
	res |= base << 0;
	return res;
}
     5c2:	82 2b       	or	r24, r18
     5c4:	08 95       	ret

000005c6 <send_strip_byte>:
#define nop() __builtin_avr_nop()  //asm volatile(" nop \n\t")


void send_strip_byte(uint8_t byteval) {
     5c6:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t temp = byteval;
	for (uint8_t i=0;i<8;++i) {
		if (temp & 0b10000000) {
     5c8:	87 ff       	sbrs	r24, 7
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <send_strip_byte+0xa>
			STRIP_DATA_1();
     5cc:	df 9a       	sbi	0x1b, 7	; 27
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <send_strip_byte+0xc>
		} else {
			STRIP_DATA_0();
     5d0:	df 98       	cbi	0x1b, 7	; 27
		}
		STRIP_CLK_HIGH();
     5d2:	de 9a       	sbi	0x1b, 6	; 27
		temp <<=1;
     5d4:	88 0f       	add	r24, r24
		STRIP_CLK_LOW();
     5d6:	de 98       	cbi	0x1b, 6	; 27
     5d8:	91 50       	subi	r25, 0x01	; 1
#define nop() __builtin_avr_nop()  //asm volatile(" nop \n\t")


void send_strip_byte(uint8_t byteval) {
	uint8_t temp = byteval;
	for (uint8_t i=0;i<8;++i) {
     5da:	b1 f7       	brne	.-20     	; 0x5c8 <send_strip_byte+0x2>
		}
		STRIP_CLK_HIGH();
		temp <<=1;
		STRIP_CLK_LOW();
	}
}
     5dc:	08 95       	ret

000005de <send_color>:



void send_color(uint8_t r,uint8_t g,uint8_t b) {
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	18 2f       	mov	r17, r24
     5e6:	d6 2f       	mov	r29, r22
     5e8:	c4 2f       	mov	r28, r20
	const uint8_t start_byte = 0xFF;
	send_strip_byte(start_byte);
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	ec df       	rcall	.-40     	; 0x5c6 <send_strip_byte>
	send_strip_byte(r);
     5ee:	81 2f       	mov	r24, r17
     5f0:	ea df       	rcall	.-44     	; 0x5c6 <send_strip_byte>
	send_strip_byte(g);
     5f2:	8d 2f       	mov	r24, r29
     5f4:	e8 df       	rcall	.-48     	; 0x5c6 <send_strip_byte>
	send_strip_byte(b);
     5f6:	8c 2f       	mov	r24, r28
     5f8:	e6 df       	rcall	.-52     	; 0x5c6 <send_strip_byte>
}
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	08 95       	ret

00000602 <getRainbowColor>:
		{{0,0,200}},
		{{200,0,200}}
};


RGB888 getRainbowColor(int index) {
     602:	a9 e0       	ldi	r26, 0x09	; 9
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	e6 e0       	ldi	r30, 0x06	; 6
     608:	f3 e0       	ldi	r31, 0x03	; 3
     60a:	ad c5       	rjmp	.+2906   	; 0x1166 <__prologue_saves__+0xc>
     60c:	9c 01       	movw	r18, r24
	//300/6 = 50 ~ 64
	const int steps = 32;


	int rainbow_index = index / steps;
     60e:	97 fd       	sbrc	r25, 7
     610:	4f 96       	adiw	r24, 0x1f	; 31
     612:	45 e0       	ldi	r20, 0x05	; 5
     614:	95 95       	asr	r25
     616:	87 95       	ror	r24
     618:	4a 95       	dec	r20
     61a:	e1 f7       	brne	.-8      	; 0x614 <getRainbowColor+0x12>
	rainbow_index %= 6;
     61c:	66 e0       	ldi	r22, 0x06	; 6
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	89 d5       	rcall	.+2834   	; 0x1134 <__divmodhi4>
     622:	fc 01       	movw	r30, r24
	int interpolate_index = index % steps;
     624:	c9 01       	movw	r24, r18
     626:	60 e2       	ldi	r22, 0x20	; 32
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	84 d5       	rcall	.+2824   	; 0x1134 <__divmodhi4>
     62c:	7c 01       	movw	r14, r24
	int weight_from = 64-interpolate_index;
     62e:	a0 e4       	ldi	r26, 0x40	; 64
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	4d 01       	movw	r8, r26
     634:	88 1a       	sub	r8, r24
     636:	99 0a       	sbc	r9, r25
	int weight_to = interpolate_index;

	RGB888 from = rainbow_colors[rainbow_index];
     638:	cf 01       	movw	r24, r30
     63a:	63 e0       	ldi	r22, 0x03	; 3
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	50 d5       	rcall	.+2720   	; 0x10e0 <__mulhi3>
     640:	8d 59       	subi	r24, 0x9D	; 157
     642:	9f 4f       	sbci	r25, 0xFF	; 255
     644:	dc 01       	movw	r26, r24
     646:	2d 91       	ld	r18, X+
     648:	3d 91       	ld	r19, X+
     64a:	4c 91       	ld	r20, X
     64c:	2f 83       	std	Y+7, r18	; 0x07
     64e:	38 87       	std	Y+8, r19	; 0x08
     650:	49 87       	std	Y+9, r20	; 0x09
	RGB888 to = rainbow_colors[rainbow_index+1];
     652:	cf 01       	movw	r24, r30
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	63 e0       	ldi	r22, 0x03	; 3
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	42 d5       	rcall	.+2692   	; 0x10e0 <__mulhi3>
     65c:	8d 59       	subi	r24, 0x9D	; 157
     65e:	9f 4f       	sbci	r25, 0xFF	; 255
     660:	fc 01       	movw	r30, r24
     662:	20 81       	ld	r18, Z
     664:	31 81       	ldd	r19, Z+1	; 0x01
     666:	42 81       	ldd	r20, Z+2	; 0x02
     668:	2c 83       	std	Y+4, r18	; 0x04
     66a:	3d 83       	std	Y+5, r19	; 0x05
     66c:	4e 83       	std	Y+6, r20	; 0x06
     66e:	fe 01       	movw	r30, r28
     670:	37 96       	adiw	r30, 0x07	; 7
     672:	6e 01       	movw	r12, r28
     674:	84 e0       	ldi	r24, 0x04	; 4
     676:	c8 0e       	add	r12, r24
     678:	d1 1c       	adc	r13, r1
     67a:	8e 01       	movw	r16, r28
     67c:	0f 5f       	subi	r16, 0xFF	; 255
     67e:	1f 4f       	sbci	r17, 0xFF	; 255
     680:	5e 01       	movw	r10, r28
     682:	aa e0       	ldi	r26, 0x0A	; 10
     684:	aa 0e       	add	r10, r26
     686:	b1 1c       	adc	r11, r1

	RGB888 res;
	for (int c=0;c<COLORS;c++) {
		uint16_t temp = from.color_[c] * weight_from + to.color_[c] * weight_to;
     688:	81 91       	ld	r24, Z+
     68a:	d6 01       	movw	r26, r12
     68c:	4d 91       	ld	r20, X+
     68e:	6d 01       	movw	r12, r26
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	b4 01       	movw	r22, r8
     694:	25 d5       	rcall	.+2634   	; 0x10e0 <__mulhi3>
     696:	9c 01       	movw	r18, r24
     698:	84 2f       	mov	r24, r20
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	b7 01       	movw	r22, r14
     69e:	20 d5       	rcall	.+2624   	; 0x10e0 <__mulhi3>
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
		temp /= steps;
		temp /= 2;
		res.color_[c] = temp;
     6a4:	26 e0       	ldi	r18, 0x06	; 6
     6a6:	96 95       	lsr	r25
     6a8:	87 95       	ror	r24
     6aa:	2a 95       	dec	r18
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <getRainbowColor+0xa4>
     6ae:	d8 01       	movw	r26, r16
     6b0:	8d 93       	st	X+, r24
     6b2:	8d 01       	movw	r16, r26

	RGB888 from = rainbow_colors[rainbow_index];
	RGB888 to = rainbow_colors[rainbow_index+1];

	RGB888 res;
	for (int c=0;c<COLORS;c++) {
     6b4:	ae 16       	cp	r10, r30
     6b6:	bf 06       	cpc	r11, r31
     6b8:	39 f7       	brne	.-50     	; 0x688 <getRainbowColor+0x86>
		uint16_t temp = from.color_[c] * weight_from + to.color_[c] * weight_to;
		temp /= steps;
		temp /= 2;
		res.color_[c] = temp;
	}
	return res;
     6ba:	69 81       	ldd	r22, Y+1	; 0x01
     6bc:	7a 81       	ldd	r23, Y+2	; 0x02
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
}
     6c0:	29 96       	adiw	r28, 0x09	; 9
     6c2:	ec e0       	ldi	r30, 0x0C	; 12
     6c4:	6c c5       	rjmp	.+2776   	; 0x119e <__epilogue_restores__+0xc>

000006c6 <calibrateOscillator>:
 * signal (a single SE0 bit) repeating every millisecond immediately after
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
     6c6:	a0 e0       	ldi	r26, 0x00	; 0
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	e8 e6       	ldi	r30, 0x68	; 104
     6cc:	f3 e0       	ldi	r31, 0x03	; 3
     6ce:	50 c5       	rjmp	.+2720   	; 0x1170 <__prologue_saves__+0x16>
     6d0:	08 e0       	ldi	r16, 0x08	; 8
     6d2:	10 e0       	ldi	r17, 0x00	; 0
uchar       step = 128;
uchar       trialValue = 0, optimumValue;
     6d4:	c0 e0       	ldi	r28, 0x00	; 0
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
uchar       step = 128;
     6d6:	d0 e8       	ldi	r29, 0x80	; 128
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
     6d8:	dd 2e       	mov	r13, r29
     6da:	dc 0e       	add	r13, r28
     6dc:	d1 be       	out	0x31, r13	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
     6de:	90 d1       	rcall	.+800    	; 0xa00 <usbMeasureFrameLength>
     6e0:	7c 01       	movw	r14, r24
        if(x < targetValue)             /* frequency still too low */
     6e2:	84 e3       	ldi	r24, 0x34	; 52
     6e4:	e8 16       	cp	r14, r24
     6e6:	89 e0       	ldi	r24, 0x09	; 9
     6e8:	f8 06       	cpc	r15, r24
     6ea:	0c f4       	brge	.+2      	; 0x6ee <calibrateOscillator+0x28>
            trialValue += step;
     6ec:	cd 2d       	mov	r28, r13
        step >>= 1;
     6ee:	d6 95       	lsr	r29
     6f0:	01 50       	subi	r16, 0x01	; 1
     6f2:	11 09       	sbc	r17, r1
    }while(step > 0);
     6f4:	89 f7       	brne	.-30     	; 0x6d8 <calibrateOscillator+0x12>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	8c 0f       	add	r24, r28
     6fa:	81 bf       	out	0x31, r24	; 49
     6fc:	0c 2f       	mov	r16, r28
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	0f 5f       	subi	r16, 0xFF	; 255
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	81 b7       	in	r24, 0x31	; 49
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	08 17       	cp	r16, r24
     70a:	19 07       	cpc	r17, r25
     70c:	8c f0       	brlt	.+34     	; 0x730 <calibrateOscillator+0x6a>
        x = usbMeasureFrameLength() - targetValue;
     70e:	78 d1       	rcall	.+752    	; 0xa00 <usbMeasureFrameLength>
     710:	84 53       	subi	r24, 0x34	; 52
     712:	99 40       	sbci	r25, 0x09	; 9
     714:	97 ff       	sbrs	r25, 7
     716:	03 c0       	rjmp	.+6      	; 0x71e <calibrateOscillator+0x58>
     718:	91 95       	neg	r25
     71a:	81 95       	neg	r24
     71c:	91 09       	sbc	r25, r1
        if(x < 0)
            x = -x;
        if(x < optimumDev){
     71e:	8e 15       	cp	r24, r14
     720:	9f 05       	cpc	r25, r15
     722:	14 f4       	brge	.+4      	; 0x728 <calibrateOscillator+0x62>
            optimumDev = x;
            optimumValue = OSCCAL;
     724:	c1 b7       	in	r28, 0x31	; 49
     726:	7c 01       	movw	r14, r24
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     728:	81 b7       	in	r24, 0x31	; 49
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	81 bf       	out	0x31, r24	; 49
     72e:	ea cf       	rjmp	.-44     	; 0x704 <calibrateOscillator+0x3e>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
     730:	c1 bf       	out	0x31, r28	; 49
}
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	e7 e0       	ldi	r30, 0x07	; 7
     738:	37 c5       	rjmp	.+2670   	; 0x11a8 <__epilogue_restores__+0x16>

0000073a <Timers_Init>:
static volatile milliseconds_t Timers[TIMER_LAST];

#define ATOMIC_BLOCK(x)

void Timers_Init(void)
{
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
	TimerId_t id;
	for (id=0; id < TIMER_LAST;id++)
	{
    Timers[id]=TIMER_RESET;
     73e:	2f ef       	ldi	r18, 0xFF	; 255
     740:	3f ef       	ldi	r19, 0xFF	; 255
     742:	fc 01       	movw	r30, r24
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	ef 55       	subi	r30, 0x5F	; 95
     74a:	ff 4f       	sbci	r31, 0xFF	; 255
     74c:	31 83       	std	Z+1, r19	; 0x01
     74e:	20 83       	st	Z, r18
     750:	01 96       	adiw	r24, 0x01	; 1
#define ATOMIC_BLOCK(x)

void Timers_Init(void)
{
	TimerId_t id;
	for (id=0; id < TIMER_LAST;id++)
     752:	88 30       	cpi	r24, 0x08	; 8
     754:	91 05       	cpc	r25, r1
     756:	a9 f7       	brne	.-22     	; 0x742 <Timers_Init+0x8>
	{
    Timers[id]=TIMER_RESET;
  }
}
     758:	08 95       	ret

0000075a <Timers_DecreaseAll>:

milliseconds_t Timers_DecreaseAll(milliseconds_x256_t delta_x256)
{
     75a:	cf 93       	push	r28
	static unsigned char frag = 0;
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
     75c:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <frag.1471>
     760:	82 0f       	add	r24, r18
     762:	91 1d       	adc	r25, r1
	frag = delta_x256 & 0xFF;
     764:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <frag.1471>
	milliseconds_t delta = delta_x256>>8;
     768:	49 2f       	mov	r20, r25
     76a:	55 27       	eor	r21, r21
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	70 e0       	ldi	r23, 0x00	; 0

milliseconds_t Timers_DecreaseAll(milliseconds_x256_t delta_x256)
{
	static unsigned char frag = 0;
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	9f ef       	ldi	r25, 0xFF	; 255
	delta_x256 += frag;
	frag = delta_x256 & 0xFF;
	milliseconds_t delta = delta_x256>>8;
	for (id=0; id < TIMER_LAST;id++)
	{
		milliseconds_t tempTime = Timers[id];
     774:	fb 01       	movw	r30, r22
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	df 01       	movw	r26, r30
     77c:	af 55       	subi	r26, 0x5F	; 95
     77e:	bf 4f       	sbci	r27, 0xFF	; 255
     780:	2d 91       	ld	r18, X+
     782:	3c 91       	ld	r19, X
     784:	11 97       	sbiw	r26, 0x01	; 1
		if (tempTime != TIMER_RESET)
     786:	2f 3f       	cpi	r18, 0xFF	; 255
     788:	cf ef       	ldi	r28, 0xFF	; 255
     78a:	3c 07       	cpc	r19, r28
     78c:	89 f0       	breq	.+34     	; 0x7b0 <Timers_DecreaseAll+0x56>
		{
			if (tempTime > delta)
     78e:	42 17       	cp	r20, r18
     790:	53 07       	cpc	r21, r19
     792:	58 f4       	brcc	.+22     	; 0x7aa <Timers_DecreaseAll+0x50>
			{
				tempTime-=delta;
     794:	24 1b       	sub	r18, r20
     796:	35 0b       	sbc	r19, r21
     798:	28 17       	cp	r18, r24
     79a:	39 07       	cpc	r19, r25
     79c:	08 f4       	brcc	.+2      	; 0x7a0 <Timers_DecreaseAll+0x46>
     79e:	c9 01       	movw	r24, r18
				if (tempTime < nextTime) 
				{
					nextTime = tempTime;
				}

				Timers[id] = tempTime;
     7a0:	ef 55       	subi	r30, 0x5F	; 95
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	31 83       	std	Z+1, r19	; 0x01
     7a6:	20 83       	st	Z, r18
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <Timers_DecreaseAll+0x56>
			}
			else {
				Timers[id] = TIMER_HAS_EXPIRED;
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	1c 92       	st	X, r1
     7ae:	1e 92       	st	-X, r1
     7b0:	6f 5f       	subi	r22, 0xFF	; 255
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
	frag = delta_x256 & 0xFF;
	milliseconds_t delta = delta_x256>>8;
	for (id=0; id < TIMER_LAST;id++)
     7b4:	68 30       	cpi	r22, 0x08	; 8
     7b6:	71 05       	cpc	r23, r1
     7b8:	e9 f6       	brne	.-70     	; 0x774 <Timers_DecreaseAll+0x1a>
				Timers[id] = TIMER_HAS_EXPIRED;
			}
		}
	}
	return nextTime;
}
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <Timer_HasExpired>:
int Timer_HasExpired(const TimerId_t TimerId)
{
	int result;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if (Timers[TimerId]==TIMER_HAS_EXPIRED)
     7be:	e8 2f       	mov	r30, r24
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	ef 55       	subi	r30, 0x5F	; 95
     7c8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ca:	80 81       	ld	r24, Z
     7cc:	91 81       	ldd	r25, Z+1	; 0x01
     7ce:	89 2b       	or	r24, r25
     7d0:	39 f4       	brne	.+14     	; 0x7e0 <Timer_HasExpired+0x22>
		{
			Timers[TimerId]=TIMER_RESET;
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	9f ef       	ldi	r25, 0xFF	; 255
     7d6:	91 83       	std	Z+1, r25	; 0x01
     7d8:	80 83       	st	Z, r24
			result = 1;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	08 95       	ret
		}
		else {
			result = 0;
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     7e4:	08 95       	ret

000007e6 <Timer_Reset>:

void Timer_Reset(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_RESET;
     7e6:	e8 2f       	mov	r30, r24
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	ef 55       	subi	r30, 0x5F	; 95
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	9f ef       	ldi	r25, 0xFF	; 255
     7f6:	91 83       	std	Z+1, r25	; 0x01
     7f8:	80 83       	st	Z, r24
     7fa:	08 95       	ret

000007fc <Timer_SetExpired>:
}
void Timer_SetExpired(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_HAS_EXPIRED;
     7fc:	e8 2f       	mov	r30, r24
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	ef 55       	subi	r30, 0x5F	; 95
     806:	ff 4f       	sbci	r31, 0xFF	; 255
     808:	11 82       	std	Z+1, r1	; 0x01
     80a:	10 82       	st	Z, r1
     80c:	08 95       	ret

0000080e <Timer_Set>:

void Timer_Set(const TimerId_t TimerId,const milliseconds_t setTimeout)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=setTimeout;
     80e:	e8 2f       	mov	r30, r24
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	ef 55       	subi	r30, 0x5F	; 95
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	71 83       	std	Z+1, r23	; 0x01
     81c:	60 83       	st	Z, r22
     81e:	08 95       	ret

00000820 <stream_putchar>:
#include <stddef.h>

#include "stream.h"

int stream_putchar(stream_buffer_t* s, char c)
{
     820:	fc 01       	movw	r30, r24
	uint8_t newWritePos = (s->write + 1) & s->bufmask;
     822:	23 81       	ldd	r18, Z+3	; 0x03
     824:	91 81       	ldd	r25, Z+1	; 0x01
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	82 0f       	add	r24, r18
     82a:	89 23       	and	r24, r25
	if (newWritePos == s->read) {
     82c:	32 81       	ldd	r19, Z+2	; 0x02
     82e:	83 13       	cpse	r24, r19
     830:	07 c0       	rjmp	.+14     	; 0x840 <stream_putchar+0x20>
		if (s->flags & STREAM_FLAG_OVERWRITE) {
     832:	30 81       	ld	r19, Z
     834:	30 ff       	sbrs	r19, 0
     836:	0d c0       	rjmp	.+26     	; 0x852 <stream_putchar+0x32>
			s->read++;
			s->read &= s->bufmask;
     838:	31 e0       	ldi	r19, 0x01	; 1
     83a:	38 0f       	add	r19, r24
     83c:	93 23       	and	r25, r19
     83e:	92 83       	std	Z+2, r25	; 0x02
		}
		else {
			return -1;
		}
	}
	s->data[s->write] = c;
     840:	df 01       	movw	r26, r30
     842:	a2 0f       	add	r26, r18
     844:	b1 1d       	adc	r27, r1
     846:	14 96       	adiw	r26, 0x04	; 4
     848:	6c 93       	st	X, r22
	s->write = newWritePos;
     84a:	83 83       	std	Z+3, r24	; 0x03
	return c;
     84c:	86 2f       	mov	r24, r22
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	08 95       	ret
		if (s->flags & STREAM_FLAG_OVERWRITE) {
			s->read++;
			s->read &= s->bufmask;
		}
		else {
			return -1;
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
	s->data[s->write] = c;
	s->write = newWritePos;
	return c;
}
     856:	08 95       	ret

00000858 <stream_getchar_nowait>:


int stream_getchar_nowait(stream_buffer_t* s)
{
     858:	fc 01       	movw	r30, r24
	int res = -1;
	if (s->read != s->write) {
     85a:	92 81       	ldd	r25, Z+2	; 0x02
     85c:	83 81       	ldd	r24, Z+3	; 0x03
     85e:	98 17       	cp	r25, r24
     860:	59 f0       	breq	.+22     	; 0x878 <stream_getchar_nowait+0x20>
		res = s->data[s->read++];
     862:	df 01       	movw	r26, r30
     864:	a9 0f       	add	r26, r25
     866:	b1 1d       	adc	r27, r1
     868:	14 96       	adiw	r26, 0x04	; 4
     86a:	2c 91       	ld	r18, X
     86c:	30 e0       	ldi	r19, 0x00	; 0
		s->read &= s->bufmask;
     86e:	9f 5f       	subi	r25, 0xFF	; 255
     870:	81 81       	ldd	r24, Z+1	; 0x01
     872:	98 23       	and	r25, r24
     874:	92 83       	std	Z+2, r25	; 0x02
     876:	02 c0       	rjmp	.+4      	; 0x87c <stream_getchar_nowait+0x24>
}


int stream_getchar_nowait(stream_buffer_t* s)
{
	int res = -1;
     878:	2f ef       	ldi	r18, 0xFF	; 255
     87a:	3f ef       	ldi	r19, 0xFF	; 255
	if (s->read != s->write) {
		res = s->data[s->read++];
		s->read &= s->bufmask;
	}
	return res;
}
     87c:	c9 01       	movw	r24, r18
     87e:	08 95       	ret

00000880 <stream_getchar_wait>:

int stream_getchar_wait(stream_buffer_t* s)
{
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	ec 01       	movw	r28, r24

	int res;
	do {
		res = stream_getchar_nowait(s);
     886:	ce 01       	movw	r24, r28
     888:	e7 df       	rcall	.-50     	; 0x858 <stream_getchar_nowait>
	} while (res == -1);
     88a:	8f 3f       	cpi	r24, 0xFF	; 255
     88c:	2f ef       	ldi	r18, 0xFF	; 255
     88e:	92 07       	cpc	r25, r18
     890:	d1 f3       	breq	.-12     	; 0x886 <stream_getchar_wait+0x6>
	return res;
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <usb_stream_init>:

#define USB_STREAM_MAGIX 0xBABE
#define USB_STREAM_OVERWRITE 0x01

static noinline void usb_stream_init(usb_stream_buffer_internal_t* s)
{
     898:	fc 01       	movw	r30, r24
	if (initialized == 0) {
     89a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <initialized>
     89e:	81 11       	cpse	r24, r1
     8a0:	08 c0       	rjmp	.+16     	; 0x8b2 <usb_stream_init+0x1a>
		usb_out_stream_buffer.internal.base.bufmask = 0x7F;
     8a2:	8f e7       	ldi	r24, 0x7F	; 127
     8a4:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <usb_out_stream_buffer+0x3>
		usb_out_stream_buffer.internal.base.flags = USB_STREAM_OVERWRITE;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <usb_out_stream_buffer+0x2>
#ifdef USBSTREAM_ENABLE_RX
		usb_in_stream_buffer.internal.base.bufmask = 0x0F;
		usb_in_stream_buffer.internal.base.flags = 0;
#endif
		initialized = 1;
     8ae:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <initialized>
	}
	if (s->magic != USB_STREAM_MAGIX) {
     8b2:	80 81       	ld	r24, Z
     8b4:	91 81       	ldd	r25, Z+1	; 0x01
     8b6:	8e 3b       	cpi	r24, 0xBE	; 190
     8b8:	9a 4b       	sbci	r25, 0xBA	; 186
     8ba:	31 f0       	breq	.+12     	; 0x8c8 <usb_stream_init+0x30>
		s->magic = USB_STREAM_MAGIX;
     8bc:	8e eb       	ldi	r24, 0xBE	; 190
     8be:	9a eb       	ldi	r25, 0xBA	; 186
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	80 83       	st	Z, r24
		s->base.read = 0;
     8c4:	14 82       	std	Z+4, r1	; 0x04
		s->base.write = 0;
     8c6:	15 82       	std	Z+5, r1	; 0x05
     8c8:	08 95       	ret

000008ca <usb_stream_putchar>:
	}
}

static noinline int usb_stream_putchar(char c, FILE *stream)
{
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	18 2f       	mov	r17, r24
	usb_stream_buffer_internal_t* s = fdev_get_udata(stream);
     8d2:	fb 01       	movw	r30, r22
     8d4:	c4 85       	ldd	r28, Z+12	; 0x0c
     8d6:	d5 85       	ldd	r29, Z+13	; 0x0d
	usb_stream_init(s);
     8d8:	ce 01       	movw	r24, r28
     8da:	de df       	rcall	.-68     	; 0x898 <usb_stream_init>
	return stream_putchar(&s->base,c);
     8dc:	61 2f       	mov	r22, r17
     8de:	ce 01       	movw	r24, r28
     8e0:	02 96       	adiw	r24, 0x02	; 2
     8e2:	9e df       	rcall	.-196    	; 0x820 <stream_putchar>
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	08 95       	ret

000008ec <usb_stream_getchar>:

static noinline int usb_stream_getchar(FILE *stream)
{
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
	usb_stream_buffer_internal_t* s = fdev_get_udata(stream);
     8f0:	fc 01       	movw	r30, r24
     8f2:	c4 85       	ldd	r28, Z+12	; 0x0c
     8f4:	d5 85       	ldd	r29, Z+13	; 0x0d
	usb_stream_init(s);
     8f6:	ce 01       	movw	r24, r28
     8f8:	cf df       	rcall	.-98     	; 0x898 <usb_stream_init>
	return stream_getchar_nowait(&s->base);
     8fa:	ce 01       	movw	r24, r28
     8fc:	02 96       	adiw	r24, 0x02	; 2
     8fe:	ac df       	rcall	.-168    	; 0x858 <stream_getchar_nowait>
}
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <usbFunctionSetup>:
static uchar usb_buf_state;
static uchar usb_buf_report_id;


usbMsgLen_t usbFunctionSetup(uchar data[8])
{
     906:	fc 01       	movw	r30, r24
	usbRequest_t    *rq = (void *)data;
	usb_buf_report_id = rq->wValue.bytes[0];
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <usb_buf_report_id>
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     90e:	90 81       	ld	r25, Z
     910:	90 76       	andi	r25, 0x60	; 96
     912:	90 32       	cpi	r25, 0x20	; 32
     914:	79 f4       	brne	.+30     	; 0x934 <usbFunctionSetup+0x2e>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	91 30       	cpi	r25, 0x01	; 1
     91a:	19 f4       	brne	.+6      	; 0x922 <usbFunctionSetup+0x1c>

        	switch (rq->wValue.bytes[0]) {
     91c:	8e 37       	cpi	r24, 0x7E	; 126
     91e:	39 f0       	breq	.+14     	; 0x92e <usbFunctionSetup+0x28>
     920:	09 c0       	rjmp	.+18     	; 0x934 <usbFunctionSetup+0x2e>
        			return sizeof(usb_in_stream_buffer.internal.base.write);
#endif //#ifdef USBSTREAM_ENABLE_RX
        		default:
        			break;
        	}
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
     922:	99 30       	cpi	r25, 0x09	; 9
     924:	39 f4       	brne	.+14     	; 0x934 <usbFunctionSetup+0x2e>
        	switch (rq->wValue.bytes[0]) {
     926:	8c 37       	cpi	r24, 0x7C	; 124
     928:	41 f0       	breq	.+16     	; 0x93a <usbFunctionSetup+0x34>
     92a:	8f 37       	cpi	r24, 0x7F	; 127
     92c:	19 f4       	brne	.+6      	; 0x934 <usbFunctionSetup+0x2e>
        		case report_id_buf_out_setreadpos:
        			return USB_NO_MSG;

        		case report_id_buf_in_data:
        			usb_buf_state = 0;
     92e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <usb_buf_state>
     932:	03 c0       	rjmp	.+6      	; 0x93a <usbFunctionSetup+0x34>
     934:	cf 01       	movw	r24, r30
        		default:
        			break;
        	}
        }
    }
    return usbFunctionSetup2(data);
     936:	29 de       	rcall	.-942    	; 0x58a <usbFunctionSetup2>
     938:	08 95       	ret
        			break;
        	}
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
        	switch (rq->wValue.bytes[0]) {
        		case report_id_buf_out_setreadpos:
        			return USB_NO_MSG;
     93a:	8f ef       	ldi	r24, 0xFF	; 255
        			break;
        	}
        }
    }
    return usbFunctionSetup2(data);
}
     93c:	08 95       	ret

0000093e <usbFunctionRead2>:
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	08 95       	ret

00000942 <usbFunctionRead>:


uchar usbFunctionRead(uchar *data, uchar len)
{
	if (usb_buf_report_id == report_id_buf_out_data) {
     942:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <usb_buf_report_id>
     946:	2e 37       	cpi	r18, 0x7E	; 126
     948:	11 f5       	brne	.+68     	; 0x98e <usbFunctionRead+0x4c>
     94a:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <usb_buf_state>
     94e:	dc 01       	movw	r26, r24
     950:	96 2f       	mov	r25, r22
     952:	92 0f       	add	r25, r18
		uchar i;
		for (i = 0;i<len;i++) {
     954:	29 17       	cp	r18, r25
     956:	b9 f0       	breq	.+46     	; 0x986 <usbFunctionRead+0x44>
			if (usb_buf_state < sizeof(usb_out_stream_buffer.internal.base))
     958:	24 30       	cpi	r18, 0x04	; 4
     95a:	30 f4       	brcc	.+12     	; 0x968 <usbFunctionRead+0x26>
			{
				data[i] = ((uchar*)&(usb_out_stream_buffer.internal.base))[usb_buf_state];
     95c:	e2 2f       	mov	r30, r18
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	ea 54       	subi	r30, 0x4A	; 74
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	0b c0       	rjmp	.+22     	; 0x97e <usbFunctionRead+0x3c>
			}
			else {
				uchar read_pos = usb_out_stream_buffer.internal.base.read + usb_buf_state - sizeof(usb_out_stream_buffer.internal.base);
     968:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <usb_out_stream_buffer+0x4>
     96c:	e4 50       	subi	r30, 0x04	; 4
     96e:	e2 0f       	add	r30, r18
				read_pos &= usb_out_stream_buffer.internal.base.bufmask;
				data[i] = usb_out_stream_buffer.internal.base.data[read_pos];
     970:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <usb_out_stream_buffer+0x3>
     974:	e8 23       	and	r30, r24
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	ec 54       	subi	r30, 0x4C	; 76
     97a:	ff 4f       	sbci	r31, 0xFF	; 255
     97c:	86 81       	ldd	r24, Z+6	; 0x06
     97e:	8c 93       	st	X, r24
			}
			usb_buf_state++;
     980:	2f 5f       	subi	r18, 0xFF	; 255
     982:	11 96       	adiw	r26, 0x01	; 1
     984:	e7 cf       	rjmp	.-50     	; 0x954 <usbFunctionRead+0x12>
     986:	20 93 b2 00 	sts	0x00B2, r18	; 0x8000b2 <usb_buf_state>

uchar usbFunctionRead(uchar *data, uchar len)
{
	if (usb_buf_report_id == report_id_buf_out_data) {
		uchar i;
		for (i = 0;i<len;i++) {
     98a:	86 2f       	mov	r24, r22
     98c:	08 95       	ret
			}
			usb_buf_state++;
		}
		return len;
	}
	return usbFunctionRead2(data,len);
     98e:	d7 df       	rcall	.-82     	; 0x93e <usbFunctionRead2>
}
     990:	08 95       	ret

00000992 <usbFunctionWrite2>:
	return 0;
}
uchar __attribute__((__weak__)) usbFunctionWrite2(uchar *data, uchar len)
{
	return 0;
}
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	08 95       	ret

00000996 <usbFunctionWrite>:
#endif


uchar usbFunctionWrite(uchar *data, uchar len)
{
	if (usb_buf_report_id == report_id_buf_out_setreadpos)
     996:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <usb_buf_report_id>
     99a:	2c 37       	cpi	r18, 0x7C	; 124
     99c:	31 f4       	brne	.+12     	; 0x9aa <usbFunctionWrite+0x14>
	{
		usb_out_stream_buffer.internal.base.read = *((uint16_t*)&data[1]);
     99e:	fc 01       	movw	r30, r24
     9a0:	81 81       	ldd	r24, Z+1	; 0x01
     9a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <usb_out_stream_buffer+0x4>
		return len;
     9a6:	86 2f       	mov	r24, r22
     9a8:	08 95       	ret
			}
		}
		return len;
	}
#endif //#ifdef USBSTREAM_ENABLE_RX
	return usbFunctionWrite2(data,len);
     9aa:	f3 df       	rcall	.-26     	; 0x992 <usbFunctionWrite2>
}
     9ac:	08 95       	ret

000009ae <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     9ae:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     9b0:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     9b6:	1b c0       	rjmp	.+54     	; 0x9ee <usbCrc16LoopTest>

000009b8 <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     9b8:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     9ba:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     9bc:	28 2f       	mov	r18, r24
    swap    byte
     9be:	22 95       	swap	r18
    eor     byte, resCrcL
     9c0:	28 27       	eor	r18, r24
    mov     scratch, byte
     9c2:	72 2f       	mov	r23, r18
    lsr     byte
     9c4:	26 95       	lsr	r18
    lsr     byte
     9c6:	26 95       	lsr	r18
    eor     byte, scratch
     9c8:	27 27       	eor	r18, r23
    inc     byte
     9ca:	23 95       	inc	r18
    lsr     byte
     9cc:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     9ce:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     9d0:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     9d2:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     9d4:	82 27       	eor	r24, r18
    neg     byte
     9d6:	21 95       	neg	r18
    andi    byte, 0xc0
     9d8:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     9da:	92 2f       	mov	r25, r18
    clr     byte
     9dc:	22 27       	eor	r18, r18
    lsr     scratch
     9de:	76 95       	lsr	r23
    ror     byte
     9e0:	27 95       	ror	r18
    eor     resCrcH, scratch
     9e2:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     9e4:	82 27       	eor	r24, r18
    lsr     scratch
     9e6:	76 95       	lsr	r23
    ror     byte
     9e8:	27 95       	ror	r18
    eor     resCrcH, scratch
     9ea:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     9ec:	82 27       	eor	r24, r18

000009ee <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     9ee:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     9f0:	18 f7       	brcc	.-58     	; 0x9b8 <usbCrc16ByteLoop>
    com     resCrcL
     9f2:	80 95       	com	r24
    com     resCrcH
     9f4:	90 95       	com	r25
    ret
     9f6:	08 95       	ret

000009f8 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     9f8:	da df       	rcall	.-76     	; 0x9ae <usbCrc16>
    st      ptr+, resCrcL
     9fa:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     9fc:	9d 93       	st	X+, r25
    ret
     9fe:	08 95       	ret

00000a00 <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     a00:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     a02:	88 27       	eor	r24, r24
    clr     cnt16H
     a04:	99 27       	eor	r25, r25

00000a06 <usbMFTime16>:
usbMFTime16:
    dec     cntH
     a06:	aa 95       	dec	r26
    breq    usbMFTimeout
     a08:	69 f0       	breq	.+26     	; 0xa24 <usbMFTimeout>

00000a0a <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     a0a:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     a0c:	e1 f3       	breq	.-8      	; 0xa06 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     a0e:	b2 99       	sbic	0x16, 2	; 22
    rjmp    usbMFWaitStrobe ;[4]
     a10:	fc cf       	rjmp	.-8      	; 0xa0a <usbMFWaitStrobe>

00000a12 <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     a12:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    usbMFWaitIdle   ;2
     a14:	fe cf       	rjmp	.-4      	; 0xa12 <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     a16:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     a18:	99 27       	eor	r25, r25

00000a1a <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     a1a:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     a1c:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     a1e:	11 f0       	breq	.+4      	; 0xa24 <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     a20:	a4 74       	andi	r26, 0x44	; 68
    brne    usbMFWaitLoop   ;[5]
     a22:	d9 f7       	brne	.-10     	; 0xa1a <usbMFWaitLoop>

00000a24 <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     a24:	08 95       	ret

00000a26 <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
     a26:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
     a28:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
     a2a:	cf 93       	push	r28

00000a2c <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     a2c:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     a2e:	b2 9b       	sbis	0x16, 2	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     a30:	e9 f7       	brne	.-6      	; 0xa2c <waitForJ>

00000a32 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     a32:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK              ;[-14]
     a34:	0b c0       	rjmp	.+22     	; 0xa4c <foundK>
    sbis    USBIN, USBMINUS
     a36:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <foundK>
    sbis    USBIN, USBMINUS
     a3a:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     a3c:	07 c0       	rjmp	.+14     	; 0xa4c <foundK>
    sbis    USBIN, USBMINUS
     a3e:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <foundK>
    sbis    USBIN, USBMINUS
     a42:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     a44:	03 c0       	rjmp	.+6      	; 0xa4c <foundK>
    sbis    USBIN, USBMINUS
     a46:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     a4a:	d5 c0       	rjmp	.+426    	; 0xbf6 <sofError>

00000a4c <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
     a4c:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
     a4e:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
     a50:	c0 91 53 01 	lds	r28, 0x0153	; 0x800153 <usbInputBufOffset>
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
     a54:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
     a56:	c6 5a       	subi	r28, 0xA6	; 166
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
     a58:	de 4f       	sbci	r29, 0xFE	; 254
    mov     r0, x2              ;[-3] [rx loop init]
     a5a:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     a5c:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    haveTwoBitsK        ;[-1]
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
     a60:	df 91       	pop	r29
    pop     r0                  ;[2]
     a62:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     a64:	e6 cf       	rjmp	.-52     	; 0xa32 <waitForK>

00000a66 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
     a66:	2f 93       	push	r18
    push    x1              ;[3]
     a68:	0f 93       	push	r16
    push    x2              ;[5]
     a6a:	1f 93       	push	r17
    push    x3              ;[7]
     a6c:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
     a70:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
     a72:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
     a74:	02 fb       	bst	r16, 2
    bld     shift, 0        ;[13]
     a76:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
     a78:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
     a7a:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
     a7c:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
     a7e:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
     a80:	65 c0       	rjmp	.+202    	; 0xb4c <rxbit1>

00000a82 <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
     a82:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
     a84:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
     a86:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
     a88:	52 fd       	sbrc	r21, 2
    lpm                     ;[059] optional nop3; modifies r0
     a8a:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
     a8c:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
     a8e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
     a90:	02 fb       	bst	r16, 2
    bld     shift, 5        ;[063]
     a92:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
     a94:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
     a96:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
     a98:	b1 f0       	breq	.+44     	; 0xac6 <unstuff5>
    eor     phase, x1       ;[067]
     a9a:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
     a9c:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
     a9e:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[070]
     aa0:	26 f9       	bld	r18, 6

00000aa2 <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
     aa2:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
     aa4:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
     aa6:	f0 f0       	brcs	.+60     	; 0xae4 <unstuff6>

00000aa8 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
     aaa:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
     aac:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
     aae:	02 fb       	bst	r16, 2
    bld     shift, 7        ;[079]
     ab0:	27 f9       	bld	r18, 7

00000ab2 <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
     ab2:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
     ab4:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
     ab6:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
     ab8:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
     aba:	e8 f5       	brcc	.+122    	; 0xb36 <rxLoop>

00000abc <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
     abc:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
     abe:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
     ac0:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
     ac2:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
     ac4:	f6 cf       	rjmp	.-20     	; 0xab2 <didUnstuff7>

00000ac6 <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
     ac6:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
     ac8:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
     aca:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
     acc:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
     ace:	10 2f       	mov	r17, r16
    nop                     ;[073]
     ad0:	00 00       	nop
    nop2                    ;[074]
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
     ad4:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
     ad6:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
     ad8:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
     ada:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
     adc:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
     ade:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
     ae0:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
     ae2:	e2 cf       	rjmp	.-60     	; 0xaa8 <didUnstuff5>

00000ae4 <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
     ae4:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
     ae6:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
     ae8:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
     aea:	00 c0       	rjmp	.+0      	; 0xaec <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
     aec:	da cf       	rjmp	.-76     	; 0xaa2 <didUnstuff6>

00000aee <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
     aee:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
     af0:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
     af2:	14 74       	andi	r17, 0x44	; 68
    in      r0, USBIN       ;[017] <-- phase
     af4:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
     af6:	69 f1       	breq	.+90     	; 0xb52 <didUnstuff0>
    andi    x3, ~0x01       ;[019]
     af8:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
     afa:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
     afc:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
     afe:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
     b00:	28 c0       	rjmp	.+80     	; 0xb52 <didUnstuff0>

00000b02 <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
     b02:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
     b04:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
     b06:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
     b08:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
     b0a:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
     b0c:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
     b0e:	29 c0       	rjmp	.+82     	; 0xb62 <didUnstuff1>

00000b10 <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
     b10:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
     b12:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
     b14:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
     b16:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
     b18:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
     b1a:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
     b1c:	2d c0       	rjmp	.+90     	; 0xb78 <didUnstuff2>

00000b1e <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
     b1e:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
     b20:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
     b22:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
     b24:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
     b26:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
     b28:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
     b2a:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
     b2c:	2e c0       	rjmp	.+92     	; 0xb8a <didUnstuff3>

00000b2e <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
     b2e:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
     b30:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
     b32:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <didUnstuff4>

00000b36 <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     b36:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
     b38:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
     b3a:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
     b3c:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
     b3e:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
     b40:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
     b42:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
     b44:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
     b46:	12 fb       	bst	r17, 2
    bld     shift, 0        ;[009]
     b48:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
     b4a:	29 7f       	andi	r18, 0xF9	; 249

00000b4c <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
     b4c:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
     b4e:	79 f2       	breq	.-98     	; 0xaee <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
     b50:	14 74       	andi	r17, 0x44	; 68

00000b52 <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
     b52:	59 f1       	breq	.+86     	; 0xbaa <se0>
    eor     r0, x2          ;[015]
     b54:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
     b56:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
     b58:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
     b5a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
     b5c:	02 fb       	bst	r16, 2
    bld     shift, 1        ;[020]
     b5e:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
     b60:	23 7f       	andi	r18, 0xF3	; 243

00000b62 <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
     b62:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
     b64:	71 f2       	breq	.-100    	; 0xb02 <unstuff1>
    eor     r0, x1          ;[024]
     b66:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
     b68:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
     b6a:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
     b6c:	d0 f0       	brcs	.+52     	; 0xba2 <overflow>
    in      r0, USBIN       ;[028] <-- phase
     b6e:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
     b70:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
     b72:	12 fb       	bst	r17, 2
    bld     shift, 2        ;[031]
     b74:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
     b76:	27 7e       	andi	r18, 0xE7	; 231

00000b78 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
     b78:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
     b7a:	51 f2       	breq	.-108    	; 0xb10 <unstuff2>
    eor     r0, x2          ;[035]
     b7c:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
     b7e:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
     b80:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
     b82:	02 fb       	bst	r16, 2
    in      r0, USBIN       ;[039] <-- phase
     b84:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
     b86:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
     b88:	2f 7c       	andi	r18, 0xCF	; 207

00000b8a <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
     b8a:	49 f2       	breq	.-110    	; 0xb1e <unstuff3>
    nop                     ;[043]
     b8c:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
     b8e:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
     b90:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
     b92:	12 fb       	bst	r17, 2
    bld     shift, 4        ;[047]
     b94:	24 f9       	bld	r18, 4

00000b96 <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
     b96:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
     b98:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
     b9a:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
     b9c:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
     b9e:	39 f2       	breq	.-114    	; 0xb2e <unstuff4>
    rjmp    continueWithBit5;[053]
     ba0:	70 cf       	rjmp	.-288    	; 0xa82 <continueWithBit5>

00000ba2 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     ba2:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     ba4:	1a bf       	out	0x3a, r17	; 58

00000ba6 <ignorePacket>:
ignorePacket:
    clr     token
     ba6:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     ba8:	19 c0       	rjmp	.+50     	; 0xbdc <handleSetupOrOut>

00000baa <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     baa:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     bac:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     bae:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     bb0:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     bb2:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     bb4:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     bb6:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     bb8:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     bba:	09 f1       	breq	.+66     	; 0xbfe <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     bbc:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     bbe:	f9 f0       	breq	.+62     	; 0xbfe <handleData>
    lds     shift, usbDeviceAddr;[17]
     bc0:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     bc4:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     bc6:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     bc8:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     bca:	ed cf       	rjmp	.-38     	; 0xba6 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     bcc:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     bce:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     bd0:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     bd2:	51 f1       	breq	.+84     	; 0xc28 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     bd4:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     bd6:	11 f0       	breq	.+4      	; 0xbdc <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     bd8:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     bda:	29 f7       	brne	.-54     	; 0xba6 <ignorePacket>

00000bdc <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     bdc:	00 93 58 01 	sts	0x0158, r16	; 0x800158 <usbCurrentTok>

00000be0 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     be0:	3f 91       	pop	r19
     be2:	5f 91       	pop	r21
     be4:	4f 91       	pop	r20
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	2f 91       	pop	r18
     bec:	df 91       	pop	r29
     bee:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
     bf0:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     bf2:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     bf4:	1b cf       	rjmp	.-458    	; 0xa2c <waitForJ>

00000bf6 <sofError>:
sofError:
    POP_RETI                    ;macro call
     bf6:	cf 91       	pop	r28
     bf8:	cf bf       	out	0x3f, r28	; 63
     bfa:	cf 91       	pop	r28
    reti
     bfc:	18 95       	reti

00000bfe <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     bfe:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <usbCurrentTok>
    tst     shift               ;[20]
     c02:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     c04:	69 f3       	breq	.-38     	; 0xbe0 <doReturn>
    lds     x2, usbRxLen        ;[22]
     c06:	10 91 56 01 	lds	r17, 0x0156	; 0x800156 <usbRxLen>
    tst     x2                  ;[24]
     c0a:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     c0c:	79 f5       	brne	.+94     	; 0xc6c <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     c0e:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     c10:	7a f1       	brmi	.+94     	; 0xc70 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     c12:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
     c16:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
     c1a:	10 91 53 01 	lds	r17, 0x0153	; 0x800153 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
     c1e:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     c20:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     c22:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     c26:	24 c0       	rjmp	.+72     	; 0xc70 <sendAckAndReti>

00000c28 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     c28:	00 91 56 01 	lds	r16, 0x0156	; 0x800156 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     c2c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     c2e:	f4 f4       	brge	.+60     	; 0xc6c <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     c30:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     c32:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     c34:	49 f4       	brne	.+18     	; 0xc48 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     c36:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     c3a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     c3c:	1a c0       	rjmp	.+52     	; 0xc72 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     c3e:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
     c42:	ca e3       	ldi	r28, 0x3A	; 58
    ldi     YH, hi8(usbTxBuf)   ;[44]
     c44:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     c46:	19 c0       	rjmp	.+50     	; 0xc7a <usbSendAndReti>

00000c48 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     c48:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     c4c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     c4e:	11 c0       	rjmp	.+34     	; 0xc72 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     c50:	00 93 45 01 	sts	0x0145, r16	; 0x800145 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     c54:	c6 e4       	ldi	r28, 0x46	; 70
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     c56:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     c58:	10 c0       	rjmp	.+32     	; 0xc7a <usbSendAndReti>

00000c5a <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
     c5a:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
     c5c:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
     c60:	21 c0       	rjmp	.+66     	; 0xca4 <didStuff7>

00000c62 <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
     c62:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
     c64:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
     c66:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
     c68:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
     c6a:	14 c0       	rjmp	.+40     	; 0xc94 <didStuffN>

00000c6c <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
     c6c:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <sendCntAndReti>

00000c70 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     c70:	32 ed       	ldi	r19, 0xD2	; 210

00000c72 <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
     c72:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
     c74:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
     c76:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     c78:	32 e0       	ldi	r19, 0x02	; 2

00000c7a <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     c7a:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
     c7c:	14 64       	ori	r17, 0x44	; 68
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     c7e:	c2 9a       	sbi	0x18, 2	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     c80:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
     c82:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     c84:	54 e4       	ldi	r21, 0x44	; 68
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     c86:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
     c88:	4f ef       	ldi	r20, 0xFF	; 255

00000c8a <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
     c8a:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
     c8c:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
     c8e:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
     c90:	27 95       	ror	r18
    ror     x2              ;[1]
     c92:	17 95       	ror	r17

00000c94 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
     c94:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
     c96:	28 f7       	brcc	.-54     	; 0xc62 <bitstuffN>
    nop                     ;[4]
     c98:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
     c9a:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
     c9c:	b0 f7       	brcc	.-20     	; 0xc8a <bitloop>
    sbrs    shift, 0        ;[7]
     c9e:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
     ca0:	05 27       	eor	r16, r21
    ror     shift           ;[9]
     ca2:	27 95       	ror	r18

00000ca4 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
     ca4:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
     ca6:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
     ca8:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
     caa:	b8 f6       	brcc	.-82     	; 0xc5a <bitstuff7>
    ld      shift, y+       ;[3]
     cac:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
     cae:	3a 95       	dec	r19
    brne    byteloop        ;[6]
     cb0:	61 f7       	brne	.-40     	; 0xc8a <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
     cb2:	0b 7b       	andi	r16, 0xBB	; 187
    lds     x2, usbNewDeviceAddr;[8]
     cb4:	10 91 57 01 	lds	r17, 0x0157	; 0x800157 <usbNewDeviceAddr>
    lsl     x2              ;[10] we compare with left shifted address
     cb8:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     cba:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
     cbc:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
     cbe:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
     cc0:	11 f0       	breq	.+4      	; 0xcc6 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     cc2:	10 93 51 01 	sts	0x0151, r17	; 0x800151 <usbDeviceAddr>

00000cc6 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     cc6:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
     cc8:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
     cca:	04 60       	ori	r16, 0x04	; 4
    in      x2, USBDDR      ;[7]
     ccc:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
     cce:	1b 7b       	andi	r17, 0xBB	; 187
    mov     x3, x1          ;[9]
     cd0:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
     cd2:	4b 7b       	andi	r20, 0xBB	; 187
    ldi     x4, 4           ;[11]
     cd4:	54 e0       	ldi	r21, 0x04	; 4

00000cd6 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
     cd6:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
     cda:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
     cdc:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
     cde:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     ce0:	7f cf       	rjmp	.-258    	; 0xbe0 <doReturn>

00000ce2 <main>:
}



int main(void)
{
     ce2:	a8 e0       	ldi	r26, 0x08	; 8
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e6 e7       	ldi	r30, 0x76	; 118
     ce8:	f6 e0       	ldi	r31, 0x06	; 6
     cea:	37 c2       	rjmp	.+1134   	; 0x115a <__prologue_saves__>
	unsigned char buttonPressed = 0;
	unsigned char buttonMask = 0;
	unsigned char led_sensor_blink = 0;
	filter_iir2_t filter_iir2_data = {0,0,0,0};
     cec:	88 e0       	ldi	r24, 0x08	; 8
     cee:	9e 01       	movw	r18, r28
     cf0:	2f 5f       	subi	r18, 0xFF	; 255
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	79 01       	movw	r14, r18
     cf6:	f9 01       	movw	r30, r18
     cf8:	28 2f       	mov	r18, r24
     cfa:	11 92       	st	Z+, r1
     cfc:	2a 95       	dec	r18
     cfe:	e9 f7       	brne	.-6      	; 0xcfa <main+0x18>


#ifndef __ASSEMBLER__

static inline void hardwareInit(void) {
	BOOTLOADER_CONDITION_INIT();
     d00:	d3 98       	cbi	0x1a, 3	; 26
     d02:	db 9a       	sbi	0x1b, 3	; 27
	LED_RED_INIT();
     d04:	bb 9a       	sbi	0x17, 3	; 23
     d06:	c3 98       	cbi	0x18, 3	; 24
     d08:	c3 98       	cbi	0x18, 3	; 24
	LED_BUTTON_INIT();
     d0a:	b9 9a       	sbi	0x17, 1	; 23
     d0c:	c1 98       	cbi	0x18, 1	; 24
     d0e:	c1 98       	cbi	0x18, 1	; 24
	TIMER0_INIT();
     d10:	90 ee       	ldi	r25, 0xE0	; 224
     d12:	95 bb       	out	0x15, r25	; 21
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	93 bf       	out	0x33, r25	; 51
	TIMER1_INIT();
     d18:	10 be       	out	0x30, r1	; 48
     d1a:	8f bd       	out	0x2f, r24	; 47
     d1c:	17 bc       	out	0x27, r1	; 39
     d1e:	16 bc       	out	0x26, r1	; 38
     d20:	10 b8       	out	0x00, r1	; 0
     d22:	19 bc       	out	0x29, r1	; 41
	BUTTON_INIT();
     d24:	d4 98       	cbi	0x1a, 4	; 26
     d26:	dc 9a       	sbi	0x1b, 4	; 27
	POT_INIT();
     d28:	d0 9a       	sbi	0x1a, 0	; 26
     d2a:	d1 98       	cbi	0x1a, 1	; 26
     d2c:	d9 98       	cbi	0x1b, 1	; 27
     d2e:	d8 98       	cbi	0x1b, 0	; 27
	static uint16_t led_sensor_weigthed_sum_data[20];
	uint16_t led_sensor_weigthed_sum = 0;
	uint8_t led_sensor_weigthed_sum_idx = 0;

	hardwareInit();
	stdout = &usb_out_stream;
     d30:	86 e8       	ldi	r24, 0x86	; 134
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__iob+0x3>
     d38:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__iob+0x2>
	stdin = &usb_in_stream;
     d3c:	88 e7       	ldi	r24, 0x78	; 120
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <__iob+0x1>
     d44:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__iob>
	stdin_get_string_t stdin_get_string_buffer;
	stdin_get_string_buffer.bufLen = 0;
	//const char* stdin_str;

	printf_P(PSTR("B!\n"));
     d48:	82 ea       	ldi	r24, 0xA2	; 162
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9f 93       	push	r25
     d4e:	8f 93       	push	r24
     d50:	96 d2       	rcall	.+1324   	; 0x127e <printf_P>
	usbDeviceDisconnect();
     d52:	bc 98       	cbi	0x17, 4	; 23
     d54:	c4 98       	cbi	0x18, 4	; 24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     d56:	9f e0       	ldi	r25, 0x0F	; 15
     d58:	88 e1       	ldi	r24, 0x18	; 24
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	a8 95       	wdr
     d60:	81 bd       	out	0x21, r24	; 33
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	91 bd       	out	0x21, r25	; 33
			; /* delay >10ms for USB reset */
	}

	wdt_enable(WDTO_2S);
	odDebugInit();
	usbInit();
     d66:	82 db       	rcall	.-2300   	; 0x46c <usbInit>
	TIMER0_ENABLE_INPUTCAPT_INTERRUPT();
     d68:	89 b7       	in	r24, 0x39	; 57
     d6a:	81 60       	ori	r24, 0x01	; 1
     d6c:	89 bf       	out	0x39, r24	; 57
	sei();
     d6e:	78 94       	sei
	usbDeviceConnect();
     d70:	bc 9a       	sbi	0x17, 4	; 23
     d72:	c4 9a       	sbi	0x18, 4	; 24
	LED_RED_ON();
     d74:	c3 9a       	sbi	0x18, 3	; 24
	LED_SENSOR_INIT();
     d76:	d2 9a       	sbi	0x1a, 2	; 26
     d78:	b8 9a       	sbi	0x17, 0	; 23
     d7a:	c0 98       	cbi	0x18, 0	; 24
     d7c:	da 98       	cbi	0x1b, 2	; 27
	LED_BUTTON_OFF();
     d7e:	c1 98       	cbi	0x18, 1	; 24
	Timer_Set(TIMER_LED_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     d80:	60 ed       	ldi	r22, 0xD0	; 208
     d82:	77 e0       	ldi	r23, 0x07	; 7
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	43 dd       	rcall	.-1402   	; 0x80e <Timer_Set>
	Timer_Set(TIMER_LED_SENSOR_BLINK,2);
     d88:	62 e0       	ldi	r22, 0x02	; 2
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	3f dd       	rcall	.-1410   	; 0x80e <Timer_Set>
	Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     d90:	60 ed       	ldi	r22, 0xD0	; 208
     d92:	77 e0       	ldi	r23, 0x07	; 7
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	3b dd       	rcall	.-1418   	; 0x80e <Timer_Set>
	filtered_val = filter_iir2(&filter_iir2_data,1000);
     d98:	68 ee       	ldi	r22, 0xE8	; 232
     d9a:	73 e0       	ldi	r23, 0x03	; 3
     d9c:	c7 01       	movw	r24, r14
     d9e:	73 db       	rcall	.-2330   	; 0x486 <filter_iir2>
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
	uint8_t led_sensor_last_random = 0;
	static uint16_t led_sensor_delta_time = 0;
	uint16_t led_sensor_trig_time = 0;
	uint8_t led_sensor_prev_time=0;
	uint16_t led_sensor_values[5];
	uint8_t led_sensor_nvalues = 0;
     da4:	00 e0       	ldi	r16, 0x00	; 0
	filter_iir2_t filter_iir2_data = {0,0,0,0};
	q7_8_t filtered_val = 0;
	uint8_t led_sensor_last_random = 0;
	static uint16_t led_sensor_delta_time = 0;
	uint16_t led_sensor_trig_time = 0;
	uint8_t led_sensor_prev_time=0;
     da6:	80 e0       	ldi	r24, 0x00	; 0



int main(void)
{
	unsigned char buttonPressed = 0;
     da8:	10 e0       	ldi	r17, 0x00	; 0
				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
				//uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
				printf_P(PSTR("Button!\r\n"));
				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,capture_diff_max,us_max,captured);
			}
			buttonPressed = 1;
     daa:	88 24       	eor	r8, r8
     dac:	83 94       	inc	r8
		if (BUTTON_IS_PRESSED()) {
			LED_BUTTON_ON();
			if (!(buttonPressed)) {
				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
				//uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
				printf_P(PSTR("Button!\r\n"));
     dae:	98 e9       	ldi	r25, 0x98	; 152
     db0:	c9 2e       	mov	r12, r25
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	d9 2e       	mov	r13, r25

		//LED Timer
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_LED_BLINK)) {
			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
			LED_RED_CHANGE();
     db6:	28 e0       	ldi	r18, 0x08	; 8
     db8:	32 2e       	mov	r3, r18

		//ADC measurement of led sensor
		{
			if (led_sensor_delta_time >= us_to_ticks(4000) * led_sensor_nsample)
			{
				LED_SENSOR_ADC_START();
     dba:	3e e8       	ldi	r19, 0x8E	; 142
     dbc:	23 2e       	mov	r2, r19

		if (BOOTLOADER_CONDITION) {
			cli();
			BOOTLOADER_CONDITION_INIT();
			void (*reset_vec)(void) = 0;
			reset_vec();
     dbe:	a1 2c       	mov	r10, r1
     dc0:	b1 2c       	mov	r11, r1
	// main event loop
	for (;;)
	{
		//update delta time
		{
			uint8_t temp = TCNT1;
     dc2:	9e b4       	in	r9, 0x2e	; 46
			led_sensor_delta_time += (temp - led_sensor_prev_time) & 0xFF;
     dc4:	29 2d       	mov	r18, r9
     dc6:	28 1b       	sub	r18, r24
     dc8:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <led_sensor_delta_time.2466>
     dcc:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <led_sensor_delta_time.2466+0x1>
     dd0:	82 0f       	add	r24, r18
     dd2:	91 1d       	adc	r25, r1
     dd4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <led_sensor_delta_time.2466+0x1>
     dd8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <led_sensor_delta_time.2466>
			led_sensor_prev_time = temp;
		}

		//Watchdog
		wdt_reset();
     ddc:	a8 95       	wdr

		//Timers
		/////////////////////////////////////////////////////
		if (TIFR & _BV(TOV1)) {
     dde:	08 b6       	in	r0, 0x38	; 56
     de0:	02 fe       	sbrs	r0, 2
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <main+0x10e>
			TIFR |= _BV(TOV1);
     de4:	88 b7       	in	r24, 0x38	; 56
     de6:	84 60       	ori	r24, 0x04	; 4
     de8:	88 bf       	out	0x38, r24	; 56
			Timers_DecreaseAll(TIMER1_OVERFLOW_PERIOD_MS_X256);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	b5 dc       	rcall	.-1686   	; 0x75a <Timers_DecreaseAll>
		}

		//usb
		/////////////////////////////////////////////////////
		usbPoll();
     df0:	cf d9       	rcall	.-3170   	; 0x190 <usbPoll>

		//
		/////////////////////////////////////////////////////
		if (BUTTON_IS_PRESSED()) {
     df2:	cc 99       	sbic	0x19, 4	; 25
     df4:	09 c0       	rjmp	.+18     	; 0xe08 <main+0x126>
			LED_BUTTON_ON();
     df6:	c1 9a       	sbi	0x18, 1	; 24
			if (!(buttonPressed)) {
     df8:	11 11       	cpse	r17, r1
     dfa:	08 c0       	rjmp	.+16     	; 0xe0c <main+0x12a>
				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
				//uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
				printf_P(PSTR("Button!\r\n"));
     dfc:	df 92       	push	r13
     dfe:	cf 92       	push	r12
     e00:	3e d2       	rcall	.+1148   	; 0x127e <printf_P>
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <main+0x12a>
			buttonMask |= 0x1;
		}
		else {
			//LED_BUTTON_OFF();
			buttonMask &= ~0x1;
			buttonPressed = 0;
     e08:	10 e0       	ldi	r17, 0x00	; 0
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <main+0x12c>
				//uint16_t us = capture_diff * 1000000L / F_TIMER0;
				//uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
				printf_P(PSTR("Button!\r\n"));
				//fprintf_P(&uartsw_stream,PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\r\n"),capture_diff,us,capture_diff_max,us_max,captured);
			}
			buttonPressed = 1;
     e0c:	11 e0       	ldi	r17, 0x01	; 1
			buttonPressed = 0;
		}

		//USB interrupt
		/////////////////////////////////////////////////////
		if (usbInterruptIsReady())
     e0e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <usbTxStatus1>
     e12:	84 ff       	sbrs	r24, 4
     e14:	0c c0       	rjmp	.+24     	; 0xe2e <main+0x14c>
		{
			if (buttonMask != reportBuffer.mouse.buttonMask) {
     e16:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <reportBuffer+0x1>
     e1a:	18 17       	cp	r17, r24
     e1c:	41 f0       	breq	.+16     	; 0xe2e <main+0x14c>
				reportBuffer.mouse.report_id = report_id_mouse;
     e1e:	80 92 98 00 	sts	0x0098, r8	; 0x800098 <reportBuffer>
				reportBuffer.mouse.buttonMask = buttonMask;
     e22:	10 93 99 00 	sts	0x0099, r17	; 0x800099 <reportBuffer+0x1>
				usbSetInterrupt((uchar*)&reportBuffer.mouse, sizeof(reportBuffer.mouse));
     e26:	62 e0       	ldi	r22, 0x02	; 2
     e28:	88 e9       	ldi	r24, 0x98	; 152
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	8c d9       	rcall	.-3304   	; 0x146 <usbSetInterrupt>

		}

		//LED Timer
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_LED_BLINK)) {
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	c6 dc       	rcall	.-1652   	; 0x7be <Timer_HasExpired>
     e32:	89 2b       	or	r24, r25
     e34:	39 f0       	breq	.+14     	; 0xe44 <main+0x162>
			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
     e36:	64 ef       	ldi	r22, 0xF4	; 244
     e38:	71 e0       	ldi	r23, 0x01	; 1
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	e8 dc       	rcall	.-1584   	; 0x80e <Timer_Set>
			LED_RED_CHANGE();
     e3e:	88 b3       	in	r24, 0x18	; 24
     e40:	83 25       	eor	r24, r3
     e42:	88 bb       	out	0x18, r24	; 24
		}
		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	bb dc       	rcall	.-1674   	; 0x7be <Timer_HasExpired>
     e48:	89 2b       	or	r24, r25
     e4a:	41 f0       	breq	.+16     	; 0xe5c <main+0x17a>
			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
     e4c:	6a ef       	ldi	r22, 0xFA	; 250
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	dd dc       	rcall	.-1606   	; 0x80e <Timer_Set>
			LED_BUTTON_CHANGE();
     e54:	98 b3       	in	r25, 0x18	; 24
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	89 27       	eor	r24, r25
     e5a:	88 bb       	out	0x18, r24	; 24
		}


		//ADC measurement of led sensor
		{
			if (led_sensor_delta_time >= us_to_ticks(4000) * led_sensor_nsample)
     e5c:	40 90 96 00 	lds	r4, 0x0096	; 0x800096 <led_sensor_delta_time.2466>
     e60:	50 90 97 00 	lds	r5, 0x0097	; 0x800097 <led_sensor_delta_time.2466+0x1>
     e64:	61 2c       	mov	r6, r1
     e66:	71 2c       	mov	r7, r1
     e68:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <led_sensor_nsample.2471>
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	23 e0       	ldi	r18, 0x03	; 3
     e74:	32 e0       	ldi	r19, 0x02	; 2
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	43 d1       	rcall	.+646    	; 0x1102 <__mulsi3>
     e7c:	46 16       	cp	r4, r22
     e7e:	57 06       	cpc	r5, r23
     e80:	68 06       	cpc	r6, r24
     e82:	79 06       	cpc	r7, r25
     e84:	38 f0       	brcs	.+14     	; 0xe94 <main+0x1b2>
			{
				LED_SENSOR_ADC_START();
     e86:	27 b8       	out	0x07, r2	; 7
     e88:	36 9a       	sbi	0x06, 6	; 6
				led_sensor_nsample++;
     e8a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_sensor_nsample.2471>
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <led_sensor_nsample.2471>
			}
			if (LED_SENSOR_ADC_IS_LED_SENSOR_CHANNEL() && LED_SENSOR_ADC_IS_COMPLETED()) {
     e94:	87 b1       	in	r24, 0x07	; 7
     e96:	8f 73       	andi	r24, 0x3F	; 63
     e98:	8e 30       	cpi	r24, 0x0E	; 14
     e9a:	61 f4       	brne	.+24     	; 0xeb4 <main+0x1d2>
     e9c:	34 9b       	sbis	0x06, 4	; 6
     e9e:	0a c0       	rjmp	.+20     	; 0xeb4 <main+0x1d2>
				if (led_sensor_nvalues < elements_of(led_sensor_values)) {
     ea0:	05 30       	cpi	r16, 0x05	; 5
     ea2:	30 f4       	brcc	.+12     	; 0xeb0 <main+0x1ce>
					led_sensor_values[led_sensor_nvalues] = ADC;
     ea4:	64 b1       	in	r22, 0x04	; 4
     ea6:	75 b1       	in	r23, 0x05	; 5
					if (led_sensor_nvalues == 4) {
     ea8:	04 30       	cpi	r16, 0x04	; 4
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <main+0x1ce>
						int16_t val = led_sensor_values[led_sensor_nvalues];
						if ((led_sensor_last_random & 0x1)) {
							val = -val;
						}
						filtered_val = filter_iir2(&filter_iir2_data,val);
     eac:	c7 01       	movw	r24, r14
     eae:	eb da       	rcall	.-2602   	; 0x486 <filter_iir2>
					}
				}
				led_sensor_nvalues++;
     eb0:	0f 5f       	subi	r16, 0xFF	; 255
				LED_SENSOR_ADC_DONE();
     eb2:	34 9a       	sbi	0x06, 4	; 6
			}
		}


		if (BOOTLOADER_CONDITION) {
     eb4:	cb 9b       	sbis	0x19, 3	; 25
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <main+0x1da>
}



int main(void)
{
     eb8:	89 2d       	mov	r24, r9
     eba:	83 cf       	rjmp	.-250    	; 0xdc2 <main+0xe0>
			}
		}


		if (BOOTLOADER_CONDITION) {
			cli();
     ebc:	f8 94       	cli
			BOOTLOADER_CONDITION_INIT();
     ebe:	d3 98       	cbi	0x1a, 3	; 26
     ec0:	db 9a       	sbi	0x1b, 3	; 27
			void (*reset_vec)(void) = 0;
			reset_vec();
     ec2:	f5 01       	movw	r30, r10
     ec4:	09 95       	icall
     ec6:	f8 cf       	rjmp	.-16     	; 0xeb8 <main+0x1d6>

00000ec8 <vfprintf>:
     ec8:	ab e0       	ldi	r26, 0x0B	; 11
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e9 e6       	ldi	r30, 0x69	; 105
     ece:	f7 e0       	ldi	r31, 0x07	; 7
     ed0:	48 c1       	rjmp	.+656    	; 0x1162 <__prologue_saves__+0x8>
     ed2:	6c 01       	movw	r12, r24
     ed4:	7b 01       	movw	r14, r22
     ed6:	3a 01       	movw	r6, r20
     ed8:	fc 01       	movw	r30, r24
     eda:	17 82       	std	Z+7, r1	; 0x07
     edc:	16 82       	std	Z+6, r1	; 0x06
     ede:	83 81       	ldd	r24, Z+3	; 0x03
     ee0:	81 ff       	sbrs	r24, 1
     ee2:	f9 c0       	rjmp	.+498    	; 0x10d6 <vfprintf+0x20e>
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	4c 01       	movw	r8, r24
     eea:	f6 01       	movw	r30, r12
     eec:	b3 80       	ldd	r11, Z+3	; 0x03
     eee:	f7 01       	movw	r30, r14
     ef0:	b3 fc       	sbrc	r11, 3
     ef2:	05 91       	lpm	r16, Z+
     ef4:	b3 fe       	sbrs	r11, 3
     ef6:	01 91       	ld	r16, Z+
     ef8:	7f 01       	movw	r14, r30
     efa:	00 23       	and	r16, r16
     efc:	09 f4       	brne	.+2      	; 0xf00 <vfprintf+0x38>
     efe:	e7 c0       	rjmp	.+462    	; 0x10ce <vfprintf+0x206>
     f00:	05 32       	cpi	r16, 0x25	; 37
     f02:	49 f4       	brne	.+18     	; 0xf16 <vfprintf+0x4e>
     f04:	b3 fc       	sbrc	r11, 3
     f06:	05 91       	lpm	r16, Z+
     f08:	b3 fe       	sbrs	r11, 3
     f0a:	01 91       	ld	r16, Z+
     f0c:	7f 01       	movw	r14, r30
     f0e:	05 32       	cpi	r16, 0x25	; 37
     f10:	11 f0       	breq	.+4      	; 0xf16 <vfprintf+0x4e>
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	17 c0       	rjmp	.+46     	; 0xf44 <vfprintf+0x7c>
     f16:	b6 01       	movw	r22, r12
     f18:	80 2f       	mov	r24, r16
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	74 d1       	rcall	.+744    	; 0x1206 <fputc>
     f1e:	53 01       	movw	r10, r6
     f20:	35 01       	movw	r6, r10
     f22:	e3 cf       	rjmp	.-58     	; 0xeea <vfprintf+0x22>
     f24:	00 23       	and	r16, r16
     f26:	09 f4       	brne	.+2      	; 0xf2a <vfprintf+0x62>
     f28:	d2 c0       	rjmp	.+420    	; 0x10ce <vfprintf+0x206>
     f2a:	60 2f       	mov	r22, r16
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	8d ef       	ldi	r24, 0xFD	; 253
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	5e d1       	rcall	.+700    	; 0x11f0 <strchr_P>
     f34:	89 2b       	or	r24, r25
     f36:	49 f0       	breq	.+18     	; 0xf4a <vfprintf+0x82>
     f38:	f7 01       	movw	r30, r14
     f3a:	b3 fc       	sbrc	r11, 3
     f3c:	05 91       	lpm	r16, Z+
     f3e:	b3 fe       	sbrs	r11, 3
     f40:	01 91       	ld	r16, Z+
     f42:	7f 01       	movw	r14, r30
     f44:	17 ff       	sbrs	r17, 7
     f46:	ee cf       	rjmp	.-36     	; 0xf24 <vfprintf+0x5c>
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <vfprintf+0x8a>
     f4a:	03 32       	cpi	r16, 0x23	; 35
     f4c:	39 f0       	breq	.+14     	; 0xf5c <vfprintf+0x94>
     f4e:	0c 36       	cpi	r16, 0x6C	; 108
     f50:	19 f0       	breq	.+6      	; 0xf58 <vfprintf+0x90>
     f52:	01 11       	cpse	r16, r1
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <vfprintf+0x98>
     f56:	bb c0       	rjmp	.+374    	; 0x10ce <vfprintf+0x206>
     f58:	10 68       	ori	r17, 0x80	; 128
     f5a:	ee cf       	rjmp	.-36     	; 0xf38 <vfprintf+0x70>
     f5c:	10 e1       	ldi	r17, 0x10	; 16
     f5e:	ec cf       	rjmp	.-40     	; 0xf38 <vfprintf+0x70>
     f60:	60 2f       	mov	r22, r16
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	86 ef       	ldi	r24, 0xF6	; 246
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	43 d1       	rcall	.+646    	; 0x11f0 <strchr_P>
     f6a:	89 2b       	or	r24, r25
     f6c:	41 f0       	breq	.+16     	; 0xf7e <vfprintf+0xb6>
     f6e:	53 01       	movw	r10, r6
     f70:	f4 e0       	ldi	r31, 0x04	; 4
     f72:	af 0e       	add	r10, r31
     f74:	b1 1c       	adc	r11, r1
     f76:	b6 01       	movw	r22, r12
     f78:	8f e3       	ldi	r24, 0x3F	; 63
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	10 c0       	rjmp	.+32     	; 0xf9e <vfprintf+0xd6>
     f7e:	03 36       	cpi	r16, 0x63	; 99
     f80:	31 f0       	breq	.+12     	; 0xf8e <vfprintf+0xc6>
     f82:	03 37       	cpi	r16, 0x73	; 115
     f84:	71 f0       	breq	.+28     	; 0xfa2 <vfprintf+0xda>
     f86:	03 35       	cpi	r16, 0x53	; 83
     f88:	01 f5       	brne	.+64     	; 0xfca <vfprintf+0x102>
     f8a:	11 60       	ori	r17, 0x01	; 1
     f8c:	0a c0       	rjmp	.+20     	; 0xfa2 <vfprintf+0xda>
     f8e:	53 01       	movw	r10, r6
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	a8 0e       	add	r10, r24
     f94:	b1 1c       	adc	r11, r1
     f96:	b6 01       	movw	r22, r12
     f98:	f3 01       	movw	r30, r6
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	33 d1       	rcall	.+614    	; 0x1206 <fputc>
     fa0:	bf cf       	rjmp	.-130    	; 0xf20 <vfprintf+0x58>
     fa2:	53 01       	movw	r10, r6
     fa4:	f2 e0       	ldi	r31, 0x02	; 2
     fa6:	af 0e       	add	r10, r31
     fa8:	b1 1c       	adc	r11, r1
     faa:	f3 01       	movw	r30, r6
     fac:	60 80       	ld	r6, Z
     fae:	71 80       	ldd	r7, Z+1	; 0x01
     fb0:	f3 01       	movw	r30, r6
     fb2:	10 fd       	sbrc	r17, 0
     fb4:	85 91       	lpm	r24, Z+
     fb6:	10 ff       	sbrs	r17, 0
     fb8:	81 91       	ld	r24, Z+
     fba:	3f 01       	movw	r6, r30
     fbc:	88 23       	and	r24, r24
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <vfprintf+0xfa>
     fc0:	af cf       	rjmp	.-162    	; 0xf20 <vfprintf+0x58>
     fc2:	b6 01       	movw	r22, r12
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	1f d1       	rcall	.+574    	; 0x1206 <fputc>
     fc8:	f3 cf       	rjmp	.-26     	; 0xfb0 <vfprintf+0xe8>
     fca:	04 36       	cpi	r16, 0x64	; 100
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <vfprintf+0x10a>
     fce:	09 36       	cpi	r16, 0x69	; 105
     fd0:	21 f5       	brne	.+72     	; 0x101a <vfprintf+0x152>
     fd2:	53 01       	movw	r10, r6
     fd4:	17 ff       	sbrs	r17, 7
     fd6:	09 c0       	rjmp	.+18     	; 0xfea <vfprintf+0x122>
     fd8:	f4 e0       	ldi	r31, 0x04	; 4
     fda:	af 0e       	add	r10, r31
     fdc:	b1 1c       	adc	r11, r1
     fde:	f3 01       	movw	r30, r6
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	0a c0       	rjmp	.+20     	; 0xffe <vfprintf+0x136>
     fea:	f2 e0       	ldi	r31, 0x02	; 2
     fec:	af 0e       	add	r10, r31
     fee:	b1 1c       	adc	r11, r1
     ff0:	f3 01       	movw	r30, r6
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	07 2e       	mov	r0, r23
     ff8:	00 0c       	add	r0, r0
     ffa:	88 0b       	sbc	r24, r24
     ffc:	99 0b       	sbc	r25, r25
     ffe:	1f 7e       	andi	r17, 0xEF	; 239
    1000:	97 ff       	sbrs	r25, 7
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <vfprintf+0x14c>
    1004:	90 95       	com	r25
    1006:	80 95       	com	r24
    1008:	70 95       	com	r23
    100a:	61 95       	neg	r22
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 4f       	sbci	r24, 0xFF	; 255
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	10 64       	ori	r17, 0x40	; 64
    1014:	2a e0       	ldi	r18, 0x0A	; 10
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	30 c0       	rjmp	.+96     	; 0x107a <vfprintf+0x1b2>
    101a:	00 37       	cpi	r16, 0x70	; 112
    101c:	91 f0       	breq	.+36     	; 0x1042 <vfprintf+0x17a>
    101e:	40 f4       	brcc	.+16     	; 0x1030 <vfprintf+0x168>
    1020:	08 35       	cpi	r16, 0x58	; 88
    1022:	a1 f0       	breq	.+40     	; 0x104c <vfprintf+0x184>
    1024:	0f 36       	cpi	r16, 0x6F	; 111
    1026:	09 f0       	breq	.+2      	; 0x102a <vfprintf+0x162>
    1028:	52 c0       	rjmp	.+164    	; 0x10ce <vfprintf+0x206>
    102a:	28 e0       	ldi	r18, 0x08	; 8
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	11 c0       	rjmp	.+34     	; 0x1052 <vfprintf+0x18a>
    1030:	05 37       	cpi	r16, 0x75	; 117
    1032:	19 f0       	breq	.+6      	; 0x103a <vfprintf+0x172>
    1034:	08 37       	cpi	r16, 0x78	; 120
    1036:	31 f0       	breq	.+12     	; 0x1044 <vfprintf+0x17c>
    1038:	4a c0       	rjmp	.+148    	; 0x10ce <vfprintf+0x206>
    103a:	1f 7e       	andi	r17, 0xEF	; 239
    103c:	2a e0       	ldi	r18, 0x0A	; 10
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	08 c0       	rjmp	.+16     	; 0x1052 <vfprintf+0x18a>
    1042:	10 61       	ori	r17, 0x10	; 16
    1044:	14 62       	ori	r17, 0x24	; 36
    1046:	20 e1       	ldi	r18, 0x10	; 16
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <vfprintf+0x18a>
    104c:	14 60       	ori	r17, 0x04	; 4
    104e:	20 e1       	ldi	r18, 0x10	; 16
    1050:	32 e0       	ldi	r19, 0x02	; 2
    1052:	53 01       	movw	r10, r6
    1054:	17 ff       	sbrs	r17, 7
    1056:	09 c0       	rjmp	.+18     	; 0x106a <vfprintf+0x1a2>
    1058:	f4 e0       	ldi	r31, 0x04	; 4
    105a:	af 0e       	add	r10, r31
    105c:	b1 1c       	adc	r11, r1
    105e:	f3 01       	movw	r30, r6
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	08 c0       	rjmp	.+16     	; 0x107a <vfprintf+0x1b2>
    106a:	f2 e0       	ldi	r31, 0x02	; 2
    106c:	af 0e       	add	r10, r31
    106e:	b1 1c       	adc	r11, r1
    1070:	f3 01       	movw	r30, r6
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a4 01       	movw	r20, r8
    107c:	23 d1       	rcall	.+582    	; 0x12c4 <__ultoa_invert>
    107e:	08 2f       	mov	r16, r24
    1080:	08 19       	sub	r16, r8
    1082:	16 ff       	sbrs	r17, 6
    1084:	04 c0       	rjmp	.+8      	; 0x108e <vfprintf+0x1c6>
    1086:	b6 01       	movw	r22, r12
    1088:	8d e2       	ldi	r24, 0x2D	; 45
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	bc d0       	rcall	.+376    	; 0x1206 <fputc>
    108e:	14 ff       	sbrs	r17, 4
    1090:	13 c0       	rjmp	.+38     	; 0x10b8 <vfprintf+0x1f0>
    1092:	fe 01       	movw	r30, r28
    1094:	e0 0f       	add	r30, r16
    1096:	f1 1d       	adc	r31, r1
    1098:	80 81       	ld	r24, Z
    109a:	80 33       	cpi	r24, 0x30	; 48
    109c:	69 f0       	breq	.+26     	; 0x10b8 <vfprintf+0x1f0>
    109e:	b6 01       	movw	r22, r12
    10a0:	80 e3       	ldi	r24, 0x30	; 48
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	b0 d0       	rcall	.+352    	; 0x1206 <fputc>
    10a6:	12 ff       	sbrs	r17, 2
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <vfprintf+0x1f0>
    10aa:	10 72       	andi	r17, 0x20	; 32
    10ac:	81 2f       	mov	r24, r17
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	b6 01       	movw	r22, r12
    10b2:	88 5a       	subi	r24, 0xA8	; 168
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	a7 d0       	rcall	.+334    	; 0x1206 <fputc>
    10b8:	01 50       	subi	r16, 0x01	; 1
    10ba:	f4 01       	movw	r30, r8
    10bc:	e0 0f       	add	r30, r16
    10be:	f1 1d       	adc	r31, r1
    10c0:	80 81       	ld	r24, Z
    10c2:	b6 01       	movw	r22, r12
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9f d0       	rcall	.+318    	; 0x1206 <fputc>
    10c8:	01 11       	cpse	r16, r1
    10ca:	f6 cf       	rjmp	.-20     	; 0x10b8 <vfprintf+0x1f0>
    10cc:	29 cf       	rjmp	.-430    	; 0xf20 <vfprintf+0x58>
    10ce:	f6 01       	movw	r30, r12
    10d0:	86 81       	ldd	r24, Z+6	; 0x06
    10d2:	97 81       	ldd	r25, Z+7	; 0x07
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <vfprintf+0x212>
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	9f ef       	ldi	r25, 0xFF	; 255
    10da:	2b 96       	adiw	r28, 0x0b	; 11
    10dc:	ee e0       	ldi	r30, 0x0E	; 14
    10de:	5d c0       	rjmp	.+186    	; 0x119a <__epilogue_restores__+0x8>

000010e0 <__mulhi3>:
    10e0:	00 24       	eor	r0, r0
    10e2:	55 27       	eor	r21, r21
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <__mulhi3+0xe>
    10e6:	08 0e       	add	r0, r24
    10e8:	59 1f       	adc	r21, r25
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	29 f0       	breq	.+10     	; 0x10fc <__mulhi3+0x1c>
    10f2:	76 95       	lsr	r23
    10f4:	67 95       	ror	r22
    10f6:	b8 f3       	brcs	.-18     	; 0x10e6 <__mulhi3+0x6>
    10f8:	71 05       	cpc	r23, r1
    10fa:	b9 f7       	brne	.-18     	; 0x10ea <__mulhi3+0xa>
    10fc:	80 2d       	mov	r24, r0
    10fe:	95 2f       	mov	r25, r21
    1100:	08 95       	ret

00001102 <__mulsi3>:
    1102:	ee 27       	eor	r30, r30
    1104:	ff 27       	eor	r31, r31

00001106 <__mulsi3_helper>:
    1106:	aa 27       	eor	r26, r26
    1108:	bb 27       	eor	r27, r27
    110a:	08 c0       	rjmp	.+16     	; 0x111c <__mulsi3_helper+0x16>
    110c:	a2 0f       	add	r26, r18
    110e:	b3 1f       	adc	r27, r19
    1110:	e4 1f       	adc	r30, r20
    1112:	f5 1f       	adc	r31, r21
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	44 1f       	adc	r20, r20
    111a:	55 1f       	adc	r21, r21
    111c:	96 95       	lsr	r25
    111e:	87 95       	ror	r24
    1120:	77 95       	ror	r23
    1122:	67 95       	ror	r22
    1124:	98 f3       	brcs	.-26     	; 0x110c <__mulsi3_helper+0x6>
    1126:	70 40       	sbci	r23, 0x00	; 0
    1128:	a9 f7       	brne	.-22     	; 0x1114 <__mulsi3_helper+0xe>
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	99 f7       	brne	.-26     	; 0x1114 <__mulsi3_helper+0xe>
    112e:	bd 01       	movw	r22, r26
    1130:	cf 01       	movw	r24, r30
    1132:	08 95       	ret

00001134 <__divmodhi4>:
    1134:	97 fb       	bst	r25, 7
    1136:	07 2e       	mov	r0, r23
    1138:	16 f4       	brtc	.+4      	; 0x113e <__divmodhi4+0xa>
    113a:	00 94       	com	r0
    113c:	06 d0       	rcall	.+12     	; 0x114a <__divmodhi4_neg1>
    113e:	77 fd       	sbrc	r23, 7
    1140:	08 d0       	rcall	.+16     	; 0x1152 <__divmodhi4_neg2>
    1142:	42 d0       	rcall	.+132    	; 0x11c8 <__udivmodhi4>
    1144:	07 fc       	sbrc	r0, 7
    1146:	05 d0       	rcall	.+10     	; 0x1152 <__divmodhi4_neg2>
    1148:	3e f4       	brtc	.+14     	; 0x1158 <__divmodhi4_exit>

0000114a <__divmodhi4_neg1>:
    114a:	90 95       	com	r25
    114c:	81 95       	neg	r24
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	08 95       	ret

00001152 <__divmodhi4_neg2>:
    1152:	70 95       	com	r23
    1154:	61 95       	neg	r22
    1156:	7f 4f       	sbci	r23, 0xFF	; 255

00001158 <__divmodhi4_exit>:
    1158:	08 95       	ret

0000115a <__prologue_saves__>:
    115a:	2f 92       	push	r2
    115c:	3f 92       	push	r3
    115e:	4f 92       	push	r4
    1160:	5f 92       	push	r5
    1162:	6f 92       	push	r6
    1164:	7f 92       	push	r7
    1166:	8f 92       	push	r8
    1168:	9f 92       	push	r9
    116a:	af 92       	push	r10
    116c:	bf 92       	push	r11
    116e:	cf 92       	push	r12
    1170:	df 92       	push	r13
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	ca 1b       	sub	r28, r26
    1184:	db 0b       	sbc	r29, r27
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	09 94       	ijmp

00001192 <__epilogue_restores__>:
    1192:	2a 88       	ldd	r2, Y+18	; 0x12
    1194:	39 88       	ldd	r3, Y+17	; 0x11
    1196:	48 88       	ldd	r4, Y+16	; 0x10
    1198:	5f 84       	ldd	r5, Y+15	; 0x0f
    119a:	6e 84       	ldd	r6, Y+14	; 0x0e
    119c:	7d 84       	ldd	r7, Y+13	; 0x0d
    119e:	8c 84       	ldd	r8, Y+12	; 0x0c
    11a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    11a4:	b9 84       	ldd	r11, Y+9	; 0x09
    11a6:	c8 84       	ldd	r12, Y+8	; 0x08
    11a8:	df 80       	ldd	r13, Y+7	; 0x07
    11aa:	ee 80       	ldd	r14, Y+6	; 0x06
    11ac:	fd 80       	ldd	r15, Y+5	; 0x05
    11ae:	0c 81       	ldd	r16, Y+4	; 0x04
    11b0:	1b 81       	ldd	r17, Y+3	; 0x03
    11b2:	aa 81       	ldd	r26, Y+2	; 0x02
    11b4:	b9 81       	ldd	r27, Y+1	; 0x01
    11b6:	ce 0f       	add	r28, r30
    11b8:	d1 1d       	adc	r29, r1
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	ed 01       	movw	r28, r26
    11c6:	08 95       	ret

000011c8 <__udivmodhi4>:
    11c8:	aa 1b       	sub	r26, r26
    11ca:	bb 1b       	sub	r27, r27
    11cc:	51 e1       	ldi	r21, 0x11	; 17
    11ce:	07 c0       	rjmp	.+14     	; 0x11de <__udivmodhi4_ep>

000011d0 <__udivmodhi4_loop>:
    11d0:	aa 1f       	adc	r26, r26
    11d2:	bb 1f       	adc	r27, r27
    11d4:	a6 17       	cp	r26, r22
    11d6:	b7 07       	cpc	r27, r23
    11d8:	10 f0       	brcs	.+4      	; 0x11de <__udivmodhi4_ep>
    11da:	a6 1b       	sub	r26, r22
    11dc:	b7 0b       	sbc	r27, r23

000011de <__udivmodhi4_ep>:
    11de:	88 1f       	adc	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	5a 95       	dec	r21
    11e4:	a9 f7       	brne	.-22     	; 0x11d0 <__udivmodhi4_loop>
    11e6:	80 95       	com	r24
    11e8:	90 95       	com	r25
    11ea:	bc 01       	movw	r22, r24
    11ec:	cd 01       	movw	r24, r26
    11ee:	08 95       	ret

000011f0 <strchr_P>:
    11f0:	fc 01       	movw	r30, r24
    11f2:	05 90       	lpm	r0, Z+
    11f4:	06 16       	cp	r0, r22
    11f6:	21 f0       	breq	.+8      	; 0x1200 <strchr_P+0x10>
    11f8:	00 20       	and	r0, r0
    11fa:	d9 f7       	brne	.-10     	; 0x11f2 <strchr_P+0x2>
    11fc:	c0 01       	movw	r24, r0
    11fe:	08 95       	ret
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	cf 01       	movw	r24, r30
    1204:	08 95       	ret

00001206 <fputc>:
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	fb 01       	movw	r30, r22
    1210:	23 81       	ldd	r18, Z+3	; 0x03
    1212:	21 fd       	sbrc	r18, 1
    1214:	03 c0       	rjmp	.+6      	; 0x121c <fputc+0x16>
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	9f ef       	ldi	r25, 0xFF	; 255
    121a:	2c c0       	rjmp	.+88     	; 0x1274 <fputc+0x6e>
    121c:	22 ff       	sbrs	r18, 2
    121e:	16 c0       	rjmp	.+44     	; 0x124c <fputc+0x46>
    1220:	46 81       	ldd	r20, Z+6	; 0x06
    1222:	57 81       	ldd	r21, Z+7	; 0x07
    1224:	24 81       	ldd	r18, Z+4	; 0x04
    1226:	35 81       	ldd	r19, Z+5	; 0x05
    1228:	42 17       	cp	r20, r18
    122a:	53 07       	cpc	r21, r19
    122c:	44 f4       	brge	.+16     	; 0x123e <fputc+0x38>
    122e:	a0 81       	ld	r26, Z
    1230:	b1 81       	ldd	r27, Z+1	; 0x01
    1232:	9d 01       	movw	r18, r26
    1234:	2f 5f       	subi	r18, 0xFF	; 255
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	31 83       	std	Z+1, r19	; 0x01
    123a:	20 83       	st	Z, r18
    123c:	8c 93       	st	X, r24
    123e:	26 81       	ldd	r18, Z+6	; 0x06
    1240:	37 81       	ldd	r19, Z+7	; 0x07
    1242:	2f 5f       	subi	r18, 0xFF	; 255
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	37 83       	std	Z+7, r19	; 0x07
    1248:	26 83       	std	Z+6, r18	; 0x06
    124a:	14 c0       	rjmp	.+40     	; 0x1274 <fputc+0x6e>
    124c:	8b 01       	movw	r16, r22
    124e:	ec 01       	movw	r28, r24
    1250:	fb 01       	movw	r30, r22
    1252:	00 84       	ldd	r0, Z+8	; 0x08
    1254:	f1 85       	ldd	r31, Z+9	; 0x09
    1256:	e0 2d       	mov	r30, r0
    1258:	09 95       	icall
    125a:	89 2b       	or	r24, r25
    125c:	e1 f6       	brne	.-72     	; 0x1216 <fputc+0x10>
    125e:	d8 01       	movw	r26, r16
    1260:	16 96       	adiw	r26, 0x06	; 6
    1262:	8d 91       	ld	r24, X+
    1264:	9c 91       	ld	r25, X
    1266:	17 97       	sbiw	r26, 0x07	; 7
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	17 96       	adiw	r26, 0x07	; 7
    126c:	9c 93       	st	X, r25
    126e:	8e 93       	st	-X, r24
    1270:	16 97       	sbiw	r26, 0x06	; 6
    1272:	ce 01       	movw	r24, r28
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <printf_P>:
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e4 e4       	ldi	r30, 0x44	; 68
    1284:	f9 e0       	ldi	r31, 0x09	; 9
    1286:	77 cf       	rjmp	.-274    	; 0x1176 <__prologue_saves__+0x1c>
    1288:	ae 01       	movw	r20, r28
    128a:	49 5f       	subi	r20, 0xF9	; 249
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	da 01       	movw	r26, r20
    1290:	6d 91       	ld	r22, X+
    1292:	7d 91       	ld	r23, X+
    1294:	ad 01       	movw	r20, r26
    1296:	00 e7       	ldi	r16, 0x70	; 112
    1298:	11 e0       	ldi	r17, 0x01	; 1
    129a:	f8 01       	movw	r30, r16
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	93 81       	ldd	r25, Z+3	; 0x03
    12a0:	dc 01       	movw	r26, r24
    12a2:	13 96       	adiw	r26, 0x03	; 3
    12a4:	2c 91       	ld	r18, X
    12a6:	13 97       	sbiw	r26, 0x03	; 3
    12a8:	28 60       	ori	r18, 0x08	; 8
    12aa:	13 96       	adiw	r26, 0x03	; 3
    12ac:	2c 93       	st	X, r18
    12ae:	0c de       	rcall	.-1000   	; 0xec8 <vfprintf>
    12b0:	d8 01       	movw	r26, r16
    12b2:	12 96       	adiw	r26, 0x02	; 2
    12b4:	ed 91       	ld	r30, X+
    12b6:	fc 91       	ld	r31, X
    12b8:	13 97       	sbiw	r26, 0x03	; 3
    12ba:	23 81       	ldd	r18, Z+3	; 0x03
    12bc:	27 7f       	andi	r18, 0xF7	; 247
    12be:	23 83       	std	Z+3, r18	; 0x03
    12c0:	e4 e0       	ldi	r30, 0x04	; 4
    12c2:	75 cf       	rjmp	.-278    	; 0x11ae <__epilogue_restores__+0x1c>

000012c4 <__ultoa_invert>:
    12c4:	fa 01       	movw	r30, r20
    12c6:	aa 27       	eor	r26, r26
    12c8:	28 30       	cpi	r18, 0x08	; 8
    12ca:	61 f1       	breq	.+88     	; 0x1324 <__ultoa_invert+0x60>
    12cc:	20 31       	cpi	r18, 0x10	; 16
    12ce:	91 f1       	breq	.+100    	; 0x1334 <__ultoa_invert+0x70>
    12d0:	e8 94       	clt
    12d2:	6f 93       	push	r22
    12d4:	6e 7f       	andi	r22, 0xFE	; 254
    12d6:	6e 5f       	subi	r22, 0xFE	; 254
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	af 4f       	sbci	r26, 0xFF	; 255
    12e0:	b1 e0       	ldi	r27, 0x01	; 1
    12e2:	40 d0       	rcall	.+128    	; 0x1364 <__ultoa_invert+0xa0>
    12e4:	b4 e0       	ldi	r27, 0x04	; 4
    12e6:	3e d0       	rcall	.+124    	; 0x1364 <__ultoa_invert+0xa0>
    12e8:	67 0f       	add	r22, r23
    12ea:	78 1f       	adc	r23, r24
    12ec:	89 1f       	adc	r24, r25
    12ee:	9a 1f       	adc	r25, r26
    12f0:	a1 1d       	adc	r26, r1
    12f2:	68 0f       	add	r22, r24
    12f4:	79 1f       	adc	r23, r25
    12f6:	8a 1f       	adc	r24, r26
    12f8:	91 1d       	adc	r25, r1
    12fa:	a1 1d       	adc	r26, r1
    12fc:	6a 0f       	add	r22, r26
    12fe:	71 1d       	adc	r23, r1
    1300:	81 1d       	adc	r24, r1
    1302:	91 1d       	adc	r25, r1
    1304:	a1 1d       	adc	r26, r1
    1306:	22 d0       	rcall	.+68     	; 0x134c <__ultoa_invert+0x88>
    1308:	09 f4       	brne	.+2      	; 0x130c <__ultoa_invert+0x48>
    130a:	68 94       	set
    130c:	3f 91       	pop	r19
    130e:	06 2e       	mov	r0, r22
    1310:	00 0c       	add	r0, r0
    1312:	30 19       	sub	r19, r0
    1314:	00 0c       	add	r0, r0
    1316:	00 0c       	add	r0, r0
    1318:	30 19       	sub	r19, r0
    131a:	30 5d       	subi	r19, 0xD0	; 208
    131c:	31 93       	st	Z+, r19
    131e:	ce f6       	brtc	.-78     	; 0x12d2 <__ultoa_invert+0xe>
    1320:	cf 01       	movw	r24, r30
    1322:	08 95       	ret
    1324:	46 2f       	mov	r20, r22
    1326:	47 70       	andi	r20, 0x07	; 7
    1328:	40 5d       	subi	r20, 0xD0	; 208
    132a:	41 93       	st	Z+, r20
    132c:	b3 e0       	ldi	r27, 0x03	; 3
    132e:	0f d0       	rcall	.+30     	; 0x134e <__ultoa_invert+0x8a>
    1330:	c9 f7       	brne	.-14     	; 0x1324 <__ultoa_invert+0x60>
    1332:	f6 cf       	rjmp	.-20     	; 0x1320 <__ultoa_invert+0x5c>
    1334:	46 2f       	mov	r20, r22
    1336:	4f 70       	andi	r20, 0x0F	; 15
    1338:	40 5d       	subi	r20, 0xD0	; 208
    133a:	4a 33       	cpi	r20, 0x3A	; 58
    133c:	18 f0       	brcs	.+6      	; 0x1344 <__ultoa_invert+0x80>
    133e:	49 5d       	subi	r20, 0xD9	; 217
    1340:	31 fd       	sbrc	r19, 1
    1342:	40 52       	subi	r20, 0x20	; 32
    1344:	41 93       	st	Z+, r20
    1346:	02 d0       	rcall	.+4      	; 0x134c <__ultoa_invert+0x88>
    1348:	a9 f7       	brne	.-22     	; 0x1334 <__ultoa_invert+0x70>
    134a:	ea cf       	rjmp	.-44     	; 0x1320 <__ultoa_invert+0x5c>
    134c:	b4 e0       	ldi	r27, 0x04	; 4
    134e:	a6 95       	lsr	r26
    1350:	97 95       	ror	r25
    1352:	87 95       	ror	r24
    1354:	77 95       	ror	r23
    1356:	67 95       	ror	r22
    1358:	ba 95       	dec	r27
    135a:	c9 f7       	brne	.-14     	; 0x134e <__ultoa_invert+0x8a>
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	61 05       	cpc	r22, r1
    1360:	71 05       	cpc	r23, r1
    1362:	08 95       	ret
    1364:	9b 01       	movw	r18, r22
    1366:	ac 01       	movw	r20, r24
    1368:	0a 2e       	mov	r0, r26
    136a:	06 94       	lsr	r0
    136c:	57 95       	ror	r21
    136e:	47 95       	ror	r20
    1370:	37 95       	ror	r19
    1372:	27 95       	ror	r18
    1374:	ba 95       	dec	r27
    1376:	c9 f7       	brne	.-14     	; 0x136a <__ultoa_invert+0xa6>
    1378:	62 0f       	add	r22, r18
    137a:	73 1f       	adc	r23, r19
    137c:	84 1f       	adc	r24, r20
    137e:	95 1f       	adc	r25, r21
    1380:	a0 1d       	adc	r26, r0
    1382:	08 95       	ret

00001384 <_exit>:
    1384:	f8 94       	cli

00001386 <__stop_program>:
    1386:	ff cf       	rjmp	.-2      	; 0x1386 <__stop_program>
