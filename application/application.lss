
application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000010b8  0000114c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000da  00800070  00800070  0000115c  2**0
                  ALLOC
  3 .stab         00002ebc  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d3c  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00004d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002be  00000000  00000000  00004dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012a4  00000000  00000000  00005092  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006bf  00000000  00000000  00006336  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009e8  00000000  00000000  000069f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  000073e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000082d  00000000  00000000  00007520  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006d8  00000000  00000000  00007d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00008425  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	19 c4       	rjmp	.+2098   	; 0x836 <__vector_1>
       4:	92 c0       	rjmp	.+292    	; 0x12a <__bad_interrupt>
       6:	91 c0       	rjmp	.+290    	; 0x12a <__bad_interrupt>
       8:	90 c0       	rjmp	.+288    	; 0x12a <__bad_interrupt>
       a:	8f c0       	rjmp	.+286    	; 0x12a <__bad_interrupt>
       c:	1f c2       	rjmp	.+1086   	; 0x44c <__vector_6>
       e:	8d c0       	rjmp	.+282    	; 0x12a <__bad_interrupt>
      10:	8c c0       	rjmp	.+280    	; 0x12a <__bad_interrupt>
      12:	8b c0       	rjmp	.+278    	; 0x12a <__bad_interrupt>
      14:	8a c0       	rjmp	.+276    	; 0x12a <__bad_interrupt>
      16:	89 c0       	rjmp	.+274    	; 0x12a <__bad_interrupt>
      18:	88 c0       	rjmp	.+272    	; 0x12a <__bad_interrupt>
      1a:	87 c0       	rjmp	.+270    	; 0x12a <__bad_interrupt>
      1c:	86 c0       	rjmp	.+268    	; 0x12a <__bad_interrupt>
      1e:	85 c0       	rjmp	.+266    	; 0x12a <__bad_interrupt>
      20:	84 c0       	rjmp	.+264    	; 0x12a <__bad_interrupt>
      22:	83 c0       	rjmp	.+262    	; 0x12a <__bad_interrupt>
      24:	82 c0       	rjmp	.+260    	; 0x12a <__bad_interrupt>

00000026 <usbDescriptorString0>:
      26:	04 03 09 04                                         ....

0000002a <usbDescriptorStringVendor>:
      2a:	16 03 62 00 69 00 72 00 6b 00 6c 00 65 00 72 00     ..b.i.r.k.l.e.r.
      3a:	2e 00 73 00 65 00                                   ..s.e.

00000040 <usbDescriptorStringDevice>:
      40:	2a 03 42 00 69 00 72 00 6b 00 6c 00 65 00 72 00     *.B.i.r.k.l.e.r.
      50:	20 00 43 00 75 00 72 00 72 00 20 00 4d 00 6f 00      .C.u.r.r. .M.o.
      60:	6e 00 69 00 74 00 6f 00 72 00                       n.i.t.o.r.

0000006a <usbDescriptorDevice>:
      6a:	12 01 10 01 00 00 00 08 42 42 51 e4 02 00 01 02     ........BBQ.....
      7a:	00 01                                               ..

0000007c <usbDescriptorConfiguration>:
      7c:	09 02 22 00 01 01 00 80 fa 09 04 00 00 01 03 00     ..".............
      8c:	00 00 09 21 01 01 00 01 22 4d 00 07 05 81 03 08     ...!...."M......
      9c:	00 32                                               .2

0000009e <usbDescriptorHidReport>:
      9e:	06 00 ff 09 01 a1 01 09 01 67 21 d1 f0 00 15 00     .........g!.....
      ae:	26 ff 0f 35 00 46 ff 0f 85 01 95 01 75 10 b1 02     &..5.F......u...
      be:	09 01 85 02 81 02 66 01 10 27 ff ff 00 00 15 00     ......f..'......
      ce:	85 03 75 10 95 01 09 01 b1 02 85 04 09 01 b1 02     ..u.............
      de:	85 05 09 01 b1 02 85 06 09 01 b1 02 c0              .............

000000eb <__c.1718>:
      eb:	42 6f 6f 74 65 64 21 0a 00                          Booted!..

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf e5       	ldi	r28, 0x5F	; 95
      fa:	d2 e0       	ldi	r29, 0x02	; 2
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
     100:	10 e0       	ldi	r17, 0x00	; 0
     102:	a0 e6       	ldi	r26, 0x60	; 96
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	e8 eb       	ldi	r30, 0xB8	; 184
     108:	f0 e1       	ldi	r31, 0x10	; 16
     10a:	02 c0       	rjmp	.+4      	; 0x110 <.do_copy_data_start>

0000010c <.do_copy_data_loop>:
     10c:	05 90       	lpm	r0, Z+
     10e:	0d 92       	st	X+, r0

00000110 <.do_copy_data_start>:
     110:	a0 37       	cpi	r26, 0x70	; 112
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <.do_copy_data_loop>

00000116 <__do_clear_bss>:
     116:	11 e0       	ldi	r17, 0x01	; 1
     118:	a0 e7       	ldi	r26, 0x70	; 112
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	aa 34       	cpi	r26, 0x4A	; 74
     122:	b1 07       	cpc	r27, r17
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	fd d1       	rcall	.+1018   	; 0x522 <main>
     128:	c5 c7       	rjmp	.+3978   	; 0x10b4 <_exit>

0000012a <__bad_interrupt>:
     12a:	6a cf       	rjmp	.-300    	; 0x0 <__vectors>

0000012c <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     12c:	85 b7       	in	r24, 0x35	; 53
     12e:	82 60       	ori	r24, 0x02	; 2
     130:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     132:	8b b7       	in	r24, 0x3b	; 59
     134:	80 64       	ori	r24, 0x40	; 64
     136:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     138:	8b e4       	ldi	r24, 0x4B	; 75
     13a:	80 93 1a 01 	sts	0x011A, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     13e:	8a e5       	ldi	r24, 0x5A	; 90
     140:	80 93 19 01 	sts	0x0119, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     144:	08 95       	ret

00000146 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     146:	1f 93       	push	r17
     148:	dc 01       	movw	r26, r24
     14a:	16 2f       	mov	r17, r22
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
     14c:	80 91 19 01 	lds	r24, 0x0119
     150:	8e 31       	cpi	r24, 0x1E	; 30
     152:	e1 f0       	breq	.+56     	; 0x18c <usbSetInterrupt+0x46>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     154:	80 91 19 01 	lds	r24, 0x0119
     158:	84 ff       	sbrs	r24, 4
     15a:	07 c0       	rjmp	.+14     	; 0x16a <usbSetInterrupt+0x24>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     15c:	80 91 1a 01 	lds	r24, 0x011A
     160:	98 e8       	ldi	r25, 0x88	; 136
     162:	89 27       	eor	r24, r25
     164:	80 93 1a 01 	sts	0x011A, r24
     168:	03 c0       	rjmp	.+6      	; 0x170 <usbSetInterrupt+0x2a>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     16a:	8a e5       	ldi	r24, 0x5A	; 90
     16c:	80 93 19 01 	sts	0x0119, r24
     170:	91 2f       	mov	r25, r17
     172:	eb e1       	ldi	r30, 0x1B	; 27
     174:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     176:	8d 91       	ld	r24, X+
     178:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     17a:	91 50       	subi	r25, 0x01	; 1
     17c:	e1 f7       	brne	.-8      	; 0x176 <usbSetInterrupt+0x30>
    usbCrc16Append(&txStatus->buffer[1], len);
     17e:	8b e1       	ldi	r24, 0x1B	; 27
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	61 2f       	mov	r22, r17
     184:	41 d3       	rcall	.+1666   	; 0x808 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     186:	1c 5f       	subi	r17, 0xFC	; 252
     188:	10 93 19 01 	sts	0x0119, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     18c:	1f 91       	pop	r17
     18e:	08 95       	ret

00000190 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     196:	60 91 2a 01 	lds	r22, 0x012A
     19a:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     19c:	67 fd       	sbrc	r22, 7
     19e:	e9 c0       	rjmp	.+466    	; 0x372 <__stack+0x113>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     1a0:	80 91 27 01 	lds	r24, 0x0127
     1a4:	cc e0       	ldi	r28, 0x0C	; 12
     1a6:	d0 e0       	ldi	r29, 0x00	; 0
     1a8:	c8 1b       	sub	r28, r24
     1aa:	d1 09       	sbc	r29, r1
     1ac:	c2 5d       	subi	r28, 0xD2	; 210
     1ae:	de 4f       	sbci	r29, 0xFE	; 254
 * 0x2d 00101101 (USBPID_SETUP for setup data)
 * 0xe1 11100001 (USBPID_OUT: data phase of setup transfer)
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
     1b0:	c3 98       	cbi	0x18, 3	; 24
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     1b2:	80 91 26 01 	lds	r24, 0x0126
     1b6:	8d 32       	cpi	r24, 0x2D	; 45
     1b8:	09 f0       	breq	.+2      	; 0x1bc <usbPoll+0x2c>
     1ba:	c9 c0       	rjmp	.+402    	; 0x34e <__stack+0xef>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     1bc:	68 30       	cpi	r22, 0x08	; 8
     1be:	09 f0       	breq	.+2      	; 0x1c2 <usbPoll+0x32>
     1c0:	d6 c0       	rjmp	.+428    	; 0x36e <__stack+0x10f>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     1c2:	83 ec       	ldi	r24, 0xC3	; 195
     1c4:	80 93 0e 01 	sts	0x010E, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     1c8:	8a e5       	ldi	r24, 0x5A	; 90
     1ca:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
     1ce:	10 92 71 00 	sts	0x0071, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     1d2:	98 81       	ld	r25, Y
     1d4:	89 2f       	mov	r24, r25
     1d6:	80 76       	andi	r24, 0x60	; 96
     1d8:	39 f0       	breq	.+14     	; 0x1e8 <usbPoll+0x58>
            replyLen = usbFunctionSetup(data);
     1da:	ce 01       	movw	r24, r28
     1dc:	56 d1       	rcall	.+684    	; 0x48a <usbFunctionSetup>
     1de:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     1e0:	8f 3f       	cpi	r24, 0xFF	; 255
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <usbPoll+0x56>
     1e4:	a3 c0       	rjmp	.+326    	; 0x32c <__stack+0xcd>
     1e6:	a9 c0       	rjmp	.+338    	; 0x33a <__stack+0xdb>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     1e8:	2a 81       	ldd	r18, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
     1ea:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     1ec:	10 92 17 01 	sts	0x0117, r1
    SWITCH_START(rq->bRequest)
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     1f2:	88 23       	and	r24, r24
     1f4:	81 f4       	brne	.+32     	; 0x216 <usbPoll+0x86>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
     1f6:	9f 71       	andi	r25, 0x1F	; 31
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	49 f4       	brne	.+18     	; 0x20e <usbPoll+0x7e>
     1fc:	31 38       	cpi	r19, 0x81	; 129
     1fe:	39 f4       	brne	.+14     	; 0x20e <usbPoll+0x7e>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
     200:	80 91 19 01 	lds	r24, 0x0119
     204:	8e 31       	cpi	r24, 0x1E	; 30
     206:	19 f4       	brne	.+6      	; 0x20e <usbPoll+0x7e>
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 17 01 	sts	0x0117, r24
#endif
        dataPtr[1] = 0;
     20e:	10 92 18 01 	sts	0x0118, r1
     212:	22 e0       	ldi	r18, 0x02	; 2
     214:	84 c0       	rjmp	.+264    	; 0x31e <__stack+0xbf>
        len = 2;
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	11 f0       	breq	.+4      	; 0x21e <usbPoll+0x8e>
     21a:	83 30       	cpi	r24, 0x03	; 3
     21c:	89 f4       	brne	.+34     	; 0x240 <usbPoll+0xb0>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
     21e:	22 23       	and	r18, r18
     220:	09 f0       	breq	.+2      	; 0x224 <usbPoll+0x94>
     222:	7c c0       	rjmp	.+248    	; 0x31c <__stack+0xbd>
     224:	31 38       	cpi	r19, 0x81	; 129
     226:	09 f0       	breq	.+2      	; 0x22a <usbPoll+0x9a>
     228:	79 c0       	rjmp	.+242    	; 0x31c <__stack+0xbd>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	11 f0       	breq	.+4      	; 0x232 <usbPoll+0xa2>
     22e:	8e e1       	ldi	r24, 0x1E	; 30
     230:	01 c0       	rjmp	.+2      	; 0x234 <usbPoll+0xa4>
     232:	8a e5       	ldi	r24, 0x5A	; 90
     234:	80 93 19 01 	sts	0x0119, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     238:	8b e4       	ldi	r24, 0x4B	; 75
     23a:	80 93 1a 01 	sts	0x011A, r24
     23e:	6e c0       	rjmp	.+220    	; 0x31c <__stack+0xbd>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     240:	85 30       	cpi	r24, 0x05	; 5
     242:	19 f4       	brne	.+6      	; 0x24a <usbPoll+0xba>
        usbNewDeviceAddr = value;
     244:	20 93 2b 01 	sts	0x012B, r18
     248:	69 c0       	rjmp	.+210    	; 0x31c <__stack+0xbd>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     24a:	86 30       	cpi	r24, 0x06	; 6
     24c:	09 f0       	breq	.+2      	; 0x250 <usbPoll+0xc0>
     24e:	4f c0       	rjmp	.+158    	; 0x2ee <__stack+0x8f>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     250:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	41 f4       	brne	.+16     	; 0x266 <__stack+0x7>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     256:	8a e6       	ldi	r24, 0x6A	; 106
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	90 93 29 01 	sts	0x0129, r25
     25e:	80 93 28 01 	sts	0x0128, r24
     262:	22 e1       	ldi	r18, 0x12	; 18
     264:	40 c0       	rjmp	.+128    	; 0x2e6 <__stack+0x87>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     266:	82 30       	cpi	r24, 0x02	; 2
     268:	41 f4       	brne	.+16     	; 0x27a <__stack+0x1b>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     26a:	8c e7       	ldi	r24, 0x7C	; 124
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 29 01 	sts	0x0129, r25
     272:	80 93 28 01 	sts	0x0128, r24
     276:	22 e2       	ldi	r18, 0x22	; 34
     278:	36 c0       	rjmp	.+108    	; 0x2e6 <__stack+0x87>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	f9 f4       	brne	.+62     	; 0x2bc <__stack+0x5d>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     280:	88 23       	and	r24, r24
     282:	41 f4       	brne	.+16     	; 0x294 <__stack+0x35>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     284:	86 e2       	ldi	r24, 0x26	; 38
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	90 93 29 01 	sts	0x0129, r25
     28c:	80 93 28 01 	sts	0x0128, r24
     290:	24 e0       	ldi	r18, 0x04	; 4
     292:	29 c0       	rjmp	.+82     	; 0x2e6 <__stack+0x87>
        SWITCH_CASE(1)
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	41 f4       	brne	.+16     	; 0x2a8 <__stack+0x49>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     298:	8a e2       	ldi	r24, 0x2A	; 42
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	90 93 29 01 	sts	0x0129, r25
     2a0:	80 93 28 01 	sts	0x0128, r24
     2a4:	26 e1       	ldi	r18, 0x16	; 22
     2a6:	1f c0       	rjmp	.+62     	; 0x2e6 <__stack+0x87>
        SWITCH_CASE(2)
     2a8:	82 30       	cpi	r24, 0x02	; 2
     2aa:	e1 f4       	brne	.+56     	; 0x2e4 <__stack+0x85>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     2ac:	80 e4       	ldi	r24, 0x40	; 64
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 29 01 	sts	0x0129, r25
     2b4:	80 93 28 01 	sts	0x0128, r24
     2b8:	2a e2       	ldi	r18, 0x2A	; 42
     2ba:	15 c0       	rjmp	.+42     	; 0x2e6 <__stack+0x87>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     2bc:	81 32       	cpi	r24, 0x21	; 33
     2be:	41 f4       	brne	.+16     	; 0x2d0 <__stack+0x71>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     2c0:	8e e8       	ldi	r24, 0x8E	; 142
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	90 93 29 01 	sts	0x0129, r25
     2c8:	80 93 28 01 	sts	0x0128, r24
     2cc:	29 e0       	ldi	r18, 0x09	; 9
     2ce:	0b c0       	rjmp	.+22     	; 0x2e6 <__stack+0x87>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     2d0:	82 32       	cpi	r24, 0x22	; 34
     2d2:	41 f4       	brne	.+16     	; 0x2e4 <__stack+0x85>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     2d4:	8e e9       	ldi	r24, 0x9E	; 158
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	90 93 29 01 	sts	0x0129, r25
     2dc:	80 93 28 01 	sts	0x0128, r24
     2e0:	2d e4       	ldi	r18, 0x4D	; 77
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <__stack+0x87>
     2e4:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     2e6:	80 e4       	ldi	r24, 0x40	; 64
     2e8:	80 93 71 00 	sts	0x0071, r24
     2ec:	26 c0       	rjmp	.+76     	; 0x33a <__stack+0xdb>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     2ee:	88 30       	cpi	r24, 0x08	; 8
     2f0:	21 f4       	brne	.+8      	; 0x2fa <__stack+0x9b>
     2f2:	21 e0       	ldi	r18, 0x01	; 1
     2f4:	8d e2       	ldi	r24, 0x2D	; 45
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	14 c0       	rjmp	.+40     	; 0x322 <__stack+0xc3>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     2fa:	89 30       	cpi	r24, 0x09	; 9
     2fc:	19 f4       	brne	.+6      	; 0x304 <__stack+0xa5>
        usbConfiguration = value;
     2fe:	20 93 2d 01 	sts	0x012D, r18
     302:	09 c0       	rjmp	.+18     	; 0x316 <__stack+0xb7>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     304:	8a 30       	cpi	r24, 0x0A	; 10
     306:	11 f4       	brne	.+4      	; 0x30c <__stack+0xad>
     308:	21 e0       	ldi	r18, 0x01	; 1
     30a:	09 c0       	rjmp	.+18     	; 0x31e <__stack+0xbf>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     30c:	8b 30       	cpi	r24, 0x0B	; 11
     30e:	31 f4       	brne	.+12     	; 0x31c <__stack+0xbd>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     310:	8b e4       	ldi	r24, 0x4B	; 75
     312:	80 93 1a 01 	sts	0x011A, r24
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     316:	8a e5       	ldi	r24, 0x5A	; 90
     318:	80 93 19 01 	sts	0x0119, r24
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	87 e1       	ldi	r24, 0x17	; 23
     320:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     322:	90 93 29 01 	sts	0x0129, r25
     326:	80 93 28 01 	sts	0x0128, r24
     32a:	07 c0       	rjmp	.+14     	; 0x33a <__stack+0xdb>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     32c:	88 81       	ld	r24, Y
     32e:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     330:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     332:	80 e8       	ldi	r24, 0x80	; 128
     334:	80 93 71 00 	sts	0x0071, r24
     338:	06 c0       	rjmp	.+12     	; 0x346 <__stack+0xe7>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     33a:	8f 81       	ldd	r24, Y+7	; 0x07
     33c:	88 23       	and	r24, r24
     33e:	19 f4       	brne	.+6      	; 0x346 <__stack+0xe7>
     340:	8e 81       	ldd	r24, Y+6	; 0x06
     342:	82 17       	cp	r24, r18
     344:	08 f0       	brcs	.+2      	; 0x348 <__stack+0xe9>
     346:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     348:	80 93 61 00 	sts	0x0061, r24
     34c:	10 c0       	rjmp	.+32     	; 0x36e <__stack+0x10f>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     34e:	80 91 71 00 	lds	r24, 0x0071
     352:	87 ff       	sbrs	r24, 7
     354:	0c c0       	rjmp	.+24     	; 0x36e <__stack+0x10f>
            uchar rval = usbFunctionWrite(data, len);
     356:	ce 01       	movw	r24, r28
     358:	c2 d0       	rcall	.+388    	; 0x4de <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     35a:	8f 3f       	cpi	r24, 0xFF	; 255
     35c:	21 f4       	brne	.+8      	; 0x366 <__stack+0x107>
                usbTxLen = USBPID_STALL;
     35e:	8e e1       	ldi	r24, 0x1E	; 30
     360:	80 93 60 00 	sts	0x0060, r24
     364:	04 c0       	rjmp	.+8      	; 0x36e <__stack+0x10f>
            }else if(rval != 0){    /* This was the final package */
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <__stack+0x10f>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     36a:	10 92 61 00 	sts	0x0061, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     36e:	10 92 2a 01 	sts	0x012A, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     372:	80 91 60 00 	lds	r24, 0x0060
     376:	84 ff       	sbrs	r24, 4
     378:	49 c0       	rjmp	.+146    	; 0x40c <__stack+0x1ad>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     37a:	80 91 61 00 	lds	r24, 0x0061
     37e:	8f 3f       	cpi	r24, 0xFF	; 255
     380:	09 f4       	brne	.+2      	; 0x384 <__stack+0x125>
     382:	44 c0       	rjmp	.+136    	; 0x40c <__stack+0x1ad>
     384:	18 2f       	mov	r17, r24
     386:	89 30       	cpi	r24, 0x09	; 9
     388:	08 f0       	brcs	.+2      	; 0x38c <__stack+0x12d>
     38a:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     38c:	81 1b       	sub	r24, r17
     38e:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     392:	80 91 0e 01 	lds	r24, 0x010E
     396:	98 e8       	ldi	r25, 0x88	; 136
     398:	89 27       	eor	r24, r25
     39a:	80 93 0e 01 	sts	0x010E, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     39e:	11 23       	and	r17, r17
     3a0:	41 f1       	breq	.+80     	; 0x3f2 <__stack+0x193>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
     3a2:	20 91 28 01 	lds	r18, 0x0128
     3a6:	30 91 29 01 	lds	r19, 0x0129
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     3aa:	80 91 71 00 	lds	r24, 0x0071
     3ae:	86 ff       	sbrs	r24, 6
     3b0:	0d c0       	rjmp	.+26     	; 0x3cc <__stack+0x16d>
     3b2:	af e0       	ldi	r26, 0x0F	; 15
     3b4:	b1 e0       	ldi	r27, 0x01	; 1
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     3ba:	f9 01       	movw	r30, r18
     3bc:	e8 0f       	add	r30, r24
     3be:	f9 1f       	adc	r31, r25
     3c0:	e4 91       	lpm	r30, Z+
                    *data++ = c;
     3c2:	ed 93       	st	X+, r30
     3c4:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
     3c6:	18 17       	cp	r17, r24
     3c8:	c1 f7       	brne	.-16     	; 0x3ba <__stack+0x15b>
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <__stack+0x17d>
     3cc:	91 2f       	mov	r25, r17
     3ce:	d9 01       	movw	r26, r18
     3d0:	ef e0       	ldi	r30, 0x0F	; 15
     3d2:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
     3d4:	8d 91       	ld	r24, X+
     3d6:	81 93       	st	Z+, r24
                }while(--i);
     3d8:	91 50       	subi	r25, 0x01	; 1
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <__stack+0x175>
     3dc:	11 50       	subi	r17, 0x01	; 1
     3de:	81 2f       	mov	r24, r17
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	1f 5f       	subi	r17, 0xFF	; 255
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	82 0f       	add	r24, r18
     3e8:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
     3ea:	90 93 29 01 	sts	0x0129, r25
     3ee:	80 93 28 01 	sts	0x0128, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     3f2:	8f e0       	ldi	r24, 0x0F	; 15
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	61 2f       	mov	r22, r17
     3f8:	07 d2       	rcall	.+1038   	; 0x808 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     3fa:	61 2f       	mov	r22, r17
     3fc:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     3fe:	6c 30       	cpi	r22, 0x0C	; 12
     400:	19 f0       	breq	.+6      	; 0x408 <__stack+0x1a9>
            usbMsgLen = USB_NO_MSG;
     402:	8f ef       	ldi	r24, 0xFF	; 255
     404:	80 93 61 00 	sts	0x0061, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
     408:	60 93 60 00 	sts	0x0060, r22
     40c:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
     40e:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
     410:	84 74       	andi	r24, 0x44	; 68
     412:	49 f4       	brne	.+18     	; 0x426 <__stack+0x1c7>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     414:	91 50       	subi	r25, 0x01	; 1
     416:	d9 f7       	brne	.-10     	; 0x40e <__stack+0x1af>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     418:	10 92 2b 01 	sts	0x012B, r1
    usbDeviceAddr = 0;
     41c:	10 92 25 01 	sts	0x0125, r1
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     420:	8a e5       	ldi	r24, 0x5A	; 90
     422:	80 93 19 01 	sts	0x0119, r24

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
     426:	10 e0       	ldi	r17, 0x00	; 0
     428:	99 23       	and	r25, r25
     42a:	09 f4       	brne	.+2      	; 0x42e <__stack+0x1cf>
     42c:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
     42e:	80 91 70 00 	lds	r24, 0x0070
     432:	81 17       	cp	r24, r17
     434:	39 f0       	breq	.+14     	; 0x444 <__stack+0x1e5>
        USB_RESET_HOOK(isReset);
     436:	11 23       	and	r17, r17
     438:	19 f4       	brne	.+6      	; 0x440 <__stack+0x1e1>
     43a:	f8 94       	cli
     43c:	0f d1       	rcall	.+542    	; 0x65c <calibrateOscillator>
     43e:	78 94       	sei
        wasReset = isReset;
     440:	10 93 70 00 	sts	0x0070, r17
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	08 95       	ret

0000044c <__vector_6>:
static report_id_t received_reportId;
static uchar reportBuffer[2]; /* buffer for HID reports */
static uchar idleRate; /* in 4 ms units */

ISR(TIMER0_OVF_vect)
{
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
}
     456:	0f 90       	pop	r0
     458:	0f be       	out	0x3f, r0	; 63
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <usb_putchar>:

static FILE usb_stream = FDEV_SETUP_STREAM2(usb_putchar, NULL, _FDEV_SETUP_WRITE,&usb_stream_buffer);


static int usb_putchar(char c, FILE *stream)
{
     460:	98 2f       	mov	r25, r24
     462:	fb 01       	movw	r30, r22
	usb_stream_buffer_t* s = fdev_get_udata(stream);
     464:	a4 85       	ldd	r26, Z+12	; 0x0c
     466:	b5 85       	ldd	r27, Z+13	; 0x0d
	if (c == '\n') c = '\r';
     468:	8a 30       	cpi	r24, 0x0A	; 10
     46a:	09 f4       	brne	.+2      	; 0x46e <usb_putchar+0xe>
     46c:	9d e0       	ldi	r25, 0x0D	; 13
	s->data[s->pos++] = c;
     46e:	16 96       	adiw	r26, 0x06	; 6
     470:	8c 91       	ld	r24, X
     472:	16 97       	sbiw	r26, 0x06	; 6
     474:	fd 01       	movw	r30, r26
     476:	e8 0f       	add	r30, r24
     478:	f1 1d       	adc	r31, r1
     47a:	97 83       	std	Z+7, r25	; 0x07
	s->pos %= sizeof(s->data);
     47c:	8f 5f       	subi	r24, 0xFF	; 255
     47e:	8f 77       	andi	r24, 0x7F	; 127
     480:	16 96       	adiw	r26, 0x06	; 6
     482:	8c 93       	st	X, r24
	return 0;
}
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	08 95       	ret

0000048a <usbFunctionSetup>:



uchar usbFunctionSetup(uchar data[8])
{
	usbRequest_t* rq = (void *)data;
     48a:	fc 01       	movw	r30, r24
	usbMsgPtr = reportBuffer;
     48c:	83 e7       	ldi	r24, 0x73	; 115
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	90 93 29 01 	sts	0x0129, r25
     494:	80 93 28 01 	sts	0x0128, r24
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID class request */
     498:	80 81       	ld	r24, Z
     49a:	80 76       	andi	r24, 0x60	; 96
     49c:	80 32       	cpi	r24, 0x20	; 32
     49e:	d9 f4       	brne	.+54     	; 0x4d6 <usbFunctionSetup+0x4c>
		/* class request type */
		if(rq->bRequest == USBRQ_HID_GET_REPORT)
     4a0:	81 81       	ldd	r24, Z+1	; 0x01
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	11 f0       	breq	.+4      	; 0x4aa <usbFunctionSetup+0x20>
		{
			/* wValue: ReportType (highbyte), ReportID (lowbyte) */
			received_reportId = rq->wValue.bytes[0];
			return USB_NO_MSG;
		}
		else if(rq->bRequest == USBRQ_HID_SET_REPORT)
     4a6:	89 30       	cpi	r24, 0x09	; 9
     4a8:	29 f4       	brne	.+10     	; 0x4b4 <usbFunctionSetup+0x2a>
		{
			/* wValue: ReportType (highbyte), ReportID (lowbyte) */
			received_reportId = rq->wValue.bytes[0];
     4aa:	82 81       	ldd	r24, Z+2	; 0x02
     4ac:	80 93 72 00 	sts	0x0072, r24
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	08 95       	ret
			return USB_NO_MSG;
		}
		else if(rq->bRequest == USBRQ_HID_GET_IDLE)
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	41 f4       	brne	.+16     	; 0x4c8 <usbFunctionSetup+0x3e>
		{
			usbMsgPtr = &idleRate;
     4b8:	85 e7       	ldi	r24, 0x75	; 117
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	90 93 29 01 	sts	0x0129, r25
     4c0:	80 93 28 01 	sts	0x0128, r24
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	08 95       	ret
			return 1;
		}
		else if(rq->bRequest == USBRQ_HID_SET_IDLE)
     4c8:	8a 30       	cpi	r24, 0x0A	; 10
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <usbFunctionSetup+0x4c>
		{
			idleRate = rq->wValue.bytes[1];
     4cc:	83 81       	ldd	r24, Z+3	; 0x03
     4ce:	80 93 75 00 	sts	0x0075, r24
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret
     4d6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		/* no vendor specific requests implemented */
	}
	return 0;
}
     4d8:	08 95       	ret

000004da <usbFunctionRead>:
			break;
		default:
			break;
	}
	return 1;
}
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	08 95       	ret

000004de <usbFunctionWrite>:


uchar usbFunctionWrite(uchar *data, uchar len)
{
     4de:	fc 01       	movw	r30, r24
	milliseconds_t delay = data[0] | data[1] << 8;
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	20 81       	ld	r18, Z
     4e6:	62 2f       	mov	r22, r18
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	68 2b       	or	r22, r24
     4ec:	79 2b       	or	r23, r25
	switch (received_reportId) {
     4ee:	80 91 72 00 	lds	r24, 0x0072
     4f2:	84 30       	cpi	r24, 0x04	; 4
     4f4:	61 f0       	breq	.+24     	; 0x50e <usbFunctionWrite+0x30>
     4f6:	85 30       	cpi	r24, 0x05	; 5
     4f8:	18 f4       	brcc	.+6      	; 0x500 <usbFunctionWrite+0x22>
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	71 f4       	brne	.+28     	; 0x51a <usbFunctionWrite+0x3c>
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <usbFunctionWrite+0x2c>
     500:	85 30       	cpi	r24, 0x05	; 5
     502:	39 f0       	breq	.+14     	; 0x512 <usbFunctionWrite+0x34>
     504:	86 30       	cpi	r24, 0x06	; 6
     506:	49 f4       	brne	.+18     	; 0x51a <usbFunctionWrite+0x3c>
     508:	06 c0       	rjmp	.+12     	; 0x516 <usbFunctionWrite+0x38>
		case report_id_relay_battery_on:
			Timer_Set(TIMER_RELAY_BATTERY_ON,delay);
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	05 c0       	rjmp	.+10     	; 0x518 <usbFunctionWrite+0x3a>
			break;
		case report_id_relay_battery_off:
			Timer_Set(TIMER_RELAY_BATTERY_OFF,delay);
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	03 c0       	rjmp	.+6      	; 0x518 <usbFunctionWrite+0x3a>
			break;
		case report_id_relay_usb_on:
			Timer_Set(TIMER_RELAY_USB_ON,delay);
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	01 c0       	rjmp	.+2      	; 0x518 <usbFunctionWrite+0x3a>
			break;
		case report_id_relay_usb_off:
			Timer_Set(TIMER_RELAY_USB_OFF,delay);
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	49 d1       	rcall	.+658    	; 0x7ac <Timer_Set>
			break;
		default:
			break;
	}
	received_reportId = report_id_none;
     51a:	10 92 72 00 	sts	0x0072, r1
	return 1;
}
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	08 95       	ret

00000522 <main>:
	self_test_relay3_off,
	self_test_end
} self_test_state_t;

int main(void)
{
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17


#ifndef __ASSEMBLER__

static inline void hardwareInit(void) {
	LED_RED_INIT();
     528:	bb 9a       	sbi	0x17, 3	; 23
     52a:	c3 98       	cbi	0x18, 3	; 24
     52c:	c3 98       	cbi	0x18, 3	; 24
	LED_BUTTON_INIT();
     52e:	b9 9a       	sbi	0x17, 1	; 23
     530:	c1 98       	cbi	0x18, 1	; 24
     532:	c1 98       	cbi	0x18, 1	; 24
	TIMER0_INIT();
     534:	15 ba       	out	0x15, r1	; 21
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	83 bf       	out	0x33, r24	; 51
	BUTTON_INIT();
     53a:	d4 98       	cbi	0x1a, 4	; 26
     53c:	dc 9a       	sbi	0x1b, 4	; 27
	POT_INIT();
     53e:	8a b3       	in	r24, 0x1a	; 26
     540:	8e 6f       	ori	r24, 0xFE	; 254
     542:	8a bb       	out	0x1a, r24	; 26
     544:	d1 98       	cbi	0x1a, 1	; 26
     546:	d9 98       	cbi	0x1b, 1	; 27
	self_test_state_t self_test_state = self_test_init;
	hardwareInit();
	stdout = &usb_stream;
     548:	82 e6       	ldi	r24, 0x62	; 98
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	90 93 47 01 	sts	0x0147, r25
     550:	80 93 46 01 	sts	0x0146, r24
	usbDeviceDisconnect();
     554:	bc 98       	cbi	0x17, 4	; 23
     556:	c4 98       	cbi	0x18, 4	; 24
		i = 0;
		while (--i)
			; /* delay >10ms for USB reset */
	}

	wdt_enable(WDTO_2S);
     558:	2f e0       	ldi	r18, 0x0F	; 15
     55a:	88 e1       	ldi	r24, 0x18	; 24
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	a8 95       	wdr
     564:	81 bd       	out	0x21, r24	; 33
     566:	0f be       	out	0x3f, r0	; 63
     568:	21 bd       	out	0x21, r18	; 33
  	odDebugInit();
	usbInit();
     56a:	e0 dd       	rcall	.-1088   	; 0x12c <usbInit>

	sei();
     56c:	78 94       	sei
	usbDeviceConnect();
     56e:	bc 9a       	sbi	0x17, 4	; 23
     570:	c4 9a       	sbi	0x18, 4	; 24
	LED_RED_ON();
     572:	c3 9a       	sbi	0x18, 3	; 24
	POT_INIT();
     574:	8a b3       	in	r24, 0x1a	; 26
     576:	8e 6f       	ori	r24, 0xFE	; 254
     578:	8a bb       	out	0x1a, r24	; 26
     57a:	d1 98       	cbi	0x1a, 1	; 26
     57c:	d9 98       	cbi	0x1b, 1	; 27
	Timer_Set(TIMER_LED_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	60 ed       	ldi	r22, 0xD0	; 208
     582:	77 e0       	ldi	r23, 0x07	; 7
     584:	13 d1       	rcall	.+550    	; 0x7ac <Timer_Set>
	Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     586:	85 e0       	ldi	r24, 0x05	; 5
     588:	60 ed       	ldi	r22, 0xD0	; 208
     58a:	77 e0       	ldi	r23, 0x07	; 7
     58c:	0f d1       	rcall	.+542    	; 0x7ac <Timer_Set>
	Timer_Set(TIMER_SELF_TEST,TIMER_SELF_TEST_TIMEOUT);
     58e:	87 e0       	ldi	r24, 0x07	; 7
     590:	6c e2       	ldi	r22, 0x2C	; 44
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	0b d1       	rcall	.+534    	; 0x7ac <Timer_Set>
	//Timer_Reset(TIMER_SELF_TEST);
	Timer_Reset(TIMER_RELAY_USB_ON);
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	f5 d0       	rcall	.+490    	; 0x784 <Timer_Reset>
	Timer_Reset(TIMER_RELAY_USB_OFF);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	f3 d0       	rcall	.+486    	; 0x784 <Timer_Reset>
	Timer_Reset(TIMER_RELAY_BATTERY_ON);
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	f1 d0       	rcall	.+482    	; 0x784 <Timer_Reset>
	Timer_Reset(TIMER_RELAY_BATTERY_OFF);
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	ef d0       	rcall	.+478    	; 0x784 <Timer_Reset>
	printf_P(PSTR("Booted!\n"));
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <main+0x86>
     5a8:	8b ee       	ldi	r24, 0xEB	; 235
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	ed b7       	in	r30, 0x3d	; 61
     5ae:	fe b7       	in	r31, 0x3e	; 62
     5b0:	92 83       	std	Z+2, r25	; 0x02
     5b2:	81 83       	std	Z+1, r24	; 0x01
     5b4:	b9 d2       	rcall	.+1394   	; 0xb28 <printf_P>
     5b6:	10 e0       	ldi	r17, 0x00	; 0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0

		//LED Timer
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_LED_BLINK)) {
			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
			LED_RED_CHANGE();
     5bc:	88 e0       	ldi	r24, 0x08	; 8
     5be:	f8 2e       	mov	r15, r24
	printf_P(PSTR("Booted!\n"));
	// main event loop
	for (;;)
	{
		//Watchdog
		wdt_reset();
     5c0:	a8 95       	wdr


		//Timers
		/////////////////////////////////////////////////////
		if (TIFR & _BV(TOV0)) {
     5c2:	08 b6       	in	r0, 0x38	; 56
     5c4:	01 fe       	sbrs	r0, 1
     5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <main+0xb2>
			TIFR |= _BV(TOV0);
     5c8:	88 b7       	in	r24, 0x38	; 56
     5ca:	82 60       	ori	r24, 0x02	; 2
     5cc:	88 bf       	out	0x38, r24	; 56
			Timers_DecreaseAll(TIMER0_OVERFLOW_PERIOD_MS_X256);
     5ce:	88 ef       	ldi	r24, 0xF8	; 248
     5d0:	93 e0       	ldi	r25, 0x03	; 3
     5d2:	92 d0       	rcall	.+292    	; 0x6f8 <Timers_DecreaseAll>
		}

		//usb
		/////////////////////////////////////////////////////
		usbPoll();
     5d4:	dd dd       	rcall	.-1094   	; 0x190 <usbPoll>

		//USB interrupt
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_DATA_CHANGE) && usbInterruptIsReady())
     5d6:	86 e0       	ldi	r24, 0x06	; 6
     5d8:	c0 d0       	rcall	.+384    	; 0x75a <Timer_HasExpired>
     5da:	89 2b       	or	r24, r25
     5dc:	51 f0       	breq	.+20     	; 0x5f2 <main+0xd0>
     5de:	80 91 19 01 	lds	r24, 0x0119
     5e2:	84 ff       	sbrs	r24, 4
     5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <main+0xd0>
		{
			Timer_Reset(TIMER_DATA_CHANGE);
     5e6:	86 e0       	ldi	r24, 0x06	; 6
     5e8:	cd d0       	rcall	.+410    	; 0x784 <Timer_Reset>
			/* use last key and not current key status in order to avoid lost changes in key status. */
			//buildReport(0);
			usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
     5ea:	83 e7       	ldi	r24, 0x73	; 115
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	62 e0       	ldi	r22, 0x02	; 2
     5f0:	aa dd       	rcall	.-1196   	; 0x146 <usbSetInterrupt>
		}

		//LED Timer
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_LED_BLINK)) {
     5f2:	84 e0       	ldi	r24, 0x04	; 4
     5f4:	b2 d0       	rcall	.+356    	; 0x75a <Timer_HasExpired>
     5f6:	89 2b       	or	r24, r25
     5f8:	39 f0       	breq	.+14     	; 0x608 <main+0xe6>
			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
     5fa:	84 e0       	ldi	r24, 0x04	; 4
     5fc:	64 ef       	ldi	r22, 0xF4	; 244
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	d5 d0       	rcall	.+426    	; 0x7ac <Timer_Set>
			LED_RED_CHANGE();
     602:	88 b3       	in	r24, 0x18	; 24
     604:	8f 25       	eor	r24, r15
     606:	88 bb       	out	0x18, r24	; 24
		}
		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
     608:	85 e0       	ldi	r24, 0x05	; 5
     60a:	a7 d0       	rcall	.+334    	; 0x75a <Timer_HasExpired>
     60c:	89 2b       	or	r24, r25
     60e:	41 f0       	breq	.+16     	; 0x620 <main+0xfe>
			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
     610:	85 e0       	ldi	r24, 0x05	; 5
     612:	6a ef       	ldi	r22, 0xFA	; 250
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	ca d0       	rcall	.+404    	; 0x7ac <Timer_Set>
			LED_BUTTON_CHANGE();
     618:	88 b3       	in	r24, 0x18	; 24
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	89 27       	eor	r24, r25
     61e:	88 bb       	out	0x18, r24	; 24
		}

		if (BUTTON_IS_PRESSED()) {
     620:	cc 9b       	sbis	0x19, 4	; 25
			LED_BUTTON_ON();
     622:	c1 9a       	sbi	0x18, 1	; 24
		}


		//Self test
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_SELF_TEST)) {
     624:	87 e0       	ldi	r24, 0x07	; 7
     626:	99 d0       	rcall	.+306    	; 0x75a <Timer_HasExpired>
     628:	89 2b       	or	r24, r25
     62a:	11 f4       	brne	.+4      	; 0x630 <main+0x10e>
     62c:	01 2f       	mov	r16, r17
     62e:	0a c0       	rjmp	.+20     	; 0x644 <main+0x122>
			Timer_Set(TIMER_SELF_TEST,TIMER_SELF_TEST_TIMEOUT);
     630:	87 e0       	ldi	r24, 0x07	; 7
     632:	6c e2       	ldi	r22, 0x2C	; 44
     634:	71 e0       	ldi	r23, 0x01	; 1
     636:	ba d0       	rcall	.+372    	; 0x7ac <Timer_Set>
			switch (self_test_state++) {
     638:	01 2f       	mov	r16, r17
     63a:	0f 5f       	subi	r16, 0xFF	; 255
     63c:	15 30       	cpi	r17, 0x05	; 5
     63e:	10 f0       	brcs	.+4      	; 0x644 <main+0x122>
			case self_test_relay3_off:
				break;
			case self_test_init:
				break;
			default:
				Timer_Reset(TIMER_SELF_TEST);
     640:	87 e0       	ldi	r24, 0x07	; 7
     642:	a0 d0       	rcall	.+320    	; 0x784 <Timer_Reset>
     644:	10 e0       	ldi	r17, 0x00	; 0

		//Timer
		/////////////////////////////////////////////////////
		for (int t = TIMER_RELAY_USB_ON ; t <= TIMER_RELAY_BATTERY_OFF ; t++)
		{
			if (Timer_HasExpired(t)) {
     646:	81 2f       	mov	r24, r17
     648:	88 d0       	rcall	.+272    	; 0x75a <Timer_HasExpired>
     64a:	89 2b       	or	r24, r25
     64c:	11 f0       	breq	.+4      	; 0x652 <main+0x130>
				Timer_Reset(t);
     64e:	81 2f       	mov	r24, r17
     650:	99 d0       	rcall	.+306    	; 0x784 <Timer_Reset>
     652:	1f 5f       	subi	r17, 0xFF	; 255
			}
		}

		//Timer
		/////////////////////////////////////////////////////
		for (int t = TIMER_RELAY_USB_ON ; t <= TIMER_RELAY_BATTERY_OFF ; t++)
     654:	14 30       	cpi	r17, 0x04	; 4
     656:	b9 f7       	brne	.-18     	; 0x646 <main+0x124>
     658:	10 2f       	mov	r17, r16
     65a:	b2 cf       	rjmp	.-156    	; 0x5c0 <main+0x9e>

0000065c <calibrateOscillator>:
 * signal (a single SE0 bit) repeating every millisecond immediately after
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	80 e8       	ldi	r24, 0x80	; 128
     66a:	f8 2e       	mov	r15, r24
     66c:	00 e0       	ldi	r16, 0x00	; 0
     66e:	c0 e0       	ldi	r28, 0x00	; 0
     670:	d0 e0       	ldi	r29, 0x00	; 0
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
     672:	10 2f       	mov	r17, r16
     674:	1f 0d       	add	r17, r15
     676:	11 bf       	out	0x31, r17	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
     678:	cb d0       	rcall	.+406    	; 0x810 <usbMeasureFrameLength>
     67a:	9c 01       	movw	r18, r24
        if(x < targetValue)             /* frequency still too low */
     67c:	89 e0       	ldi	r24, 0x09	; 9
     67e:	24 33       	cpi	r18, 0x34	; 52
     680:	38 07       	cpc	r19, r24
     682:	0c f0       	brlt	.+2      	; 0x686 <calibrateOscillator+0x2a>
     684:	10 2f       	mov	r17, r16
            trialValue += step;
        step >>= 1;
     686:	f6 94       	lsr	r15
     688:	21 96       	adiw	r28, 0x01	; 1
    }while(step > 0);
     68a:	c8 30       	cpi	r28, 0x08	; 8
     68c:	d1 05       	cpc	r29, r1
     68e:	11 f0       	breq	.+4      	; 0x694 <calibrateOscillator+0x38>
     690:	01 2f       	mov	r16, r17
     692:	ef cf       	rjmp	.-34     	; 0x672 <calibrateOscillator+0x16>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     694:	11 50       	subi	r17, 0x01	; 1
     696:	11 bf       	out	0x31, r17	; 49
     698:	1f 5f       	subi	r17, 0xFF	; 255
     69a:	79 01       	movw	r14, r18
     69c:	c1 2f       	mov	r28, r17
     69e:	d0 e0       	ldi	r29, 0x00	; 0
     6a0:	21 96       	adiw	r28, 0x01	; 1
     6a2:	10 c0       	rjmp	.+32     	; 0x6c4 <calibrateOscillator+0x68>
        x = usbMeasureFrameLength() - targetValue;
     6a4:	b5 d0       	rcall	.+362    	; 0x810 <usbMeasureFrameLength>
     6a6:	84 53       	subi	r24, 0x34	; 52
     6a8:	99 40       	sbci	r25, 0x09	; 9
     6aa:	97 ff       	sbrs	r25, 7
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <calibrateOscillator+0x58>
     6ae:	90 95       	com	r25
     6b0:	81 95       	neg	r24
     6b2:	9f 4f       	sbci	r25, 0xFF	; 255
        if(x < 0)
            x = -x;
        if(x < optimumDev){
     6b4:	8e 15       	cp	r24, r14
     6b6:	9f 05       	cpc	r25, r15
     6b8:	14 f4       	brge	.+4      	; 0x6be <calibrateOscillator+0x62>
            optimumDev = x;
            optimumValue = OSCCAL;
     6ba:	11 b7       	in	r17, 0x31	; 49
     6bc:	7c 01       	movw	r14, r24
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     6be:	81 b7       	in	r24, 0x31	; 49
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	81 bf       	out	0x31, r24	; 49
     6c4:	81 b7       	in	r24, 0x31	; 49
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	c8 17       	cp	r28, r24
     6ca:	d9 07       	cpc	r29, r25
     6cc:	5c f7       	brge	.-42     	; 0x6a4 <calibrateOscillator+0x48>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
     6ce:	11 bf       	out	0x31, r17	; 49
}
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	e6 e0       	ldi	r30, 0x06	; 6
     6d6:	19 c2       	rjmp	.+1074   	; 0xb0a <__epilogue_restores__+0x18>

000006d8 <Timers_Init>:
static volatile milliseconds_t Timers[TIMER_LAST];

#define ATOMIC_BLOCK(x)

void Timers_Init(void)
{
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
	TimerId_t id;
	for (id=0; id < TIMER_LAST;id++)
	{
    Timers[id]=TIMER_RESET;
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	3f ef       	ldi	r19, 0xFF	; 255
     6e0:	fc 01       	movw	r30, r24
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	e2 50       	subi	r30, 0x02	; 2
     6e8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ea:	31 83       	std	Z+1, r19	; 0x01
     6ec:	20 83       	st	Z, r18
     6ee:	01 96       	adiw	r24, 0x01	; 1
#define ATOMIC_BLOCK(x)

void Timers_Init(void)
{
	TimerId_t id;
	for (id=0; id < TIMER_LAST;id++)
     6f0:	88 30       	cpi	r24, 0x08	; 8
     6f2:	91 05       	cpc	r25, r1
     6f4:	a9 f7       	brne	.-22     	; 0x6e0 <Timers_Init+0x8>
	{
    Timers[id]=TIMER_RESET;
  }
}
     6f6:	08 95       	ret

000006f8 <Timers_DecreaseAll>:
milliseconds_t Timers_DecreaseAll(milliseconds_x256_t delta_x256)
{
	static unsigned char frag = 0;
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
     6f8:	20 91 fd 00 	lds	r18, 0x00FD
     6fc:	82 0f       	add	r24, r18
     6fe:	91 1d       	adc	r25, r1
	frag = delta_x256 & 0xFF;
     700:	80 93 fd 00 	sts	0x00FD, r24
	milliseconds_t delta = delta_x256>>8;
     704:	89 2f       	mov	r24, r25
     706:	99 27       	eor	r25, r25
     708:	6f ef       	ldi	r22, 0xFF	; 255
     70a:	7f ef       	ldi	r23, 0xFF	; 255
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
	for (id=0; id < TIMER_LAST;id++)
	{
		milliseconds_t tempTime = Timers[id];
     710:	fa 01       	movw	r30, r20
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	e2 50       	subi	r30, 0x02	; 2
     718:	ff 4f       	sbci	r31, 0xFF	; 255
     71a:	20 81       	ld	r18, Z
     71c:	31 81       	ldd	r19, Z+1	; 0x01
		if (tempTime != TIMER_RESET)
     71e:	af ef       	ldi	r26, 0xFF	; 255
     720:	2f 3f       	cpi	r18, 0xFF	; 255
     722:	3a 07       	cpc	r19, r26
     724:	99 f0       	breq	.+38     	; 0x74c <Timers_DecreaseAll+0x54>
		{
			if (tempTime > delta) 
     726:	82 17       	cp	r24, r18
     728:	93 07       	cpc	r25, r19
     72a:	70 f4       	brcc	.+28     	; 0x748 <Timers_DecreaseAll+0x50>
			{
				tempTime-=delta;
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	26 17       	cp	r18, r22
     732:	37 07       	cpc	r19, r23
     734:	08 f4       	brcc	.+2      	; 0x738 <Timers_DecreaseAll+0x40>
     736:	b9 01       	movw	r22, r18
				if (tempTime < nextTime) 
				{
					nextTime = tempTime;
				}

				Timers[id] = tempTime;
     738:	fa 01       	movw	r30, r20
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	e2 50       	subi	r30, 0x02	; 2
     740:	ff 4f       	sbci	r31, 0xFF	; 255
     742:	31 83       	std	Z+1, r19	; 0x01
     744:	20 83       	st	Z, r18
     746:	02 c0       	rjmp	.+4      	; 0x74c <Timers_DecreaseAll+0x54>
			}
			else {
				Timers[id] = TIMER_HAS_EXPIRED;
     748:	11 82       	std	Z+1, r1	; 0x01
     74a:	10 82       	st	Z, r1
     74c:	4f 5f       	subi	r20, 0xFF	; 255
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
	frag = delta_x256 & 0xFF;
	milliseconds_t delta = delta_x256>>8;
	for (id=0; id < TIMER_LAST;id++)
     750:	48 30       	cpi	r20, 0x08	; 8
     752:	51 05       	cpc	r21, r1
     754:	e9 f6       	brne	.-70     	; 0x710 <Timers_DecreaseAll+0x18>
				Timers[id] = TIMER_HAS_EXPIRED;
			}
		}
	}
	return nextTime;
}
     756:	cb 01       	movw	r24, r22
     758:	08 95       	ret

0000075a <Timer_HasExpired>:
int Timer_HasExpired(const TimerId_t TimerId)
{
	int result;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if (Timers[TimerId]==TIMER_HAS_EXPIRED)
     75a:	e8 2f       	mov	r30, r24
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31
     762:	e2 50       	subi	r30, 0x02	; 2
     764:	ff 4f       	sbci	r31, 0xFF	; 255
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	89 2b       	or	r24, r25
     76c:	19 f0       	breq	.+6      	; 0x774 <Timer_HasExpired+0x1a>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	06 c0       	rjmp	.+12     	; 0x780 <Timer_HasExpired+0x26>
		{
			Timers[TimerId]=TIMER_RESET;
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	9f ef       	ldi	r25, 0xFF	; 255
     778:	91 83       	std	Z+1, r25	; 0x01
     77a:	80 83       	st	Z, r24
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	30 e0       	ldi	r19, 0x00	; 0
		else {
			result = 0;
		}
	}
	return result;
}
     780:	c9 01       	movw	r24, r18
     782:	08 95       	ret

00000784 <Timer_Reset>:

void Timer_Reset(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_RESET;
     784:	e8 2f       	mov	r30, r24
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	e2 50       	subi	r30, 0x02	; 2
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	9f ef       	ldi	r25, 0xFF	; 255
     794:	91 83       	std	Z+1, r25	; 0x01
     796:	80 83       	st	Z, r24
	}
}
     798:	08 95       	ret

0000079a <Timer_SetExpired>:
void Timer_SetExpired(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_HAS_EXPIRED;
     79a:	e8 2f       	mov	r30, r24
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	e2 50       	subi	r30, 0x02	; 2
     7a4:	ff 4f       	sbci	r31, 0xFF	; 255
     7a6:	11 82       	std	Z+1, r1	; 0x01
     7a8:	10 82       	st	Z, r1
	}
}
     7aa:	08 95       	ret

000007ac <Timer_Set>:

void Timer_Set(const TimerId_t TimerId,const milliseconds_t setTimeout)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=setTimeout;
     7ac:	e8 2f       	mov	r30, r24
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	e2 50       	subi	r30, 0x02	; 2
     7b6:	ff 4f       	sbci	r31, 0xFF	; 255
     7b8:	71 83       	std	Z+1, r23	; 0x01
     7ba:	60 83       	st	Z, r22
	}
}
     7bc:	08 95       	ret

000007be <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     7be:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     7c0:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     7c6:	1b c0       	rjmp	.+54     	; 0x7fe <usbCrc16LoopTest>

000007c8 <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     7c8:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     7ca:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     7cc:	28 2f       	mov	r18, r24
    swap    byte
     7ce:	22 95       	swap	r18
    eor     byte, resCrcL
     7d0:	28 27       	eor	r18, r24
    mov     scratch, byte
     7d2:	72 2f       	mov	r23, r18
    lsr     byte
     7d4:	26 95       	lsr	r18
    lsr     byte
     7d6:	26 95       	lsr	r18
    eor     byte, scratch
     7d8:	27 27       	eor	r18, r23
    inc     byte
     7da:	23 95       	inc	r18
    lsr     byte
     7dc:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     7de:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     7e0:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     7e2:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     7e4:	82 27       	eor	r24, r18
    neg     byte
     7e6:	21 95       	neg	r18
    andi    byte, 0xc0
     7e8:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     7ea:	92 2f       	mov	r25, r18
    clr     byte
     7ec:	22 27       	eor	r18, r18
    lsr     scratch
     7ee:	76 95       	lsr	r23
    ror     byte
     7f0:	27 95       	ror	r18
    eor     resCrcH, scratch
     7f2:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     7f4:	82 27       	eor	r24, r18
    lsr     scratch
     7f6:	76 95       	lsr	r23
    ror     byte
     7f8:	27 95       	ror	r18
    eor     resCrcH, scratch
     7fa:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     7fc:	82 27       	eor	r24, r18

000007fe <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     7fe:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     800:	18 f7       	brcc	.-58     	; 0x7c8 <usbCrc16ByteLoop>
    com     resCrcL
     802:	80 95       	com	r24
    com     resCrcH
     804:	90 95       	com	r25
    ret
     806:	08 95       	ret

00000808 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     808:	da df       	rcall	.-76     	; 0x7be <usbCrc16>
    st      ptr+, resCrcL
     80a:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     80c:	9d 93       	st	X+, r25
    ret
     80e:	08 95       	ret

00000810 <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     810:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     812:	88 27       	eor	r24, r24
    clr     cnt16H
     814:	99 27       	eor	r25, r25

00000816 <usbMFTime16>:
usbMFTime16:
    dec     cntH
     816:	aa 95       	dec	r26
    breq    usbMFTimeout
     818:	69 f0       	breq	.+26     	; 0x834 <usbMFTimeout>

0000081a <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     81a:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     81c:	e1 f3       	breq	.-8      	; 0x816 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     81e:	b2 99       	sbic	0x16, 2	; 22
    rjmp    usbMFWaitStrobe ;[4]
     820:	fc cf       	rjmp	.-8      	; 0x81a <usbMFWaitStrobe>

00000822 <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     822:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    usbMFWaitIdle   ;2
     824:	fe cf       	rjmp	.-4      	; 0x822 <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     826:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     828:	99 27       	eor	r25, r25

0000082a <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     82a:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     82c:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     82e:	11 f0       	breq	.+4      	; 0x834 <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     830:	a4 74       	andi	r26, 0x44	; 68
    brne    usbMFWaitLoop   ;[5]
     832:	d9 f7       	brne	.-10     	; 0x82a <usbMFWaitLoop>

00000834 <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     834:	08 95       	ret

00000836 <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
     836:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
     838:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
     83a:	cf 93       	push	r28

0000083c <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     83c:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     83e:	b2 9b       	sbis	0x16, 2	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     840:	e9 f7       	brne	.-6      	; 0x83c <waitForJ>

00000842 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     842:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK              ;[-14]
     844:	0b c0       	rjmp	.+22     	; 0x85c <foundK>
    sbis    USBIN, USBMINUS
     846:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     848:	09 c0       	rjmp	.+18     	; 0x85c <foundK>
    sbis    USBIN, USBMINUS
     84a:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     84c:	07 c0       	rjmp	.+14     	; 0x85c <foundK>
    sbis    USBIN, USBMINUS
     84e:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     850:	05 c0       	rjmp	.+10     	; 0x85c <foundK>
    sbis    USBIN, USBMINUS
     852:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     854:	03 c0       	rjmp	.+6      	; 0x85c <foundK>
    sbis    USBIN, USBMINUS
     856:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     858:	01 c0       	rjmp	.+2      	; 0x85c <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     85a:	d5 c0       	rjmp	.+426    	; 0xa06 <sofError>

0000085c <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
     85c:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
     85e:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
     860:	c0 91 27 01 	lds	r28, 0x0127
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
     864:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
     866:	c2 5d       	subi	r28, 0xD2	; 210
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
     868:	de 4f       	sbci	r29, 0xFE	; 254
    mov     r0, x2              ;[-3] [rx loop init]
     86a:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     86c:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    haveTwoBitsK        ;[-1]
     86e:	03 c0       	rjmp	.+6      	; 0x876 <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
     870:	df 91       	pop	r29
    pop     r0                  ;[2]
     872:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     874:	e6 cf       	rjmp	.-52     	; 0x842 <waitForK>

00000876 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
     876:	2f 93       	push	r18
    push    x1              ;[3]
     878:	0f 93       	push	r16
    push    x2              ;[5]
     87a:	1f 93       	push	r17
    push    x3              ;[7]
     87c:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
     87e:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
     880:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
     882:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
     884:	02 fb       	bst	r16, 2
    bld     shift, 0        ;[13]
     886:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
     888:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
     88a:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
     88c:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
     88e:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
     890:	65 c0       	rjmp	.+202    	; 0x95c <rxbit1>

00000892 <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
     892:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
     894:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
     896:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
     898:	52 fd       	sbrc	r21, 2
    lpm                     ;[059] optional nop3; modifies r0
     89a:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
     89c:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
     89e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
     8a0:	02 fb       	bst	r16, 2
    bld     shift, 5        ;[063]
     8a2:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
     8a4:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
     8a6:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
     8a8:	b1 f0       	breq	.+44     	; 0x8d6 <unstuff5>
    eor     phase, x1       ;[067]
     8aa:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
     8ac:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
     8ae:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[070]
     8b0:	26 f9       	bld	r18, 6

000008b2 <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
     8b2:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
     8b4:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
     8b6:	f0 f0       	brcs	.+60     	; 0x8f4 <unstuff6>

000008b8 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
     8ba:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
     8bc:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
     8be:	02 fb       	bst	r16, 2
    bld     shift, 7        ;[079]
     8c0:	27 f9       	bld	r18, 7

000008c2 <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
     8c2:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
     8c4:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
     8c6:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
     8c8:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
     8ca:	e8 f5       	brcc	.+122    	; 0x946 <rxLoop>

000008cc <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
     8cc:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
     8ce:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
     8d0:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
     8d2:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
     8d4:	f6 cf       	rjmp	.-20     	; 0x8c2 <didUnstuff7>

000008d6 <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
     8d6:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
     8d8:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
     8da:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
     8dc:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
     8de:	10 2f       	mov	r17, r16
    nop                     ;[073]
     8e0:	00 00       	nop
    nop2                    ;[074]
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
     8e4:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
     8e6:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
     8e8:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
     8ea:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
     8ec:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
     8ee:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
     8f0:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
     8f2:	e2 cf       	rjmp	.-60     	; 0x8b8 <didUnstuff5>

000008f4 <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
     8f4:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
     8f6:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
     8f8:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
     8fc:	da cf       	rjmp	.-76     	; 0x8b2 <didUnstuff6>

000008fe <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
     8fe:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
     900:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
     902:	14 74       	andi	r17, 0x44	; 68
    in      r0, USBIN       ;[017] <-- phase
     904:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
     906:	69 f1       	breq	.+90     	; 0x962 <didUnstuff0>
    andi    x3, ~0x01       ;[019]
     908:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
     90a:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
     90c:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
     90e:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
     910:	28 c0       	rjmp	.+80     	; 0x962 <didUnstuff0>

00000912 <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
     912:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
     914:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
     916:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
     918:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
     91a:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
     91c:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
     91e:	29 c0       	rjmp	.+82     	; 0x972 <didUnstuff1>

00000920 <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
     920:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
     922:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
     924:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
     926:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
     928:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
     92a:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
     92c:	2d c0       	rjmp	.+90     	; 0x988 <didUnstuff2>

0000092e <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
     92e:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
     930:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
     932:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
     934:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
     936:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
     938:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
     93a:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
     93c:	2e c0       	rjmp	.+92     	; 0x99a <didUnstuff3>

0000093e <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
     93e:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
     940:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
     942:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
     944:	30 c0       	rjmp	.+96     	; 0x9a6 <didUnstuff4>

00000946 <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     946:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
     948:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
     94a:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
     94c:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
     94e:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
     950:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
     952:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
     954:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
     956:	12 fb       	bst	r17, 2
    bld     shift, 0        ;[009]
     958:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
     95a:	29 7f       	andi	r18, 0xF9	; 249

0000095c <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
     95c:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
     95e:	79 f2       	breq	.-98     	; 0x8fe <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
     960:	14 74       	andi	r17, 0x44	; 68

00000962 <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
     962:	59 f1       	breq	.+86     	; 0x9ba <se0>
    eor     r0, x2          ;[015]
     964:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
     966:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
     968:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
     96a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
     96c:	02 fb       	bst	r16, 2
    bld     shift, 1        ;[020]
     96e:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
     970:	23 7f       	andi	r18, 0xF3	; 243

00000972 <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
     972:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
     974:	71 f2       	breq	.-100    	; 0x912 <unstuff1>
    eor     r0, x1          ;[024]
     976:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
     978:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
     97a:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
     97c:	d0 f0       	brcs	.+52     	; 0x9b2 <overflow>
    in      r0, USBIN       ;[028] <-- phase
     97e:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
     980:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
     982:	12 fb       	bst	r17, 2
    bld     shift, 2        ;[031]
     984:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
     986:	27 7e       	andi	r18, 0xE7	; 231

00000988 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
     988:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
     98a:	51 f2       	breq	.-108    	; 0x920 <unstuff2>
    eor     r0, x2          ;[035]
     98c:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
     98e:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
     990:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
     992:	02 fb       	bst	r16, 2
    in      r0, USBIN       ;[039] <-- phase
     994:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
     996:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
     998:	2f 7c       	andi	r18, 0xCF	; 207

0000099a <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
     99a:	49 f2       	breq	.-110    	; 0x92e <unstuff3>
    nop                     ;[043]
     99c:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
     99e:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
     9a0:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
     9a2:	12 fb       	bst	r17, 2
    bld     shift, 4        ;[047]
     9a4:	24 f9       	bld	r18, 4

000009a6 <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
     9a6:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
     9a8:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
     9aa:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
     9ac:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
     9ae:	39 f2       	breq	.-114    	; 0x93e <unstuff4>
    rjmp    continueWithBit5;[053]
     9b0:	70 cf       	rjmp	.-288    	; 0x892 <continueWithBit5>

000009b2 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     9b2:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     9b4:	1a bf       	out	0x3a, r17	; 58

000009b6 <ignorePacket>:
ignorePacket:
    clr     token
     9b6:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     9b8:	19 c0       	rjmp	.+50     	; 0x9ec <handleSetupOrOut>

000009ba <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     9ba:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     9bc:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     9be:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     9c0:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     9c2:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     9c4:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     9c6:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     9c8:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     9ca:	09 f1       	breq	.+66     	; 0xa0e <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     9cc:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     9ce:	f9 f0       	breq	.+62     	; 0xa0e <handleData>
    lds     shift, usbDeviceAddr;[17]
     9d0:	20 91 25 01 	lds	r18, 0x0125
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     9d4:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     9d6:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     9d8:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     9da:	ed cf       	rjmp	.-38     	; 0x9b6 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     9dc:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     9de:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     9e0:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     9e2:	51 f1       	breq	.+84     	; 0xa38 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     9e4:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     9e6:	11 f0       	breq	.+4      	; 0x9ec <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     9e8:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     9ea:	29 f7       	brne	.-54     	; 0x9b6 <ignorePacket>

000009ec <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     9ec:	00 93 2c 01 	sts	0x012C, r16

000009f0 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     9f0:	3f 91       	pop	r19
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	2f 91       	pop	r18
     9fc:	df 91       	pop	r29
     9fe:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
     a00:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     a02:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     a04:	1b cf       	rjmp	.-458    	; 0x83c <waitForJ>

00000a06 <sofError>:
sofError:
    POP_RETI                    ;macro call
     a06:	cf 91       	pop	r28
     a08:	cf bf       	out	0x3f, r28	; 63
     a0a:	cf 91       	pop	r28
    reti
     a0c:	18 95       	reti

00000a0e <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     a0e:	20 91 2c 01 	lds	r18, 0x012C
    tst     shift               ;[20]
     a12:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     a14:	69 f3       	breq	.-38     	; 0x9f0 <doReturn>
    lds     x2, usbRxLen        ;[22]
     a16:	10 91 2a 01 	lds	r17, 0x012A
    tst     x2                  ;[24]
     a1a:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     a1c:	79 f5       	brne	.+94     	; 0xa7c <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     a1e:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     a20:	7a f1       	brmi	.+94     	; 0xa80 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     a22:	30 93 2a 01 	sts	0x012A, r19
    sts     usbRxToken, shift   ;[30]
     a26:	20 93 26 01 	sts	0x0126, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
     a2a:	10 91 27 01 	lds	r17, 0x0127
    ldi     cnt, USB_BUFSIZE    ;[34]
     a2e:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     a30:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     a32:	30 93 27 01 	sts	0x0127, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     a36:	24 c0       	rjmp	.+72     	; 0xa80 <sendAckAndReti>

00000a38 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     a38:	00 91 2a 01 	lds	r16, 0x012A
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     a3c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     a3e:	f4 f4       	brge	.+60     	; 0xa7c <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     a40:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     a42:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     a44:	49 f4       	brne	.+18     	; 0xa58 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     a46:	30 91 60 00 	lds	r19, 0x0060
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     a4a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     a4c:	1a c0       	rjmp	.+52     	; 0xa82 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     a4e:	00 93 60 00 	sts	0x0060, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
     a52:	ce e0       	ldi	r28, 0x0E	; 14
    ldi     YH, hi8(usbTxBuf)   ;[44]
     a54:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     a56:	19 c0       	rjmp	.+50     	; 0xa8a <usbSendAndReti>

00000a58 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     a58:	30 91 19 01 	lds	r19, 0x0119
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     a5c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     a5e:	11 c0       	rjmp	.+34     	; 0xa82 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     a60:	00 93 19 01 	sts	0x0119, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     a64:	ca e1       	ldi	r28, 0x1A	; 26
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     a66:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     a68:	10 c0       	rjmp	.+32     	; 0xa8a <usbSendAndReti>

00000a6a <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
     a6a:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
     a6c:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
     a70:	21 c0       	rjmp	.+66     	; 0xab4 <didStuff7>

00000a72 <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
     a72:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
     a74:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
     a76:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
     a78:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
     a7a:	14 c0       	rjmp	.+40     	; 0xaa4 <didStuffN>

00000a7c <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
     a7c:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <sendCntAndReti>

00000a80 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     a80:	32 ed       	ldi	r19, 0xD2	; 210

00000a82 <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
     a82:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
     a84:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
     a86:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     a88:	32 e0       	ldi	r19, 0x02	; 2

00000a8a <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     a8a:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
     a8c:	14 64       	ori	r17, 0x44	; 68
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     a8e:	c2 9a       	sbi	0x18, 2	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     a90:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
     a92:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     a94:	54 e4       	ldi	r21, 0x44	; 68
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     a96:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
     a98:	4f ef       	ldi	r20, 0xFF	; 255

00000a9a <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
     a9a:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
     a9c:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
     a9e:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
     aa0:	27 95       	ror	r18
    ror     x2              ;[1]
     aa2:	17 95       	ror	r17

00000aa4 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
     aa4:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
     aa6:	28 f7       	brcc	.-54     	; 0xa72 <bitstuffN>
    nop                     ;[4]
     aa8:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
     aaa:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
     aac:	b0 f7       	brcc	.-20     	; 0xa9a <bitloop>
    sbrs    shift, 0        ;[7]
     aae:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
     ab0:	05 27       	eor	r16, r21
    ror     shift           ;[9]
     ab2:	27 95       	ror	r18

00000ab4 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
     ab4:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
     ab6:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
     ab8:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
     aba:	b8 f6       	brcc	.-82     	; 0xa6a <bitstuff7>
    ld      shift, y+       ;[3]
     abc:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
     abe:	3a 95       	dec	r19
    brne    byteloop        ;[6]
     ac0:	61 f7       	brne	.-40     	; 0xa9a <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
     ac2:	0b 7b       	andi	r16, 0xBB	; 187
    lds     x2, usbNewDeviceAddr;[8]
     ac4:	10 91 2b 01 	lds	r17, 0x012B
    lsl     x2              ;[10] we compare with left shifted address
     ac8:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     aca:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
     acc:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
     ace:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
     ad0:	11 f0       	breq	.+4      	; 0xad6 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     ad2:	10 93 25 01 	sts	0x0125, r17

00000ad6 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     ad6:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
     ad8:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
     ada:	04 60       	ori	r16, 0x04	; 4
    in      x2, USBDDR      ;[7]
     adc:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
     ade:	1b 7b       	andi	r17, 0xBB	; 187
    mov     x3, x1          ;[9]
     ae0:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
     ae2:	4b 7b       	andi	r20, 0xBB	; 187
    ldi     x4, 4           ;[11]
     ae4:	54 e0       	ldi	r21, 0x04	; 4

00000ae6 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
     ae6:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
     aea:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
     aec:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
     aee:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     af0:	7f cf       	rjmp	.-258    	; 0x9f0 <doReturn>

00000af2 <__epilogue_restores__>:
     af2:	2a 88       	ldd	r2, Y+18	; 0x12
     af4:	39 88       	ldd	r3, Y+17	; 0x11
     af6:	48 88       	ldd	r4, Y+16	; 0x10
     af8:	5f 84       	ldd	r5, Y+15	; 0x0f
     afa:	6e 84       	ldd	r6, Y+14	; 0x0e
     afc:	7d 84       	ldd	r7, Y+13	; 0x0d
     afe:	8c 84       	ldd	r8, Y+12	; 0x0c
     b00:	9b 84       	ldd	r9, Y+11	; 0x0b
     b02:	aa 84       	ldd	r10, Y+10	; 0x0a
     b04:	b9 84       	ldd	r11, Y+9	; 0x09
     b06:	c8 84       	ldd	r12, Y+8	; 0x08
     b08:	df 80       	ldd	r13, Y+7	; 0x07
     b0a:	ee 80       	ldd	r14, Y+6	; 0x06
     b0c:	fd 80       	ldd	r15, Y+5	; 0x05
     b0e:	0c 81       	ldd	r16, Y+4	; 0x04
     b10:	1b 81       	ldd	r17, Y+3	; 0x03
     b12:	aa 81       	ldd	r26, Y+2	; 0x02
     b14:	b9 81       	ldd	r27, Y+1	; 0x01
     b16:	ce 0f       	add	r28, r30
     b18:	d1 1d       	adc	r29, r1
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	ed 01       	movw	r28, r26
     b26:	08 95       	ret

00000b28 <printf_P>:
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	e9 e9       	ldi	r30, 0x99	; 153
     b2e:	f5 e0       	ldi	r31, 0x05	; 5
     b30:	b5 c2       	rjmp	.+1386   	; 0x109c <__prologue_saves__+0x20>
     b32:	fe 01       	movw	r30, r28
     b34:	35 96       	adiw	r30, 0x05	; 5
     b36:	61 91       	ld	r22, Z+
     b38:	71 91       	ld	r23, Z+
     b3a:	a0 91 46 01 	lds	r26, 0x0146
     b3e:	b0 91 47 01 	lds	r27, 0x0147
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	8c 91       	ld	r24, X
     b46:	13 97       	sbiw	r26, 0x03	; 3
     b48:	88 60       	ori	r24, 0x08	; 8
     b4a:	13 96       	adiw	r26, 0x03	; 3
     b4c:	8c 93       	st	X, r24
     b4e:	80 91 46 01 	lds	r24, 0x0146
     b52:	90 91 47 01 	lds	r25, 0x0147
     b56:	af 01       	movw	r20, r30
     b58:	0a d0       	rcall	.+20     	; 0xb6e <vfprintf>
     b5a:	e0 91 46 01 	lds	r30, 0x0146
     b5e:	f0 91 47 01 	lds	r31, 0x0147
     b62:	23 81       	ldd	r18, Z+3	; 0x03
     b64:	27 7f       	andi	r18, 0xF7	; 247
     b66:	23 83       	std	Z+3, r18	; 0x03
     b68:	20 96       	adiw	r28, 0x00	; 0
     b6a:	e2 e0       	ldi	r30, 0x02	; 2
     b6c:	d2 cf       	rjmp	.-92     	; 0xb12 <__epilogue_restores__+0x20>

00000b6e <vfprintf>:
     b6e:	ab e0       	ldi	r26, 0x0B	; 11
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	ec eb       	ldi	r30, 0xBC	; 188
     b74:	f5 e0       	ldi	r31, 0x05	; 5
     b76:	82 c2       	rjmp	.+1284   	; 0x107c <__prologue_saves__>
     b78:	4c 01       	movw	r8, r24
     b7a:	2b 01       	movw	r4, r22
     b7c:	5a 01       	movw	r10, r20
     b7e:	fc 01       	movw	r30, r24
     b80:	17 82       	std	Z+7, r1	; 0x07
     b82:	16 82       	std	Z+6, r1	; 0x06
     b84:	83 81       	ldd	r24, Z+3	; 0x03
     b86:	81 fd       	sbrc	r24, 1
     b88:	03 c0       	rjmp	.+6      	; 0xb90 <vfprintf+0x22>
     b8a:	6f ef       	ldi	r22, 0xFF	; 255
     b8c:	7f ef       	ldi	r23, 0xFF	; 255
     b8e:	be c1       	rjmp	.+892    	; 0xf0c <vfprintf+0x39e>
     b90:	1e 01       	movw	r2, r28
     b92:	08 94       	sec
     b94:	21 1c       	adc	r2, r1
     b96:	31 1c       	adc	r3, r1
     b98:	9f e3       	ldi	r25, 0x3F	; 63
     b9a:	69 2e       	mov	r6, r25
     b9c:	f4 01       	movw	r30, r8
     b9e:	33 81       	ldd	r19, Z+3	; 0x03
     ba0:	f2 01       	movw	r30, r4
     ba2:	33 fd       	sbrc	r19, 3
     ba4:	85 91       	lpm	r24, Z+
     ba6:	33 ff       	sbrs	r19, 3
     ba8:	81 91       	ld	r24, Z+
     baa:	2f 01       	movw	r4, r30
     bac:	88 23       	and	r24, r24
     bae:	09 f4       	brne	.+2      	; 0xbb2 <vfprintf+0x44>
     bb0:	aa c1       	rjmp	.+852    	; 0xf06 <vfprintf+0x398>
     bb2:	85 32       	cpi	r24, 0x25	; 37
     bb4:	39 f4       	brne	.+14     	; 0xbc4 <vfprintf+0x56>
     bb6:	33 fd       	sbrc	r19, 3
     bb8:	85 91       	lpm	r24, Z+
     bba:	33 ff       	sbrs	r19, 3
     bbc:	81 91       	ld	r24, Z+
     bbe:	2f 01       	movw	r4, r30
     bc0:	85 32       	cpi	r24, 0x25	; 37
     bc2:	21 f4       	brne	.+8      	; 0xbcc <vfprintf+0x5e>
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	b4 01       	movw	r22, r8
     bc8:	bb d1       	rcall	.+886    	; 0xf40 <fputc>
     bca:	e8 cf       	rjmp	.-48     	; 0xb9c <vfprintf+0x2e>
     bcc:	98 2f       	mov	r25, r24
     bce:	ff 24       	eor	r15, r15
     bd0:	ee 24       	eor	r14, r14
     bd2:	77 24       	eor	r7, r7
     bd4:	ff e1       	ldi	r31, 0x1F	; 31
     bd6:	ff 15       	cp	r31, r15
     bd8:	d0 f0       	brcs	.+52     	; 0xc0e <vfprintf+0xa0>
     bda:	9b 32       	cpi	r25, 0x2B	; 43
     bdc:	69 f0       	breq	.+26     	; 0xbf8 <vfprintf+0x8a>
     bde:	9c 32       	cpi	r25, 0x2C	; 44
     be0:	28 f4       	brcc	.+10     	; 0xbec <vfprintf+0x7e>
     be2:	90 32       	cpi	r25, 0x20	; 32
     be4:	59 f0       	breq	.+22     	; 0xbfc <vfprintf+0x8e>
     be6:	93 32       	cpi	r25, 0x23	; 35
     be8:	91 f4       	brne	.+36     	; 0xc0e <vfprintf+0xa0>
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <vfprintf+0x9a>
     bec:	9d 32       	cpi	r25, 0x2D	; 45
     bee:	49 f0       	breq	.+18     	; 0xc02 <vfprintf+0x94>
     bf0:	90 33       	cpi	r25, 0x30	; 48
     bf2:	69 f4       	brne	.+26     	; 0xc0e <vfprintf+0xa0>
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	2a c0       	rjmp	.+84     	; 0xc4c <vfprintf+0xde>
     bf8:	52 e0       	ldi	r21, 0x02	; 2
     bfa:	f5 2a       	or	r15, r21
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	f8 2a       	or	r15, r24
     c00:	2e c0       	rjmp	.+92     	; 0xc5e <vfprintf+0xf0>
     c02:	98 e0       	ldi	r25, 0x08	; 8
     c04:	f9 2a       	or	r15, r25
     c06:	2b c0       	rjmp	.+86     	; 0xc5e <vfprintf+0xf0>
     c08:	e0 e1       	ldi	r30, 0x10	; 16
     c0a:	fe 2a       	or	r15, r30
     c0c:	28 c0       	rjmp	.+80     	; 0xc5e <vfprintf+0xf0>
     c0e:	f7 fc       	sbrc	r15, 7
     c10:	2f c0       	rjmp	.+94     	; 0xc70 <vfprintf+0x102>
     c12:	29 2f       	mov	r18, r25
     c14:	20 53       	subi	r18, 0x30	; 48
     c16:	2a 30       	cpi	r18, 0x0A	; 10
     c18:	a0 f4       	brcc	.+40     	; 0xc42 <vfprintf+0xd4>
     c1a:	f6 fe       	sbrs	r15, 6
     c1c:	08 c0       	rjmp	.+16     	; 0xc2e <vfprintf+0xc0>
     c1e:	87 2d       	mov	r24, r7
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	6a e0       	ldi	r22, 0x0A	; 10
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	18 d2       	rcall	.+1072   	; 0x1058 <__mulhi3>
     c28:	78 2e       	mov	r7, r24
     c2a:	72 0e       	add	r7, r18
     c2c:	18 c0       	rjmp	.+48     	; 0xc5e <vfprintf+0xf0>
     c2e:	8e 2d       	mov	r24, r14
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	6a e0       	ldi	r22, 0x0A	; 10
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	10 d2       	rcall	.+1056   	; 0x1058 <__mulhi3>
     c38:	e8 2e       	mov	r14, r24
     c3a:	e2 0e       	add	r14, r18
     c3c:	f0 e2       	ldi	r31, 0x20	; 32
     c3e:	ff 2a       	or	r15, r31
     c40:	0e c0       	rjmp	.+28     	; 0xc5e <vfprintf+0xf0>
     c42:	9e 32       	cpi	r25, 0x2E	; 46
     c44:	29 f4       	brne	.+10     	; 0xc50 <vfprintf+0xe2>
     c46:	f6 fc       	sbrc	r15, 6
     c48:	5e c1       	rjmp	.+700    	; 0xf06 <vfprintf+0x398>
     c4a:	40 e4       	ldi	r20, 0x40	; 64
     c4c:	f4 2a       	or	r15, r20
     c4e:	07 c0       	rjmp	.+14     	; 0xc5e <vfprintf+0xf0>
     c50:	9c 36       	cpi	r25, 0x6C	; 108
     c52:	19 f4       	brne	.+6      	; 0xc5a <vfprintf+0xec>
     c54:	50 e8       	ldi	r21, 0x80	; 128
     c56:	f5 2a       	or	r15, r21
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <vfprintf+0xf0>
     c5a:	98 36       	cpi	r25, 0x68	; 104
     c5c:	49 f4       	brne	.+18     	; 0xc70 <vfprintf+0x102>
     c5e:	f2 01       	movw	r30, r4
     c60:	33 fd       	sbrc	r19, 3
     c62:	95 91       	lpm	r25, Z+
     c64:	33 ff       	sbrs	r19, 3
     c66:	91 91       	ld	r25, Z+
     c68:	2f 01       	movw	r4, r30
     c6a:	99 23       	and	r25, r25
     c6c:	09 f0       	breq	.+2      	; 0xc70 <vfprintf+0x102>
     c6e:	b2 cf       	rjmp	.-156    	; 0xbd4 <vfprintf+0x66>
     c70:	89 2f       	mov	r24, r25
     c72:	85 54       	subi	r24, 0x45	; 69
     c74:	83 30       	cpi	r24, 0x03	; 3
     c76:	18 f0       	brcs	.+6      	; 0xc7e <vfprintf+0x110>
     c78:	80 52       	subi	r24, 0x20	; 32
     c7a:	83 30       	cpi	r24, 0x03	; 3
     c7c:	30 f4       	brcc	.+12     	; 0xc8a <vfprintf+0x11c>
     c7e:	44 e0       	ldi	r20, 0x04	; 4
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	a4 0e       	add	r10, r20
     c84:	b5 1e       	adc	r11, r21
     c86:	69 82       	std	Y+1, r6	; 0x01
     c88:	0f c0       	rjmp	.+30     	; 0xca8 <vfprintf+0x13a>
     c8a:	93 36       	cpi	r25, 0x63	; 99
     c8c:	31 f0       	breq	.+12     	; 0xc9a <vfprintf+0x12c>
     c8e:	93 37       	cpi	r25, 0x73	; 115
     c90:	79 f0       	breq	.+30     	; 0xcb0 <vfprintf+0x142>
     c92:	93 35       	cpi	r25, 0x53	; 83
     c94:	09 f0       	breq	.+2      	; 0xc98 <vfprintf+0x12a>
     c96:	52 c0       	rjmp	.+164    	; 0xd3c <vfprintf+0x1ce>
     c98:	1f c0       	rjmp	.+62     	; 0xcd8 <vfprintf+0x16a>
     c9a:	f5 01       	movw	r30, r10
     c9c:	80 81       	ld	r24, Z
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	42 e0       	ldi	r20, 0x02	; 2
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	a4 0e       	add	r10, r20
     ca6:	b5 1e       	adc	r11, r21
     ca8:	61 01       	movw	r12, r2
     caa:	01 e0       	ldi	r16, 0x01	; 1
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	11 c0       	rjmp	.+34     	; 0xcd2 <vfprintf+0x164>
     cb0:	f5 01       	movw	r30, r10
     cb2:	c0 80       	ld	r12, Z
     cb4:	d1 80       	ldd	r13, Z+1	; 0x01
     cb6:	f6 fc       	sbrc	r15, 6
     cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <vfprintf+0x152>
     cba:	6f ef       	ldi	r22, 0xFF	; 255
     cbc:	7f ef       	ldi	r23, 0xFF	; 255
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <vfprintf+0x156>
     cc0:	67 2d       	mov	r22, r7
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	42 e0       	ldi	r20, 0x02	; 2
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	a4 0e       	add	r10, r20
     cca:	b5 1e       	adc	r11, r21
     ccc:	c6 01       	movw	r24, r12
     cce:	2d d1       	rcall	.+602    	; 0xf2a <strnlen>
     cd0:	8c 01       	movw	r16, r24
     cd2:	5f e7       	ldi	r21, 0x7F	; 127
     cd4:	f5 22       	and	r15, r21
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <vfprintf+0x190>
     cd8:	f5 01       	movw	r30, r10
     cda:	c0 80       	ld	r12, Z
     cdc:	d1 80       	ldd	r13, Z+1	; 0x01
     cde:	f6 fc       	sbrc	r15, 6
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <vfprintf+0x17a>
     ce2:	6f ef       	ldi	r22, 0xFF	; 255
     ce4:	7f ef       	ldi	r23, 0xFF	; 255
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x17e>
     ce8:	67 2d       	mov	r22, r7
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	42 e0       	ldi	r20, 0x02	; 2
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	a4 0e       	add	r10, r20
     cf2:	b5 1e       	adc	r11, r21
     cf4:	c6 01       	movw	r24, r12
     cf6:	0e d1       	rcall	.+540    	; 0xf14 <strnlen_P>
     cf8:	8c 01       	movw	r16, r24
     cfa:	50 e8       	ldi	r21, 0x80	; 128
     cfc:	f5 2a       	or	r15, r21
     cfe:	f3 fe       	sbrs	r15, 3
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <vfprintf+0x1a0>
     d02:	18 c0       	rjmp	.+48     	; 0xd34 <vfprintf+0x1c6>
     d04:	80 e2       	ldi	r24, 0x20	; 32
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	b4 01       	movw	r22, r8
     d0a:	1a d1       	rcall	.+564    	; 0xf40 <fputc>
     d0c:	ea 94       	dec	r14
     d0e:	8e 2d       	mov	r24, r14
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	08 17       	cp	r16, r24
     d14:	19 07       	cpc	r17, r25
     d16:	b0 f3       	brcs	.-20     	; 0xd04 <vfprintf+0x196>
     d18:	0d c0       	rjmp	.+26     	; 0xd34 <vfprintf+0x1c6>
     d1a:	f6 01       	movw	r30, r12
     d1c:	f7 fc       	sbrc	r15, 7
     d1e:	85 91       	lpm	r24, Z+
     d20:	f7 fe       	sbrs	r15, 7
     d22:	81 91       	ld	r24, Z+
     d24:	6f 01       	movw	r12, r30
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	b4 01       	movw	r22, r8
     d2a:	0a d1       	rcall	.+532    	; 0xf40 <fputc>
     d2c:	e1 10       	cpse	r14, r1
     d2e:	ea 94       	dec	r14
     d30:	01 50       	subi	r16, 0x01	; 1
     d32:	10 40       	sbci	r17, 0x00	; 0
     d34:	01 15       	cp	r16, r1
     d36:	11 05       	cpc	r17, r1
     d38:	81 f7       	brne	.-32     	; 0xd1a <vfprintf+0x1ac>
     d3a:	e2 c0       	rjmp	.+452    	; 0xf00 <vfprintf+0x392>
     d3c:	94 36       	cpi	r25, 0x64	; 100
     d3e:	11 f0       	breq	.+4      	; 0xd44 <vfprintf+0x1d6>
     d40:	99 36       	cpi	r25, 0x69	; 105
     d42:	61 f5       	brne	.+88     	; 0xd9c <vfprintf+0x22e>
     d44:	f7 fe       	sbrs	r15, 7
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <vfprintf+0x1ea>
     d48:	f5 01       	movw	r30, r10
     d4a:	20 81       	ld	r18, Z
     d4c:	31 81       	ldd	r19, Z+1	; 0x01
     d4e:	42 81       	ldd	r20, Z+2	; 0x02
     d50:	53 81       	ldd	r21, Z+3	; 0x03
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0a c0       	rjmp	.+20     	; 0xd6c <vfprintf+0x1fe>
     d58:	f5 01       	movw	r30, r10
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	9c 01       	movw	r18, r24
     d60:	44 27       	eor	r20, r20
     d62:	37 fd       	sbrc	r19, 7
     d64:	40 95       	com	r20
     d66:	54 2f       	mov	r21, r20
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a8 0e       	add	r10, r24
     d6e:	b9 1e       	adc	r11, r25
     d70:	9f e6       	ldi	r25, 0x6F	; 111
     d72:	f9 22       	and	r15, r25
     d74:	57 ff       	sbrs	r21, 7
     d76:	09 c0       	rjmp	.+18     	; 0xd8a <vfprintf+0x21c>
     d78:	50 95       	com	r21
     d7a:	40 95       	com	r20
     d7c:	30 95       	com	r19
     d7e:	21 95       	neg	r18
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	4f 4f       	sbci	r20, 0xFF	; 255
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	e0 e8       	ldi	r30, 0x80	; 128
     d88:	fe 2a       	or	r15, r30
     d8a:	ca 01       	movw	r24, r20
     d8c:	b9 01       	movw	r22, r18
     d8e:	a1 01       	movw	r20, r2
     d90:	2a e0       	ldi	r18, 0x0A	; 10
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	01 d1       	rcall	.+514    	; 0xf98 <__ultoa_invert>
     d96:	d8 2e       	mov	r13, r24
     d98:	d2 18       	sub	r13, r2
     d9a:	3f c0       	rjmp	.+126    	; 0xe1a <vfprintf+0x2ac>
     d9c:	95 37       	cpi	r25, 0x75	; 117
     d9e:	29 f4       	brne	.+10     	; 0xdaa <vfprintf+0x23c>
     da0:	1f 2d       	mov	r17, r15
     da2:	1f 7e       	andi	r17, 0xEF	; 239
     da4:	2a e0       	ldi	r18, 0x0A	; 10
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	1d c0       	rjmp	.+58     	; 0xde4 <vfprintf+0x276>
     daa:	1f 2d       	mov	r17, r15
     dac:	19 7f       	andi	r17, 0xF9	; 249
     dae:	9f 36       	cpi	r25, 0x6F	; 111
     db0:	61 f0       	breq	.+24     	; 0xdca <vfprintf+0x25c>
     db2:	90 37       	cpi	r25, 0x70	; 112
     db4:	20 f4       	brcc	.+8      	; 0xdbe <vfprintf+0x250>
     db6:	98 35       	cpi	r25, 0x58	; 88
     db8:	09 f0       	breq	.+2      	; 0xdbc <vfprintf+0x24e>
     dba:	a5 c0       	rjmp	.+330    	; 0xf06 <vfprintf+0x398>
     dbc:	0f c0       	rjmp	.+30     	; 0xddc <vfprintf+0x26e>
     dbe:	90 37       	cpi	r25, 0x70	; 112
     dc0:	39 f0       	breq	.+14     	; 0xdd0 <vfprintf+0x262>
     dc2:	98 37       	cpi	r25, 0x78	; 120
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <vfprintf+0x25a>
     dc6:	9f c0       	rjmp	.+318    	; 0xf06 <vfprintf+0x398>
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <vfprintf+0x264>
     dca:	28 e0       	ldi	r18, 0x08	; 8
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <vfprintf+0x276>
     dd0:	10 61       	ori	r17, 0x10	; 16
     dd2:	14 fd       	sbrc	r17, 4
     dd4:	14 60       	ori	r17, 0x04	; 4
     dd6:	20 e1       	ldi	r18, 0x10	; 16
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <vfprintf+0x276>
     ddc:	14 fd       	sbrc	r17, 4
     dde:	16 60       	ori	r17, 0x06	; 6
     de0:	20 e1       	ldi	r18, 0x10	; 16
     de2:	32 e0       	ldi	r19, 0x02	; 2
     de4:	17 ff       	sbrs	r17, 7
     de6:	08 c0       	rjmp	.+16     	; 0xdf8 <vfprintf+0x28a>
     de8:	f5 01       	movw	r30, r10
     dea:	60 81       	ld	r22, Z
     dec:	71 81       	ldd	r23, Z+1	; 0x01
     dee:	82 81       	ldd	r24, Z+2	; 0x02
     df0:	93 81       	ldd	r25, Z+3	; 0x03
     df2:	44 e0       	ldi	r20, 0x04	; 4
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <vfprintf+0x29a>
     df8:	f5 01       	movw	r30, r10
     dfa:	80 81       	ld	r24, Z
     dfc:	91 81       	ldd	r25, Z+1	; 0x01
     dfe:	bc 01       	movw	r22, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	42 e0       	ldi	r20, 0x02	; 2
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	a4 0e       	add	r10, r20
     e0a:	b5 1e       	adc	r11, r21
     e0c:	a1 01       	movw	r20, r2
     e0e:	c4 d0       	rcall	.+392    	; 0xf98 <__ultoa_invert>
     e10:	d8 2e       	mov	r13, r24
     e12:	d2 18       	sub	r13, r2
     e14:	8f e7       	ldi	r24, 0x7F	; 127
     e16:	f8 2e       	mov	r15, r24
     e18:	f1 22       	and	r15, r17
     e1a:	f6 fe       	sbrs	r15, 6
     e1c:	0b c0       	rjmp	.+22     	; 0xe34 <vfprintf+0x2c6>
     e1e:	5e ef       	ldi	r21, 0xFE	; 254
     e20:	f5 22       	and	r15, r21
     e22:	d7 14       	cp	r13, r7
     e24:	38 f4       	brcc	.+14     	; 0xe34 <vfprintf+0x2c6>
     e26:	f4 fe       	sbrs	r15, 4
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <vfprintf+0x2ca>
     e2a:	f2 fc       	sbrc	r15, 2
     e2c:	05 c0       	rjmp	.+10     	; 0xe38 <vfprintf+0x2ca>
     e2e:	8f ee       	ldi	r24, 0xEF	; 239
     e30:	f8 22       	and	r15, r24
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x2ca>
     e34:	1d 2d       	mov	r17, r13
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <vfprintf+0x2cc>
     e38:	17 2d       	mov	r17, r7
     e3a:	f4 fe       	sbrs	r15, 4
     e3c:	0d c0       	rjmp	.+26     	; 0xe58 <vfprintf+0x2ea>
     e3e:	fe 01       	movw	r30, r28
     e40:	ed 0d       	add	r30, r13
     e42:	f1 1d       	adc	r31, r1
     e44:	80 81       	ld	r24, Z
     e46:	80 33       	cpi	r24, 0x30	; 48
     e48:	19 f4       	brne	.+6      	; 0xe50 <vfprintf+0x2e2>
     e4a:	99 ee       	ldi	r25, 0xE9	; 233
     e4c:	f9 22       	and	r15, r25
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <vfprintf+0x2f2>
     e50:	1f 5f       	subi	r17, 0xFF	; 255
     e52:	f2 fe       	sbrs	r15, 2
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <vfprintf+0x2f2>
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <vfprintf+0x2f0>
     e58:	8f 2d       	mov	r24, r15
     e5a:	86 78       	andi	r24, 0x86	; 134
     e5c:	09 f0       	breq	.+2      	; 0xe60 <vfprintf+0x2f2>
     e5e:	1f 5f       	subi	r17, 0xFF	; 255
     e60:	0f 2d       	mov	r16, r15
     e62:	f3 fc       	sbrc	r15, 3
     e64:	13 c0       	rjmp	.+38     	; 0xe8c <vfprintf+0x31e>
     e66:	f0 fe       	sbrs	r15, 0
     e68:	0e c0       	rjmp	.+28     	; 0xe86 <vfprintf+0x318>
     e6a:	1e 15       	cp	r17, r14
     e6c:	10 f0       	brcs	.+4      	; 0xe72 <vfprintf+0x304>
     e6e:	7d 2c       	mov	r7, r13
     e70:	0a c0       	rjmp	.+20     	; 0xe86 <vfprintf+0x318>
     e72:	7d 2c       	mov	r7, r13
     e74:	7e 0c       	add	r7, r14
     e76:	71 1a       	sub	r7, r17
     e78:	1e 2d       	mov	r17, r14
     e7a:	05 c0       	rjmp	.+10     	; 0xe86 <vfprintf+0x318>
     e7c:	80 e2       	ldi	r24, 0x20	; 32
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	b4 01       	movw	r22, r8
     e82:	5e d0       	rcall	.+188    	; 0xf40 <fputc>
     e84:	1f 5f       	subi	r17, 0xFF	; 255
     e86:	1e 15       	cp	r17, r14
     e88:	c8 f3       	brcs	.-14     	; 0xe7c <vfprintf+0x30e>
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <vfprintf+0x326>
     e8c:	1e 15       	cp	r17, r14
     e8e:	10 f4       	brcc	.+4      	; 0xe94 <vfprintf+0x326>
     e90:	e1 1a       	sub	r14, r17
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <vfprintf+0x328>
     e94:	ee 24       	eor	r14, r14
     e96:	04 ff       	sbrs	r16, 4
     e98:	0e c0       	rjmp	.+28     	; 0xeb6 <vfprintf+0x348>
     e9a:	80 e3       	ldi	r24, 0x30	; 48
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	b4 01       	movw	r22, r8
     ea0:	4f d0       	rcall	.+158    	; 0xf40 <fputc>
     ea2:	02 ff       	sbrs	r16, 2
     ea4:	1b c0       	rjmp	.+54     	; 0xedc <vfprintf+0x36e>
     ea6:	01 fd       	sbrc	r16, 1
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <vfprintf+0x342>
     eaa:	88 e7       	ldi	r24, 0x78	; 120
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e c0       	rjmp	.+28     	; 0xecc <vfprintf+0x35e>
     eb0:	88 e5       	ldi	r24, 0x58	; 88
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0b c0       	rjmp	.+22     	; 0xecc <vfprintf+0x35e>
     eb6:	80 2f       	mov	r24, r16
     eb8:	86 78       	andi	r24, 0x86	; 134
     eba:	81 f0       	breq	.+32     	; 0xedc <vfprintf+0x36e>
     ebc:	01 ff       	sbrs	r16, 1
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x356>
     ec0:	8b e2       	ldi	r24, 0x2B	; 43
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <vfprintf+0x358>
     ec4:	80 e2       	ldi	r24, 0x20	; 32
     ec6:	f7 fc       	sbrc	r15, 7
     ec8:	8d e2       	ldi	r24, 0x2D	; 45
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	b4 01       	movw	r22, r8
     ece:	38 d0       	rcall	.+112    	; 0xf40 <fputc>
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <vfprintf+0x36e>
     ed2:	80 e3       	ldi	r24, 0x30	; 48
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	b4 01       	movw	r22, r8
     ed8:	33 d0       	rcall	.+102    	; 0xf40 <fputc>
     eda:	7a 94       	dec	r7
     edc:	d7 14       	cp	r13, r7
     ede:	c8 f3       	brcs	.-14     	; 0xed2 <vfprintf+0x364>
     ee0:	da 94       	dec	r13
     ee2:	f1 01       	movw	r30, r2
     ee4:	ed 0d       	add	r30, r13
     ee6:	f1 1d       	adc	r31, r1
     ee8:	80 81       	ld	r24, Z
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	b4 01       	movw	r22, r8
     eee:	28 d0       	rcall	.+80     	; 0xf40 <fputc>
     ef0:	dd 20       	and	r13, r13
     ef2:	b1 f7       	brne	.-20     	; 0xee0 <vfprintf+0x372>
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <vfprintf+0x392>
     ef6:	80 e2       	ldi	r24, 0x20	; 32
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	b4 01       	movw	r22, r8
     efc:	21 d0       	rcall	.+66     	; 0xf40 <fputc>
     efe:	ea 94       	dec	r14
     f00:	ee 20       	and	r14, r14
     f02:	c9 f7       	brne	.-14     	; 0xef6 <vfprintf+0x388>
     f04:	4b ce       	rjmp	.-874    	; 0xb9c <vfprintf+0x2e>
     f06:	f4 01       	movw	r30, r8
     f08:	66 81       	ldd	r22, Z+6	; 0x06
     f0a:	77 81       	ldd	r23, Z+7	; 0x07
     f0c:	cb 01       	movw	r24, r22
     f0e:	2b 96       	adiw	r28, 0x0b	; 11
     f10:	e2 e1       	ldi	r30, 0x12	; 18
     f12:	ef cd       	rjmp	.-1058   	; 0xaf2 <__epilogue_restores__>

00000f14 <strnlen_P>:
     f14:	fc 01       	movw	r30, r24
     f16:	05 90       	lpm	r0, Z+
     f18:	61 50       	subi	r22, 0x01	; 1
     f1a:	70 40       	sbci	r23, 0x00	; 0
     f1c:	01 10       	cpse	r0, r1
     f1e:	d8 f7       	brcc	.-10     	; 0xf16 <strnlen_P+0x2>
     f20:	80 95       	com	r24
     f22:	90 95       	com	r25
     f24:	8e 0f       	add	r24, r30
     f26:	9f 1f       	adc	r25, r31
     f28:	08 95       	ret

00000f2a <strnlen>:
     f2a:	fc 01       	movw	r30, r24
     f2c:	61 50       	subi	r22, 0x01	; 1
     f2e:	70 40       	sbci	r23, 0x00	; 0
     f30:	01 90       	ld	r0, Z+
     f32:	01 10       	cpse	r0, r1
     f34:	d8 f7       	brcc	.-10     	; 0xf2c <strnlen+0x2>
     f36:	80 95       	com	r24
     f38:	90 95       	com	r25
     f3a:	8e 0f       	add	r24, r30
     f3c:	9f 1f       	adc	r25, r31
     f3e:	08 95       	ret

00000f40 <fputc>:
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	8c 01       	movw	r16, r24
     f4a:	eb 01       	movw	r28, r22
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	81 ff       	sbrs	r24, 1
     f50:	1b c0       	rjmp	.+54     	; 0xf88 <fputc+0x48>
     f52:	82 ff       	sbrs	r24, 2
     f54:	0d c0       	rjmp	.+26     	; 0xf70 <fputc+0x30>
     f56:	2e 81       	ldd	r18, Y+6	; 0x06
     f58:	3f 81       	ldd	r19, Y+7	; 0x07
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	28 17       	cp	r18, r24
     f60:	39 07       	cpc	r19, r25
     f62:	64 f4       	brge	.+24     	; 0xf7c <fputc+0x3c>
     f64:	e8 81       	ld	r30, Y
     f66:	f9 81       	ldd	r31, Y+1	; 0x01
     f68:	01 93       	st	Z+, r16
     f6a:	f9 83       	std	Y+1, r31	; 0x01
     f6c:	e8 83       	st	Y, r30
     f6e:	06 c0       	rjmp	.+12     	; 0xf7c <fputc+0x3c>
     f70:	e8 85       	ldd	r30, Y+8	; 0x08
     f72:	f9 85       	ldd	r31, Y+9	; 0x09
     f74:	80 2f       	mov	r24, r16
     f76:	09 95       	icall
     f78:	89 2b       	or	r24, r25
     f7a:	31 f4       	brne	.+12     	; 0xf88 <fputc+0x48>
     f7c:	8e 81       	ldd	r24, Y+6	; 0x06
     f7e:	9f 81       	ldd	r25, Y+7	; 0x07
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	9f 83       	std	Y+7, r25	; 0x07
     f84:	8e 83       	std	Y+6, r24	; 0x06
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <fputc+0x4c>
     f88:	0f ef       	ldi	r16, 0xFF	; 255
     f8a:	1f ef       	ldi	r17, 0xFF	; 255
     f8c:	c8 01       	movw	r24, r16
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret

00000f98 <__ultoa_invert>:
     f98:	fa 01       	movw	r30, r20
     f9a:	aa 27       	eor	r26, r26
     f9c:	28 30       	cpi	r18, 0x08	; 8
     f9e:	61 f1       	breq	.+88     	; 0xff8 <__ultoa_invert+0x60>
     fa0:	20 31       	cpi	r18, 0x10	; 16
     fa2:	91 f1       	breq	.+100    	; 0x1008 <__ultoa_invert+0x70>
     fa4:	e8 94       	clt
     fa6:	6f 93       	push	r22
     fa8:	6e 7f       	andi	r22, 0xFE	; 254
     faa:	6e 5f       	subi	r22, 0xFE	; 254
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	af 4f       	sbci	r26, 0xFF	; 255
     fb4:	b1 e0       	ldi	r27, 0x01	; 1
     fb6:	40 d0       	rcall	.+128    	; 0x1038 <__ultoa_invert+0xa0>
     fb8:	b4 e0       	ldi	r27, 0x04	; 4
     fba:	3e d0       	rcall	.+124    	; 0x1038 <__ultoa_invert+0xa0>
     fbc:	67 0f       	add	r22, r23
     fbe:	78 1f       	adc	r23, r24
     fc0:	89 1f       	adc	r24, r25
     fc2:	9a 1f       	adc	r25, r26
     fc4:	a1 1d       	adc	r26, r1
     fc6:	68 0f       	add	r22, r24
     fc8:	79 1f       	adc	r23, r25
     fca:	8a 1f       	adc	r24, r26
     fcc:	91 1d       	adc	r25, r1
     fce:	a1 1d       	adc	r26, r1
     fd0:	6a 0f       	add	r22, r26
     fd2:	71 1d       	adc	r23, r1
     fd4:	81 1d       	adc	r24, r1
     fd6:	91 1d       	adc	r25, r1
     fd8:	a1 1d       	adc	r26, r1
     fda:	22 d0       	rcall	.+68     	; 0x1020 <__ultoa_invert+0x88>
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <__ultoa_invert+0x48>
     fde:	68 94       	set
     fe0:	3f 91       	pop	r19
     fe2:	06 2e       	mov	r0, r22
     fe4:	00 0c       	add	r0, r0
     fe6:	30 19       	sub	r19, r0
     fe8:	00 0c       	add	r0, r0
     fea:	00 0c       	add	r0, r0
     fec:	30 19       	sub	r19, r0
     fee:	30 5d       	subi	r19, 0xD0	; 208
     ff0:	31 93       	st	Z+, r19
     ff2:	ce f6       	brtc	.-78     	; 0xfa6 <__ultoa_invert+0xe>
     ff4:	cf 01       	movw	r24, r30
     ff6:	08 95       	ret
     ff8:	46 2f       	mov	r20, r22
     ffa:	47 70       	andi	r20, 0x07	; 7
     ffc:	40 5d       	subi	r20, 0xD0	; 208
     ffe:	41 93       	st	Z+, r20
    1000:	b3 e0       	ldi	r27, 0x03	; 3
    1002:	0f d0       	rcall	.+30     	; 0x1022 <__ultoa_invert+0x8a>
    1004:	c9 f7       	brne	.-14     	; 0xff8 <__ultoa_invert+0x60>
    1006:	f6 cf       	rjmp	.-20     	; 0xff4 <__ultoa_invert+0x5c>
    1008:	46 2f       	mov	r20, r22
    100a:	4f 70       	andi	r20, 0x0F	; 15
    100c:	40 5d       	subi	r20, 0xD0	; 208
    100e:	4a 33       	cpi	r20, 0x3A	; 58
    1010:	18 f0       	brcs	.+6      	; 0x1018 <__ultoa_invert+0x80>
    1012:	49 5d       	subi	r20, 0xD9	; 217
    1014:	31 fd       	sbrc	r19, 1
    1016:	40 52       	subi	r20, 0x20	; 32
    1018:	41 93       	st	Z+, r20
    101a:	02 d0       	rcall	.+4      	; 0x1020 <__ultoa_invert+0x88>
    101c:	a9 f7       	brne	.-22     	; 0x1008 <__ultoa_invert+0x70>
    101e:	ea cf       	rjmp	.-44     	; 0xff4 <__ultoa_invert+0x5c>
    1020:	b4 e0       	ldi	r27, 0x04	; 4
    1022:	a6 95       	lsr	r26
    1024:	97 95       	ror	r25
    1026:	87 95       	ror	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	ba 95       	dec	r27
    102e:	c9 f7       	brne	.-14     	; 0x1022 <__ultoa_invert+0x8a>
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	61 05       	cpc	r22, r1
    1034:	71 05       	cpc	r23, r1
    1036:	08 95       	ret
    1038:	9b 01       	movw	r18, r22
    103a:	ac 01       	movw	r20, r24
    103c:	0a 2e       	mov	r0, r26
    103e:	06 94       	lsr	r0
    1040:	57 95       	ror	r21
    1042:	47 95       	ror	r20
    1044:	37 95       	ror	r19
    1046:	27 95       	ror	r18
    1048:	ba 95       	dec	r27
    104a:	c9 f7       	brne	.-14     	; 0x103e <__ultoa_invert+0xa6>
    104c:	62 0f       	add	r22, r18
    104e:	73 1f       	adc	r23, r19
    1050:	84 1f       	adc	r24, r20
    1052:	95 1f       	adc	r25, r21
    1054:	a0 1d       	adc	r26, r0
    1056:	08 95       	ret

00001058 <__mulhi3>:
    1058:	55 27       	eor	r21, r21
    105a:	00 24       	eor	r0, r0

0000105c <__mulhi3_loop>:
    105c:	80 ff       	sbrs	r24, 0
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <__mulhi3_skip1>
    1060:	06 0e       	add	r0, r22
    1062:	57 1f       	adc	r21, r23

00001064 <__mulhi3_skip1>:
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	61 15       	cp	r22, r1
    106a:	71 05       	cpc	r23, r1
    106c:	21 f0       	breq	.+8      	; 0x1076 <__mulhi3_exit>
    106e:	96 95       	lsr	r25
    1070:	87 95       	ror	r24
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	99 f7       	brne	.-26     	; 0x105c <__mulhi3_loop>

00001076 <__mulhi3_exit>:
    1076:	95 2f       	mov	r25, r21
    1078:	80 2d       	mov	r24, r0
    107a:	08 95       	ret

0000107c <__prologue_saves__>:
    107c:	2f 92       	push	r2
    107e:	3f 92       	push	r3
    1080:	4f 92       	push	r4
    1082:	5f 92       	push	r5
    1084:	6f 92       	push	r6
    1086:	7f 92       	push	r7
    1088:	8f 92       	push	r8
    108a:	9f 92       	push	r9
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	ca 1b       	sub	r28, r26
    10a6:	db 0b       	sbc	r29, r27
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	09 94       	ijmp

000010b4 <_exit>:
    10b4:	f8 94       	cli

000010b6 <__stop_program>:
    10b6:	ff cf       	rjmp	.-2      	; 0x10b6 <__stop_program>
