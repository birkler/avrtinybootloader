
application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001030  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001030  000010c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d8  00800070  00800070  000010d4  2**0
                  ALLOC
  3 .stab         00002ebc  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d3c  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00004ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000295  00000000  00000000  00004d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000115c  00000000  00000000  00004fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000673  00000000  00000000  0000613d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000910  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  000070c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000661  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005be  00000000  00000000  00007841  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000058  00000000  00000000  00007dff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	76 c0       	rjmp	.+236    	; 0xee <__ctors_end>
       2:	d5 c3       	rjmp	.+1962   	; 0x7ae <__vector_1>
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	8e c0       	rjmp	.+284    	; 0x124 <__bad_interrupt>
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	8c c0       	rjmp	.+280    	; 0x124 <__bad_interrupt>
       c:	00 c2       	rjmp	.+1024   	; 0x40e <__vector_6>
       e:	8a c0       	rjmp	.+276    	; 0x124 <__bad_interrupt>
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	88 c0       	rjmp	.+272    	; 0x124 <__bad_interrupt>
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	86 c0       	rjmp	.+268    	; 0x124 <__bad_interrupt>
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	84 c0       	rjmp	.+264    	; 0x124 <__bad_interrupt>
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	82 c0       	rjmp	.+260    	; 0x124 <__bad_interrupt>
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	80 c0       	rjmp	.+256    	; 0x124 <__bad_interrupt>
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>

00000026 <usbDescriptorString0>:
      26:	04 03 09 04                                         ....

0000002a <usbDescriptorStringVendor>:
      2a:	16 03 62 00 69 00 72 00 6b 00 6c 00 65 00 72 00     ..b.i.r.k.l.e.r.
      3a:	2e 00 73 00 65 00                                   ..s.e.

00000040 <usbDescriptorStringDevice>:
      40:	1c 03 42 00 69 00 72 00 6b 00 6c 00 65 00 72 00     ..B.i.r.k.l.e.r.
      50:	20 00 54 00 6f 00 75 00 63 00 68 00                  .T.o.u.c.h.

0000005c <usbDescriptorDevice>:
      5c:	12 01 10 01 00 00 00 08 42 42 53 e4 03 00 01 02     ........BBS.....
      6c:	00 01                                               ..

0000006e <usbDescriptorConfiguration>:
      6e:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
      7e:	00 00 09 21 01 01 00 01 22 55 00 07 05 81 03 08     ...!...."U......
      8e:	00 64                                               .d

00000090 <usbDescriptorHidReport>:
      90:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
      a0:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 03     ..%...u.....u...
      b0:	05 01 09 30 09 31 09 00 15 00 26 ff 7f 35 00 47     ...0.1....&..5.G
      c0:	ff ff 00 00 75 10 95 03 81 02 c0 a1 01 05 09 19     ....u...........
      d0:	01 29 03 15 00 25 01 95 03 75 01 b1 02 95 01 75     .)...%...u.....u
      e0:	05 b1 03 c0 c0                                      .....

000000e5 <__c.1663>:
      e5:	42 6f 6f 74 65 64 21 0a 00                          Booted!..

000000ee <__ctors_end>:
      ee:	11 24       	eor	r1, r1
      f0:	1f be       	out	0x3f, r1	; 63
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d2 e0       	ldi	r29, 0x02	; 2
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	cd bf       	out	0x3d, r28	; 61

000000fa <__do_copy_data>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	a0 e6       	ldi	r26, 0x60	; 96
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	e0 e3       	ldi	r30, 0x30	; 48
     102:	f0 e1       	ldi	r31, 0x10	; 16
     104:	02 c0       	rjmp	.+4      	; 0x10a <.do_copy_data_start>

00000106 <.do_copy_data_loop>:
     106:	05 90       	lpm	r0, Z+
     108:	0d 92       	st	X+, r0

0000010a <.do_copy_data_start>:
     10a:	a0 37       	cpi	r26, 0x70	; 112
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <.do_copy_data_loop>

00000110 <__do_clear_bss>:
     110:	11 e0       	ldi	r17, 0x01	; 1
     112:	a0 e7       	ldi	r26, 0x70	; 112
     114:	b0 e0       	ldi	r27, 0x00	; 0
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a8 34       	cpi	r26, 0x48	; 72
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	b8 d1       	rcall	.+880    	; 0x492 <main>
     122:	84 c7       	rjmp	.+3848   	; 0x102c <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     126:	85 b7       	in	r24, 0x35	; 53
     128:	82 60       	ori	r24, 0x02	; 2
     12a:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     12c:	8b b7       	in	r24, 0x3b	; 59
     12e:	80 64       	ori	r24, 0x40	; 64
     130:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     132:	8b e4       	ldi	r24, 0x4B	; 75
     134:	80 93 18 01 	sts	0x0118, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     138:	8a e5       	ldi	r24, 0x5A	; 90
     13a:	80 93 17 01 	sts	0x0117, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     13e:	08 95       	ret

00000140 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     140:	1f 93       	push	r17
     142:	dc 01       	movw	r26, r24
     144:	16 2f       	mov	r17, r22
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
     146:	80 91 17 01 	lds	r24, 0x0117
     14a:	8e 31       	cpi	r24, 0x1E	; 30
     14c:	e1 f0       	breq	.+56     	; 0x186 <usbSetInterrupt+0x46>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     14e:	80 91 17 01 	lds	r24, 0x0117
     152:	84 ff       	sbrs	r24, 4
     154:	07 c0       	rjmp	.+14     	; 0x164 <usbSetInterrupt+0x24>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     156:	80 91 18 01 	lds	r24, 0x0118
     15a:	98 e8       	ldi	r25, 0x88	; 136
     15c:	89 27       	eor	r24, r25
     15e:	80 93 18 01 	sts	0x0118, r24
     162:	03 c0       	rjmp	.+6      	; 0x16a <usbSetInterrupt+0x2a>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     164:	8a e5       	ldi	r24, 0x5A	; 90
     166:	80 93 17 01 	sts	0x0117, r24
     16a:	91 2f       	mov	r25, r17
     16c:	e9 e1       	ldi	r30, 0x19	; 25
     16e:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     170:	8d 91       	ld	r24, X+
     172:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     174:	91 50       	subi	r25, 0x01	; 1
     176:	e1 f7       	brne	.-8      	; 0x170 <usbSetInterrupt+0x30>
    usbCrc16Append(&txStatus->buffer[1], len);
     178:	89 e1       	ldi	r24, 0x19	; 25
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	61 2f       	mov	r22, r17
     17e:	00 d3       	rcall	.+1536   	; 0x780 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     180:	1c 5f       	subi	r17, 0xFC	; 252
     182:	10 93 17 01 	sts	0x0117, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     186:	1f 91       	pop	r17
     188:	08 95       	ret

0000018a <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     190:	90 91 28 01 	lds	r25, 0x0128
     194:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
     196:	97 fd       	sbrc	r25, 7
     198:	cd c0       	rjmp	.+410    	; 0x334 <__stack+0xd5>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     19a:	20 91 25 01 	lds	r18, 0x0125
 * 0x2d 00101101 (USBPID_SETUP for setup data)
 * 0xe1 11100001 (USBPID_OUT: data phase of setup transfer)
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
     19e:	c3 98       	cbi	0x18, 3	; 24
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     1a0:	80 91 24 01 	lds	r24, 0x0124
     1a4:	8d 32       	cpi	r24, 0x2D	; 45
     1a6:	09 f0       	breq	.+2      	; 0x1aa <usbPoll+0x20>
     1a8:	c3 c0       	rjmp	.+390    	; 0x330 <__stack+0xd1>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     1aa:	98 30       	cpi	r25, 0x08	; 8
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <usbPoll+0x26>
     1ae:	c0 c0       	rjmp	.+384    	; 0x330 <__stack+0xd1>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     1b0:	cc e0       	ldi	r28, 0x0C	; 12
     1b2:	d0 e0       	ldi	r29, 0x00	; 0
     1b4:	c2 1b       	sub	r28, r18
     1b6:	d1 09       	sbc	r29, r1
     1b8:	c4 5d       	subi	r28, 0xD4	; 212
     1ba:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     1bc:	83 ec       	ldi	r24, 0xC3	; 195
     1be:	80 93 0c 01 	sts	0x010C, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     1c2:	8a e5       	ldi	r24, 0x5A	; 90
     1c4:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
     1c8:	10 92 71 00 	sts	0x0071, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     1cc:	98 81       	ld	r25, Y
     1ce:	89 2f       	mov	r24, r25
     1d0:	80 76       	andi	r24, 0x60	; 96
     1d2:	21 f0       	breq	.+8      	; 0x1dc <usbPoll+0x52>
            replyLen = usbFunctionSetup(data);
     1d4:	ce 01       	movw	r24, r28
     1d6:	3a d1       	rcall	.+628    	; 0x44c <usbFunctionSetup>
     1d8:	28 2f       	mov	r18, r24
     1da:	a1 c0       	rjmp	.+322    	; 0x31e <__stack+0xbf>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     1dc:	2a 81       	ldd	r18, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
     1de:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     1e0:	10 92 15 01 	sts	0x0115, r1
    SWITCH_START(rq->bRequest)
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     1e6:	88 23       	and	r24, r24
     1e8:	81 f4       	brne	.+32     	; 0x20a <usbPoll+0x80>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
     1ea:	9f 71       	andi	r25, 0x1F	; 31
     1ec:	92 30       	cpi	r25, 0x02	; 2
     1ee:	49 f4       	brne	.+18     	; 0x202 <usbPoll+0x78>
     1f0:	31 38       	cpi	r19, 0x81	; 129
     1f2:	39 f4       	brne	.+14     	; 0x202 <usbPoll+0x78>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
     1f4:	80 91 17 01 	lds	r24, 0x0117
     1f8:	8e 31       	cpi	r24, 0x1E	; 30
     1fa:	19 f4       	brne	.+6      	; 0x202 <usbPoll+0x78>
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 15 01 	sts	0x0115, r24
#endif
        dataPtr[1] = 0;
     202:	10 92 16 01 	sts	0x0116, r1
     206:	22 e0       	ldi	r18, 0x02	; 2
     208:	84 c0       	rjmp	.+264    	; 0x312 <__stack+0xb3>
        len = 2;
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	11 f0       	breq	.+4      	; 0x212 <usbPoll+0x88>
     20e:	83 30       	cpi	r24, 0x03	; 3
     210:	89 f4       	brne	.+34     	; 0x234 <usbPoll+0xaa>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
     212:	22 23       	and	r18, r18
     214:	09 f0       	breq	.+2      	; 0x218 <usbPoll+0x8e>
     216:	7c c0       	rjmp	.+248    	; 0x310 <__stack+0xb1>
     218:	31 38       	cpi	r19, 0x81	; 129
     21a:	09 f0       	breq	.+2      	; 0x21e <usbPoll+0x94>
     21c:	79 c0       	rjmp	.+242    	; 0x310 <__stack+0xb1>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	11 f0       	breq	.+4      	; 0x226 <usbPoll+0x9c>
     222:	8e e1       	ldi	r24, 0x1E	; 30
     224:	01 c0       	rjmp	.+2      	; 0x228 <usbPoll+0x9e>
     226:	8a e5       	ldi	r24, 0x5A	; 90
     228:	80 93 17 01 	sts	0x0117, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     22c:	8b e4       	ldi	r24, 0x4B	; 75
     22e:	80 93 18 01 	sts	0x0118, r24
     232:	6e c0       	rjmp	.+220    	; 0x310 <__stack+0xb1>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     234:	85 30       	cpi	r24, 0x05	; 5
     236:	19 f4       	brne	.+6      	; 0x23e <usbPoll+0xb4>
        usbNewDeviceAddr = value;
     238:	20 93 29 01 	sts	0x0129, r18
     23c:	69 c0       	rjmp	.+210    	; 0x310 <__stack+0xb1>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     23e:	86 30       	cpi	r24, 0x06	; 6
     240:	09 f0       	breq	.+2      	; 0x244 <usbPoll+0xba>
     242:	4f c0       	rjmp	.+158    	; 0x2e2 <__stack+0x83>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     244:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	41 f4       	brne	.+16     	; 0x25a <usbPoll+0xd0>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     24a:	8c e5       	ldi	r24, 0x5C	; 92
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	90 93 27 01 	sts	0x0127, r25
     252:	80 93 26 01 	sts	0x0126, r24
     256:	22 e1       	ldi	r18, 0x12	; 18
     258:	40 c0       	rjmp	.+128    	; 0x2da <__stack+0x7b>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     25a:	82 30       	cpi	r24, 0x02	; 2
     25c:	41 f4       	brne	.+16     	; 0x26e <__stack+0xf>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     25e:	8e e6       	ldi	r24, 0x6E	; 110
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 27 01 	sts	0x0127, r25
     266:	80 93 26 01 	sts	0x0126, r24
     26a:	22 e2       	ldi	r18, 0x22	; 34
     26c:	36 c0       	rjmp	.+108    	; 0x2da <__stack+0x7b>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	f9 f4       	brne	.+62     	; 0x2b0 <__stack+0x51>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     272:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     274:	88 23       	and	r24, r24
     276:	41 f4       	brne	.+16     	; 0x288 <__stack+0x29>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     278:	86 e2       	ldi	r24, 0x26	; 38
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	90 93 27 01 	sts	0x0127, r25
     280:	80 93 26 01 	sts	0x0126, r24
     284:	24 e0       	ldi	r18, 0x04	; 4
     286:	29 c0       	rjmp	.+82     	; 0x2da <__stack+0x7b>
        SWITCH_CASE(1)
     288:	81 30       	cpi	r24, 0x01	; 1
     28a:	41 f4       	brne	.+16     	; 0x29c <__stack+0x3d>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     28c:	8a e2       	ldi	r24, 0x2A	; 42
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	90 93 27 01 	sts	0x0127, r25
     294:	80 93 26 01 	sts	0x0126, r24
     298:	26 e1       	ldi	r18, 0x16	; 22
     29a:	1f c0       	rjmp	.+62     	; 0x2da <__stack+0x7b>
        SWITCH_CASE(2)
     29c:	82 30       	cpi	r24, 0x02	; 2
     29e:	e1 f4       	brne	.+56     	; 0x2d8 <__stack+0x79>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     2a0:	80 e4       	ldi	r24, 0x40	; 64
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	90 93 27 01 	sts	0x0127, r25
     2a8:	80 93 26 01 	sts	0x0126, r24
     2ac:	2c e1       	ldi	r18, 0x1C	; 28
     2ae:	15 c0       	rjmp	.+42     	; 0x2da <__stack+0x7b>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     2b0:	81 32       	cpi	r24, 0x21	; 33
     2b2:	41 f4       	brne	.+16     	; 0x2c4 <__stack+0x65>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     2b4:	80 e8       	ldi	r24, 0x80	; 128
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 27 01 	sts	0x0127, r25
     2bc:	80 93 26 01 	sts	0x0126, r24
     2c0:	29 e0       	ldi	r18, 0x09	; 9
     2c2:	0b c0       	rjmp	.+22     	; 0x2da <__stack+0x7b>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     2c4:	82 32       	cpi	r24, 0x22	; 34
     2c6:	41 f4       	brne	.+16     	; 0x2d8 <__stack+0x79>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     2c8:	80 e9       	ldi	r24, 0x90	; 144
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	90 93 27 01 	sts	0x0127, r25
     2d0:	80 93 26 01 	sts	0x0126, r24
     2d4:	25 e5       	ldi	r18, 0x55	; 85
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <__stack+0x7b>
     2d8:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     2da:	80 e4       	ldi	r24, 0x40	; 64
     2dc:	80 93 71 00 	sts	0x0071, r24
     2e0:	1e c0       	rjmp	.+60     	; 0x31e <__stack+0xbf>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     2e2:	88 30       	cpi	r24, 0x08	; 8
     2e4:	21 f4       	brne	.+8      	; 0x2ee <__stack+0x8f>
     2e6:	21 e0       	ldi	r18, 0x01	; 1
     2e8:	8b e2       	ldi	r24, 0x2B	; 43
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	14 c0       	rjmp	.+40     	; 0x316 <__stack+0xb7>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     2ee:	89 30       	cpi	r24, 0x09	; 9
     2f0:	19 f4       	brne	.+6      	; 0x2f8 <__stack+0x99>
        usbConfiguration = value;
     2f2:	20 93 2b 01 	sts	0x012B, r18
     2f6:	09 c0       	rjmp	.+18     	; 0x30a <__stack+0xab>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     2f8:	8a 30       	cpi	r24, 0x0A	; 10
     2fa:	11 f4       	brne	.+4      	; 0x300 <__stack+0xa1>
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <__stack+0xb3>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     300:	8b 30       	cpi	r24, 0x0B	; 11
     302:	31 f4       	brne	.+12     	; 0x310 <__stack+0xb1>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     304:	8b e4       	ldi	r24, 0x4B	; 75
     306:	80 93 18 01 	sts	0x0118, r24
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     30a:	8a e5       	ldi	r24, 0x5A	; 90
     30c:	80 93 17 01 	sts	0x0117, r24
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	85 e1       	ldi	r24, 0x15	; 21
     314:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     316:	90 93 27 01 	sts	0x0127, r25
     31a:	80 93 26 01 	sts	0x0126, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     31e:	8f 81       	ldd	r24, Y+7	; 0x07
     320:	88 23       	and	r24, r24
     322:	21 f4       	brne	.+8      	; 0x32c <__stack+0xcd>
     324:	8e 81       	ldd	r24, Y+6	; 0x06
     326:	82 17       	cp	r24, r18
     328:	08 f4       	brcc	.+2      	; 0x32c <__stack+0xcd>
     32a:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     32c:	20 93 61 00 	sts	0x0061, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     330:	10 92 28 01 	sts	0x0128, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     334:	80 91 60 00 	lds	r24, 0x0060
     338:	84 ff       	sbrs	r24, 4
     33a:	49 c0       	rjmp	.+146    	; 0x3ce <__stack+0x16f>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     33c:	80 91 61 00 	lds	r24, 0x0061
     340:	8f 3f       	cpi	r24, 0xFF	; 255
     342:	09 f4       	brne	.+2      	; 0x346 <__stack+0xe7>
     344:	44 c0       	rjmp	.+136    	; 0x3ce <__stack+0x16f>
     346:	18 2f       	mov	r17, r24
     348:	89 30       	cpi	r24, 0x09	; 9
     34a:	08 f0       	brcs	.+2      	; 0x34e <__stack+0xef>
     34c:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     34e:	81 1b       	sub	r24, r17
     350:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     354:	80 91 0c 01 	lds	r24, 0x010C
     358:	98 e8       	ldi	r25, 0x88	; 136
     35a:	89 27       	eor	r24, r25
     35c:	80 93 0c 01 	sts	0x010C, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     360:	11 23       	and	r17, r17
     362:	41 f1       	breq	.+80     	; 0x3b4 <__stack+0x155>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
     364:	20 91 26 01 	lds	r18, 0x0126
     368:	30 91 27 01 	lds	r19, 0x0127
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     36c:	80 91 71 00 	lds	r24, 0x0071
     370:	86 ff       	sbrs	r24, 6
     372:	0d c0       	rjmp	.+26     	; 0x38e <__stack+0x12f>
     374:	ad e0       	ldi	r26, 0x0D	; 13
     376:	b1 e0       	ldi	r27, 0x01	; 1
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     37c:	f9 01       	movw	r30, r18
     37e:	e8 0f       	add	r30, r24
     380:	f9 1f       	adc	r31, r25
     382:	e4 91       	lpm	r30, Z+
                    *data++ = c;
     384:	ed 93       	st	X+, r30
     386:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
     388:	18 17       	cp	r17, r24
     38a:	c1 f7       	brne	.-16     	; 0x37c <__stack+0x11d>
     38c:	08 c0       	rjmp	.+16     	; 0x39e <__stack+0x13f>
     38e:	91 2f       	mov	r25, r17
     390:	d9 01       	movw	r26, r18
     392:	ed e0       	ldi	r30, 0x0D	; 13
     394:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
     396:	8d 91       	ld	r24, X+
     398:	81 93       	st	Z+, r24
                }while(--i);
     39a:	91 50       	subi	r25, 0x01	; 1
     39c:	e1 f7       	brne	.-8      	; 0x396 <__stack+0x137>
     39e:	11 50       	subi	r17, 0x01	; 1
     3a0:	81 2f       	mov	r24, r17
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	1f 5f       	subi	r17, 0xFF	; 255
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	82 0f       	add	r24, r18
     3aa:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
     3ac:	90 93 27 01 	sts	0x0127, r25
     3b0:	80 93 26 01 	sts	0x0126, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     3b4:	8d e0       	ldi	r24, 0x0D	; 13
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	61 2f       	mov	r22, r17
     3ba:	e2 d1       	rcall	.+964    	; 0x780 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     3bc:	61 2f       	mov	r22, r17
     3be:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     3c0:	6c 30       	cpi	r22, 0x0C	; 12
     3c2:	19 f0       	breq	.+6      	; 0x3ca <__stack+0x16b>
            usbMsgLen = USB_NO_MSG;
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	80 93 61 00 	sts	0x0061, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
     3ca:	60 93 60 00 	sts	0x0060, r22
     3ce:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
     3d0:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
     3d2:	84 74       	andi	r24, 0x44	; 68
     3d4:	49 f4       	brne	.+18     	; 0x3e8 <__stack+0x189>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     3d6:	91 50       	subi	r25, 0x01	; 1
     3d8:	d9 f7       	brne	.-10     	; 0x3d0 <__stack+0x171>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     3da:	10 92 29 01 	sts	0x0129, r1
    usbDeviceAddr = 0;
     3de:	10 92 23 01 	sts	0x0123, r1
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     3e2:	8a e5       	ldi	r24, 0x5A	; 90
     3e4:	80 93 17 01 	sts	0x0117, r24

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	99 23       	and	r25, r25
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <__stack+0x191>
     3ee:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
     3f0:	80 91 70 00 	lds	r24, 0x0070
     3f4:	81 17       	cp	r24, r17
     3f6:	39 f0       	breq	.+14     	; 0x406 <__stack+0x1a7>
        USB_RESET_HOOK(isReset);
     3f8:	11 23       	and	r17, r17
     3fa:	19 f4       	brne	.+6      	; 0x402 <__stack+0x1a3>
     3fc:	f8 94       	cli
     3fe:	e3 d0       	rcall	.+454    	; 0x5c6 <calibrateOscillator>
     400:	78 94       	sei
        wasReset = isReset;
     402:	10 93 70 00 	sts	0x0070, r17
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	08 95       	ret

0000040e <__vector_6>:
/* ------------------------------------------------------------------------- */



ISR(TIMER0_OVF_vect)
{
     40e:	1f 92       	push	r1
     410:	0f 92       	push	r0
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	0f 92       	push	r0
     416:	11 24       	eor	r1, r1
}
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <usb_putchar>:

static FILE usb_stream = FDEV_SETUP_STREAM2(usb_putchar, NULL, _FDEV_SETUP_WRITE,&usb_stream_buffer);


static int usb_putchar(char c, FILE *stream)
{
     422:	98 2f       	mov	r25, r24
     424:	fb 01       	movw	r30, r22
	usb_stream_buffer_t* s = fdev_get_udata(stream);
     426:	a4 85       	ldd	r26, Z+12	; 0x0c
     428:	b5 85       	ldd	r27, Z+13	; 0x0d
	if (c == '\n') c = '\r';
     42a:	8a 30       	cpi	r24, 0x0A	; 10
     42c:	09 f4       	brne	.+2      	; 0x430 <usb_putchar+0xe>
     42e:	9d e0       	ldi	r25, 0x0D	; 13
	s->data[s->pos++] = c;
     430:	16 96       	adiw	r26, 0x06	; 6
     432:	8c 91       	ld	r24, X
     434:	16 97       	sbiw	r26, 0x06	; 6
     436:	fd 01       	movw	r30, r26
     438:	e8 0f       	add	r30, r24
     43a:	f1 1d       	adc	r31, r1
     43c:	97 83       	std	Z+7, r25	; 0x07
	s->pos %= sizeof(s->data);
     43e:	8f 5f       	subi	r24, 0xFF	; 255
     440:	8f 77       	andi	r24, 0x7F	; 127
     442:	16 96       	adiw	r26, 0x06	; 6
     444:	8c 93       	st	X, r24
	return 0;
}
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	08 95       	ret

0000044c <usbFunctionSetup>:
static report_t reportBuffer;
static uchar    idleRate;   /* repeat rate for keyboards, never used for mice */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	usbRequest_t    *rq = (void *)data;
     44c:	fc 01       	movw	r30, r24

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     44e:	80 81       	ld	r24, Z
     450:	80 76       	andi	r24, 0x60	; 96
     452:	80 32       	cpi	r24, 0x20	; 32
     454:	e1 f4       	brne	.+56     	; 0x48e <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
     456:	81 81       	ldd	r24, Z+1	; 0x01
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	41 f4       	brne	.+16     	; 0x46c <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
     45c:	82 e7       	ldi	r24, 0x72	; 114
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	90 93 27 01 	sts	0x0127, r25
     464:	80 93 26 01 	sts	0x0126, r24
     468:	87 e0       	ldi	r24, 0x07	; 7
     46a:	08 95       	ret
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	41 f4       	brne	.+16     	; 0x480 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
     470:	89 e7       	ldi	r24, 0x79	; 121
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	90 93 27 01 	sts	0x0127, r25
     478:	80 93 26 01 	sts	0x0126, r24
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
     480:	8a 30       	cpi	r24, 0x0A	; 10
     482:	29 f4       	brne	.+10     	; 0x48e <usbFunctionSetup+0x42>
            idleRate = rq->wValue.bytes[1];
     484:	83 81       	ldd	r24, Z+3	; 0x03
     486:	80 93 79 00 	sts	0x0079, r24
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
     48e:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
     490:	08 95       	ret

00000492 <main>:


/* ------------------------------------------------------------------------- */

int main(void)
{
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29


#ifndef __ASSEMBLER__

static inline void hardwareInit(void) {
	LED_RED_INIT();
     498:	bb 9a       	sbi	0x17, 3	; 23
     49a:	c3 98       	cbi	0x18, 3	; 24
     49c:	c3 98       	cbi	0x18, 3	; 24
	LED_BUTTON_INIT();
     49e:	b9 9a       	sbi	0x17, 1	; 23
     4a0:	c1 98       	cbi	0x18, 1	; 24
     4a2:	c1 98       	cbi	0x18, 1	; 24
	TIMER0_INIT();
     4a4:	15 ba       	out	0x15, r1	; 21
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	83 bf       	out	0x33, r24	; 51
	BUTTON_INIT();
     4aa:	d4 98       	cbi	0x1a, 4	; 26
     4ac:	dc 9a       	sbi	0x1b, 4	; 27
	POT_INIT();
     4ae:	d0 9a       	sbi	0x1a, 0	; 26
     4b0:	d1 98       	cbi	0x1a, 1	; 26
     4b2:	d9 98       	cbi	0x1b, 1	; 27
	hardwareInit();
	stdout = &usb_stream;
     4b4:	82 e6       	ldi	r24, 0x62	; 98
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	90 93 45 01 	sts	0x0145, r25
     4bc:	80 93 44 01 	sts	0x0144, r24
	usbDeviceDisconnect();
     4c0:	bc 98       	cbi	0x17, 4	; 23
     4c2:	c4 98       	cbi	0x18, 4	; 24
		i = 0;
		while (--i)
			; /* delay >10ms for USB reset */
	}

	wdt_enable(WDTO_2S);
     4c4:	2f e0       	ldi	r18, 0x0F	; 15
     4c6:	88 e1       	ldi	r24, 0x18	; 24
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	a8 95       	wdr
     4d0:	81 bd       	out	0x21, r24	; 33
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	21 bd       	out	0x21, r18	; 33
  	odDebugInit();
	usbInit();
     4d6:	27 de       	rcall	.-946    	; 0x126 <usbInit>

	sei();
     4d8:	78 94       	sei
	usbDeviceConnect();
     4da:	bc 9a       	sbi	0x17, 4	; 23
     4dc:	c4 9a       	sbi	0x18, 4	; 24
	POT_ON();
     4de:	d8 9a       	sbi	0x1b, 0	; 27
	POT_ADC_SETUP();
     4e0:	83 e9       	ldi	r24, 0x93	; 147
     4e2:	86 b9       	out	0x06, r24	; 6
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	87 b9       	out	0x07, r24	; 7
	LED_RED_ON();
     4e8:	c3 9a       	sbi	0x18, 3	; 24
	Timer_Set(TIMER_LED_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	60 ed       	ldi	r22, 0xD0	; 208
     4ee:	77 e0       	ldi	r23, 0x07	; 7
     4f0:	19 d1       	rcall	.+562    	; 0x724 <Timer_Set>
	Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	60 ed       	ldi	r22, 0xD0	; 208
     4f6:	77 e0       	ldi	r23, 0x07	; 7
     4f8:	15 d1       	rcall	.+554    	; 0x724 <Timer_Set>
	Timer_Set(TIMER_SELF_TEST,TIMER_SELF_TEST_TIMEOUT);
     4fa:	84 e0       	ldi	r24, 0x04	; 4
     4fc:	6c e2       	ldi	r22, 0x2C	; 44
     4fe:	71 e0       	ldi	r23, 0x01	; 1
     500:	11 d1       	rcall	.+546    	; 0x724 <Timer_Set>
	Timer_Set(TIMER_MEASURE_POT,TIMER_MEASURE_POT_TIMEOUT);
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	64 e6       	ldi	r22, 0x64	; 100
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	0d d1       	rcall	.+538    	; 0x724 <Timer_Set>
	printf_P(PSTR("Booted!\n"));
     50a:	00 d0       	rcall	.+0      	; 0x50c <main+0x7a>
     50c:	85 ee       	ldi	r24, 0xE5	; 229
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	ed b7       	in	r30, 0x3d	; 61
     512:	fe b7       	in	r31, 0x3e	; 62
     514:	92 83       	std	Z+2, r25	; 0x02
     516:	81 83       	std	Z+1, r24	; 0x01
     518:	c3 d2       	rcall	.+1414   	; 0xaa0 <printf_P>
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0

		if (POT_ADC_IS_COMPLETED()) {
			LED_BUTTON_CHANGE();
			if (POT_ADC_IS_POT_CHANNEL()) {
				reportBuffer.x = ADC;
				reportBuffer.y = 2048;
     51e:	c0 e0       	ldi	r28, 0x00	; 0
     520:	d8 e0       	ldi	r29, 0x08	; 8

		//LED Timer
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_LED_BLINK)) {
			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
			LED_RED_CHANGE();
     522:	18 e0       	ldi	r17, 0x08	; 8
	printf_P(PSTR("Booted!\n"));
	// main event loop
	for (;;)
	{
		//Watchdog
		wdt_reset();
     524:	a8 95       	wdr


		//Timers
		/////////////////////////////////////////////////////
		if (TIFR & _BV(TOV0)) {
     526:	08 b6       	in	r0, 0x38	; 56
     528:	01 fe       	sbrs	r0, 1
     52a:	06 c0       	rjmp	.+12     	; 0x538 <main+0xa6>
			TIFR |= _BV(TOV0);
     52c:	88 b7       	in	r24, 0x38	; 56
     52e:	82 60       	ori	r24, 0x02	; 2
     530:	88 bf       	out	0x38, r24	; 56
			Timers_DecreaseAll(TIMER0_OVERFLOW_PERIOD_MS_X256);
     532:	88 ef       	ldi	r24, 0xF8	; 248
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	9c d0       	rcall	.+312    	; 0x670 <Timers_DecreaseAll>
		}

		//usb
		/////////////////////////////////////////////////////
		usbPoll();
     538:	28 de       	rcall	.-944    	; 0x18a <usbPoll>

		//USB interrupt
		/////////////////////////////////////////////////////
		if (usbInterruptIsReady())
     53a:	80 91 17 01 	lds	r24, 0x0117
     53e:	84 ff       	sbrs	r24, 4
     540:	04 c0       	rjmp	.+8      	; 0x54a <main+0xb8>
		{
			/* use last key and not current key status in order to avoid lost changes in key status. */
			//buildReport(0);
			usbSetInterrupt((uchar*)&reportBuffer, sizeof(reportBuffer));
     542:	82 e7       	ldi	r24, 0x72	; 114
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	67 e0       	ldi	r22, 0x07	; 7
     548:	fb dd       	rcall	.-1034   	; 0x140 <usbSetInterrupt>
		}

		//
		///////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_MEASURE_POT)) {
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	c2 d0       	rcall	.+388    	; 0x6d2 <Timer_HasExpired>
     54e:	89 2b       	or	r24, r25
     550:	39 f0       	breq	.+14     	; 0x560 <main+0xce>
			Timer_Set(TIMER_MEASURE_POT,TIMER_MEASURE_POT_TIMEOUT);
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	64 e6       	ldi	r22, 0x64	; 100
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	e5 d0       	rcall	.+458    	; 0x724 <Timer_Set>
			POT_ADC_START();
     55a:	86 b1       	in	r24, 0x06	; 6
     55c:	86 60       	ori	r24, 0x06	; 6
     55e:	86 b9       	out	0x06, r24	; 6
		}

		if (POT_ADC_IS_COMPLETED()) {
     560:	86 b1       	in	r24, 0x06	; 6
			LED_BUTTON_CHANGE();
     562:	88 b3       	in	r24, 0x18	; 24
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	89 27       	eor	r24, r25
     568:	88 bb       	out	0x18, r24	; 24
			if (POT_ADC_IS_POT_CHANNEL()) {
     56a:	87 b1       	in	r24, 0x07	; 7
     56c:	8f 71       	andi	r24, 0x1F	; 31
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	51 f4       	brne	.+20     	; 0x586 <main+0xf4>
				reportBuffer.x = ADC;
     572:	84 b1       	in	r24, 0x04	; 4
     574:	95 b1       	in	r25, 0x05	; 5
     576:	90 93 74 00 	sts	0x0074, r25
     57a:	80 93 73 00 	sts	0x0073, r24
				reportBuffer.y = 2048;
     57e:	d0 93 76 00 	sts	0x0076, r29
     582:	c0 93 75 00 	sts	0x0075, r28
			}
		}

		//LED Timer
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_LED_BLINK)) {
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	a4 d0       	rcall	.+328    	; 0x6d2 <Timer_HasExpired>
     58a:	89 2b       	or	r24, r25
     58c:	39 f0       	breq	.+14     	; 0x59c <main+0x10a>
			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	64 ef       	ldi	r22, 0xF4	; 244
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	c7 d0       	rcall	.+398    	; 0x724 <Timer_Set>
			LED_RED_CHANGE();
     596:	88 b3       	in	r24, 0x18	; 24
     598:	81 27       	eor	r24, r17
     59a:	88 bb       	out	0x18, r24	; 24
		}
		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	99 d0       	rcall	.+306    	; 0x6d2 <Timer_HasExpired>
     5a0:	89 2b       	or	r24, r25
     5a2:	21 f0       	breq	.+8      	; 0x5ac <main+0x11a>
			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	6a ef       	ldi	r22, 0xFA	; 250
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	bc d0       	rcall	.+376    	; 0x724 <Timer_Set>
			//LED_BUTTON_CHANGE();
		}

		if (BUTTON_IS_PRESSED()) {
     5ac:	cc 99       	sbic	0x19, 4	; 25
     5ae:	05 c0       	rjmp	.+10     	; 0x5ba <main+0x128>
			LED_BUTTON_ON();
     5b0:	c1 9a       	sbi	0x18, 1	; 24
			reportBuffer.buttonMask |= 0x1;
     5b2:	80 91 72 00 	lds	r24, 0x0072
     5b6:	81 60       	ori	r24, 0x01	; 1
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <main+0x12e>
		}
		else {
			reportBuffer.buttonMask &= ~0x1;
     5ba:	80 91 72 00 	lds	r24, 0x0072
     5be:	8e 7f       	andi	r24, 0xFE	; 254
     5c0:	80 93 72 00 	sts	0x0072, r24
     5c4:	af cf       	rjmp	.-162    	; 0x524 <main+0x92>

000005c6 <calibrateOscillator>:
 * signal (a single SE0 bit) repeating every millisecond immediately after
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	80 e8       	ldi	r24, 0x80	; 128
     5d4:	f8 2e       	mov	r15, r24
     5d6:	00 e0       	ldi	r16, 0x00	; 0
     5d8:	c0 e0       	ldi	r28, 0x00	; 0
     5da:	d0 e0       	ldi	r29, 0x00	; 0
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
     5dc:	10 2f       	mov	r17, r16
     5de:	1f 0d       	add	r17, r15
     5e0:	11 bf       	out	0x31, r17	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
     5e2:	d2 d0       	rcall	.+420    	; 0x788 <usbMeasureFrameLength>
     5e4:	9c 01       	movw	r18, r24
        if(x < targetValue)             /* frequency still too low */
     5e6:	89 e0       	ldi	r24, 0x09	; 9
     5e8:	24 33       	cpi	r18, 0x34	; 52
     5ea:	38 07       	cpc	r19, r24
     5ec:	0c f0       	brlt	.+2      	; 0x5f0 <calibrateOscillator+0x2a>
     5ee:	10 2f       	mov	r17, r16
            trialValue += step;
        step >>= 1;
     5f0:	f6 94       	lsr	r15
     5f2:	21 96       	adiw	r28, 0x01	; 1
    }while(step > 0);
     5f4:	c8 30       	cpi	r28, 0x08	; 8
     5f6:	d1 05       	cpc	r29, r1
     5f8:	11 f0       	breq	.+4      	; 0x5fe <calibrateOscillator+0x38>
     5fa:	01 2f       	mov	r16, r17
     5fc:	ef cf       	rjmp	.-34     	; 0x5dc <calibrateOscillator+0x16>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     5fe:	11 50       	subi	r17, 0x01	; 1
     600:	11 bf       	out	0x31, r17	; 49
     602:	1f 5f       	subi	r17, 0xFF	; 255
     604:	79 01       	movw	r14, r18
     606:	c1 2f       	mov	r28, r17
     608:	d0 e0       	ldi	r29, 0x00	; 0
     60a:	21 96       	adiw	r28, 0x01	; 1
     60c:	10 c0       	rjmp	.+32     	; 0x62e <calibrateOscillator+0x68>
        x = usbMeasureFrameLength() - targetValue;
     60e:	bc d0       	rcall	.+376    	; 0x788 <usbMeasureFrameLength>
     610:	84 53       	subi	r24, 0x34	; 52
     612:	99 40       	sbci	r25, 0x09	; 9
     614:	97 ff       	sbrs	r25, 7
     616:	03 c0       	rjmp	.+6      	; 0x61e <calibrateOscillator+0x58>
     618:	90 95       	com	r25
     61a:	81 95       	neg	r24
     61c:	9f 4f       	sbci	r25, 0xFF	; 255
        if(x < 0)
            x = -x;
        if(x < optimumDev){
     61e:	8e 15       	cp	r24, r14
     620:	9f 05       	cpc	r25, r15
     622:	14 f4       	brge	.+4      	; 0x628 <calibrateOscillator+0x62>
            optimumDev = x;
            optimumValue = OSCCAL;
     624:	11 b7       	in	r17, 0x31	; 49
     626:	7c 01       	movw	r14, r24
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     628:	81 b7       	in	r24, 0x31	; 49
     62a:	8f 5f       	subi	r24, 0xFF	; 255
     62c:	81 bf       	out	0x31, r24	; 49
     62e:	81 b7       	in	r24, 0x31	; 49
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	c8 17       	cp	r28, r24
     634:	d9 07       	cpc	r29, r25
     636:	5c f7       	brge	.-42     	; 0x60e <calibrateOscillator+0x48>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
     638:	11 bf       	out	0x31, r17	; 49
}
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	e6 e0       	ldi	r30, 0x06	; 6
     640:	20 c2       	rjmp	.+1088   	; 0xa82 <__epilogue_restores__+0x18>

00000642 <Timers_Init>:
void Timers_Init(void)
{
	TimerId_t id;
	for (id=0; id < TIMER_LAST;id++)
	{
    Timers[id]=TIMER_RESET;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	9f ef       	ldi	r25, 0xFF	; 255
     646:	90 93 03 01 	sts	0x0103, r25
     64a:	80 93 02 01 	sts	0x0102, r24
     64e:	90 93 05 01 	sts	0x0105, r25
     652:	80 93 04 01 	sts	0x0104, r24
     656:	90 93 07 01 	sts	0x0107, r25
     65a:	80 93 06 01 	sts	0x0106, r24
     65e:	90 93 09 01 	sts	0x0109, r25
     662:	80 93 08 01 	sts	0x0108, r24
     666:	90 93 0b 01 	sts	0x010B, r25
     66a:	80 93 0a 01 	sts	0x010A, r24
  }
}
     66e:	08 95       	ret

00000670 <Timers_DecreaseAll>:
milliseconds_t Timers_DecreaseAll(milliseconds_x256_t delta_x256)
{
	static unsigned char frag = 0;
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
     670:	20 91 01 01 	lds	r18, 0x0101
     674:	82 0f       	add	r24, r18
     676:	91 1d       	adc	r25, r1
	frag = delta_x256 & 0xFF;
     678:	80 93 01 01 	sts	0x0101, r24
	milliseconds_t delta = delta_x256>>8;
     67c:	89 2f       	mov	r24, r25
     67e:	99 27       	eor	r25, r25
     680:	6f ef       	ldi	r22, 0xFF	; 255
     682:	7f ef       	ldi	r23, 0xFF	; 255
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	50 e0       	ldi	r21, 0x00	; 0
	for (id=0; id < TIMER_LAST;id++)
	{
		milliseconds_t tempTime = Timers[id];
     688:	fa 01       	movw	r30, r20
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ee 5f       	subi	r30, 0xFE	; 254
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	20 81       	ld	r18, Z
     694:	31 81       	ldd	r19, Z+1	; 0x01
		if (tempTime != TIMER_RESET)
     696:	af ef       	ldi	r26, 0xFF	; 255
     698:	2f 3f       	cpi	r18, 0xFF	; 255
     69a:	3a 07       	cpc	r19, r26
     69c:	99 f0       	breq	.+38     	; 0x6c4 <Timers_DecreaseAll+0x54>
		{
			if (tempTime > delta) 
     69e:	82 17       	cp	r24, r18
     6a0:	93 07       	cpc	r25, r19
     6a2:	70 f4       	brcc	.+28     	; 0x6c0 <Timers_DecreaseAll+0x50>
			{
				tempTime-=delta;
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
     6a8:	26 17       	cp	r18, r22
     6aa:	37 07       	cpc	r19, r23
     6ac:	08 f4       	brcc	.+2      	; 0x6b0 <Timers_DecreaseAll+0x40>
     6ae:	b9 01       	movw	r22, r18
				if (tempTime < nextTime) 
				{
					nextTime = tempTime;
				}

				Timers[id] = tempTime;
     6b0:	fa 01       	movw	r30, r20
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ee 5f       	subi	r30, 0xFE	; 254
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	31 83       	std	Z+1, r19	; 0x01
     6bc:	20 83       	st	Z, r18
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <Timers_DecreaseAll+0x54>
			}
			else {
				Timers[id] = TIMER_HAS_EXPIRED;
     6c0:	11 82       	std	Z+1, r1	; 0x01
     6c2:	10 82       	st	Z, r1
     6c4:	4f 5f       	subi	r20, 0xFF	; 255
     6c6:	5f 4f       	sbci	r21, 0xFF	; 255
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
	frag = delta_x256 & 0xFF;
	milliseconds_t delta = delta_x256>>8;
	for (id=0; id < TIMER_LAST;id++)
     6c8:	45 30       	cpi	r20, 0x05	; 5
     6ca:	51 05       	cpc	r21, r1
     6cc:	e9 f6       	brne	.-70     	; 0x688 <Timers_DecreaseAll+0x18>
				Timers[id] = TIMER_HAS_EXPIRED;
			}
		}
	}
	return nextTime;
}
     6ce:	cb 01       	movw	r24, r22
     6d0:	08 95       	ret

000006d2 <Timer_HasExpired>:
int Timer_HasExpired(const TimerId_t TimerId)
{
	int result;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if (Timers[TimerId]==TIMER_HAS_EXPIRED)
     6d2:	e8 2f       	mov	r30, r24
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	ee 5f       	subi	r30, 0xFE	; 254
     6dc:	fe 4f       	sbci	r31, 0xFE	; 254
     6de:	80 81       	ld	r24, Z
     6e0:	91 81       	ldd	r25, Z+1	; 0x01
     6e2:	89 2b       	or	r24, r25
     6e4:	19 f0       	breq	.+6      	; 0x6ec <Timer_HasExpired+0x1a>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <Timer_HasExpired+0x26>
		{
			Timers[TimerId]=TIMER_RESET;
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	9f ef       	ldi	r25, 0xFF	; 255
     6f0:	91 83       	std	Z+1, r25	; 0x01
     6f2:	80 83       	st	Z, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	30 e0       	ldi	r19, 0x00	; 0
		else {
			result = 0;
		}
	}
	return result;
}
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <Timer_Reset>:

void Timer_Reset(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_RESET;
     6fc:	e8 2f       	mov	r30, r24
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	ee 5f       	subi	r30, 0xFE	; 254
     706:	fe 4f       	sbci	r31, 0xFE	; 254
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	9f ef       	ldi	r25, 0xFF	; 255
     70c:	91 83       	std	Z+1, r25	; 0x01
     70e:	80 83       	st	Z, r24
	}
}
     710:	08 95       	ret

00000712 <Timer_SetExpired>:
void Timer_SetExpired(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_HAS_EXPIRED;
     712:	e8 2f       	mov	r30, r24
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	ee 5f       	subi	r30, 0xFE	; 254
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	11 82       	std	Z+1, r1	; 0x01
     720:	10 82       	st	Z, r1
	}
}
     722:	08 95       	ret

00000724 <Timer_Set>:

void Timer_Set(const TimerId_t TimerId,const milliseconds_t setTimeout)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=setTimeout;
     724:	e8 2f       	mov	r30, r24
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	ee 5f       	subi	r30, 0xFE	; 254
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	71 83       	std	Z+1, r23	; 0x01
     732:	60 83       	st	Z, r22
	}
}
     734:	08 95       	ret

00000736 <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     736:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     738:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     73a:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     73c:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     73e:	1b c0       	rjmp	.+54     	; 0x776 <usbCrc16LoopTest>

00000740 <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     740:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     742:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     744:	28 2f       	mov	r18, r24
    swap    byte
     746:	22 95       	swap	r18
    eor     byte, resCrcL
     748:	28 27       	eor	r18, r24
    mov     scratch, byte
     74a:	72 2f       	mov	r23, r18
    lsr     byte
     74c:	26 95       	lsr	r18
    lsr     byte
     74e:	26 95       	lsr	r18
    eor     byte, scratch
     750:	27 27       	eor	r18, r23
    inc     byte
     752:	23 95       	inc	r18
    lsr     byte
     754:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     756:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     758:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     75a:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     75c:	82 27       	eor	r24, r18
    neg     byte
     75e:	21 95       	neg	r18
    andi    byte, 0xc0
     760:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     762:	92 2f       	mov	r25, r18
    clr     byte
     764:	22 27       	eor	r18, r18
    lsr     scratch
     766:	76 95       	lsr	r23
    ror     byte
     768:	27 95       	ror	r18
    eor     resCrcH, scratch
     76a:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     76c:	82 27       	eor	r24, r18
    lsr     scratch
     76e:	76 95       	lsr	r23
    ror     byte
     770:	27 95       	ror	r18
    eor     resCrcH, scratch
     772:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     774:	82 27       	eor	r24, r18

00000776 <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     776:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     778:	18 f7       	brcc	.-58     	; 0x740 <usbCrc16ByteLoop>
    com     resCrcL
     77a:	80 95       	com	r24
    com     resCrcH
     77c:	90 95       	com	r25
    ret
     77e:	08 95       	ret

00000780 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     780:	da df       	rcall	.-76     	; 0x736 <usbCrc16>
    st      ptr+, resCrcL
     782:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     784:	9d 93       	st	X+, r25
    ret
     786:	08 95       	ret

00000788 <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     788:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     78a:	88 27       	eor	r24, r24
    clr     cnt16H
     78c:	99 27       	eor	r25, r25

0000078e <usbMFTime16>:
usbMFTime16:
    dec     cntH
     78e:	aa 95       	dec	r26
    breq    usbMFTimeout
     790:	69 f0       	breq	.+26     	; 0x7ac <usbMFTimeout>

00000792 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     792:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     794:	e1 f3       	breq	.-8      	; 0x78e <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     796:	b2 99       	sbic	0x16, 2	; 22
    rjmp    usbMFWaitStrobe ;[4]
     798:	fc cf       	rjmp	.-8      	; 0x792 <usbMFWaitStrobe>

0000079a <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     79a:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    usbMFWaitIdle   ;2
     79c:	fe cf       	rjmp	.-4      	; 0x79a <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     79e:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     7a0:	99 27       	eor	r25, r25

000007a2 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     7a2:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     7a4:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     7a6:	11 f0       	breq	.+4      	; 0x7ac <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     7a8:	a4 74       	andi	r26, 0x44	; 68
    brne    usbMFWaitLoop   ;[5]
     7aa:	d9 f7       	brne	.-10     	; 0x7a2 <usbMFWaitLoop>

000007ac <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     7ac:	08 95       	ret

000007ae <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
     7ae:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
     7b0:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
     7b2:	cf 93       	push	r28

000007b4 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     7b4:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     7b6:	b2 9b       	sbis	0x16, 2	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     7b8:	e9 f7       	brne	.-6      	; 0x7b4 <waitForJ>

000007ba <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     7ba:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK              ;[-14]
     7bc:	0b c0       	rjmp	.+22     	; 0x7d4 <foundK>
    sbis    USBIN, USBMINUS
     7be:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <foundK>
    sbis    USBIN, USBMINUS
     7c2:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <foundK>
    sbis    USBIN, USBMINUS
     7c6:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <foundK>
    sbis    USBIN, USBMINUS
     7ca:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <foundK>
    sbis    USBIN, USBMINUS
     7ce:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     7d2:	d5 c0       	rjmp	.+426    	; 0x97e <sofError>

000007d4 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
     7d4:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
     7d6:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
     7d8:	c0 91 25 01 	lds	r28, 0x0125
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
     7dc:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
     7de:	c4 5d       	subi	r28, 0xD4	; 212
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
     7e0:	de 4f       	sbci	r29, 0xFE	; 254
    mov     r0, x2              ;[-3] [rx loop init]
     7e2:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     7e4:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    haveTwoBitsK        ;[-1]
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
     7e8:	df 91       	pop	r29
    pop     r0                  ;[2]
     7ea:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     7ec:	e6 cf       	rjmp	.-52     	; 0x7ba <waitForK>

000007ee <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
     7ee:	2f 93       	push	r18
    push    x1              ;[3]
     7f0:	0f 93       	push	r16
    push    x2              ;[5]
     7f2:	1f 93       	push	r17
    push    x3              ;[7]
     7f4:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
     7f6:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
     7f8:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
     7fa:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
     7fc:	02 fb       	bst	r16, 2
    bld     shift, 0        ;[13]
     7fe:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
     800:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
     802:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
     804:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
     806:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
     808:	65 c0       	rjmp	.+202    	; 0x8d4 <rxbit1>

0000080a <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
     80a:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
     80c:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
     80e:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
     810:	52 fd       	sbrc	r21, 2
    lpm                     ;[059] optional nop3; modifies r0
     812:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
     814:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
     816:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
     818:	02 fb       	bst	r16, 2
    bld     shift, 5        ;[063]
     81a:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
     81c:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
     81e:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
     820:	b1 f0       	breq	.+44     	; 0x84e <unstuff5>
    eor     phase, x1       ;[067]
     822:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
     824:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
     826:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[070]
     828:	26 f9       	bld	r18, 6

0000082a <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
     82a:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
     82c:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
     82e:	f0 f0       	brcs	.+60     	; 0x86c <unstuff6>

00000830 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
     830:	00 c0       	rjmp	.+0      	; 0x832 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
     832:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
     834:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
     836:	02 fb       	bst	r16, 2
    bld     shift, 7        ;[079]
     838:	27 f9       	bld	r18, 7

0000083a <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
     83a:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
     83c:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
     83e:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
     840:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
     842:	e8 f5       	brcc	.+122    	; 0x8be <rxLoop>

00000844 <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
     844:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
     846:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
     848:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
     84a:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
     84c:	f6 cf       	rjmp	.-20     	; 0x83a <didUnstuff7>

0000084e <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
     84e:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
     850:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
     852:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
     854:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
     856:	10 2f       	mov	r17, r16
    nop                     ;[073]
     858:	00 00       	nop
    nop2                    ;[074]
     85a:	00 c0       	rjmp	.+0      	; 0x85c <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
     85c:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
     85e:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
     860:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
     862:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
     864:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
     866:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
     868:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
     86a:	e2 cf       	rjmp	.-60     	; 0x830 <didUnstuff5>

0000086c <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
     86c:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
     86e:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
     870:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
     872:	00 c0       	rjmp	.+0      	; 0x874 <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
     874:	da cf       	rjmp	.-76     	; 0x82a <didUnstuff6>

00000876 <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
     876:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
     878:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
     87a:	14 74       	andi	r17, 0x44	; 68
    in      r0, USBIN       ;[017] <-- phase
     87c:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
     87e:	69 f1       	breq	.+90     	; 0x8da <didUnstuff0>
    andi    x3, ~0x01       ;[019]
     880:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
     882:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
     884:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
     886:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
     888:	28 c0       	rjmp	.+80     	; 0x8da <didUnstuff0>

0000088a <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
     88a:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
     88c:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
     88e:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
     890:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
     892:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
     894:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
     896:	29 c0       	rjmp	.+82     	; 0x8ea <didUnstuff1>

00000898 <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
     898:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
     89a:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
     89c:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
     89e:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
     8a0:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
     8a2:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
     8a4:	2d c0       	rjmp	.+90     	; 0x900 <didUnstuff2>

000008a6 <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
     8a6:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
     8a8:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
     8aa:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
     8ac:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
     8ae:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
     8b0:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
     8b2:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
     8b4:	2e c0       	rjmp	.+92     	; 0x912 <didUnstuff3>

000008b6 <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
     8b6:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
     8b8:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
     8ba:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
     8bc:	30 c0       	rjmp	.+96     	; 0x91e <didUnstuff4>

000008be <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     8be:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
     8c0:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
     8c2:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
     8c4:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
     8c6:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
     8c8:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
     8ca:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
     8cc:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
     8ce:	12 fb       	bst	r17, 2
    bld     shift, 0        ;[009]
     8d0:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
     8d2:	29 7f       	andi	r18, 0xF9	; 249

000008d4 <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
     8d4:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
     8d6:	79 f2       	breq	.-98     	; 0x876 <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
     8d8:	14 74       	andi	r17, 0x44	; 68

000008da <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
     8da:	59 f1       	breq	.+86     	; 0x932 <se0>
    eor     r0, x2          ;[015]
     8dc:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
     8de:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
     8e0:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
     8e2:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
     8e4:	02 fb       	bst	r16, 2
    bld     shift, 1        ;[020]
     8e6:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
     8e8:	23 7f       	andi	r18, 0xF3	; 243

000008ea <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
     8ea:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
     8ec:	71 f2       	breq	.-100    	; 0x88a <unstuff1>
    eor     r0, x1          ;[024]
     8ee:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
     8f0:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
     8f2:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
     8f4:	d0 f0       	brcs	.+52     	; 0x92a <overflow>
    in      r0, USBIN       ;[028] <-- phase
     8f6:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
     8f8:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
     8fa:	12 fb       	bst	r17, 2
    bld     shift, 2        ;[031]
     8fc:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
     8fe:	27 7e       	andi	r18, 0xE7	; 231

00000900 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
     900:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
     902:	51 f2       	breq	.-108    	; 0x898 <unstuff2>
    eor     r0, x2          ;[035]
     904:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
     906:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
     908:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
     90a:	02 fb       	bst	r16, 2
    in      r0, USBIN       ;[039] <-- phase
     90c:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
     90e:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
     910:	2f 7c       	andi	r18, 0xCF	; 207

00000912 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
     912:	49 f2       	breq	.-110    	; 0x8a6 <unstuff3>
    nop                     ;[043]
     914:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
     916:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
     918:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
     91a:	12 fb       	bst	r17, 2
    bld     shift, 4        ;[047]
     91c:	24 f9       	bld	r18, 4

0000091e <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
     91e:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
     920:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
     922:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
     924:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
     926:	39 f2       	breq	.-114    	; 0x8b6 <unstuff4>
    rjmp    continueWithBit5;[053]
     928:	70 cf       	rjmp	.-288    	; 0x80a <continueWithBit5>

0000092a <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     92a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     92c:	1a bf       	out	0x3a, r17	; 58

0000092e <ignorePacket>:
ignorePacket:
    clr     token
     92e:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     930:	19 c0       	rjmp	.+50     	; 0x964 <handleSetupOrOut>

00000932 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     932:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     934:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     936:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     938:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     93a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     93c:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     93e:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     940:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     942:	09 f1       	breq	.+66     	; 0x986 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     944:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     946:	f9 f0       	breq	.+62     	; 0x986 <handleData>
    lds     shift, usbDeviceAddr;[17]
     948:	20 91 23 01 	lds	r18, 0x0123
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     94c:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     94e:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     950:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     952:	ed cf       	rjmp	.-38     	; 0x92e <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     954:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     956:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     958:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     95a:	51 f1       	breq	.+84     	; 0x9b0 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     95c:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     95e:	11 f0       	breq	.+4      	; 0x964 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     960:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     962:	29 f7       	brne	.-54     	; 0x92e <ignorePacket>

00000964 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     964:	00 93 2a 01 	sts	0x012A, r16

00000968 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     968:	3f 91       	pop	r19
     96a:	5f 91       	pop	r21
     96c:	4f 91       	pop	r20
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	2f 91       	pop	r18
     974:	df 91       	pop	r29
     976:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
     978:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     97a:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     97c:	1b cf       	rjmp	.-458    	; 0x7b4 <waitForJ>

0000097e <sofError>:
sofError:
    POP_RETI                    ;macro call
     97e:	cf 91       	pop	r28
     980:	cf bf       	out	0x3f, r28	; 63
     982:	cf 91       	pop	r28
    reti
     984:	18 95       	reti

00000986 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     986:	20 91 2a 01 	lds	r18, 0x012A
    tst     shift               ;[20]
     98a:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     98c:	69 f3       	breq	.-38     	; 0x968 <doReturn>
    lds     x2, usbRxLen        ;[22]
     98e:	10 91 28 01 	lds	r17, 0x0128
    tst     x2                  ;[24]
     992:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     994:	79 f5       	brne	.+94     	; 0x9f4 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     996:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     998:	7a f1       	brmi	.+94     	; 0x9f8 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     99a:	30 93 28 01 	sts	0x0128, r19
    sts     usbRxToken, shift   ;[30]
     99e:	20 93 24 01 	sts	0x0124, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
     9a2:	10 91 25 01 	lds	r17, 0x0125
    ldi     cnt, USB_BUFSIZE    ;[34]
     9a6:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     9a8:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     9aa:	30 93 25 01 	sts	0x0125, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     9ae:	24 c0       	rjmp	.+72     	; 0x9f8 <sendAckAndReti>

000009b0 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     9b0:	00 91 28 01 	lds	r16, 0x0128
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     9b4:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     9b6:	f4 f4       	brge	.+60     	; 0x9f4 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     9b8:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     9ba:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     9bc:	49 f4       	brne	.+18     	; 0x9d0 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     9be:	30 91 60 00 	lds	r19, 0x0060
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     9c2:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     9c4:	1a c0       	rjmp	.+52     	; 0x9fa <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     9c6:	00 93 60 00 	sts	0x0060, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
     9ca:	cc e0       	ldi	r28, 0x0C	; 12
    ldi     YH, hi8(usbTxBuf)   ;[44]
     9cc:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     9ce:	19 c0       	rjmp	.+50     	; 0xa02 <usbSendAndReti>

000009d0 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     9d0:	30 91 17 01 	lds	r19, 0x0117
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     9d4:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     9d6:	11 c0       	rjmp	.+34     	; 0x9fa <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     9d8:	00 93 17 01 	sts	0x0117, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     9dc:	c8 e1       	ldi	r28, 0x18	; 24
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     9de:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     9e0:	10 c0       	rjmp	.+32     	; 0xa02 <usbSendAndReti>

000009e2 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
     9e2:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
     9e4:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
     9e8:	21 c0       	rjmp	.+66     	; 0xa2c <didStuff7>

000009ea <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
     9ea:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
     9ec:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
     9ee:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
     9f0:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
     9f2:	14 c0       	rjmp	.+40     	; 0xa1c <didStuffN>

000009f4 <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
     9f4:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <sendCntAndReti>

000009f8 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     9f8:	32 ed       	ldi	r19, 0xD2	; 210

000009fa <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
     9fa:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
     9fc:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
     9fe:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     a00:	32 e0       	ldi	r19, 0x02	; 2

00000a02 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     a02:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
     a04:	14 64       	ori	r17, 0x44	; 68
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     a06:	c2 9a       	sbi	0x18, 2	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     a08:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
     a0a:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     a0c:	54 e4       	ldi	r21, 0x44	; 68
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     a0e:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
     a10:	4f ef       	ldi	r20, 0xFF	; 255

00000a12 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
     a12:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
     a14:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
     a16:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
     a18:	27 95       	ror	r18
    ror     x2              ;[1]
     a1a:	17 95       	ror	r17

00000a1c <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
     a1c:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
     a1e:	28 f7       	brcc	.-54     	; 0x9ea <bitstuffN>
    nop                     ;[4]
     a20:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
     a22:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
     a24:	b0 f7       	brcc	.-20     	; 0xa12 <bitloop>
    sbrs    shift, 0        ;[7]
     a26:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
     a28:	05 27       	eor	r16, r21
    ror     shift           ;[9]
     a2a:	27 95       	ror	r18

00000a2c <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
     a2c:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
     a2e:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
     a30:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
     a32:	b8 f6       	brcc	.-82     	; 0x9e2 <bitstuff7>
    ld      shift, y+       ;[3]
     a34:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
     a36:	3a 95       	dec	r19
    brne    byteloop        ;[6]
     a38:	61 f7       	brne	.-40     	; 0xa12 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
     a3a:	0b 7b       	andi	r16, 0xBB	; 187
    lds     x2, usbNewDeviceAddr;[8]
     a3c:	10 91 29 01 	lds	r17, 0x0129
    lsl     x2              ;[10] we compare with left shifted address
     a40:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     a42:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
     a44:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
     a46:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
     a48:	11 f0       	breq	.+4      	; 0xa4e <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     a4a:	10 93 23 01 	sts	0x0123, r17

00000a4e <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     a4e:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
     a50:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
     a52:	04 60       	ori	r16, 0x04	; 4
    in      x2, USBDDR      ;[7]
     a54:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
     a56:	1b 7b       	andi	r17, 0xBB	; 187
    mov     x3, x1          ;[9]
     a58:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
     a5a:	4b 7b       	andi	r20, 0xBB	; 187
    ldi     x4, 4           ;[11]
     a5c:	54 e0       	ldi	r21, 0x04	; 4

00000a5e <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
     a5e:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
     a60:	f1 f7       	brne	.-4      	; 0xa5e <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
     a62:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
     a64:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
     a66:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     a68:	7f cf       	rjmp	.-258    	; 0x968 <doReturn>

00000a6a <__epilogue_restores__>:
     a6a:	2a 88       	ldd	r2, Y+18	; 0x12
     a6c:	39 88       	ldd	r3, Y+17	; 0x11
     a6e:	48 88       	ldd	r4, Y+16	; 0x10
     a70:	5f 84       	ldd	r5, Y+15	; 0x0f
     a72:	6e 84       	ldd	r6, Y+14	; 0x0e
     a74:	7d 84       	ldd	r7, Y+13	; 0x0d
     a76:	8c 84       	ldd	r8, Y+12	; 0x0c
     a78:	9b 84       	ldd	r9, Y+11	; 0x0b
     a7a:	aa 84       	ldd	r10, Y+10	; 0x0a
     a7c:	b9 84       	ldd	r11, Y+9	; 0x09
     a7e:	c8 84       	ldd	r12, Y+8	; 0x08
     a80:	df 80       	ldd	r13, Y+7	; 0x07
     a82:	ee 80       	ldd	r14, Y+6	; 0x06
     a84:	fd 80       	ldd	r15, Y+5	; 0x05
     a86:	0c 81       	ldd	r16, Y+4	; 0x04
     a88:	1b 81       	ldd	r17, Y+3	; 0x03
     a8a:	aa 81       	ldd	r26, Y+2	; 0x02
     a8c:	b9 81       	ldd	r27, Y+1	; 0x01
     a8e:	ce 0f       	add	r28, r30
     a90:	d1 1d       	adc	r29, r1
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	ed 01       	movw	r28, r26
     a9e:	08 95       	ret

00000aa0 <printf_P>:
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e5 e5       	ldi	r30, 0x55	; 85
     aa6:	f5 e0       	ldi	r31, 0x05	; 5
     aa8:	b5 c2       	rjmp	.+1386   	; 0x1014 <__prologue_saves__+0x20>
     aaa:	fe 01       	movw	r30, r28
     aac:	35 96       	adiw	r30, 0x05	; 5
     aae:	61 91       	ld	r22, Z+
     ab0:	71 91       	ld	r23, Z+
     ab2:	a0 91 44 01 	lds	r26, 0x0144
     ab6:	b0 91 45 01 	lds	r27, 0x0145
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	8c 91       	ld	r24, X
     abe:	13 97       	sbiw	r26, 0x03	; 3
     ac0:	88 60       	ori	r24, 0x08	; 8
     ac2:	13 96       	adiw	r26, 0x03	; 3
     ac4:	8c 93       	st	X, r24
     ac6:	80 91 44 01 	lds	r24, 0x0144
     aca:	90 91 45 01 	lds	r25, 0x0145
     ace:	af 01       	movw	r20, r30
     ad0:	0a d0       	rcall	.+20     	; 0xae6 <vfprintf>
     ad2:	e0 91 44 01 	lds	r30, 0x0144
     ad6:	f0 91 45 01 	lds	r31, 0x0145
     ada:	23 81       	ldd	r18, Z+3	; 0x03
     adc:	27 7f       	andi	r18, 0xF7	; 247
     ade:	23 83       	std	Z+3, r18	; 0x03
     ae0:	20 96       	adiw	r28, 0x00	; 0
     ae2:	e2 e0       	ldi	r30, 0x02	; 2
     ae4:	d2 cf       	rjmp	.-92     	; 0xa8a <__epilogue_restores__+0x20>

00000ae6 <vfprintf>:
     ae6:	ab e0       	ldi	r26, 0x0B	; 11
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e8 e7       	ldi	r30, 0x78	; 120
     aec:	f5 e0       	ldi	r31, 0x05	; 5
     aee:	82 c2       	rjmp	.+1284   	; 0xff4 <__prologue_saves__>
     af0:	4c 01       	movw	r8, r24
     af2:	2b 01       	movw	r4, r22
     af4:	5a 01       	movw	r10, r20
     af6:	fc 01       	movw	r30, r24
     af8:	17 82       	std	Z+7, r1	; 0x07
     afa:	16 82       	std	Z+6, r1	; 0x06
     afc:	83 81       	ldd	r24, Z+3	; 0x03
     afe:	81 fd       	sbrc	r24, 1
     b00:	03 c0       	rjmp	.+6      	; 0xb08 <vfprintf+0x22>
     b02:	6f ef       	ldi	r22, 0xFF	; 255
     b04:	7f ef       	ldi	r23, 0xFF	; 255
     b06:	be c1       	rjmp	.+892    	; 0xe84 <vfprintf+0x39e>
     b08:	1e 01       	movw	r2, r28
     b0a:	08 94       	sec
     b0c:	21 1c       	adc	r2, r1
     b0e:	31 1c       	adc	r3, r1
     b10:	9f e3       	ldi	r25, 0x3F	; 63
     b12:	69 2e       	mov	r6, r25
     b14:	f4 01       	movw	r30, r8
     b16:	33 81       	ldd	r19, Z+3	; 0x03
     b18:	f2 01       	movw	r30, r4
     b1a:	33 fd       	sbrc	r19, 3
     b1c:	85 91       	lpm	r24, Z+
     b1e:	33 ff       	sbrs	r19, 3
     b20:	81 91       	ld	r24, Z+
     b22:	2f 01       	movw	r4, r30
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <vfprintf+0x44>
     b28:	aa c1       	rjmp	.+852    	; 0xe7e <vfprintf+0x398>
     b2a:	85 32       	cpi	r24, 0x25	; 37
     b2c:	39 f4       	brne	.+14     	; 0xb3c <vfprintf+0x56>
     b2e:	33 fd       	sbrc	r19, 3
     b30:	85 91       	lpm	r24, Z+
     b32:	33 ff       	sbrs	r19, 3
     b34:	81 91       	ld	r24, Z+
     b36:	2f 01       	movw	r4, r30
     b38:	85 32       	cpi	r24, 0x25	; 37
     b3a:	21 f4       	brne	.+8      	; 0xb44 <vfprintf+0x5e>
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	b4 01       	movw	r22, r8
     b40:	bb d1       	rcall	.+886    	; 0xeb8 <fputc>
     b42:	e8 cf       	rjmp	.-48     	; 0xb14 <vfprintf+0x2e>
     b44:	98 2f       	mov	r25, r24
     b46:	ff 24       	eor	r15, r15
     b48:	ee 24       	eor	r14, r14
     b4a:	77 24       	eor	r7, r7
     b4c:	ff e1       	ldi	r31, 0x1F	; 31
     b4e:	ff 15       	cp	r31, r15
     b50:	d0 f0       	brcs	.+52     	; 0xb86 <vfprintf+0xa0>
     b52:	9b 32       	cpi	r25, 0x2B	; 43
     b54:	69 f0       	breq	.+26     	; 0xb70 <vfprintf+0x8a>
     b56:	9c 32       	cpi	r25, 0x2C	; 44
     b58:	28 f4       	brcc	.+10     	; 0xb64 <vfprintf+0x7e>
     b5a:	90 32       	cpi	r25, 0x20	; 32
     b5c:	59 f0       	breq	.+22     	; 0xb74 <vfprintf+0x8e>
     b5e:	93 32       	cpi	r25, 0x23	; 35
     b60:	91 f4       	brne	.+36     	; 0xb86 <vfprintf+0xa0>
     b62:	0e c0       	rjmp	.+28     	; 0xb80 <vfprintf+0x9a>
     b64:	9d 32       	cpi	r25, 0x2D	; 45
     b66:	49 f0       	breq	.+18     	; 0xb7a <vfprintf+0x94>
     b68:	90 33       	cpi	r25, 0x30	; 48
     b6a:	69 f4       	brne	.+26     	; 0xb86 <vfprintf+0xa0>
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	2a c0       	rjmp	.+84     	; 0xbc4 <vfprintf+0xde>
     b70:	52 e0       	ldi	r21, 0x02	; 2
     b72:	f5 2a       	or	r15, r21
     b74:	84 e0       	ldi	r24, 0x04	; 4
     b76:	f8 2a       	or	r15, r24
     b78:	2e c0       	rjmp	.+92     	; 0xbd6 <vfprintf+0xf0>
     b7a:	98 e0       	ldi	r25, 0x08	; 8
     b7c:	f9 2a       	or	r15, r25
     b7e:	2b c0       	rjmp	.+86     	; 0xbd6 <vfprintf+0xf0>
     b80:	e0 e1       	ldi	r30, 0x10	; 16
     b82:	fe 2a       	or	r15, r30
     b84:	28 c0       	rjmp	.+80     	; 0xbd6 <vfprintf+0xf0>
     b86:	f7 fc       	sbrc	r15, 7
     b88:	2f c0       	rjmp	.+94     	; 0xbe8 <vfprintf+0x102>
     b8a:	29 2f       	mov	r18, r25
     b8c:	20 53       	subi	r18, 0x30	; 48
     b8e:	2a 30       	cpi	r18, 0x0A	; 10
     b90:	a0 f4       	brcc	.+40     	; 0xbba <vfprintf+0xd4>
     b92:	f6 fe       	sbrs	r15, 6
     b94:	08 c0       	rjmp	.+16     	; 0xba6 <vfprintf+0xc0>
     b96:	87 2d       	mov	r24, r7
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	6a e0       	ldi	r22, 0x0A	; 10
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	18 d2       	rcall	.+1072   	; 0xfd0 <__mulhi3>
     ba0:	78 2e       	mov	r7, r24
     ba2:	72 0e       	add	r7, r18
     ba4:	18 c0       	rjmp	.+48     	; 0xbd6 <vfprintf+0xf0>
     ba6:	8e 2d       	mov	r24, r14
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	6a e0       	ldi	r22, 0x0A	; 10
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	10 d2       	rcall	.+1056   	; 0xfd0 <__mulhi3>
     bb0:	e8 2e       	mov	r14, r24
     bb2:	e2 0e       	add	r14, r18
     bb4:	f0 e2       	ldi	r31, 0x20	; 32
     bb6:	ff 2a       	or	r15, r31
     bb8:	0e c0       	rjmp	.+28     	; 0xbd6 <vfprintf+0xf0>
     bba:	9e 32       	cpi	r25, 0x2E	; 46
     bbc:	29 f4       	brne	.+10     	; 0xbc8 <vfprintf+0xe2>
     bbe:	f6 fc       	sbrc	r15, 6
     bc0:	5e c1       	rjmp	.+700    	; 0xe7e <vfprintf+0x398>
     bc2:	40 e4       	ldi	r20, 0x40	; 64
     bc4:	f4 2a       	or	r15, r20
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <vfprintf+0xf0>
     bc8:	9c 36       	cpi	r25, 0x6C	; 108
     bca:	19 f4       	brne	.+6      	; 0xbd2 <vfprintf+0xec>
     bcc:	50 e8       	ldi	r21, 0x80	; 128
     bce:	f5 2a       	or	r15, r21
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0xf0>
     bd2:	98 36       	cpi	r25, 0x68	; 104
     bd4:	49 f4       	brne	.+18     	; 0xbe8 <vfprintf+0x102>
     bd6:	f2 01       	movw	r30, r4
     bd8:	33 fd       	sbrc	r19, 3
     bda:	95 91       	lpm	r25, Z+
     bdc:	33 ff       	sbrs	r19, 3
     bde:	91 91       	ld	r25, Z+
     be0:	2f 01       	movw	r4, r30
     be2:	99 23       	and	r25, r25
     be4:	09 f0       	breq	.+2      	; 0xbe8 <vfprintf+0x102>
     be6:	b2 cf       	rjmp	.-156    	; 0xb4c <vfprintf+0x66>
     be8:	89 2f       	mov	r24, r25
     bea:	85 54       	subi	r24, 0x45	; 69
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	18 f0       	brcs	.+6      	; 0xbf6 <vfprintf+0x110>
     bf0:	80 52       	subi	r24, 0x20	; 32
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	30 f4       	brcc	.+12     	; 0xc02 <vfprintf+0x11c>
     bf6:	44 e0       	ldi	r20, 0x04	; 4
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	a4 0e       	add	r10, r20
     bfc:	b5 1e       	adc	r11, r21
     bfe:	69 82       	std	Y+1, r6	; 0x01
     c00:	0f c0       	rjmp	.+30     	; 0xc20 <vfprintf+0x13a>
     c02:	93 36       	cpi	r25, 0x63	; 99
     c04:	31 f0       	breq	.+12     	; 0xc12 <vfprintf+0x12c>
     c06:	93 37       	cpi	r25, 0x73	; 115
     c08:	79 f0       	breq	.+30     	; 0xc28 <vfprintf+0x142>
     c0a:	93 35       	cpi	r25, 0x53	; 83
     c0c:	09 f0       	breq	.+2      	; 0xc10 <vfprintf+0x12a>
     c0e:	52 c0       	rjmp	.+164    	; 0xcb4 <vfprintf+0x1ce>
     c10:	1f c0       	rjmp	.+62     	; 0xc50 <vfprintf+0x16a>
     c12:	f5 01       	movw	r30, r10
     c14:	80 81       	ld	r24, Z
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	42 e0       	ldi	r20, 0x02	; 2
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	a4 0e       	add	r10, r20
     c1e:	b5 1e       	adc	r11, r21
     c20:	61 01       	movw	r12, r2
     c22:	01 e0       	ldi	r16, 0x01	; 1
     c24:	10 e0       	ldi	r17, 0x00	; 0
     c26:	11 c0       	rjmp	.+34     	; 0xc4a <vfprintf+0x164>
     c28:	f5 01       	movw	r30, r10
     c2a:	c0 80       	ld	r12, Z
     c2c:	d1 80       	ldd	r13, Z+1	; 0x01
     c2e:	f6 fc       	sbrc	r15, 6
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <vfprintf+0x152>
     c32:	6f ef       	ldi	r22, 0xFF	; 255
     c34:	7f ef       	ldi	r23, 0xFF	; 255
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0x156>
     c38:	67 2d       	mov	r22, r7
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	42 e0       	ldi	r20, 0x02	; 2
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	a4 0e       	add	r10, r20
     c42:	b5 1e       	adc	r11, r21
     c44:	c6 01       	movw	r24, r12
     c46:	2d d1       	rcall	.+602    	; 0xea2 <strnlen>
     c48:	8c 01       	movw	r16, r24
     c4a:	5f e7       	ldi	r21, 0x7F	; 127
     c4c:	f5 22       	and	r15, r21
     c4e:	13 c0       	rjmp	.+38     	; 0xc76 <vfprintf+0x190>
     c50:	f5 01       	movw	r30, r10
     c52:	c0 80       	ld	r12, Z
     c54:	d1 80       	ldd	r13, Z+1	; 0x01
     c56:	f6 fc       	sbrc	r15, 6
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <vfprintf+0x17a>
     c5a:	6f ef       	ldi	r22, 0xFF	; 255
     c5c:	7f ef       	ldi	r23, 0xFF	; 255
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <vfprintf+0x17e>
     c60:	67 2d       	mov	r22, r7
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	42 e0       	ldi	r20, 0x02	; 2
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	a4 0e       	add	r10, r20
     c6a:	b5 1e       	adc	r11, r21
     c6c:	c6 01       	movw	r24, r12
     c6e:	0e d1       	rcall	.+540    	; 0xe8c <strnlen_P>
     c70:	8c 01       	movw	r16, r24
     c72:	50 e8       	ldi	r21, 0x80	; 128
     c74:	f5 2a       	or	r15, r21
     c76:	f3 fe       	sbrs	r15, 3
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x1a0>
     c7a:	18 c0       	rjmp	.+48     	; 0xcac <vfprintf+0x1c6>
     c7c:	80 e2       	ldi	r24, 0x20	; 32
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	b4 01       	movw	r22, r8
     c82:	1a d1       	rcall	.+564    	; 0xeb8 <fputc>
     c84:	ea 94       	dec	r14
     c86:	8e 2d       	mov	r24, r14
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	08 17       	cp	r16, r24
     c8c:	19 07       	cpc	r17, r25
     c8e:	b0 f3       	brcs	.-20     	; 0xc7c <vfprintf+0x196>
     c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x1c6>
     c92:	f6 01       	movw	r30, r12
     c94:	f7 fc       	sbrc	r15, 7
     c96:	85 91       	lpm	r24, Z+
     c98:	f7 fe       	sbrs	r15, 7
     c9a:	81 91       	ld	r24, Z+
     c9c:	6f 01       	movw	r12, r30
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	b4 01       	movw	r22, r8
     ca2:	0a d1       	rcall	.+532    	; 0xeb8 <fputc>
     ca4:	e1 10       	cpse	r14, r1
     ca6:	ea 94       	dec	r14
     ca8:	01 50       	subi	r16, 0x01	; 1
     caa:	10 40       	sbci	r17, 0x00	; 0
     cac:	01 15       	cp	r16, r1
     cae:	11 05       	cpc	r17, r1
     cb0:	81 f7       	brne	.-32     	; 0xc92 <vfprintf+0x1ac>
     cb2:	e2 c0       	rjmp	.+452    	; 0xe78 <vfprintf+0x392>
     cb4:	94 36       	cpi	r25, 0x64	; 100
     cb6:	11 f0       	breq	.+4      	; 0xcbc <vfprintf+0x1d6>
     cb8:	99 36       	cpi	r25, 0x69	; 105
     cba:	61 f5       	brne	.+88     	; 0xd14 <vfprintf+0x22e>
     cbc:	f7 fe       	sbrs	r15, 7
     cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <vfprintf+0x1ea>
     cc0:	f5 01       	movw	r30, r10
     cc2:	20 81       	ld	r18, Z
     cc4:	31 81       	ldd	r19, Z+1	; 0x01
     cc6:	42 81       	ldd	r20, Z+2	; 0x02
     cc8:	53 81       	ldd	r21, Z+3	; 0x03
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0a c0       	rjmp	.+20     	; 0xce4 <vfprintf+0x1fe>
     cd0:	f5 01       	movw	r30, r10
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	9c 01       	movw	r18, r24
     cd8:	44 27       	eor	r20, r20
     cda:	37 fd       	sbrc	r19, 7
     cdc:	40 95       	com	r20
     cde:	54 2f       	mov	r21, r20
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a8 0e       	add	r10, r24
     ce6:	b9 1e       	adc	r11, r25
     ce8:	9f e6       	ldi	r25, 0x6F	; 111
     cea:	f9 22       	and	r15, r25
     cec:	57 ff       	sbrs	r21, 7
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <vfprintf+0x21c>
     cf0:	50 95       	com	r21
     cf2:	40 95       	com	r20
     cf4:	30 95       	com	r19
     cf6:	21 95       	neg	r18
     cf8:	3f 4f       	sbci	r19, 0xFF	; 255
     cfa:	4f 4f       	sbci	r20, 0xFF	; 255
     cfc:	5f 4f       	sbci	r21, 0xFF	; 255
     cfe:	e0 e8       	ldi	r30, 0x80	; 128
     d00:	fe 2a       	or	r15, r30
     d02:	ca 01       	movw	r24, r20
     d04:	b9 01       	movw	r22, r18
     d06:	a1 01       	movw	r20, r2
     d08:	2a e0       	ldi	r18, 0x0A	; 10
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	01 d1       	rcall	.+514    	; 0xf10 <__ultoa_invert>
     d0e:	d8 2e       	mov	r13, r24
     d10:	d2 18       	sub	r13, r2
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <vfprintf+0x2ac>
     d14:	95 37       	cpi	r25, 0x75	; 117
     d16:	29 f4       	brne	.+10     	; 0xd22 <vfprintf+0x23c>
     d18:	1f 2d       	mov	r17, r15
     d1a:	1f 7e       	andi	r17, 0xEF	; 239
     d1c:	2a e0       	ldi	r18, 0x0A	; 10
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	1d c0       	rjmp	.+58     	; 0xd5c <vfprintf+0x276>
     d22:	1f 2d       	mov	r17, r15
     d24:	19 7f       	andi	r17, 0xF9	; 249
     d26:	9f 36       	cpi	r25, 0x6F	; 111
     d28:	61 f0       	breq	.+24     	; 0xd42 <vfprintf+0x25c>
     d2a:	90 37       	cpi	r25, 0x70	; 112
     d2c:	20 f4       	brcc	.+8      	; 0xd36 <vfprintf+0x250>
     d2e:	98 35       	cpi	r25, 0x58	; 88
     d30:	09 f0       	breq	.+2      	; 0xd34 <vfprintf+0x24e>
     d32:	a5 c0       	rjmp	.+330    	; 0xe7e <vfprintf+0x398>
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <vfprintf+0x26e>
     d36:	90 37       	cpi	r25, 0x70	; 112
     d38:	39 f0       	breq	.+14     	; 0xd48 <vfprintf+0x262>
     d3a:	98 37       	cpi	r25, 0x78	; 120
     d3c:	09 f0       	breq	.+2      	; 0xd40 <vfprintf+0x25a>
     d3e:	9f c0       	rjmp	.+318    	; 0xe7e <vfprintf+0x398>
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <vfprintf+0x264>
     d42:	28 e0       	ldi	r18, 0x08	; 8
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	0a c0       	rjmp	.+20     	; 0xd5c <vfprintf+0x276>
     d48:	10 61       	ori	r17, 0x10	; 16
     d4a:	14 fd       	sbrc	r17, 4
     d4c:	14 60       	ori	r17, 0x04	; 4
     d4e:	20 e1       	ldi	r18, 0x10	; 16
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <vfprintf+0x276>
     d54:	14 fd       	sbrc	r17, 4
     d56:	16 60       	ori	r17, 0x06	; 6
     d58:	20 e1       	ldi	r18, 0x10	; 16
     d5a:	32 e0       	ldi	r19, 0x02	; 2
     d5c:	17 ff       	sbrs	r17, 7
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <vfprintf+0x28a>
     d60:	f5 01       	movw	r30, r10
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	44 e0       	ldi	r20, 0x04	; 4
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	08 c0       	rjmp	.+16     	; 0xd80 <vfprintf+0x29a>
     d70:	f5 01       	movw	r30, r10
     d72:	80 81       	ld	r24, Z
     d74:	91 81       	ldd	r25, Z+1	; 0x01
     d76:	bc 01       	movw	r22, r24
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	42 e0       	ldi	r20, 0x02	; 2
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	a4 0e       	add	r10, r20
     d82:	b5 1e       	adc	r11, r21
     d84:	a1 01       	movw	r20, r2
     d86:	c4 d0       	rcall	.+392    	; 0xf10 <__ultoa_invert>
     d88:	d8 2e       	mov	r13, r24
     d8a:	d2 18       	sub	r13, r2
     d8c:	8f e7       	ldi	r24, 0x7F	; 127
     d8e:	f8 2e       	mov	r15, r24
     d90:	f1 22       	and	r15, r17
     d92:	f6 fe       	sbrs	r15, 6
     d94:	0b c0       	rjmp	.+22     	; 0xdac <vfprintf+0x2c6>
     d96:	5e ef       	ldi	r21, 0xFE	; 254
     d98:	f5 22       	and	r15, r21
     d9a:	d7 14       	cp	r13, r7
     d9c:	38 f4       	brcc	.+14     	; 0xdac <vfprintf+0x2c6>
     d9e:	f4 fe       	sbrs	r15, 4
     da0:	07 c0       	rjmp	.+14     	; 0xdb0 <vfprintf+0x2ca>
     da2:	f2 fc       	sbrc	r15, 2
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <vfprintf+0x2ca>
     da6:	8f ee       	ldi	r24, 0xEF	; 239
     da8:	f8 22       	and	r15, r24
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0x2ca>
     dac:	1d 2d       	mov	r17, r13
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <vfprintf+0x2cc>
     db0:	17 2d       	mov	r17, r7
     db2:	f4 fe       	sbrs	r15, 4
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <vfprintf+0x2ea>
     db6:	fe 01       	movw	r30, r28
     db8:	ed 0d       	add	r30, r13
     dba:	f1 1d       	adc	r31, r1
     dbc:	80 81       	ld	r24, Z
     dbe:	80 33       	cpi	r24, 0x30	; 48
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <vfprintf+0x2e2>
     dc2:	99 ee       	ldi	r25, 0xE9	; 233
     dc4:	f9 22       	and	r15, r25
     dc6:	08 c0       	rjmp	.+16     	; 0xdd8 <vfprintf+0x2f2>
     dc8:	1f 5f       	subi	r17, 0xFF	; 255
     dca:	f2 fe       	sbrs	r15, 2
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <vfprintf+0x2f2>
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <vfprintf+0x2f0>
     dd0:	8f 2d       	mov	r24, r15
     dd2:	86 78       	andi	r24, 0x86	; 134
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <vfprintf+0x2f2>
     dd6:	1f 5f       	subi	r17, 0xFF	; 255
     dd8:	0f 2d       	mov	r16, r15
     dda:	f3 fc       	sbrc	r15, 3
     ddc:	13 c0       	rjmp	.+38     	; 0xe04 <vfprintf+0x31e>
     dde:	f0 fe       	sbrs	r15, 0
     de0:	0e c0       	rjmp	.+28     	; 0xdfe <vfprintf+0x318>
     de2:	1e 15       	cp	r17, r14
     de4:	10 f0       	brcs	.+4      	; 0xdea <vfprintf+0x304>
     de6:	7d 2c       	mov	r7, r13
     de8:	0a c0       	rjmp	.+20     	; 0xdfe <vfprintf+0x318>
     dea:	7d 2c       	mov	r7, r13
     dec:	7e 0c       	add	r7, r14
     dee:	71 1a       	sub	r7, r17
     df0:	1e 2d       	mov	r17, r14
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <vfprintf+0x318>
     df4:	80 e2       	ldi	r24, 0x20	; 32
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	b4 01       	movw	r22, r8
     dfa:	5e d0       	rcall	.+188    	; 0xeb8 <fputc>
     dfc:	1f 5f       	subi	r17, 0xFF	; 255
     dfe:	1e 15       	cp	r17, r14
     e00:	c8 f3       	brcs	.-14     	; 0xdf4 <vfprintf+0x30e>
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <vfprintf+0x326>
     e04:	1e 15       	cp	r17, r14
     e06:	10 f4       	brcc	.+4      	; 0xe0c <vfprintf+0x326>
     e08:	e1 1a       	sub	r14, r17
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <vfprintf+0x328>
     e0c:	ee 24       	eor	r14, r14
     e0e:	04 ff       	sbrs	r16, 4
     e10:	0e c0       	rjmp	.+28     	; 0xe2e <vfprintf+0x348>
     e12:	80 e3       	ldi	r24, 0x30	; 48
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	b4 01       	movw	r22, r8
     e18:	4f d0       	rcall	.+158    	; 0xeb8 <fputc>
     e1a:	02 ff       	sbrs	r16, 2
     e1c:	1b c0       	rjmp	.+54     	; 0xe54 <vfprintf+0x36e>
     e1e:	01 fd       	sbrc	r16, 1
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <vfprintf+0x342>
     e22:	88 e7       	ldi	r24, 0x78	; 120
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e c0       	rjmp	.+28     	; 0xe44 <vfprintf+0x35e>
     e28:	88 e5       	ldi	r24, 0x58	; 88
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0b c0       	rjmp	.+22     	; 0xe44 <vfprintf+0x35e>
     e2e:	80 2f       	mov	r24, r16
     e30:	86 78       	andi	r24, 0x86	; 134
     e32:	81 f0       	breq	.+32     	; 0xe54 <vfprintf+0x36e>
     e34:	01 ff       	sbrs	r16, 1
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <vfprintf+0x356>
     e38:	8b e2       	ldi	r24, 0x2B	; 43
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <vfprintf+0x358>
     e3c:	80 e2       	ldi	r24, 0x20	; 32
     e3e:	f7 fc       	sbrc	r15, 7
     e40:	8d e2       	ldi	r24, 0x2D	; 45
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	b4 01       	movw	r22, r8
     e46:	38 d0       	rcall	.+112    	; 0xeb8 <fputc>
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <vfprintf+0x36e>
     e4a:	80 e3       	ldi	r24, 0x30	; 48
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	b4 01       	movw	r22, r8
     e50:	33 d0       	rcall	.+102    	; 0xeb8 <fputc>
     e52:	7a 94       	dec	r7
     e54:	d7 14       	cp	r13, r7
     e56:	c8 f3       	brcs	.-14     	; 0xe4a <vfprintf+0x364>
     e58:	da 94       	dec	r13
     e5a:	f1 01       	movw	r30, r2
     e5c:	ed 0d       	add	r30, r13
     e5e:	f1 1d       	adc	r31, r1
     e60:	80 81       	ld	r24, Z
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	b4 01       	movw	r22, r8
     e66:	28 d0       	rcall	.+80     	; 0xeb8 <fputc>
     e68:	dd 20       	and	r13, r13
     e6a:	b1 f7       	brne	.-20     	; 0xe58 <vfprintf+0x372>
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <vfprintf+0x392>
     e6e:	80 e2       	ldi	r24, 0x20	; 32
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	b4 01       	movw	r22, r8
     e74:	21 d0       	rcall	.+66     	; 0xeb8 <fputc>
     e76:	ea 94       	dec	r14
     e78:	ee 20       	and	r14, r14
     e7a:	c9 f7       	brne	.-14     	; 0xe6e <vfprintf+0x388>
     e7c:	4b ce       	rjmp	.-874    	; 0xb14 <vfprintf+0x2e>
     e7e:	f4 01       	movw	r30, r8
     e80:	66 81       	ldd	r22, Z+6	; 0x06
     e82:	77 81       	ldd	r23, Z+7	; 0x07
     e84:	cb 01       	movw	r24, r22
     e86:	2b 96       	adiw	r28, 0x0b	; 11
     e88:	e2 e1       	ldi	r30, 0x12	; 18
     e8a:	ef cd       	rjmp	.-1058   	; 0xa6a <__epilogue_restores__>

00000e8c <strnlen_P>:
     e8c:	fc 01       	movw	r30, r24
     e8e:	05 90       	lpm	r0, Z+
     e90:	61 50       	subi	r22, 0x01	; 1
     e92:	70 40       	sbci	r23, 0x00	; 0
     e94:	01 10       	cpse	r0, r1
     e96:	d8 f7       	brcc	.-10     	; 0xe8e <strnlen_P+0x2>
     e98:	80 95       	com	r24
     e9a:	90 95       	com	r25
     e9c:	8e 0f       	add	r24, r30
     e9e:	9f 1f       	adc	r25, r31
     ea0:	08 95       	ret

00000ea2 <strnlen>:
     ea2:	fc 01       	movw	r30, r24
     ea4:	61 50       	subi	r22, 0x01	; 1
     ea6:	70 40       	sbci	r23, 0x00	; 0
     ea8:	01 90       	ld	r0, Z+
     eaa:	01 10       	cpse	r0, r1
     eac:	d8 f7       	brcc	.-10     	; 0xea4 <strnlen+0x2>
     eae:	80 95       	com	r24
     eb0:	90 95       	com	r25
     eb2:	8e 0f       	add	r24, r30
     eb4:	9f 1f       	adc	r25, r31
     eb6:	08 95       	ret

00000eb8 <fputc>:
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	8c 01       	movw	r16, r24
     ec2:	eb 01       	movw	r28, r22
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	81 ff       	sbrs	r24, 1
     ec8:	1b c0       	rjmp	.+54     	; 0xf00 <fputc+0x48>
     eca:	82 ff       	sbrs	r24, 2
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <fputc+0x30>
     ece:	2e 81       	ldd	r18, Y+6	; 0x06
     ed0:	3f 81       	ldd	r19, Y+7	; 0x07
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	9d 81       	ldd	r25, Y+5	; 0x05
     ed6:	28 17       	cp	r18, r24
     ed8:	39 07       	cpc	r19, r25
     eda:	64 f4       	brge	.+24     	; 0xef4 <fputc+0x3c>
     edc:	e8 81       	ld	r30, Y
     ede:	f9 81       	ldd	r31, Y+1	; 0x01
     ee0:	01 93       	st	Z+, r16
     ee2:	f9 83       	std	Y+1, r31	; 0x01
     ee4:	e8 83       	st	Y, r30
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <fputc+0x3c>
     ee8:	e8 85       	ldd	r30, Y+8	; 0x08
     eea:	f9 85       	ldd	r31, Y+9	; 0x09
     eec:	80 2f       	mov	r24, r16
     eee:	09 95       	icall
     ef0:	89 2b       	or	r24, r25
     ef2:	31 f4       	brne	.+12     	; 0xf00 <fputc+0x48>
     ef4:	8e 81       	ldd	r24, Y+6	; 0x06
     ef6:	9f 81       	ldd	r25, Y+7	; 0x07
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	9f 83       	std	Y+7, r25	; 0x07
     efc:	8e 83       	std	Y+6, r24	; 0x06
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <fputc+0x4c>
     f00:	0f ef       	ldi	r16, 0xFF	; 255
     f02:	1f ef       	ldi	r17, 0xFF	; 255
     f04:	c8 01       	movw	r24, r16
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <__ultoa_invert>:
     f10:	fa 01       	movw	r30, r20
     f12:	aa 27       	eor	r26, r26
     f14:	28 30       	cpi	r18, 0x08	; 8
     f16:	61 f1       	breq	.+88     	; 0xf70 <__ultoa_invert+0x60>
     f18:	20 31       	cpi	r18, 0x10	; 16
     f1a:	91 f1       	breq	.+100    	; 0xf80 <__ultoa_invert+0x70>
     f1c:	e8 94       	clt
     f1e:	6f 93       	push	r22
     f20:	6e 7f       	andi	r22, 0xFE	; 254
     f22:	6e 5f       	subi	r22, 0xFE	; 254
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	8f 4f       	sbci	r24, 0xFF	; 255
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	af 4f       	sbci	r26, 0xFF	; 255
     f2c:	b1 e0       	ldi	r27, 0x01	; 1
     f2e:	40 d0       	rcall	.+128    	; 0xfb0 <__ultoa_invert+0xa0>
     f30:	b4 e0       	ldi	r27, 0x04	; 4
     f32:	3e d0       	rcall	.+124    	; 0xfb0 <__ultoa_invert+0xa0>
     f34:	67 0f       	add	r22, r23
     f36:	78 1f       	adc	r23, r24
     f38:	89 1f       	adc	r24, r25
     f3a:	9a 1f       	adc	r25, r26
     f3c:	a1 1d       	adc	r26, r1
     f3e:	68 0f       	add	r22, r24
     f40:	79 1f       	adc	r23, r25
     f42:	8a 1f       	adc	r24, r26
     f44:	91 1d       	adc	r25, r1
     f46:	a1 1d       	adc	r26, r1
     f48:	6a 0f       	add	r22, r26
     f4a:	71 1d       	adc	r23, r1
     f4c:	81 1d       	adc	r24, r1
     f4e:	91 1d       	adc	r25, r1
     f50:	a1 1d       	adc	r26, r1
     f52:	22 d0       	rcall	.+68     	; 0xf98 <__ultoa_invert+0x88>
     f54:	09 f4       	brne	.+2      	; 0xf58 <__ultoa_invert+0x48>
     f56:	68 94       	set
     f58:	3f 91       	pop	r19
     f5a:	06 2e       	mov	r0, r22
     f5c:	00 0c       	add	r0, r0
     f5e:	30 19       	sub	r19, r0
     f60:	00 0c       	add	r0, r0
     f62:	00 0c       	add	r0, r0
     f64:	30 19       	sub	r19, r0
     f66:	30 5d       	subi	r19, 0xD0	; 208
     f68:	31 93       	st	Z+, r19
     f6a:	ce f6       	brtc	.-78     	; 0xf1e <__ultoa_invert+0xe>
     f6c:	cf 01       	movw	r24, r30
     f6e:	08 95       	ret
     f70:	46 2f       	mov	r20, r22
     f72:	47 70       	andi	r20, 0x07	; 7
     f74:	40 5d       	subi	r20, 0xD0	; 208
     f76:	41 93       	st	Z+, r20
     f78:	b3 e0       	ldi	r27, 0x03	; 3
     f7a:	0f d0       	rcall	.+30     	; 0xf9a <__ultoa_invert+0x8a>
     f7c:	c9 f7       	brne	.-14     	; 0xf70 <__ultoa_invert+0x60>
     f7e:	f6 cf       	rjmp	.-20     	; 0xf6c <__ultoa_invert+0x5c>
     f80:	46 2f       	mov	r20, r22
     f82:	4f 70       	andi	r20, 0x0F	; 15
     f84:	40 5d       	subi	r20, 0xD0	; 208
     f86:	4a 33       	cpi	r20, 0x3A	; 58
     f88:	18 f0       	brcs	.+6      	; 0xf90 <__ultoa_invert+0x80>
     f8a:	49 5d       	subi	r20, 0xD9	; 217
     f8c:	31 fd       	sbrc	r19, 1
     f8e:	40 52       	subi	r20, 0x20	; 32
     f90:	41 93       	st	Z+, r20
     f92:	02 d0       	rcall	.+4      	; 0xf98 <__ultoa_invert+0x88>
     f94:	a9 f7       	brne	.-22     	; 0xf80 <__ultoa_invert+0x70>
     f96:	ea cf       	rjmp	.-44     	; 0xf6c <__ultoa_invert+0x5c>
     f98:	b4 e0       	ldi	r27, 0x04	; 4
     f9a:	a6 95       	lsr	r26
     f9c:	97 95       	ror	r25
     f9e:	87 95       	ror	r24
     fa0:	77 95       	ror	r23
     fa2:	67 95       	ror	r22
     fa4:	ba 95       	dec	r27
     fa6:	c9 f7       	brne	.-14     	; 0xf9a <__ultoa_invert+0x8a>
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	61 05       	cpc	r22, r1
     fac:	71 05       	cpc	r23, r1
     fae:	08 95       	ret
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	0a 2e       	mov	r0, r26
     fb6:	06 94       	lsr	r0
     fb8:	57 95       	ror	r21
     fba:	47 95       	ror	r20
     fbc:	37 95       	ror	r19
     fbe:	27 95       	ror	r18
     fc0:	ba 95       	dec	r27
     fc2:	c9 f7       	brne	.-14     	; 0xfb6 <__ultoa_invert+0xa6>
     fc4:	62 0f       	add	r22, r18
     fc6:	73 1f       	adc	r23, r19
     fc8:	84 1f       	adc	r24, r20
     fca:	95 1f       	adc	r25, r21
     fcc:	a0 1d       	adc	r26, r0
     fce:	08 95       	ret

00000fd0 <__mulhi3>:
     fd0:	55 27       	eor	r21, r21
     fd2:	00 24       	eor	r0, r0

00000fd4 <__mulhi3_loop>:
     fd4:	80 ff       	sbrs	r24, 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <__mulhi3_skip1>
     fd8:	06 0e       	add	r0, r22
     fda:	57 1f       	adc	r21, r23

00000fdc <__mulhi3_skip1>:
     fdc:	66 0f       	add	r22, r22
     fde:	77 1f       	adc	r23, r23
     fe0:	61 15       	cp	r22, r1
     fe2:	71 05       	cpc	r23, r1
     fe4:	21 f0       	breq	.+8      	; 0xfee <__mulhi3_exit>
     fe6:	96 95       	lsr	r25
     fe8:	87 95       	ror	r24
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	99 f7       	brne	.-26     	; 0xfd4 <__mulhi3_loop>

00000fee <__mulhi3_exit>:
     fee:	95 2f       	mov	r25, r21
     ff0:	80 2d       	mov	r24, r0
     ff2:	08 95       	ret

00000ff4 <__prologue_saves__>:
     ff4:	2f 92       	push	r2
     ff6:	3f 92       	push	r3
     ff8:	4f 92       	push	r4
     ffa:	5f 92       	push	r5
     ffc:	6f 92       	push	r6
     ffe:	7f 92       	push	r7
    1000:	8f 92       	push	r8
    1002:	9f 92       	push	r9
    1004:	af 92       	push	r10
    1006:	bf 92       	push	r11
    1008:	cf 92       	push	r12
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	ca 1b       	sub	r28, r26
    101e:	db 0b       	sbc	r29, r27
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	09 94       	ijmp

0000102c <_exit>:
    102c:	f8 94       	cli

0000102e <__stop_program>:
    102e:	ff cf       	rjmp	.-2      	; 0x102e <__stop_program>
