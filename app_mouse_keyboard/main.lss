
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000154a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000154a  000015de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fa  0080007e  0080007e  000015fc  2**0
                  ALLOC
  3 .stab         00001254  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000005a  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  000028aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003d8  00000000  00000000  000029ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000021cf  00000000  00000000  00002da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ddc  00000000  00000000  00004f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000016b5  00000000  00000000  00005d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000230  00000000  00000000  00007404  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b17  00000000  00000000  00007634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e24  00000000  00000000  0000814b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  00008f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	e5 c5       	rjmp	.+3018   	; 0xbce <__vector_1>
       4:	6b c2       	rjmp	.+1238   	; 0x4dc <__vector_2>
       6:	ca c0       	rjmp	.+404    	; 0x19c <__bad_interrupt>
       8:	c9 c0       	rjmp	.+402    	; 0x19c <__bad_interrupt>
       a:	c8 c0       	rjmp	.+400    	; 0x19c <__bad_interrupt>
       c:	c7 c0       	rjmp	.+398    	; 0x19c <__bad_interrupt>
       e:	c6 c0       	rjmp	.+396    	; 0x19c <__bad_interrupt>
      10:	c5 c0       	rjmp	.+394    	; 0x19c <__bad_interrupt>
      12:	c4 c0       	rjmp	.+392    	; 0x19c <__bad_interrupt>
      14:	c3 c0       	rjmp	.+390    	; 0x19c <__bad_interrupt>
      16:	c2 c0       	rjmp	.+388    	; 0x19c <__bad_interrupt>
      18:	c1 c0       	rjmp	.+386    	; 0x19c <__bad_interrupt>
      1a:	c0 c0       	rjmp	.+384    	; 0x19c <__bad_interrupt>
      1c:	bf c0       	rjmp	.+382    	; 0x19c <__bad_interrupt>
      1e:	be c0       	rjmp	.+380    	; 0x19c <__bad_interrupt>
      20:	68 c2       	rjmp	.+1232   	; 0x4f2 <__vector_16>
      22:	bc c0       	rjmp	.+376    	; 0x19c <__bad_interrupt>
      24:	bb c0       	rjmp	.+374    	; 0x19c <__bad_interrupt>

00000026 <usbDescriptorString0>:
      26:	04 03 09 04                                         ....

0000002a <usbDescriptorStringVendor>:
      2a:	16 03 62 00 69 00 72 00 6b 00 6c 00 65 00 72 00     ..b.i.r.k.l.e.r.
      3a:	2e 00 73 00 65 00                                   ..s.e.

00000040 <usbDescriptorStringDevice>:
      40:	24 03 42 00 69 00 72 00 6b 00 6c 00 65 00 72 00     $.B.i.r.k.l.e.r.
      50:	20 00 54 00 6f 00 75 00 63 00 68 00 2b 00 4b 00      .T.o.u.c.h.+.K.
      60:	65 00 79 00                                         e.y.

00000064 <usbDescriptorDevice>:
      64:	12 01 10 01 00 00 00 08 42 42 54 e4 08 00 01 02     ........BBT.....
      74:	00 01                                               ..

00000076 <usbDescriptorConfiguration>:
      76:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
      86:	00 00 09 21 01 01 00 01 22 a3 00 07 05 81 03 08     ...!....".......
      96:	00 64                                               .d

00000098 <usbDescriptorHidReport>:
      98:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
      a8:	15 00 25 01 95 03 75 01 85 01 81 02 95 01 75 05     ..%...u.......u.
      b8:	81 03 05 01 09 30 09 31 15 81 25 7f 75 08 95 02     .....0.1..%.u...
      c8:	81 06 c0 c0 09 06 a1 01 85 02 05 07 09 66 09 29     .............f.)
      d8:	09 28 09 4a 09 76 09 7e 09 4f 09 50 09 51 09 52     .(.J.v.~.O.P.Q.R
      e8:	09 80 09 81 09 57 09 56 09 3a 09 3b 09 3c 09 3d     .....W.V.:.;.<.=
      f8:	09 3e 09 3f 09 40 09 41 09 42 09 43 95 01 75 08     .>.?.@.A.B.C..u.
     108:	15 01 25 18 81 40 c0 0b 00 00 01 00 a1 00 05 01     ..%..@..........
     118:	75 10 95 01 09 00 85 7c b1 02 09 00 85 7d b1 02     u......|.....}..
     128:	75 08 95 44 09 00 85 7e b1 00 09 00 95 09 85 7f     u..D...~........
     138:	b1 00 c0                                            ...

0000013b <__c.1761>:
     13b:	73 74 61 74 20 64 69 66 66 3d 25 75 28 25 75 75     stat diff=%u(%uu
     14b:	73 29 20 6d 61 78 3d 25 75 28 25 75 75 73 29 20     s) max=%u(%uus) 
     15b:	23 3d 25 75 21 0a 00                                #=%u!..

00000162 <__c.1749>:
     162:	42 21 0a 00                                         B!..

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf e5       	ldi	r28, 0x5F	; 95
     16c:	d2 e0       	ldi	r29, 0x02	; 2
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	10 e0       	ldi	r17, 0x00	; 0
     174:	a0 e6       	ldi	r26, 0x60	; 96
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	ea e4       	ldi	r30, 0x4A	; 74
     17a:	f5 e1       	ldi	r31, 0x15	; 21
     17c:	02 c0       	rjmp	.+4      	; 0x182 <.do_copy_data_start>

0000017e <.do_copy_data_loop>:
     17e:	05 90       	lpm	r0, Z+
     180:	0d 92       	st	X+, r0

00000182 <.do_copy_data_start>:
     182:	ae 37       	cpi	r26, 0x7E	; 126
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <.do_copy_data_loop>

00000188 <__do_clear_bss>:
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	ae e7       	ldi	r26, 0x7E	; 126
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	a8 37       	cpi	r26, 0x78	; 120
     194:	b1 07       	cpc	r27, r17
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	28 d2       	rcall	.+1104   	; 0x5ea <main>
     19a:	d5 c9       	rjmp	.-3158   	; 0xfffff546 <__eeprom_end+0xff7ef546>

0000019c <__bad_interrupt>:
     19c:	31 cf       	rjmp	.-414    	; 0x0 <__vectors>

0000019e <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     19e:	85 b7       	in	r24, 0x35	; 53
     1a0:	82 60       	ori	r24, 0x02	; 2
     1a2:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     1a4:	8b b7       	in	r24, 0x3b	; 59
     1a6:	80 64       	ori	r24, 0x40	; 64
     1a8:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     1aa:	8b e4       	ldi	r24, 0x4B	; 75
     1ac:	80 93 48 01 	sts	0x0148, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     1b0:	8a e5       	ldi	r24, 0x5A	; 90
     1b2:	80 93 47 01 	sts	0x0147, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     1b6:	08 95       	ret

000001b8 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     1b8:	1f 93       	push	r17
     1ba:	dc 01       	movw	r26, r24
     1bc:	16 2f       	mov	r17, r22
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
     1be:	80 91 47 01 	lds	r24, 0x0147
     1c2:	8e 31       	cpi	r24, 0x1E	; 30
     1c4:	e1 f0       	breq	.+56     	; 0x1fe <usbSetInterrupt+0x46>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     1c6:	80 91 47 01 	lds	r24, 0x0147
     1ca:	84 ff       	sbrs	r24, 4
     1cc:	07 c0       	rjmp	.+14     	; 0x1dc <usbSetInterrupt+0x24>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     1ce:	80 91 48 01 	lds	r24, 0x0148
     1d2:	98 e8       	ldi	r25, 0x88	; 136
     1d4:	89 27       	eor	r24, r25
     1d6:	80 93 48 01 	sts	0x0148, r24
     1da:	03 c0       	rjmp	.+6      	; 0x1e2 <usbSetInterrupt+0x2a>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     1dc:	8a e5       	ldi	r24, 0x5A	; 90
     1de:	80 93 47 01 	sts	0x0147, r24
     1e2:	91 2f       	mov	r25, r17
     1e4:	e9 e4       	ldi	r30, 0x49	; 73
     1e6:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     1e8:	8d 91       	ld	r24, X+
     1ea:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     1ec:	91 50       	subi	r25, 0x01	; 1
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <usbSetInterrupt+0x30>
    usbCrc16Append(&txStatus->buffer[1], len);
     1f0:	89 e4       	ldi	r24, 0x49	; 73
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	61 2f       	mov	r22, r17
     1f6:	d4 d4       	rcall	.+2472   	; 0xba0 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     1f8:	1c 5f       	subi	r17, 0xFC	; 252
     1fa:	10 93 47 01 	sts	0x0147, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     1fe:	1f 91       	pop	r17
     200:	08 95       	ret

00000202 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     208:	60 91 58 01 	lds	r22, 0x0158
     20c:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     20e:	67 fd       	sbrc	r22, 7
     210:	e9 c0       	rjmp	.+466    	; 0x3e4 <__stack+0x185>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     212:	80 91 55 01 	lds	r24, 0x0155
     216:	cc e0       	ldi	r28, 0x0C	; 12
     218:	d0 e0       	ldi	r29, 0x00	; 0
     21a:	c8 1b       	sub	r28, r24
     21c:	d1 09       	sbc	r29, r1
     21e:	c4 5a       	subi	r28, 0xA4	; 164
     220:	de 4f       	sbci	r29, 0xFE	; 254
 * 0x2d 00101101 (USBPID_SETUP for setup data)
 * 0xe1 11100001 (USBPID_OUT: data phase of setup transfer)
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
     222:	c3 9a       	sbi	0x18, 3	; 24
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     224:	80 91 54 01 	lds	r24, 0x0154
     228:	8d 32       	cpi	r24, 0x2D	; 45
     22a:	09 f0       	breq	.+2      	; 0x22e <usbPoll+0x2c>
     22c:	c9 c0       	rjmp	.+402    	; 0x3c0 <__stack+0x161>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     22e:	68 30       	cpi	r22, 0x08	; 8
     230:	09 f0       	breq	.+2      	; 0x234 <usbPoll+0x32>
     232:	d6 c0       	rjmp	.+428    	; 0x3e0 <__stack+0x181>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     234:	83 ec       	ldi	r24, 0xC3	; 195
     236:	80 93 3c 01 	sts	0x013C, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     23a:	8a e5       	ldi	r24, 0x5A	; 90
     23c:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
     240:	10 92 7f 00 	sts	0x007F, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     244:	98 81       	ld	r25, Y
     246:	89 2f       	mov	r24, r25
     248:	80 76       	andi	r24, 0x60	; 96
     24a:	39 f0       	breq	.+14     	; 0x25a <usbPoll+0x58>
            replyLen = usbFunctionSetup(data);
     24c:	ce 01       	movw	r24, r28
     24e:	5c d4       	rcall	.+2232   	; 0xb08 <usbFunctionSetup>
     250:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     252:	8f 3f       	cpi	r24, 0xFF	; 255
     254:	09 f4       	brne	.+2      	; 0x258 <usbPoll+0x56>
     256:	a3 c0       	rjmp	.+326    	; 0x39e <__stack+0x13f>
     258:	a9 c0       	rjmp	.+338    	; 0x3ac <__stack+0x14d>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     25a:	2a 81       	ldd	r18, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
     25c:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     25e:	10 92 45 01 	sts	0x0145, r1
    SWITCH_START(rq->bRequest)
     262:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     264:	88 23       	and	r24, r24
     266:	81 f4       	brne	.+32     	; 0x288 <__stack+0x29>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
     268:	9f 71       	andi	r25, 0x1F	; 31
     26a:	92 30       	cpi	r25, 0x02	; 2
     26c:	49 f4       	brne	.+18     	; 0x280 <__stack+0x21>
     26e:	31 38       	cpi	r19, 0x81	; 129
     270:	39 f4       	brne	.+14     	; 0x280 <__stack+0x21>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
     272:	80 91 47 01 	lds	r24, 0x0147
     276:	8e 31       	cpi	r24, 0x1E	; 30
     278:	19 f4       	brne	.+6      	; 0x280 <__stack+0x21>
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	80 93 45 01 	sts	0x0145, r24
#endif
        dataPtr[1] = 0;
     280:	10 92 46 01 	sts	0x0146, r1
     284:	22 e0       	ldi	r18, 0x02	; 2
     286:	84 c0       	rjmp	.+264    	; 0x390 <__stack+0x131>
        len = 2;
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
     288:	81 30       	cpi	r24, 0x01	; 1
     28a:	11 f0       	breq	.+4      	; 0x290 <__stack+0x31>
     28c:	83 30       	cpi	r24, 0x03	; 3
     28e:	89 f4       	brne	.+34     	; 0x2b2 <__stack+0x53>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
     290:	22 23       	and	r18, r18
     292:	09 f0       	breq	.+2      	; 0x296 <__stack+0x37>
     294:	7c c0       	rjmp	.+248    	; 0x38e <__stack+0x12f>
     296:	31 38       	cpi	r19, 0x81	; 129
     298:	09 f0       	breq	.+2      	; 0x29c <__stack+0x3d>
     29a:	79 c0       	rjmp	.+242    	; 0x38e <__stack+0x12f>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	11 f0       	breq	.+4      	; 0x2a4 <__stack+0x45>
     2a0:	8e e1       	ldi	r24, 0x1E	; 30
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <__stack+0x47>
     2a4:	8a e5       	ldi	r24, 0x5A	; 90
     2a6:	80 93 47 01 	sts	0x0147, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     2aa:	8b e4       	ldi	r24, 0x4B	; 75
     2ac:	80 93 48 01 	sts	0x0148, r24
     2b0:	6e c0       	rjmp	.+220    	; 0x38e <__stack+0x12f>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     2b2:	85 30       	cpi	r24, 0x05	; 5
     2b4:	19 f4       	brne	.+6      	; 0x2bc <__stack+0x5d>
        usbNewDeviceAddr = value;
     2b6:	20 93 59 01 	sts	0x0159, r18
     2ba:	69 c0       	rjmp	.+210    	; 0x38e <__stack+0x12f>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     2bc:	86 30       	cpi	r24, 0x06	; 6
     2be:	09 f0       	breq	.+2      	; 0x2c2 <__stack+0x63>
     2c0:	4f c0       	rjmp	.+158    	; 0x360 <__stack+0x101>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     2c2:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	41 f4       	brne	.+16     	; 0x2d8 <__stack+0x79>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     2c8:	84 e6       	ldi	r24, 0x64	; 100
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	90 93 57 01 	sts	0x0157, r25
     2d0:	80 93 56 01 	sts	0x0156, r24
     2d4:	22 e1       	ldi	r18, 0x12	; 18
     2d6:	40 c0       	rjmp	.+128    	; 0x358 <__stack+0xf9>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	41 f4       	brne	.+16     	; 0x2ec <__stack+0x8d>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     2dc:	86 e7       	ldi	r24, 0x76	; 118
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	90 93 57 01 	sts	0x0157, r25
     2e4:	80 93 56 01 	sts	0x0156, r24
     2e8:	22 e2       	ldi	r18, 0x22	; 34
     2ea:	36 c0       	rjmp	.+108    	; 0x358 <__stack+0xf9>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	f9 f4       	brne	.+62     	; 0x32e <__stack+0xcf>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     2f2:	88 23       	and	r24, r24
     2f4:	41 f4       	brne	.+16     	; 0x306 <__stack+0xa7>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     2f6:	86 e2       	ldi	r24, 0x26	; 38
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 57 01 	sts	0x0157, r25
     2fe:	80 93 56 01 	sts	0x0156, r24
     302:	24 e0       	ldi	r18, 0x04	; 4
     304:	29 c0       	rjmp	.+82     	; 0x358 <__stack+0xf9>
        SWITCH_CASE(1)
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	41 f4       	brne	.+16     	; 0x31a <__stack+0xbb>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     30a:	8a e2       	ldi	r24, 0x2A	; 42
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	90 93 57 01 	sts	0x0157, r25
     312:	80 93 56 01 	sts	0x0156, r24
     316:	26 e1       	ldi	r18, 0x16	; 22
     318:	1f c0       	rjmp	.+62     	; 0x358 <__stack+0xf9>
        SWITCH_CASE(2)
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	e1 f4       	brne	.+56     	; 0x356 <__stack+0xf7>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     31e:	80 e4       	ldi	r24, 0x40	; 64
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	90 93 57 01 	sts	0x0157, r25
     326:	80 93 56 01 	sts	0x0156, r24
     32a:	24 e2       	ldi	r18, 0x24	; 36
     32c:	15 c0       	rjmp	.+42     	; 0x358 <__stack+0xf9>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     32e:	81 32       	cpi	r24, 0x21	; 33
     330:	41 f4       	brne	.+16     	; 0x342 <__stack+0xe3>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     332:	88 e8       	ldi	r24, 0x88	; 136
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	90 93 57 01 	sts	0x0157, r25
     33a:	80 93 56 01 	sts	0x0156, r24
     33e:	29 e0       	ldi	r18, 0x09	; 9
     340:	0b c0       	rjmp	.+22     	; 0x358 <__stack+0xf9>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     342:	82 32       	cpi	r24, 0x22	; 34
     344:	41 f4       	brne	.+16     	; 0x356 <__stack+0xf7>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     346:	88 e9       	ldi	r24, 0x98	; 152
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	90 93 57 01 	sts	0x0157, r25
     34e:	80 93 56 01 	sts	0x0156, r24
     352:	23 ea       	ldi	r18, 0xA3	; 163
     354:	01 c0       	rjmp	.+2      	; 0x358 <__stack+0xf9>
     356:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     358:	80 e4       	ldi	r24, 0x40	; 64
     35a:	80 93 7f 00 	sts	0x007F, r24
     35e:	26 c0       	rjmp	.+76     	; 0x3ac <__stack+0x14d>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     360:	88 30       	cpi	r24, 0x08	; 8
     362:	21 f4       	brne	.+8      	; 0x36c <__stack+0x10d>
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	8b e5       	ldi	r24, 0x5B	; 91
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	14 c0       	rjmp	.+40     	; 0x394 <__stack+0x135>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     36c:	89 30       	cpi	r24, 0x09	; 9
     36e:	19 f4       	brne	.+6      	; 0x376 <__stack+0x117>
        usbConfiguration = value;
     370:	20 93 5b 01 	sts	0x015B, r18
     374:	09 c0       	rjmp	.+18     	; 0x388 <__stack+0x129>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     376:	8a 30       	cpi	r24, 0x0A	; 10
     378:	11 f4       	brne	.+4      	; 0x37e <__stack+0x11f>
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	09 c0       	rjmp	.+18     	; 0x390 <__stack+0x131>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     37e:	8b 30       	cpi	r24, 0x0B	; 11
     380:	31 f4       	brne	.+12     	; 0x38e <__stack+0x12f>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     382:	8b e4       	ldi	r24, 0x4B	; 75
     384:	80 93 48 01 	sts	0x0148, r24
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     388:	8a e5       	ldi	r24, 0x5A	; 90
     38a:	80 93 47 01 	sts	0x0147, r24
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	85 e4       	ldi	r24, 0x45	; 69
     392:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     394:	90 93 57 01 	sts	0x0157, r25
     398:	80 93 56 01 	sts	0x0156, r24
     39c:	07 c0       	rjmp	.+14     	; 0x3ac <__stack+0x14d>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     39e:	88 81       	ld	r24, Y
     3a0:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     3a2:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     3a4:	80 e8       	ldi	r24, 0x80	; 128
     3a6:	80 93 7f 00 	sts	0x007F, r24
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <__stack+0x159>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     3ac:	8f 81       	ldd	r24, Y+7	; 0x07
     3ae:	88 23       	and	r24, r24
     3b0:	19 f4       	brne	.+6      	; 0x3b8 <__stack+0x159>
     3b2:	8e 81       	ldd	r24, Y+6	; 0x06
     3b4:	82 17       	cp	r24, r18
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <__stack+0x15b>
     3b8:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     3ba:	80 93 61 00 	sts	0x0061, r24
     3be:	10 c0       	rjmp	.+32     	; 0x3e0 <__stack+0x181>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     3c0:	80 91 7f 00 	lds	r24, 0x007F
     3c4:	87 ff       	sbrs	r24, 7
     3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <__stack+0x181>
            uchar rval = usbFunctionWrite(data, len);
     3c8:	ce 01       	movw	r24, r28
     3ca:	57 d3       	rcall	.+1710   	; 0xa7a <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     3cc:	8f 3f       	cpi	r24, 0xFF	; 255
     3ce:	21 f4       	brne	.+8      	; 0x3d8 <__stack+0x179>
                usbTxLen = USBPID_STALL;
     3d0:	8e e1       	ldi	r24, 0x1E	; 30
     3d2:	80 93 60 00 	sts	0x0060, r24
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <__stack+0x181>
            }else if(rval != 0){    /* This was the final package */
     3d8:	88 23       	and	r24, r24
     3da:	11 f0       	breq	.+4      	; 0x3e0 <__stack+0x181>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     3dc:	10 92 61 00 	sts	0x0061, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     3e0:	10 92 58 01 	sts	0x0158, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     3e4:	80 91 60 00 	lds	r24, 0x0060
     3e8:	84 ff       	sbrs	r24, 4
     3ea:	58 c0       	rjmp	.+176    	; 0x49c <__stack+0x23d>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     3ec:	80 91 61 00 	lds	r24, 0x0061
     3f0:	8f 3f       	cpi	r24, 0xFF	; 255
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <__stack+0x197>
     3f4:	53 c0       	rjmp	.+166    	; 0x49c <__stack+0x23d>
     3f6:	18 2f       	mov	r17, r24
     3f8:	89 30       	cpi	r24, 0x09	; 9
     3fa:	08 f0       	brcs	.+2      	; 0x3fe <__stack+0x19f>
     3fc:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     3fe:	81 1b       	sub	r24, r17
     400:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     404:	80 91 3c 01 	lds	r24, 0x013C
     408:	98 e8       	ldi	r25, 0x88	; 136
     40a:	89 27       	eor	r24, r25
     40c:	80 93 3c 01 	sts	0x013C, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     410:	11 23       	and	r17, r17
     412:	91 f1       	breq	.+100    	; 0x478 <__stack+0x219>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     414:	80 91 7f 00 	lds	r24, 0x007F
     418:	87 ff       	sbrs	r24, 7
     41a:	08 c0       	rjmp	.+16     	; 0x42c <__stack+0x1cd>
            len = usbFunctionRead(data, len);
     41c:	8d e3       	ldi	r24, 0x3D	; 61
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	61 2f       	mov	r22, r17
     422:	fc d2       	rcall	.+1528   	; 0xa1c <usbFunctionRead>
     424:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
     426:	89 30       	cpi	r24, 0x09	; 9
     428:	98 f5       	brcc	.+102    	; 0x490 <__stack+0x231>
     42a:	26 c0       	rjmp	.+76     	; 0x478 <__stack+0x219>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
     42c:	20 91 56 01 	lds	r18, 0x0156
     430:	30 91 57 01 	lds	r19, 0x0157
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     434:	86 ff       	sbrs	r24, 6
     436:	0d c0       	rjmp	.+26     	; 0x452 <__stack+0x1f3>
     438:	ad e3       	ldi	r26, 0x3D	; 61
     43a:	b1 e0       	ldi	r27, 0x01	; 1
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     440:	f9 01       	movw	r30, r18
     442:	e8 0f       	add	r30, r24
     444:	f9 1f       	adc	r31, r25
     446:	e4 91       	lpm	r30, Z+
                    *data++ = c;
     448:	ed 93       	st	X+, r30
     44a:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
     44c:	18 17       	cp	r17, r24
     44e:	c1 f7       	brne	.-16     	; 0x440 <__stack+0x1e1>
     450:	08 c0       	rjmp	.+16     	; 0x462 <__stack+0x203>
     452:	91 2f       	mov	r25, r17
     454:	d9 01       	movw	r26, r18
     456:	ed e3       	ldi	r30, 0x3D	; 61
     458:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
     45a:	8d 91       	ld	r24, X+
     45c:	81 93       	st	Z+, r24
                }while(--i);
     45e:	91 50       	subi	r25, 0x01	; 1
     460:	e1 f7       	brne	.-8      	; 0x45a <__stack+0x1fb>
     462:	11 50       	subi	r17, 0x01	; 1
     464:	81 2f       	mov	r24, r17
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	1f 5f       	subi	r17, 0xFF	; 255
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
     470:	90 93 57 01 	sts	0x0157, r25
     474:	80 93 56 01 	sts	0x0156, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     478:	8d e3       	ldi	r24, 0x3D	; 61
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	61 2f       	mov	r22, r17
     47e:	90 d3       	rcall	.+1824   	; 0xba0 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     480:	61 2f       	mov	r22, r17
     482:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     484:	6c 30       	cpi	r22, 0x0C	; 12
     486:	41 f0       	breq	.+16     	; 0x498 <__stack+0x239>
            usbMsgLen = USB_NO_MSG;
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	80 93 61 00 	sts	0x0061, r24
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__stack+0x239>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	80 93 61 00 	sts	0x0061, r24
     496:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
     498:	60 93 60 00 	sts	0x0060, r22
     49c:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
     49e:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
     4a0:	84 74       	andi	r24, 0x44	; 68
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x257>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     4a4:	91 50       	subi	r25, 0x01	; 1
     4a6:	d9 f7       	brne	.-10     	; 0x49e <__stack+0x23f>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     4a8:	10 92 59 01 	sts	0x0159, r1
    usbDeviceAddr = 0;
     4ac:	10 92 53 01 	sts	0x0153, r1
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     4b0:	8a e5       	ldi	r24, 0x5A	; 90
     4b2:	80 93 47 01 	sts	0x0147, r24

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	99 23       	and	r25, r25
     4ba:	09 f4       	brne	.+2      	; 0x4be <__stack+0x25f>
     4bc:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
     4be:	80 91 7e 00 	lds	r24, 0x007E
     4c2:	81 17       	cp	r24, r17
     4c4:	39 f0       	breq	.+14     	; 0x4d4 <__stack+0x275>
        USB_RESET_HOOK(isReset);
     4c6:	11 23       	and	r17, r17
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <__stack+0x271>
     4ca:	f8 94       	cli
     4cc:	95 d1       	rcall	.+810    	; 0x7f8 <calibrateOscillator>
     4ce:	78 94       	sei
        wasReset = isReset;
     4d0:	10 93 7e 00 	sts	0x007E, r17
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	08 95       	ret

000004dc <__vector_2>:
ISR(TIMER0_OVF_vect,ISR_NOBLOCK )
{
}
*/
ISR(PCINT_vect,ISR_NOBLOCK )
{
     4dc:	78 94       	sei
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
}
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <__vector_16>:
static volatile uint16_t capture_diff_max;
static volatile uint16_t captured;


ISR(TIMER0_CAPT_vect,ISR_NOBLOCK )
{
     4f2:	78 94       	sei
     4f4:	1f 92       	push	r1
     4f6:	0f 92       	push	r0
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	0f 92       	push	r0
     4fc:	11 24       	eor	r1, r1
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
	uint16_t capture_time;
	uint16_t service_time;
	service_time = TCNT0L;
     50e:	82 b7       	in	r24, 0x32	; 50
     510:	90 e0       	ldi	r25, 0x00	; 0
	service_time |= ((unsigned int)TCNT0H << 8);
     512:	64 b3       	in	r22, 0x14	; 20
	capture_time = OCR0A;
     514:	43 b3       	in	r20, 0x13	; 19
     516:	50 e0       	ldi	r21, 0x00	; 0
	capture_time |= ((unsigned int)OCR0B << 8);
     518:	72 b3       	in	r23, 0x12	; 18
	capture_diff = service_time - capture_time;
     51a:	36 2f       	mov	r19, r22
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	28 2b       	or	r18, r24
     520:	39 2b       	or	r19, r25
     522:	97 2f       	mov	r25, r23
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	84 2b       	or	r24, r20
     528:	95 2b       	or	r25, r21
     52a:	28 1b       	sub	r18, r24
     52c:	39 0b       	sbc	r19, r25
     52e:	30 93 81 00 	sts	0x0081, r19
     532:	20 93 80 00 	sts	0x0080, r18
	if (capture_diff > capture_diff_max) {
     536:	20 91 80 00 	lds	r18, 0x0080
     53a:	30 91 81 00 	lds	r19, 0x0081
     53e:	80 91 82 00 	lds	r24, 0x0082
     542:	90 91 83 00 	lds	r25, 0x0083
     546:	82 17       	cp	r24, r18
     548:	93 07       	cpc	r25, r19
     54a:	40 f4       	brcc	.+16     	; 0x55c <__vector_16+0x6a>
		capture_diff_max = capture_diff;
     54c:	80 91 80 00 	lds	r24, 0x0080
     550:	90 91 81 00 	lds	r25, 0x0081
     554:	90 93 83 00 	sts	0x0083, r25
     558:	80 93 82 00 	sts	0x0082, r24
	}
	captured++;
     55c:	80 91 84 00 	lds	r24, 0x0084
     560:	90 91 85 00 	lds	r25, 0x0085
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	90 93 85 00 	sts	0x0085, r25
     56a:	80 93 84 00 	sts	0x0084, r24
}
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	7f 91       	pop	r23
     574:	6f 91       	pop	r22
     576:	5f 91       	pop	r21
     578:	4f 91       	pop	r20
     57a:	3f 91       	pop	r19
     57c:	2f 91       	pop	r18
     57e:	0f 90       	pop	r0
     580:	0f be       	out	0x3f, r0	; 63
     582:	0f 90       	pop	r0
     584:	1f 90       	pop	r1
     586:	18 95       	reti

00000588 <usbFunctionSetup2>:



usbMsgLen_t usbFunctionSetup2(uchar data[8])
{
	usbRequest_t    *rq = (void *)data;
     588:	fc 01       	movw	r30, r24

	/* The following requests are never used. But since they are required by
	 * the specification, we implement them in this example.
	 *
	 */
	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     58a:	80 81       	ld	r24, Z
     58c:	80 76       	andi	r24, 0x60	; 96
     58e:	80 32       	cpi	r24, 0x20	; 32
     590:	51 f5       	brne	.+84     	; 0x5e6 <usbFunctionSetup2+0x5e>
		DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
		if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
     592:	81 81       	ldd	r24, Z+1	; 0x01
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	b1 f4       	brne	.+44     	; 0x5c4 <usbFunctionSetup2+0x3c>
			switch (rq->wValue.bytes[0]) {
     598:	82 81       	ldd	r24, Z+2	; 0x02
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	19 f0       	breq	.+6      	; 0x5a4 <usbFunctionSetup2+0x1c>
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	11 f5       	brne	.+68     	; 0x5e6 <usbFunctionSetup2+0x5e>
     5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <usbFunctionSetup2+0x2c>
			case report_id_mouse:
				usbMsgPtr = (void *)&reportBuffer.mouse;
     5a4:	86 e8       	ldi	r24, 0x86	; 134
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	90 93 57 01 	sts	0x0157, r25
     5ac:	80 93 56 01 	sts	0x0156, r24
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	08 95       	ret
				return sizeof(reportBuffer.mouse);

			case report_id_keyboard:
				usbMsgPtr = (void *)&reportBuffer.keyboard;
     5b4:	8a e8       	ldi	r24, 0x8A	; 138
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	90 93 57 01 	sts	0x0157, r25
     5bc:	80 93 56 01 	sts	0x0156, r24
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	08 95       	ret

			default:
				break;
			}

		}else if(rq->bRequest == USBRQ_HID_GET_IDLE){
     5c4:	82 30       	cpi	r24, 0x02	; 2
     5c6:	41 f4       	brne	.+16     	; 0x5d8 <usbFunctionSetup2+0x50>
			usbMsgPtr = &idleRate;
     5c8:	8c e8       	ldi	r24, 0x8C	; 140
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	90 93 57 01 	sts	0x0157, r25
     5d0:	80 93 56 01 	sts	0x0156, r24
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	08 95       	ret
			//printf_P(PSTR("GET_IDLE =%d\n"),idleRate);
			return 1;
		}else if(rq->bRequest == USBRQ_HID_SET_IDLE){
     5d8:	8a 30       	cpi	r24, 0x0A	; 10
     5da:	29 f4       	brne	.+10     	; 0x5e6 <usbFunctionSetup2+0x5e>
			//printf_P(PSTR("SET_IDLE =%d\n"),idleRate);
			idleRate = rq->wValue.bytes[1];
     5dc:	83 81       	ldd	r24, Z+3	; 0x03
     5de:	80 93 8c 00 	sts	0x008C, r24
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	08 95       	ret
     5e6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}else{
		/* no vendor specific requests implemented */
	}
	return 0;   /* default for not implemented requests: return no data back to host */
}
     5e8:	08 95       	ret

000005ea <main>:
}
*/
/* ------------------------------------------------------------------------- */

int main(void)
{
     5ea:	a0 e0       	ldi	r26, 0x00	; 0
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	ea ef       	ldi	r30, 0xFA	; 250
     5f0:	f2 e0       	ldi	r31, 0x02	; 2
     5f2:	8d c4       	rjmp	.+2330   	; 0xf0e <__prologue_saves__+0xe>


#ifndef __ASSEMBLER__

static inline void hardwareInit(void) {
	BOOTLOADER_CONDITION_INIT();
     5f4:	d3 98       	cbi	0x1a, 3	; 26
     5f6:	db 9a       	sbi	0x1b, 3	; 27
	LED_RED_INIT();
     5f8:	bb 9a       	sbi	0x17, 3	; 23
     5fa:	c3 98       	cbi	0x18, 3	; 24
     5fc:	c3 98       	cbi	0x18, 3	; 24
	LED_BUTTON_INIT();
     5fe:	b9 9a       	sbi	0x17, 1	; 23
     600:	c1 98       	cbi	0x18, 1	; 24
     602:	c1 98       	cbi	0x18, 1	; 24
	TIMER0_INIT();
     604:	80 ee       	ldi	r24, 0xE0	; 224
     606:	85 bb       	out	0x15, r24	; 21
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	83 bf       	out	0x33, r24	; 51
	TIMER1_INIT();
     60c:	10 be       	out	0x30, r1	; 48
     60e:	89 e0       	ldi	r24, 0x09	; 9
     610:	8f bd       	out	0x2f, r24	; 47
     612:	17 bc       	out	0x27, r1	; 39
     614:	16 bc       	out	0x26, r1	; 38
     616:	10 b8       	out	0x00, r1	; 0
     618:	19 bc       	out	0x29, r1	; 41
	BUTTON_INIT();
     61a:	d4 98       	cbi	0x1a, 4	; 26
     61c:	dc 9a       	sbi	0x1b, 4	; 27
	POT_INIT();
     61e:	d0 9a       	sbi	0x1a, 0	; 26
     620:	d1 98       	cbi	0x1a, 1	; 26
     622:	d9 98       	cbi	0x1b, 1	; 27
	unsigned char buttonPressed = 0;
	unsigned char buttonMask = 0;
	hardwareInit();
	stdout = &usb_out_stream;
     624:	82 e6       	ldi	r24, 0x62	; 98
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	90 93 75 01 	sts	0x0175, r25
     62c:	80 93 74 01 	sts	0x0174, r24
	stdin = &usb_in_stream;
     630:	80 e7       	ldi	r24, 0x70	; 112
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	90 93 73 01 	sts	0x0173, r25
     638:	80 93 72 01 	sts	0x0172, r24
	stdin_get_string_t stdin_get_string_buffer;
	stdin_get_string_buffer.bufLen = 0;
	//const char* stdin_str;

	printf_P(PSTR("B!\n"));
     63c:	00 d0       	rcall	.+0      	; 0x63e <main+0x54>
     63e:	82 e6       	ldi	r24, 0x62	; 98
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	ed b7       	in	r30, 0x3d	; 61
     644:	fe b7       	in	r31, 0x3e	; 62
     646:	92 83       	std	Z+2, r25	; 0x02
     648:	81 83       	std	Z+1, r24	; 0x01
     64a:	ff d4       	rcall	.+2558   	; 0x104a <printf_P>
	usbDeviceDisconnect();
     64c:	bc 98       	cbi	0x17, 4	; 23
     64e:	c4 98       	cbi	0x18, 4	; 24
		i = 0;
		while (--i)
			; /* delay >10ms for USB reset */
	}

	wdt_enable(WDTO_2S);
     650:	2f e0       	ldi	r18, 0x0F	; 15
     652:	88 e1       	ldi	r24, 0x18	; 24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	a8 95       	wdr
     65c:	81 bd       	out	0x21, r24	; 33
     65e:	0f be       	out	0x3f, r0	; 63
     660:	21 bd       	out	0x21, r18	; 33
	odDebugInit();
	usbInit();
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	9b dd       	rcall	.-1226   	; 0x19e <usbInit>
	 TIMER0_ENABLE_INPUTCAPT_INTERRUPT();
     668:	89 b7       	in	r24, 0x39	; 57
     66a:	81 60       	ori	r24, 0x01	; 1
     66c:	89 bf       	out	0x39, r24	; 57
	sei();
     66e:	78 94       	sei
	usbDeviceConnect();
     670:	bc 9a       	sbi	0x17, 4	; 23
     672:	c4 9a       	sbi	0x18, 4	; 24
	POT_ON();
     674:	d8 9a       	sbi	0x1b, 0	; 27
	POT_ADC_SETUP();
     676:	83 e9       	ldi	r24, 0x93	; 147
     678:	86 b9       	out	0x06, r24	; 6
     67a:	13 b8       	out	0x03, r1	; 3
	LED_RED_ON();
     67c:	c3 9a       	sbi	0x18, 3	; 24
	LED_BUTTON_OFF();
     67e:	c1 98       	cbi	0x18, 1	; 24
	Timer_Set(TIMER_LED_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	60 ed       	ldi	r22, 0xD0	; 208
     684:	77 e0       	ldi	r23, 0x07	; 7
     686:	60 d1       	rcall	.+704    	; 0x948 <Timer_Set>
	Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_STARTUP_TIMEOUT);
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	60 ed       	ldi	r22, 0xD0	; 208
     68c:	77 e0       	ldi	r23, 0x07	; 7
     68e:	5c d1       	rcall	.+696    	; 0x948 <Timer_Set>
	Timer_Set(TIMER_SELF_TEST,TIMER_SELF_TEST_TIMEOUT);
     690:	86 e0       	ldi	r24, 0x06	; 6
     692:	6c e2       	ldi	r22, 0x2C	; 44
     694:	71 e0       	ldi	r23, 0x01	; 1
     696:	58 d1       	rcall	.+688    	; 0x948 <Timer_Set>
	Timer_Set(TIMER_MEASURE_POT,TIMER_MEASURE_POT_TIMEOUT);
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	64 ef       	ldi	r22, 0xF4	; 244
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	54 d1       	rcall	.+680    	; 0x948 <Timer_Set>
	Timer_Set(TIMER_SEND_KEY_DOWN,5000);
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	68 e8       	ldi	r22, 0x88	; 136
     6a4:	73 e1       	ldi	r23, 0x13	; 19
     6a6:	50 d1       	rcall	.+672    	; 0x948 <Timer_Set>
     6a8:	00 e0       	ldi	r16, 0x00	; 0
		if (BUTTON_IS_PRESSED()) {
			LED_BUTTON_ON();
			if (!(buttonPressed)) {
				uint16_t us = capture_diff * (1000000L / F_TIMER0);
				uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
				printf_P(PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\n"),capture_diff,us,capture_diff_max,us_max,captured);
     6aa:	2b e3       	ldi	r18, 0x3B	; 59
     6ac:	c2 2e       	mov	r12, r18
     6ae:	21 e0       	ldi	r18, 0x01	; 1
     6b0:	d2 2e       	mov	r13, r18
     6b2:	bb 24       	eor	r11, r11
     6b4:	b3 94       	inc	r11

		//LED Timer
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_LED_BLINK)) {
			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
			LED_RED_CHANGE();
     6b6:	98 e0       	ldi	r25, 0x08	; 8
     6b8:	99 2e       	mov	r9, r25
		}
		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
			LED_BUTTON_CHANGE();
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	a8 2e       	mov	r10, r24
			DDRA = 0x00;
			DDRB = 0x00;
			PORTB = 0x00;
			PORTA = 0x00;
			void (*jump_to_bootloader)(void) = (void*)((0));
			jump_to_bootloader();
     6be:	c0 e0       	ldi	r28, 0x00	; 0
     6c0:	d0 e0       	ldi	r29, 0x00	; 0
	Timer_Set(TIMER_SEND_KEY_DOWN,5000);
	// main event loop
	for (;;)
	{
		//Watchdog
		wdt_reset();
     6c2:	a8 95       	wdr


		//Timers
		/////////////////////////////////////////////////////
		if (TIFR & _BV(TOV1)) {
     6c4:	08 b6       	in	r0, 0x38	; 56
     6c6:	02 fe       	sbrs	r0, 2
     6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <main+0xec>
			TIFR |= _BV(TOV1);
     6ca:	88 b7       	in	r24, 0x38	; 56
     6cc:	84 60       	ori	r24, 0x04	; 4
     6ce:	88 bf       	out	0x38, r24	; 56
			Timers_DecreaseAll(TIMER0_OVERFLOW_PERIOD_MS_X256);
     6d0:	88 ef       	ldi	r24, 0xF8	; 248
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	df d0       	rcall	.+446    	; 0x894 <Timers_DecreaseAll>
		}

		//usb
		/////////////////////////////////////////////////////
		usbPoll();
     6d6:	95 dd       	rcall	.-1238   	; 0x202 <usbPoll>

		//
		/////////////////////////////////////////////////////
		if (BUTTON_IS_PRESSED()) {
     6d8:	cc 9b       	sbis	0x19, 4	; 25
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <main+0xf6>
     6dc:	00 e0       	ldi	r16, 0x00	; 0
     6de:	43 c0       	rjmp	.+134    	; 0x766 <main+0x17c>
			LED_BUTTON_ON();
     6e0:	c1 9a       	sbi	0x18, 1	; 24
			if (!(buttonPressed)) {
     6e2:	00 23       	and	r16, r16
     6e4:	11 f0       	breq	.+4      	; 0x6ea <main+0x100>
     6e6:	01 e0       	ldi	r16, 0x01	; 1
     6e8:	3e c0       	rjmp	.+124    	; 0x766 <main+0x17c>
				uint16_t us = capture_diff * (1000000L / F_TIMER0);
     6ea:	80 91 80 00 	lds	r24, 0x0080
     6ee:	90 91 81 00 	lds	r25, 0x0081
				uint16_t us_max = capture_diff_max * 1000000L / F_TIMER0;
     6f2:	60 91 82 00 	lds	r22, 0x0082
     6f6:	70 91 83 00 	lds	r23, 0x0083
				printf_P(PSTR("stat diff=%u(%uus) max=%u(%uus) #=%u!\n"),capture_diff,us,capture_diff_max,us_max,captured);
     6fa:	20 91 80 00 	lds	r18, 0x0080
     6fe:	30 91 81 00 	lds	r19, 0x0081
     702:	40 91 82 00 	lds	r20, 0x0082
     706:	50 91 83 00 	lds	r21, 0x0083
     70a:	e0 90 84 00 	lds	r14, 0x0084
     70e:	f0 90 85 00 	lds	r15, 0x0085
     712:	8d b7       	in	r24, 0x3d	; 61
     714:	9e b7       	in	r25, 0x3e	; 62
     716:	0c 97       	sbiw	r24, 0x0c	; 12
     718:	8d bf       	out	0x3d, r24	; 61
     71a:	0d b7       	in	r16, 0x3d	; 61
     71c:	1e b7       	in	r17, 0x3e	; 62
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	ed b7       	in	r30, 0x3d	; 61
     724:	fe b7       	in	r31, 0x3e	; 62
     726:	d2 82       	std	Z+2, r13	; 0x02
     728:	c1 82       	std	Z+1, r12	; 0x01
     72a:	f8 01       	movw	r30, r16
     72c:	33 83       	std	Z+3, r19	; 0x03
     72e:	22 83       	std	Z+2, r18	; 0x02
     730:	15 82       	std	Z+5, r1	; 0x05
     732:	14 82       	std	Z+4, r1	; 0x04
     734:	57 83       	std	Z+7, r21	; 0x07
     736:	46 83       	std	Z+6, r20	; 0x06
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	20 e4       	ldi	r18, 0x40	; 64
     73e:	32 e4       	ldi	r19, 0x42	; 66
     740:	4f e0       	ldi	r20, 0x0F	; 15
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	a2 d3       	rcall	.+1860   	; 0xe8a <__mulsi3>
     746:	20 e2       	ldi	r18, 0x20	; 32
     748:	35 ec       	ldi	r19, 0xC5	; 197
     74a:	4b ef       	ldi	r20, 0xFB	; 251
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	b6 d3       	rcall	.+1900   	; 0xebc <__udivmodsi4>
     750:	f8 01       	movw	r30, r16
     752:	31 87       	std	Z+9, r19	; 0x09
     754:	20 87       	std	Z+8, r18	; 0x08
     756:	f3 86       	std	Z+11, r15	; 0x0b
     758:	e2 86       	std	Z+10, r14	; 0x0a
     75a:	77 d4       	rcall	.+2286   	; 0x104a <printf_P>
     75c:	01 e0       	ldi	r16, 0x01	; 1
     75e:	8d b7       	in	r24, 0x3d	; 61
     760:	9e b7       	in	r25, 0x3e	; 62
     762:	0c 96       	adiw	r24, 0x0c	; 12
     764:	8d bf       	out	0x3d, r24	; 61
			buttonPressed = 0;
		}

		//USB interrupt
		/////////////////////////////////////////////////////
		if (usbInterruptIsReady())
     766:	80 91 47 01 	lds	r24, 0x0147
     76a:	84 ff       	sbrs	r24, 4
     76c:	0c c0       	rjmp	.+24     	; 0x786 <main+0x19c>
		{
			if (buttonMask != reportBuffer.mouse.buttonMask) {
     76e:	80 91 87 00 	lds	r24, 0x0087
     772:	88 23       	and	r24, r24
     774:	41 f0       	breq	.+16     	; 0x786 <main+0x19c>
				reportBuffer.mouse.report_id = report_id_mouse;
     776:	b0 92 86 00 	sts	0x0086, r11
				reportBuffer.mouse.buttonMask = buttonMask;
     77a:	10 92 87 00 	sts	0x0087, r1
				usbSetInterrupt((uchar*)&reportBuffer.mouse, sizeof(reportBuffer.mouse));
     77e:	86 e8       	ldi	r24, 0x86	; 134
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	64 e0       	ldi	r22, 0x04	; 4
     784:	19 dd       	rcall	.-1486   	; 0x1b8 <usbSetInterrupt>
			}

		}

		//stdin_str = stdin_get_string(&stdin_get_string_buffer);
		if (getchar() >= 0) {
     786:	80 91 72 01 	lds	r24, 0x0172
     78a:	90 91 73 01 	lds	r25, 0x0173
     78e:	ef d3       	rcall	.+2014   	; 0xf6e <fgetc>
			}
		}

		//
		///////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_MEASURE_POT)) {
     790:	84 e0       	ldi	r24, 0x04	; 4
     792:	b1 d0       	rcall	.+354    	; 0x8f6 <Timer_HasExpired>
     794:	89 2b       	or	r24, r25
     796:	31 f0       	breq	.+12     	; 0x7a4 <main+0x1ba>
			Timer_Set(TIMER_MEASURE_POT,TIMER_MEASURE_POT_TIMEOUT);
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	64 ef       	ldi	r22, 0xF4	; 244
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	d4 d0       	rcall	.+424    	; 0x948 <Timer_Set>
			POT_ADC_START();
     7a0:	b7 b8       	out	0x07, r11	; 7
     7a2:	36 9a       	sbi	0x06, 6	; 6
		}

		if (POT_ADC_IS_COMPLETED()) {
     7a4:	86 b1       	in	r24, 0x06	; 6
			POT_ADC_DONE();
     7a6:	34 9a       	sbi	0x06, 4	; 6
			//LED_BUTTON_CHANGE();
			if (POT_ADC_IS_POT_CHANNEL()) {
     7a8:	87 b1       	in	r24, 0x07	; 7
     7aa:	8f 73       	andi	r24, 0x3F	; 63
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <main+0x1ce>
				reportBuffer.mouse.x = 0;
     7b0:	10 92 88 00 	sts	0x0088, r1
				reportBuffer.mouse.y = 0;
     7b4:	10 92 89 00 	sts	0x0089, r1
			}
		}

		//LED Timer
		/////////////////////////////////////////////////////
		if (Timer_HasExpired(TIMER_LED_BLINK)) {
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	9d d0       	rcall	.+314    	; 0x8f6 <Timer_HasExpired>
     7bc:	89 2b       	or	r24, r25
     7be:	39 f0       	breq	.+14     	; 0x7ce <main+0x1e4>
			Timer_Set(TIMER_LED_BLINK,TIMER_LED_BLINK_TIMEOUT);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	64 ef       	ldi	r22, 0xF4	; 244
     7c4:	71 e0       	ldi	r23, 0x01	; 1
     7c6:	c0 d0       	rcall	.+384    	; 0x948 <Timer_Set>
			LED_RED_CHANGE();
     7c8:	88 b3       	in	r24, 0x18	; 24
     7ca:	89 25       	eor	r24, r9
     7cc:	88 bb       	out	0x18, r24	; 24
		}
		if (Timer_HasExpired(TIMER_LED_BUTTON_BLINK)) {
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	92 d0       	rcall	.+292    	; 0x8f6 <Timer_HasExpired>
     7d2:	89 2b       	or	r24, r25
     7d4:	39 f0       	breq	.+14     	; 0x7e4 <main+0x1fa>
			Timer_Set(TIMER_LED_BUTTON_BLINK,TIMER_LED_BLINK_TIMEOUT/2);
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	6a ef       	ldi	r22, 0xFA	; 250
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	b5 d0       	rcall	.+362    	; 0x948 <Timer_Set>
			LED_BUTTON_CHANGE();
     7de:	88 b3       	in	r24, 0x18	; 24
     7e0:	8a 25       	eor	r24, r10
     7e2:	88 bb       	out	0x18, r24	; 24
		}

		if (BOOTLOADER_CONDITION) {
     7e4:	cb 99       	sbic	0x19, 3	; 25
     7e6:	6d cf       	rjmp	.-294    	; 0x6c2 <main+0xd8>
			cli();
     7e8:	f8 94       	cli
			DDRA = 0x00;
     7ea:	1a ba       	out	0x1a, r1	; 26
			DDRB = 0x00;
     7ec:	17 ba       	out	0x17, r1	; 23
			PORTB = 0x00;
     7ee:	18 ba       	out	0x18, r1	; 24
			PORTA = 0x00;
     7f0:	1b ba       	out	0x1b, r1	; 27
			void (*jump_to_bootloader)(void) = (void*)((0));
			jump_to_bootloader();
     7f2:	fe 01       	movw	r30, r28
     7f4:	09 95       	icall
     7f6:	65 cf       	rjmp	.-310    	; 0x6c2 <main+0xd8>

000007f8 <calibrateOscillator>:
 * signal (a single SE0 bit) repeating every millisecond immediately after
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	80 e8       	ldi	r24, 0x80	; 128
     806:	f8 2e       	mov	r15, r24
     808:	00 e0       	ldi	r16, 0x00	; 0
     80a:	c0 e0       	ldi	r28, 0x00	; 0
     80c:	d0 e0       	ldi	r29, 0x00	; 0
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
     80e:	10 2f       	mov	r17, r16
     810:	1f 0d       	add	r17, r15
     812:	11 bf       	out	0x31, r17	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
     814:	c9 d1       	rcall	.+914    	; 0xba8 <usbMeasureFrameLength>
     816:	9c 01       	movw	r18, r24
        if(x < targetValue)             /* frequency still too low */
     818:	89 e0       	ldi	r24, 0x09	; 9
     81a:	24 33       	cpi	r18, 0x34	; 52
     81c:	38 07       	cpc	r19, r24
     81e:	0c f0       	brlt	.+2      	; 0x822 <calibrateOscillator+0x2a>
     820:	10 2f       	mov	r17, r16
            trialValue += step;
        step >>= 1;
     822:	f6 94       	lsr	r15
     824:	21 96       	adiw	r28, 0x01	; 1
    }while(step > 0);
     826:	c8 30       	cpi	r28, 0x08	; 8
     828:	d1 05       	cpc	r29, r1
     82a:	11 f0       	breq	.+4      	; 0x830 <calibrateOscillator+0x38>
     82c:	01 2f       	mov	r16, r17
     82e:	ef cf       	rjmp	.-34     	; 0x80e <calibrateOscillator+0x16>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     830:	11 50       	subi	r17, 0x01	; 1
     832:	11 bf       	out	0x31, r17	; 49
     834:	1f 5f       	subi	r17, 0xFF	; 255
     836:	79 01       	movw	r14, r18
     838:	c1 2f       	mov	r28, r17
     83a:	d0 e0       	ldi	r29, 0x00	; 0
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	10 c0       	rjmp	.+32     	; 0x860 <calibrateOscillator+0x68>
        x = usbMeasureFrameLength() - targetValue;
     840:	b3 d1       	rcall	.+870    	; 0xba8 <usbMeasureFrameLength>
     842:	84 53       	subi	r24, 0x34	; 52
     844:	99 40       	sbci	r25, 0x09	; 9
     846:	97 ff       	sbrs	r25, 7
     848:	03 c0       	rjmp	.+6      	; 0x850 <calibrateOscillator+0x58>
     84a:	90 95       	com	r25
     84c:	81 95       	neg	r24
     84e:	9f 4f       	sbci	r25, 0xFF	; 255
        if(x < 0)
            x = -x;
        if(x < optimumDev){
     850:	8e 15       	cp	r24, r14
     852:	9f 05       	cpc	r25, r15
     854:	14 f4       	brge	.+4      	; 0x85a <calibrateOscillator+0x62>
            optimumDev = x;
            optimumValue = OSCCAL;
     856:	11 b7       	in	r17, 0x31	; 49
     858:	7c 01       	movw	r14, r24
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     85a:	81 b7       	in	r24, 0x31	; 49
     85c:	8f 5f       	subi	r24, 0xFF	; 255
     85e:	81 bf       	out	0x31, r24	; 49
     860:	81 b7       	in	r24, 0x31	; 49
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	c8 17       	cp	r28, r24
     866:	d9 07       	cpc	r29, r25
     868:	5c f7       	brge	.-42     	; 0x840 <calibrateOscillator+0x48>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
     86a:	11 bf       	out	0x31, r17	; 49
}
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	e6 e0       	ldi	r30, 0x06	; 6
     872:	6e c3       	rjmp	.+1756   	; 0xf50 <__epilogue_restores__+0x18>

00000874 <Timers_Init>:
static volatile milliseconds_t Timers[TIMER_LAST];

#define ATOMIC_BLOCK(x)

void Timers_Init(void)
{
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
	TimerId_t id;
	for (id=0; id < TIMER_LAST;id++)
	{
    Timers[id]=TIMER_RESET;
     878:	2f ef       	ldi	r18, 0xFF	; 255
     87a:	3f ef       	ldi	r19, 0xFF	; 255
     87c:	fc 01       	movw	r30, r24
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	e2 57       	subi	r30, 0x72	; 114
     884:	ff 4f       	sbci	r31, 0xFF	; 255
     886:	31 83       	std	Z+1, r19	; 0x01
     888:	20 83       	st	Z, r18
     88a:	01 96       	adiw	r24, 0x01	; 1
#define ATOMIC_BLOCK(x)

void Timers_Init(void)
{
	TimerId_t id;
	for (id=0; id < TIMER_LAST;id++)
     88c:	87 30       	cpi	r24, 0x07	; 7
     88e:	91 05       	cpc	r25, r1
     890:	a9 f7       	brne	.-22     	; 0x87c <Timers_Init+0x8>
	{
    Timers[id]=TIMER_RESET;
  }
}
     892:	08 95       	ret

00000894 <Timers_DecreaseAll>:
milliseconds_t Timers_DecreaseAll(milliseconds_x256_t delta_x256)
{
	static unsigned char frag = 0;
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
     894:	20 91 8d 00 	lds	r18, 0x008D
     898:	82 0f       	add	r24, r18
     89a:	91 1d       	adc	r25, r1
	frag = delta_x256 & 0xFF;
     89c:	80 93 8d 00 	sts	0x008D, r24
	milliseconds_t delta = delta_x256>>8;
     8a0:	89 2f       	mov	r24, r25
     8a2:	99 27       	eor	r25, r25
     8a4:	6f ef       	ldi	r22, 0xFF	; 255
     8a6:	7f ef       	ldi	r23, 0xFF	; 255
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	50 e0       	ldi	r21, 0x00	; 0
	for (id=0; id < TIMER_LAST;id++)
	{
		milliseconds_t tempTime = Timers[id];
     8ac:	fa 01       	movw	r30, r20
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	e2 57       	subi	r30, 0x72	; 114
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	20 81       	ld	r18, Z
     8b8:	31 81       	ldd	r19, Z+1	; 0x01
		if (tempTime != TIMER_RESET)
     8ba:	af ef       	ldi	r26, 0xFF	; 255
     8bc:	2f 3f       	cpi	r18, 0xFF	; 255
     8be:	3a 07       	cpc	r19, r26
     8c0:	99 f0       	breq	.+38     	; 0x8e8 <Timers_DecreaseAll+0x54>
		{
			if (tempTime > delta) 
     8c2:	82 17       	cp	r24, r18
     8c4:	93 07       	cpc	r25, r19
     8c6:	70 f4       	brcc	.+28     	; 0x8e4 <Timers_DecreaseAll+0x50>
			{
				tempTime-=delta;
     8c8:	28 1b       	sub	r18, r24
     8ca:	39 0b       	sbc	r19, r25
     8cc:	26 17       	cp	r18, r22
     8ce:	37 07       	cpc	r19, r23
     8d0:	08 f4       	brcc	.+2      	; 0x8d4 <Timers_DecreaseAll+0x40>
     8d2:	b9 01       	movw	r22, r18
				if (tempTime < nextTime) 
				{
					nextTime = tempTime;
				}

				Timers[id] = tempTime;
     8d4:	fa 01       	movw	r30, r20
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	e2 57       	subi	r30, 0x72	; 114
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <Timers_DecreaseAll+0x54>
			}
			else {
				Timers[id] = TIMER_HAS_EXPIRED;
     8e4:	11 82       	std	Z+1, r1	; 0x01
     8e6:	10 82       	st	Z, r1
     8e8:	4f 5f       	subi	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
	TimerId_t id;
	milliseconds_t nextTime = TIMER_RESET;
	delta_x256 += frag;
	frag = delta_x256 & 0xFF;
	milliseconds_t delta = delta_x256>>8;
	for (id=0; id < TIMER_LAST;id++)
     8ec:	47 30       	cpi	r20, 0x07	; 7
     8ee:	51 05       	cpc	r21, r1
     8f0:	e9 f6       	brne	.-70     	; 0x8ac <Timers_DecreaseAll+0x18>
				Timers[id] = TIMER_HAS_EXPIRED;
			}
		}
	}
	return nextTime;
}
     8f2:	cb 01       	movw	r24, r22
     8f4:	08 95       	ret

000008f6 <Timer_HasExpired>:
int Timer_HasExpired(const TimerId_t TimerId)
{
	int result;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if (Timers[TimerId]==TIMER_HAS_EXPIRED)
     8f6:	e8 2f       	mov	r30, r24
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	e2 57       	subi	r30, 0x72	; 114
     900:	ff 4f       	sbci	r31, 0xFF	; 255
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	89 2b       	or	r24, r25
     908:	19 f0       	breq	.+6      	; 0x910 <Timer_HasExpired+0x1a>
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	06 c0       	rjmp	.+12     	; 0x91c <Timer_HasExpired+0x26>
		{
			Timers[TimerId]=TIMER_RESET;
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
		else {
			result = 0;
		}
	}
	return result;
}
     91c:	c9 01       	movw	r24, r18
     91e:	08 95       	ret

00000920 <Timer_Reset>:

void Timer_Reset(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_RESET;
     920:	e8 2f       	mov	r30, r24
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	e2 57       	subi	r30, 0x72	; 114
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	9f ef       	ldi	r25, 0xFF	; 255
     930:	91 83       	std	Z+1, r25	; 0x01
     932:	80 83       	st	Z, r24
	}
}
     934:	08 95       	ret

00000936 <Timer_SetExpired>:
void Timer_SetExpired(const TimerId_t TimerId)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=TIMER_HAS_EXPIRED;
     936:	e8 2f       	mov	r30, r24
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	e2 57       	subi	r30, 0x72	; 114
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	11 82       	std	Z+1, r1	; 0x01
     944:	10 82       	st	Z, r1
	}
}
     946:	08 95       	ret

00000948 <Timer_Set>:

void Timer_Set(const TimerId_t TimerId,const milliseconds_t setTimeout)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		Timers[TimerId]=setTimeout;
     948:	e8 2f       	mov	r30, r24
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	e2 57       	subi	r30, 0x72	; 114
     952:	ff 4f       	sbci	r31, 0xFF	; 255
     954:	71 83       	std	Z+1, r23	; 0x01
     956:	60 83       	st	Z, r22
	}
}
     958:	08 95       	ret

0000095a <usb_stream_init>:

#define USB_STREAM_MAGIX 0xBABE
#define USB_STREAM_OVERWRITE 0x01

static noinline void usb_stream_init(usb_stream_buffer_internal_t* s)
{
     95a:	fc 01       	movw	r30, r24
	if (initialized == 0) {
     95c:	80 91 9c 00 	lds	r24, 0x009C
     960:	88 23       	and	r24, r24
     962:	59 f4       	brne	.+22     	; 0x97a <usb_stream_init+0x20>
		usb_out_stream_buffer.internal.base.bufmask = 0x7F;
     964:	8f e7       	ldi	r24, 0x7F	; 127
     966:	80 93 a0 00 	sts	0x00A0, r24
		usb_out_stream_buffer.internal.base.flags = USB_STREAM_OVERWRITE;
		usb_in_stream_buffer.internal.base.bufmask = 0x0F;
     96a:	8f e0       	ldi	r24, 0x0F	; 15
     96c:	80 93 26 01 	sts	0x0126, r24
		usb_out_stream_buffer.internal.base.flags = 0;
     970:	10 92 9f 00 	sts	0x009F, r1
		initialized = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 9c 00 	sts	0x009C, r24
	}
	if (s->magic != USB_STREAM_MAGIX) {
     97a:	80 81       	ld	r24, Z
     97c:	91 81       	ldd	r25, Z+1	; 0x01
     97e:	8e 5b       	subi	r24, 0xBE	; 190
     980:	9a 4b       	sbci	r25, 0xBA	; 186
     982:	31 f0       	breq	.+12     	; 0x990 <usb_stream_init+0x36>
		s->magic = USB_STREAM_MAGIX;
     984:	8e eb       	ldi	r24, 0xBE	; 190
     986:	9a eb       	ldi	r25, 0xBA	; 186
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
		s->base.read = 0;
     98c:	14 82       	std	Z+4, r1	; 0x04
		s->base.write = 0;
     98e:	15 82       	std	Z+5, r1	; 0x05
     990:	08 95       	ret

00000992 <usb_stream_putchar>:
	}
}

static noinline int usb_stream_putchar(char c, FILE *stream)
{
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	18 2f       	mov	r17, r24
     99a:	fb 01       	movw	r30, r22
	uint8_t newWritePos;
	usb_stream_buffer_internal_t* s = fdev_get_udata(stream);
     99c:	c4 85       	ldd	r28, Z+12	; 0x0c
     99e:	d5 85       	ldd	r29, Z+13	; 0x0d
	usb_stream_init(s);
     9a0:	ce 01       	movw	r24, r28
     9a2:	db df       	rcall	.-74     	; 0x95a <usb_stream_init>

	newWritePos = (s->base.write + 1) & s->base.bufmask;
     9a4:	9d 81       	ldd	r25, Y+5	; 0x05
     9a6:	9f 5f       	subi	r25, 0xFF	; 255
     9a8:	2b 81       	ldd	r18, Y+3	; 0x03
     9aa:	92 23       	and	r25, r18
	if (newWritePos == s->base.read) {
     9ac:	8c 81       	ldd	r24, Y+4	; 0x04
     9ae:	98 17       	cp	r25, r24
     9b0:	51 f4       	brne	.+20     	; 0x9c6 <usb_stream_putchar+0x34>
		if (s->base.flags & USB_STREAM_OVERWRITE) {
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	80 fd       	sbrc	r24, 0
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <usb_stream_putchar+0x2c>
     9b8:	2f ef       	ldi	r18, 0xFF	; 255
     9ba:	3f ef       	ldi	r19, 0xFF	; 255
     9bc:	0c c0       	rjmp	.+24     	; 0x9d6 <usb_stream_putchar+0x44>
			s->base.read++;
     9be:	89 2f       	mov	r24, r25
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
			s->base.read &= s->base.bufmask;
     9c2:	82 23       	and	r24, r18
     9c4:	8c 83       	std	Y+4, r24	; 0x04
		}
		else {
			return -1;
		}
	}
	s->base.data[s->base.write] = c;
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	fe 01       	movw	r30, r28
     9ca:	e8 0f       	add	r30, r24
     9cc:	f1 1d       	adc	r31, r1
     9ce:	16 83       	std	Z+6, r17	; 0x06
	s->base.write = newWritePos;
     9d0:	9d 83       	std	Y+5, r25	; 0x05
	return c;
     9d2:	21 2f       	mov	r18, r17
     9d4:	30 e0       	ldi	r19, 0x00	; 0
}
     9d6:	c9 01       	movw	r24, r18
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	08 95       	ret

000009e0 <usb_stream_getchar>:

static noinline int usb_stream_getchar(FILE *stream)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
	int res;
	usb_stream_buffer_internal_t* s = fdev_get_udata(stream);
     9e4:	fc 01       	movw	r30, r24
     9e6:	c4 85       	ldd	r28, Z+12	; 0x0c
     9e8:	d5 85       	ldd	r29, Z+13	; 0x0d
	usb_stream_init(s);
     9ea:	ce 01       	movw	r24, r28
     9ec:	b6 df       	rcall	.-148    	; 0x95a <usb_stream_init>
	if (s->base.read == s->base.write) {
     9ee:	2c 81       	ldd	r18, Y+4	; 0x04
     9f0:	8d 81       	ldd	r24, Y+5	; 0x05
     9f2:	28 17       	cp	r18, r24
     9f4:	19 f4       	brne	.+6      	; 0x9fc <usb_stream_getchar+0x1c>
     9f6:	4f ef       	ldi	r20, 0xFF	; 255
     9f8:	5f ef       	ldi	r21, 0xFF	; 255
     9fa:	0a c0       	rjmp	.+20     	; 0xa10 <usb_stream_getchar+0x30>
		res = -1;
	}
	else {
		res = s->base.data[s->base.read++];
     9fc:	fe 01       	movw	r30, r28
     9fe:	e2 0f       	add	r30, r18
     a00:	f1 1d       	adc	r31, r1
     a02:	86 81       	ldd	r24, Z+6	; 0x06
     a04:	48 2f       	mov	r20, r24
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	2f 5f       	subi	r18, 0xFF	; 255
		s->base.read &= s->base.bufmask;
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	28 23       	and	r18, r24
     a0e:	2c 83       	std	Y+4, r18	; 0x04
	}
	return res;
}
     a10:	ca 01       	movw	r24, r20
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <usbFunctionRead2>:
	*/

uchar __attribute__((__weak__)) usbFunctionRead2(uchar *data, uchar len)
{
	return 0;
}
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	08 95       	ret

00000a1c <usbFunctionRead>:
    return usbFunctionSetup2(data);
}


uchar usbFunctionRead(uchar *data, uchar len)
{
     a1c:	9c 01       	movw	r18, r24
	if (usb_buf_report_id == report_id_buf_out_data) {
     a1e:	80 91 3a 01 	lds	r24, 0x013A
     a22:	8e 37       	cpi	r24, 0x7E	; 126
     a24:	19 f5       	brne	.+70     	; 0xa6c <usbFunctionRead+0x50>
     a26:	40 91 39 01 	lds	r20, 0x0139
     a2a:	d9 01       	movw	r26, r18
     a2c:	94 2f       	mov	r25, r20
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	17 c0       	rjmp	.+46     	; 0xa60 <usbFunctionRead+0x44>
		uchar i;
		for (i = 0;i<len;i++) {
			if (usb_buf_state < sizeof(usb_out_stream_buffer.internal.base))
     a32:	94 30       	cpi	r25, 0x04	; 4
     a34:	30 f4       	brcc	.+12     	; 0xa42 <usbFunctionRead+0x26>
			{
				data[i] = ((uchar*)&(usb_out_stream_buffer.internal.base))[usb_buf_state];
     a36:	e9 2f       	mov	r30, r25
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	e1 56       	subi	r30, 0x61	; 97
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	80 81       	ld	r24, Z
     a40:	0b c0       	rjmp	.+22     	; 0xa58 <usbFunctionRead+0x3c>
			}
			else {
				uchar read_pos = usb_out_stream_buffer.internal.base.read + usb_buf_state - sizeof(usb_out_stream_buffer.internal.base);
     a42:	e0 91 a1 00 	lds	r30, 0x00A1
     a46:	e4 50       	subi	r30, 0x04	; 4
     a48:	e9 0f       	add	r30, r25
				read_pos &= usb_out_stream_buffer.internal.base.bufmask;
				data[i] = usb_out_stream_buffer.internal.base.data[read_pos];
     a4a:	80 91 a0 00 	lds	r24, 0x00A0
     a4e:	e8 23       	and	r30, r24
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	e3 56       	subi	r30, 0x63	; 99
     a54:	ff 4f       	sbci	r31, 0xFF	; 255
     a56:	86 81       	ldd	r24, Z+6	; 0x06
     a58:	8c 93       	st	X, r24

uchar usbFunctionRead(uchar *data, uchar len)
{
	if (usb_buf_report_id == report_id_buf_out_data) {
		uchar i;
		for (i = 0;i<len;i++) {
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	9f 5f       	subi	r25, 0xFF	; 255
     a5e:	11 96       	adiw	r26, 0x01	; 1
     a60:	26 17       	cp	r18, r22
     a62:	38 f3       	brcs	.-50     	; 0xa32 <usbFunctionRead+0x16>
     a64:	46 0f       	add	r20, r22
     a66:	40 93 39 01 	sts	0x0139, r20
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <usbFunctionRead+0x56>
			}
			usb_buf_state++;
		}
		return len;
	}
	return usbFunctionRead2(data,len);
     a6c:	c9 01       	movw	r24, r18
     a6e:	d4 df       	rcall	.-88     	; 0xa18 <usbFunctionRead2>
     a70:	68 2f       	mov	r22, r24
}
     a72:	86 2f       	mov	r24, r22
     a74:	08 95       	ret

00000a76 <usbFunctionWrite2>:
	return 0;
}
uchar __attribute__((__weak__)) usbFunctionWrite2(uchar *data, uchar len)
{
	return 0;
}
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	08 95       	ret

00000a7a <usbFunctionWrite>:
}

static uchar usb_stream_buffer_write_len;

uchar usbFunctionWrite(uchar *data, uchar len)
{
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	e2 e4       	ldi	r30, 0x42	; 66
     a80:	f5 e0       	ldi	r31, 0x05	; 5
     a82:	47 c2       	rjmp	.+1166   	; 0xf12 <__prologue_saves__+0x12>
     a84:	fc 01       	movw	r30, r24
     a86:	f6 2e       	mov	r15, r22
	if (usb_buf_report_id == report_id_buf_out_setreadpos)
     a88:	80 91 3a 01 	lds	r24, 0x013A
     a8c:	8c 37       	cpi	r24, 0x7C	; 124
     a8e:	21 f4       	brne	.+8      	; 0xa98 <usbFunctionWrite+0x1e>
	{
		usb_out_stream_buffer.internal.base.read = *((uint16_t*)&data[1]);
     a90:	81 81       	ldd	r24, Z+1	; 0x01
     a92:	80 93 a1 00 	sts	0x00A1, r24
     a96:	33 c0       	rjmp	.+102    	; 0xafe <usbFunctionWrite+0x84>
		return len;
	}
	else if (usb_buf_report_id == report_id_buf_in_data) {
     a98:	8f 37       	cpi	r24, 0x7F	; 127
     a9a:	71 f5       	brne	.+92     	; 0xaf8 <usbFunctionWrite+0x7e>
     a9c:	ef 01       	movw	r28, r30
     a9e:	00 e0       	ldi	r16, 0x00	; 0
     aa0:	10 e0       	ldi	r17, 0x00	; 0
		int i;
		for (i=0;i<len;i++) {
     aa2:	c6 2e       	mov	r12, r22
     aa4:	dd 24       	eor	r13, r13
			if (usb_buf_state == 0){
				usb_buf_state++;
			}
			else if (usb_buf_state == 1) {
				usb_stream_buffer_write_len = data[i];
				usb_buf_state++;
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	b8 2e       	mov	r11, r24
	}
	else if (usb_buf_report_id == report_id_buf_in_data) {
		int i;
		for (i=0;i<len;i++) {
			if (usb_buf_state == 0){
				usb_buf_state++;
     aaa:	ee 24       	eor	r14, r14
     aac:	e3 94       	inc	r14
     aae:	20 c0       	rjmp	.+64     	; 0xaf0 <usbFunctionWrite+0x76>
		return len;
	}
	else if (usb_buf_report_id == report_id_buf_in_data) {
		int i;
		for (i=0;i<len;i++) {
			if (usb_buf_state == 0){
     ab0:	80 91 39 01 	lds	r24, 0x0139
     ab4:	88 23       	and	r24, r24
     ab6:	19 f4       	brne	.+6      	; 0xabe <usbFunctionWrite+0x44>
				usb_buf_state++;
     ab8:	e0 92 39 01 	sts	0x0139, r14
     abc:	16 c0       	rjmp	.+44     	; 0xaea <usbFunctionWrite+0x70>
			}
			else if (usb_buf_state == 1) {
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	31 f4       	brne	.+12     	; 0xace <usbFunctionWrite+0x54>
				usb_stream_buffer_write_len = data[i];
     ac2:	88 81       	ld	r24, Y
     ac4:	80 93 3b 01 	sts	0x013B, r24
				usb_buf_state++;
     ac8:	b0 92 39 01 	sts	0x0139, r11
     acc:	0e c0       	rjmp	.+28     	; 0xaea <usbFunctionWrite+0x70>
			}
			else if (usb_stream_buffer_write_len > 0){
     ace:	80 91 3b 01 	lds	r24, 0x013B
     ad2:	88 23       	and	r24, r24
     ad4:	51 f0       	breq	.+20     	; 0xaea <usbFunctionWrite+0x70>
				fputc(data[i],&usb_in_stream);
     ad6:	88 81       	ld	r24, Y
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	60 e7       	ldi	r22, 0x70	; 112
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	89 d2       	rcall	.+1298   	; 0xff2 <fputc>
				usb_stream_buffer_write_len--;
     ae0:	80 91 3b 01 	lds	r24, 0x013B
     ae4:	81 50       	subi	r24, 0x01	; 1
     ae6:	80 93 3b 01 	sts	0x013B, r24
		usb_out_stream_buffer.internal.base.read = *((uint16_t*)&data[1]);
		return len;
	}
	else if (usb_buf_report_id == report_id_buf_in_data) {
		int i;
		for (i=0;i<len;i++) {
     aea:	0f 5f       	subi	r16, 0xFF	; 255
     aec:	1f 4f       	sbci	r17, 0xFF	; 255
     aee:	21 96       	adiw	r28, 0x01	; 1
     af0:	0c 15       	cp	r16, r12
     af2:	1d 05       	cpc	r17, r13
     af4:	ec f2       	brlt	.-70     	; 0xab0 <usbFunctionWrite+0x36>
     af6:	03 c0       	rjmp	.+6      	; 0xafe <usbFunctionWrite+0x84>
				usb_stream_buffer_write_len--;
			}
		}
		return len;
	}
	return usbFunctionWrite2(data,len);
     af8:	cf 01       	movw	r24, r30
     afa:	bd df       	rcall	.-134    	; 0xa76 <usbFunctionWrite2>
     afc:	f8 2e       	mov	r15, r24
}
     afe:	8f 2d       	mov	r24, r15
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	e9 e0       	ldi	r30, 0x09	; 9
     b06:	21 c2       	rjmp	.+1090   	; 0xf4a <__epilogue_restores__+0x12>

00000b08 <usbFunctionSetup>:
static uchar usb_buf_state;
static uchar usb_buf_report_id;


usbMsgLen_t usbFunctionSetup(uchar data[8])
{
     b08:	38 2f       	mov	r19, r24
	usbRequest_t    *rq = (void *)data;
     b0a:	e8 2f       	mov	r30, r24
     b0c:	f9 2f       	mov	r31, r25
	usb_buf_report_id = rq->wValue.bytes[0];
     b0e:	22 81       	ldd	r18, Z+2	; 0x02
     b10:	20 93 3a 01 	sts	0x013A, r18
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     b14:	80 81       	ld	r24, Z
     b16:	80 76       	andi	r24, 0x60	; 96
     b18:	80 32       	cpi	r24, 0x20	; 32
     b1a:	d1 f4       	brne	.+52     	; 0xb50 <usbFunctionSetup+0x48>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
     b1c:	81 81       	ldd	r24, Z+1	; 0x01
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	69 f4       	brne	.+26     	; 0xb3c <usbFunctionSetup+0x34>

        	switch (rq->wValue.bytes[0]) {
     b22:	2d 37       	cpi	r18, 0x7D	; 125
     b24:	19 f0       	breq	.+6      	; 0xb2c <usbFunctionSetup+0x24>
     b26:	2e 37       	cpi	r18, 0x7E	; 126
     b28:	99 f4       	brne	.+38     	; 0xb50 <usbFunctionSetup+0x48>
     b2a:	0e c0       	rjmp	.+28     	; 0xb48 <usbFunctionSetup+0x40>
        		case report_id_buf_out_data:
        			usb_buf_state = 0;
        			return USB_NO_MSG;
        		case report_id_buf_in_getwritepos:
        			usbMsgPtr = (void*)&usb_in_stream_buffer.internal.base.write;
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	90 93 57 01 	sts	0x0157, r25
     b34:	80 93 56 01 	sts	0x0156, r24
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	08 95       	ret
        			return sizeof(usb_in_stream_buffer.internal.base.write);
        		default:
        			break;
        	}
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
     b3c:	89 30       	cpi	r24, 0x09	; 9
     b3e:	41 f4       	brne	.+16     	; 0xb50 <usbFunctionSetup+0x48>
        	switch (rq->wValue.bytes[0]) {
     b40:	2c 37       	cpi	r18, 0x7C	; 124
     b42:	21 f0       	breq	.+8      	; 0xb4c <usbFunctionSetup+0x44>
     b44:	2f 37       	cpi	r18, 0x7F	; 127
     b46:	21 f4       	brne	.+8      	; 0xb50 <usbFunctionSetup+0x48>
        		case report_id_buf_out_setreadpos:
        			return USB_NO_MSG;

        		case report_id_buf_in_data:
        			usb_buf_state = 0;
     b48:	10 92 39 01 	sts	0x0139, r1
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	08 95       	ret
        		default:
        			break;
        	}
        }
    }
    return usbFunctionSetup2(data);
     b50:	83 2f       	mov	r24, r19
     b52:	1a dd       	rcall	.-1484   	; 0x588 <usbFunctionSetup2>
}
     b54:	08 95       	ret

00000b56 <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     b56:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     b58:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     b5c:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     b5e:	1b c0       	rjmp	.+54     	; 0xb96 <usbCrc16LoopTest>

00000b60 <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     b60:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     b62:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     b64:	28 2f       	mov	r18, r24
    swap    byte
     b66:	22 95       	swap	r18
    eor     byte, resCrcL
     b68:	28 27       	eor	r18, r24
    mov     scratch, byte
     b6a:	72 2f       	mov	r23, r18
    lsr     byte
     b6c:	26 95       	lsr	r18
    lsr     byte
     b6e:	26 95       	lsr	r18
    eor     byte, scratch
     b70:	27 27       	eor	r18, r23
    inc     byte
     b72:	23 95       	inc	r18
    lsr     byte
     b74:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     b76:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     b78:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     b7a:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     b7c:	82 27       	eor	r24, r18
    neg     byte
     b7e:	21 95       	neg	r18
    andi    byte, 0xc0
     b80:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     b82:	92 2f       	mov	r25, r18
    clr     byte
     b84:	22 27       	eor	r18, r18
    lsr     scratch
     b86:	76 95       	lsr	r23
    ror     byte
     b88:	27 95       	ror	r18
    eor     resCrcH, scratch
     b8a:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     b8c:	82 27       	eor	r24, r18
    lsr     scratch
     b8e:	76 95       	lsr	r23
    ror     byte
     b90:	27 95       	ror	r18
    eor     resCrcH, scratch
     b92:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     b94:	82 27       	eor	r24, r18

00000b96 <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     b96:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     b98:	18 f7       	brcc	.-58     	; 0xb60 <usbCrc16ByteLoop>
    com     resCrcL
     b9a:	80 95       	com	r24
    com     resCrcH
     b9c:	90 95       	com	r25
    ret
     b9e:	08 95       	ret

00000ba0 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     ba0:	da df       	rcall	.-76     	; 0xb56 <usbCrc16>
    st      ptr+, resCrcL
     ba2:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     ba4:	9d 93       	st	X+, r25
    ret
     ba6:	08 95       	ret

00000ba8 <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     ba8:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     baa:	88 27       	eor	r24, r24
    clr     cnt16H
     bac:	99 27       	eor	r25, r25

00000bae <usbMFTime16>:
usbMFTime16:
    dec     cntH
     bae:	aa 95       	dec	r26
    breq    usbMFTimeout
     bb0:	69 f0       	breq	.+26     	; 0xbcc <usbMFTimeout>

00000bb2 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     bb2:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     bb4:	e1 f3       	breq	.-8      	; 0xbae <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     bb6:	b2 99       	sbic	0x16, 2	; 22
    rjmp    usbMFWaitStrobe ;[4]
     bb8:	fc cf       	rjmp	.-8      	; 0xbb2 <usbMFWaitStrobe>

00000bba <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     bba:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    usbMFWaitIdle   ;2
     bbc:	fe cf       	rjmp	.-4      	; 0xbba <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     bbe:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     bc0:	99 27       	eor	r25, r25

00000bc2 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     bc2:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     bc4:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     bc6:	11 f0       	breq	.+4      	; 0xbcc <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     bc8:	a4 74       	andi	r26, 0x44	; 68
    brne    usbMFWaitLoop   ;[5]
     bca:	d9 f7       	brne	.-10     	; 0xbc2 <usbMFWaitLoop>

00000bcc <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     bcc:	08 95       	ret

00000bce <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
     bce:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
     bd0:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
     bd2:	cf 93       	push	r28

00000bd4 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     bd4:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     bd6:	b2 9b       	sbis	0x16, 2	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     bd8:	e9 f7       	brne	.-6      	; 0xbd4 <waitForJ>

00000bda <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     bda:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK              ;[-14]
     bdc:	0b c0       	rjmp	.+22     	; 0xbf4 <foundK>
    sbis    USBIN, USBMINUS
     bde:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     be0:	09 c0       	rjmp	.+18     	; 0xbf4 <foundK>
    sbis    USBIN, USBMINUS
     be2:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     be4:	07 c0       	rjmp	.+14     	; 0xbf4 <foundK>
    sbis    USBIN, USBMINUS
     be6:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <foundK>
    sbis    USBIN, USBMINUS
     bea:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <foundK>
    sbis    USBIN, USBMINUS
     bee:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     bf2:	d5 c0       	rjmp	.+426    	; 0xd9e <sofError>

00000bf4 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
     bf4:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
     bf6:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
     bf8:	c0 91 55 01 	lds	r28, 0x0155
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
     bfc:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
     bfe:	c4 5a       	subi	r28, 0xA4	; 164
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
     c00:	de 4f       	sbci	r29, 0xFE	; 254
    mov     r0, x2              ;[-3] [rx loop init]
     c02:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     c04:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    haveTwoBitsK        ;[-1]
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
     c08:	df 91       	pop	r29
    pop     r0                  ;[2]
     c0a:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     c0c:	e6 cf       	rjmp	.-52     	; 0xbda <waitForK>

00000c0e <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
     c0e:	2f 93       	push	r18
    push    x1              ;[3]
     c10:	0f 93       	push	r16
    push    x2              ;[5]
     c12:	1f 93       	push	r17
    push    x3              ;[7]
     c14:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
     c16:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
     c18:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
     c1a:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
     c1c:	02 fb       	bst	r16, 2
    bld     shift, 0        ;[13]
     c1e:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
     c20:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
     c22:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
     c24:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
     c26:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
     c28:	65 c0       	rjmp	.+202    	; 0xcf4 <rxbit1>

00000c2a <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
     c2a:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
     c2c:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
     c2e:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
     c30:	52 fd       	sbrc	r21, 2
    lpm                     ;[059] optional nop3; modifies r0
     c32:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
     c34:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
     c36:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
     c38:	02 fb       	bst	r16, 2
    bld     shift, 5        ;[063]
     c3a:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
     c3c:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
     c3e:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
     c40:	b1 f0       	breq	.+44     	; 0xc6e <unstuff5>
    eor     phase, x1       ;[067]
     c42:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
     c44:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
     c46:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[070]
     c48:	26 f9       	bld	r18, 6

00000c4a <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
     c4a:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
     c4c:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
     c4e:	f0 f0       	brcs	.+60     	; 0xc8c <unstuff6>

00000c50 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
     c52:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
     c54:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
     c56:	02 fb       	bst	r16, 2
    bld     shift, 7        ;[079]
     c58:	27 f9       	bld	r18, 7

00000c5a <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
     c5a:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
     c5c:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
     c5e:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
     c60:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
     c62:	e8 f5       	brcc	.+122    	; 0xcde <rxLoop>

00000c64 <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
     c64:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
     c66:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
     c68:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
     c6a:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
     c6c:	f6 cf       	rjmp	.-20     	; 0xc5a <didUnstuff7>

00000c6e <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
     c6e:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
     c70:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
     c72:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
     c74:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
     c76:	10 2f       	mov	r17, r16
    nop                     ;[073]
     c78:	00 00       	nop
    nop2                    ;[074]
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
     c7c:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
     c7e:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
     c80:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
     c82:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
     c84:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
     c86:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
     c88:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
     c8a:	e2 cf       	rjmp	.-60     	; 0xc50 <didUnstuff5>

00000c8c <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
     c8c:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
     c8e:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
     c90:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
     c94:	da cf       	rjmp	.-76     	; 0xc4a <didUnstuff6>

00000c96 <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
     c96:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
     c98:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
     c9a:	14 74       	andi	r17, 0x44	; 68
    in      r0, USBIN       ;[017] <-- phase
     c9c:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
     c9e:	69 f1       	breq	.+90     	; 0xcfa <didUnstuff0>
    andi    x3, ~0x01       ;[019]
     ca0:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
     ca2:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
     ca4:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
     ca6:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
     ca8:	28 c0       	rjmp	.+80     	; 0xcfa <didUnstuff0>

00000caa <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
     caa:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
     cac:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
     cae:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
     cb0:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
     cb2:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
     cb4:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
     cb6:	29 c0       	rjmp	.+82     	; 0xd0a <didUnstuff1>

00000cb8 <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
     cb8:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
     cba:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
     cbc:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
     cbe:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
     cc0:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
     cc2:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <didUnstuff2>

00000cc6 <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
     cc6:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
     cc8:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
     cca:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
     ccc:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
     cce:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
     cd0:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
     cd2:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <didUnstuff3>

00000cd6 <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
     cd6:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
     cd8:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
     cda:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
     cdc:	30 c0       	rjmp	.+96     	; 0xd3e <didUnstuff4>

00000cde <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     cde:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
     ce0:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
     ce2:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
     ce4:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
     ce6:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
     ce8:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
     cea:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
     cec:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
     cee:	12 fb       	bst	r17, 2
    bld     shift, 0        ;[009]
     cf0:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
     cf2:	29 7f       	andi	r18, 0xF9	; 249

00000cf4 <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
     cf4:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
     cf6:	79 f2       	breq	.-98     	; 0xc96 <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
     cf8:	14 74       	andi	r17, 0x44	; 68

00000cfa <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
     cfa:	59 f1       	breq	.+86     	; 0xd52 <se0>
    eor     r0, x2          ;[015]
     cfc:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
     cfe:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
     d00:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
     d02:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
     d04:	02 fb       	bst	r16, 2
    bld     shift, 1        ;[020]
     d06:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
     d08:	23 7f       	andi	r18, 0xF3	; 243

00000d0a <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
     d0a:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
     d0c:	71 f2       	breq	.-100    	; 0xcaa <unstuff1>
    eor     r0, x1          ;[024]
     d0e:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
     d10:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
     d12:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
     d14:	d0 f0       	brcs	.+52     	; 0xd4a <overflow>
    in      r0, USBIN       ;[028] <-- phase
     d16:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
     d18:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
     d1a:	12 fb       	bst	r17, 2
    bld     shift, 2        ;[031]
     d1c:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
     d1e:	27 7e       	andi	r18, 0xE7	; 231

00000d20 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
     d20:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
     d22:	51 f2       	breq	.-108    	; 0xcb8 <unstuff2>
    eor     r0, x2          ;[035]
     d24:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
     d26:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
     d28:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
     d2a:	02 fb       	bst	r16, 2
    in      r0, USBIN       ;[039] <-- phase
     d2c:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
     d2e:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
     d30:	2f 7c       	andi	r18, 0xCF	; 207

00000d32 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
     d32:	49 f2       	breq	.-110    	; 0xcc6 <unstuff3>
    nop                     ;[043]
     d34:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
     d36:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
     d38:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
     d3a:	12 fb       	bst	r17, 2
    bld     shift, 4        ;[047]
     d3c:	24 f9       	bld	r18, 4

00000d3e <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
     d3e:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
     d40:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
     d42:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
     d44:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
     d46:	39 f2       	breq	.-114    	; 0xcd6 <unstuff4>
    rjmp    continueWithBit5;[053]
     d48:	70 cf       	rjmp	.-288    	; 0xc2a <continueWithBit5>

00000d4a <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     d4a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     d4c:	1a bf       	out	0x3a, r17	; 58

00000d4e <ignorePacket>:
ignorePacket:
    clr     token
     d4e:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     d50:	19 c0       	rjmp	.+50     	; 0xd84 <handleSetupOrOut>

00000d52 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     d52:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     d54:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     d56:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     d58:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     d5a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     d5c:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     d5e:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     d60:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     d62:	09 f1       	breq	.+66     	; 0xda6 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     d64:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     d66:	f9 f0       	breq	.+62     	; 0xda6 <handleData>
    lds     shift, usbDeviceAddr;[17]
     d68:	20 91 53 01 	lds	r18, 0x0153
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     d6c:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     d6e:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     d70:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     d72:	ed cf       	rjmp	.-38     	; 0xd4e <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     d74:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     d76:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     d78:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     d7a:	51 f1       	breq	.+84     	; 0xdd0 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     d7c:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     d7e:	11 f0       	breq	.+4      	; 0xd84 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     d80:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     d82:	29 f7       	brne	.-54     	; 0xd4e <ignorePacket>

00000d84 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     d84:	00 93 5a 01 	sts	0x015A, r16

00000d88 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     d88:	3f 91       	pop	r19
     d8a:	5f 91       	pop	r21
     d8c:	4f 91       	pop	r20
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	2f 91       	pop	r18
     d94:	df 91       	pop	r29
     d96:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
     d98:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     d9a:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     d9c:	1b cf       	rjmp	.-458    	; 0xbd4 <waitForJ>

00000d9e <sofError>:
sofError:
    POP_RETI                    ;macro call
     d9e:	cf 91       	pop	r28
     da0:	cf bf       	out	0x3f, r28	; 63
     da2:	cf 91       	pop	r28
    reti
     da4:	18 95       	reti

00000da6 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     da6:	20 91 5a 01 	lds	r18, 0x015A
    tst     shift               ;[20]
     daa:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     dac:	69 f3       	breq	.-38     	; 0xd88 <doReturn>
    lds     x2, usbRxLen        ;[22]
     dae:	10 91 58 01 	lds	r17, 0x0158
    tst     x2                  ;[24]
     db2:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     db4:	79 f5       	brne	.+94     	; 0xe14 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     db6:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     db8:	7a f1       	brmi	.+94     	; 0xe18 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     dba:	30 93 58 01 	sts	0x0158, r19
    sts     usbRxToken, shift   ;[30]
     dbe:	20 93 54 01 	sts	0x0154, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
     dc2:	10 91 55 01 	lds	r17, 0x0155
    ldi     cnt, USB_BUFSIZE    ;[34]
     dc6:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     dc8:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     dca:	30 93 55 01 	sts	0x0155, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     dce:	24 c0       	rjmp	.+72     	; 0xe18 <sendAckAndReti>

00000dd0 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     dd0:	00 91 58 01 	lds	r16, 0x0158
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     dd4:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     dd6:	f4 f4       	brge	.+60     	; 0xe14 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     dd8:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     dda:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     ddc:	49 f4       	brne	.+18     	; 0xdf0 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     dde:	30 91 60 00 	lds	r19, 0x0060
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     de2:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     de4:	1a c0       	rjmp	.+52     	; 0xe1a <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     de6:	00 93 60 00 	sts	0x0060, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
     dea:	cc e3       	ldi	r28, 0x3C	; 60
    ldi     YH, hi8(usbTxBuf)   ;[44]
     dec:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     dee:	19 c0       	rjmp	.+50     	; 0xe22 <usbSendAndReti>

00000df0 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     df0:	30 91 47 01 	lds	r19, 0x0147
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     df4:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     df6:	11 c0       	rjmp	.+34     	; 0xe1a <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     df8:	00 93 47 01 	sts	0x0147, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     dfc:	c8 e4       	ldi	r28, 0x48	; 72
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     dfe:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     e00:	10 c0       	rjmp	.+32     	; 0xe22 <usbSendAndReti>

00000e02 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
     e02:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
     e04:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
     e08:	21 c0       	rjmp	.+66     	; 0xe4c <didStuff7>

00000e0a <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
     e0a:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
     e0c:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
     e0e:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
     e10:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <didStuffN>

00000e14 <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
     e14:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <sendCntAndReti>

00000e18 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     e18:	32 ed       	ldi	r19, 0xD2	; 210

00000e1a <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
     e1a:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
     e1c:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
     e1e:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     e20:	32 e0       	ldi	r19, 0x02	; 2

00000e22 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     e22:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
     e24:	14 64       	ori	r17, 0x44	; 68
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     e26:	c2 9a       	sbi	0x18, 2	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     e28:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
     e2a:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     e2c:	54 e4       	ldi	r21, 0x44	; 68
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     e2e:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
     e30:	4f ef       	ldi	r20, 0xFF	; 255

00000e32 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
     e32:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
     e34:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
     e36:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
     e38:	27 95       	ror	r18
    ror     x2              ;[1]
     e3a:	17 95       	ror	r17

00000e3c <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
     e3c:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
     e3e:	28 f7       	brcc	.-54     	; 0xe0a <bitstuffN>
    nop                     ;[4]
     e40:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
     e42:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
     e44:	b0 f7       	brcc	.-20     	; 0xe32 <bitloop>
    sbrs    shift, 0        ;[7]
     e46:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
     e48:	05 27       	eor	r16, r21
    ror     shift           ;[9]
     e4a:	27 95       	ror	r18

00000e4c <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
     e4c:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
     e4e:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
     e50:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
     e52:	b8 f6       	brcc	.-82     	; 0xe02 <bitstuff7>
    ld      shift, y+       ;[3]
     e54:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
     e56:	3a 95       	dec	r19
    brne    byteloop        ;[6]
     e58:	61 f7       	brne	.-40     	; 0xe32 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
     e5a:	0b 7b       	andi	r16, 0xBB	; 187
    lds     x2, usbNewDeviceAddr;[8]
     e5c:	10 91 59 01 	lds	r17, 0x0159
    lsl     x2              ;[10] we compare with left shifted address
     e60:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     e62:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
     e64:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
     e66:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
     e68:	11 f0       	breq	.+4      	; 0xe6e <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     e6a:	10 93 53 01 	sts	0x0153, r17

00000e6e <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     e6e:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
     e70:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
     e72:	04 60       	ori	r16, 0x04	; 4
    in      x2, USBDDR      ;[7]
     e74:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
     e76:	1b 7b       	andi	r17, 0xBB	; 187
    mov     x3, x1          ;[9]
     e78:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
     e7a:	4b 7b       	andi	r20, 0xBB	; 187
    ldi     x4, 4           ;[11]
     e7c:	54 e0       	ldi	r21, 0x04	; 4

00000e7e <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
     e7e:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
     e80:	f1 f7       	brne	.-4      	; 0xe7e <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
     e82:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
     e84:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
     e86:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     e88:	7f cf       	rjmp	.-258    	; 0xd88 <doReturn>

00000e8a <__mulsi3>:
     e8a:	ff 27       	eor	r31, r31
     e8c:	ee 27       	eor	r30, r30
     e8e:	bb 27       	eor	r27, r27
     e90:	aa 27       	eor	r26, r26

00000e92 <__mulsi3_loop>:
     e92:	60 ff       	sbrs	r22, 0
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <__mulsi3_skip1>
     e96:	a2 0f       	add	r26, r18
     e98:	b3 1f       	adc	r27, r19
     e9a:	e4 1f       	adc	r30, r20
     e9c:	f5 1f       	adc	r31, r21

00000e9e <__mulsi3_skip1>:
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	44 1f       	adc	r20, r20
     ea4:	55 1f       	adc	r21, r21
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	77 95       	ror	r23
     eac:	67 95       	ror	r22
     eae:	89 f7       	brne	.-30     	; 0xe92 <__mulsi3_loop>
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	76 07       	cpc	r23, r22
     eb4:	71 f7       	brne	.-36     	; 0xe92 <__mulsi3_loop>

00000eb6 <__mulsi3_exit>:
     eb6:	cf 01       	movw	r24, r30
     eb8:	bd 01       	movw	r22, r26
     eba:	08 95       	ret

00000ebc <__udivmodsi4>:
     ebc:	a1 e2       	ldi	r26, 0x21	; 33
     ebe:	1a 2e       	mov	r1, r26
     ec0:	aa 1b       	sub	r26, r26
     ec2:	bb 1b       	sub	r27, r27
     ec4:	fd 01       	movw	r30, r26
     ec6:	0d c0       	rjmp	.+26     	; 0xee2 <__udivmodsi4_ep>

00000ec8 <__udivmodsi4_loop>:
     ec8:	aa 1f       	adc	r26, r26
     eca:	bb 1f       	adc	r27, r27
     ecc:	ee 1f       	adc	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	a2 17       	cp	r26, r18
     ed2:	b3 07       	cpc	r27, r19
     ed4:	e4 07       	cpc	r30, r20
     ed6:	f5 07       	cpc	r31, r21
     ed8:	20 f0       	brcs	.+8      	; 0xee2 <__udivmodsi4_ep>
     eda:	a2 1b       	sub	r26, r18
     edc:	b3 0b       	sbc	r27, r19
     ede:	e4 0b       	sbc	r30, r20
     ee0:	f5 0b       	sbc	r31, r21

00000ee2 <__udivmodsi4_ep>:
     ee2:	66 1f       	adc	r22, r22
     ee4:	77 1f       	adc	r23, r23
     ee6:	88 1f       	adc	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	1a 94       	dec	r1
     eec:	69 f7       	brne	.-38     	; 0xec8 <__udivmodsi4_loop>
     eee:	60 95       	com	r22
     ef0:	70 95       	com	r23
     ef2:	80 95       	com	r24
     ef4:	90 95       	com	r25
     ef6:	9b 01       	movw	r18, r22
     ef8:	ac 01       	movw	r20, r24
     efa:	bd 01       	movw	r22, r26
     efc:	cf 01       	movw	r24, r30
     efe:	08 95       	ret

00000f00 <__prologue_saves__>:
     f00:	2f 92       	push	r2
     f02:	3f 92       	push	r3
     f04:	4f 92       	push	r4
     f06:	5f 92       	push	r5
     f08:	6f 92       	push	r6
     f0a:	7f 92       	push	r7
     f0c:	8f 92       	push	r8
     f0e:	9f 92       	push	r9
     f10:	af 92       	push	r10
     f12:	bf 92       	push	r11
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	ca 1b       	sub	r28, r26
     f2a:	db 0b       	sbc	r29, r27
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	09 94       	ijmp

00000f38 <__epilogue_restores__>:
     f38:	2a 88       	ldd	r2, Y+18	; 0x12
     f3a:	39 88       	ldd	r3, Y+17	; 0x11
     f3c:	48 88       	ldd	r4, Y+16	; 0x10
     f3e:	5f 84       	ldd	r5, Y+15	; 0x0f
     f40:	6e 84       	ldd	r6, Y+14	; 0x0e
     f42:	7d 84       	ldd	r7, Y+13	; 0x0d
     f44:	8c 84       	ldd	r8, Y+12	; 0x0c
     f46:	9b 84       	ldd	r9, Y+11	; 0x0b
     f48:	aa 84       	ldd	r10, Y+10	; 0x0a
     f4a:	b9 84       	ldd	r11, Y+9	; 0x09
     f4c:	c8 84       	ldd	r12, Y+8	; 0x08
     f4e:	df 80       	ldd	r13, Y+7	; 0x07
     f50:	ee 80       	ldd	r14, Y+6	; 0x06
     f52:	fd 80       	ldd	r15, Y+5	; 0x05
     f54:	0c 81       	ldd	r16, Y+4	; 0x04
     f56:	1b 81       	ldd	r17, Y+3	; 0x03
     f58:	aa 81       	ldd	r26, Y+2	; 0x02
     f5a:	b9 81       	ldd	r27, Y+1	; 0x01
     f5c:	ce 0f       	add	r28, r30
     f5e:	d1 1d       	adc	r29, r1
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	ed 01       	movw	r28, r26
     f6c:	08 95       	ret

00000f6e <fgetc>:
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	ec 01       	movw	r28, r24
     f74:	4b 81       	ldd	r20, Y+3	; 0x03
     f76:	40 ff       	sbrs	r20, 0
     f78:	1a c0       	rjmp	.+52     	; 0xfae <fgetc+0x40>
     f7a:	46 ff       	sbrs	r20, 6
     f7c:	0a c0       	rjmp	.+20     	; 0xf92 <fgetc+0x24>
     f7e:	4f 7b       	andi	r20, 0xBF	; 191
     f80:	4b 83       	std	Y+3, r20	; 0x03
     f82:	8e 81       	ldd	r24, Y+6	; 0x06
     f84:	9f 81       	ldd	r25, Y+7	; 0x07
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	9f 83       	std	Y+7, r25	; 0x07
     f8a:	8e 83       	std	Y+6, r24	; 0x06
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	2b c0       	rjmp	.+86     	; 0xfe8 <fgetc+0x7a>
     f92:	42 ff       	sbrs	r20, 2
     f94:	13 c0       	rjmp	.+38     	; 0xfbc <fgetc+0x4e>
     f96:	e8 81       	ld	r30, Y
     f98:	f9 81       	ldd	r31, Y+1	; 0x01
     f9a:	80 81       	ld	r24, Z
     f9c:	28 2f       	mov	r18, r24
     f9e:	33 27       	eor	r19, r19
     fa0:	27 fd       	sbrc	r18, 7
     fa2:	30 95       	com	r19
     fa4:	21 15       	cp	r18, r1
     fa6:	31 05       	cpc	r19, r1
     fa8:	29 f4       	brne	.+10     	; 0xfb4 <fgetc+0x46>
     faa:	40 62       	ori	r20, 0x20	; 32
     fac:	4b 83       	std	Y+3, r20	; 0x03
     fae:	2f ef       	ldi	r18, 0xFF	; 255
     fb0:	3f ef       	ldi	r19, 0xFF	; 255
     fb2:	1b c0       	rjmp	.+54     	; 0xfea <fgetc+0x7c>
     fb4:	31 96       	adiw	r30, 0x01	; 1
     fb6:	f9 83       	std	Y+1, r31	; 0x01
     fb8:	e8 83       	st	Y, r30
     fba:	11 c0       	rjmp	.+34     	; 0xfde <fgetc+0x70>
     fbc:	ea 85       	ldd	r30, Y+10	; 0x0a
     fbe:	fb 85       	ldd	r31, Y+11	; 0x0b
     fc0:	ce 01       	movw	r24, r28
     fc2:	09 95       	icall
     fc4:	9c 01       	movw	r18, r24
     fc6:	97 ff       	sbrs	r25, 7
     fc8:	0a c0       	rjmp	.+20     	; 0xfde <fgetc+0x70>
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	2f 5f       	subi	r18, 0xFF	; 255
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <fgetc+0x68>
     fd2:	80 e2       	ldi	r24, 0x20	; 32
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <fgetc+0x6a>
     fd6:	80 e1       	ldi	r24, 0x10	; 16
     fd8:	89 2b       	or	r24, r25
     fda:	8b 83       	std	Y+3, r24	; 0x03
     fdc:	e8 cf       	rjmp	.-48     	; 0xfae <fgetc+0x40>
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	9f 81       	ldd	r25, Y+7	; 0x07
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	9f 83       	std	Y+7, r25	; 0x07
     fe6:	8e 83       	std	Y+6, r24	; 0x06
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	c9 01       	movw	r24, r18
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <fputc>:
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	8c 01       	movw	r16, r24
     ffc:	eb 01       	movw	r28, r22
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	81 ff       	sbrs	r24, 1
    1002:	1b c0       	rjmp	.+54     	; 0x103a <fputc+0x48>
    1004:	82 ff       	sbrs	r24, 2
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <fputc+0x30>
    1008:	2e 81       	ldd	r18, Y+6	; 0x06
    100a:	3f 81       	ldd	r19, Y+7	; 0x07
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	28 17       	cp	r18, r24
    1012:	39 07       	cpc	r19, r25
    1014:	64 f4       	brge	.+24     	; 0x102e <fputc+0x3c>
    1016:	e8 81       	ld	r30, Y
    1018:	f9 81       	ldd	r31, Y+1	; 0x01
    101a:	01 93       	st	Z+, r16
    101c:	f9 83       	std	Y+1, r31	; 0x01
    101e:	e8 83       	st	Y, r30
    1020:	06 c0       	rjmp	.+12     	; 0x102e <fputc+0x3c>
    1022:	e8 85       	ldd	r30, Y+8	; 0x08
    1024:	f9 85       	ldd	r31, Y+9	; 0x09
    1026:	80 2f       	mov	r24, r16
    1028:	09 95       	icall
    102a:	89 2b       	or	r24, r25
    102c:	31 f4       	brne	.+12     	; 0x103a <fputc+0x48>
    102e:	8e 81       	ldd	r24, Y+6	; 0x06
    1030:	9f 81       	ldd	r25, Y+7	; 0x07
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	9f 83       	std	Y+7, r25	; 0x07
    1036:	8e 83       	std	Y+6, r24	; 0x06
    1038:	02 c0       	rjmp	.+4      	; 0x103e <fputc+0x4c>
    103a:	0f ef       	ldi	r16, 0xFF	; 255
    103c:	1f ef       	ldi	r17, 0xFF	; 255
    103e:	c8 01       	movw	r24, r16
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	08 95       	ret

0000104a <printf_P>:
    104a:	a0 e0       	ldi	r26, 0x00	; 0
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ea e2       	ldi	r30, 0x2A	; 42
    1050:	f8 e0       	ldi	r31, 0x08	; 8
    1052:	66 cf       	rjmp	.-308    	; 0xf20 <__prologue_saves__+0x20>
    1054:	fe 01       	movw	r30, r28
    1056:	35 96       	adiw	r30, 0x05	; 5
    1058:	61 91       	ld	r22, Z+
    105a:	71 91       	ld	r23, Z+
    105c:	a0 91 74 01 	lds	r26, 0x0174
    1060:	b0 91 75 01 	lds	r27, 0x0175
    1064:	13 96       	adiw	r26, 0x03	; 3
    1066:	8c 91       	ld	r24, X
    1068:	13 97       	sbiw	r26, 0x03	; 3
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	13 96       	adiw	r26, 0x03	; 3
    106e:	8c 93       	st	X, r24
    1070:	80 91 74 01 	lds	r24, 0x0174
    1074:	90 91 75 01 	lds	r25, 0x0175
    1078:	af 01       	movw	r20, r30
    107a:	0a d0       	rcall	.+20     	; 0x1090 <vfprintf>
    107c:	e0 91 74 01 	lds	r30, 0x0174
    1080:	f0 91 75 01 	lds	r31, 0x0175
    1084:	23 81       	ldd	r18, Z+3	; 0x03
    1086:	27 7f       	andi	r18, 0xF7	; 247
    1088:	23 83       	std	Z+3, r18	; 0x03
    108a:	20 96       	adiw	r28, 0x00	; 0
    108c:	e2 e0       	ldi	r30, 0x02	; 2
    108e:	64 cf       	rjmp	.-312    	; 0xf58 <__epilogue_restores__+0x20>

00001090 <vfprintf>:
    1090:	ab e0       	ldi	r26, 0x0B	; 11
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ed e4       	ldi	r30, 0x4D	; 77
    1096:	f8 e0       	ldi	r31, 0x08	; 8
    1098:	33 cf       	rjmp	.-410    	; 0xf00 <__prologue_saves__>
    109a:	4c 01       	movw	r8, r24
    109c:	2b 01       	movw	r4, r22
    109e:	5a 01       	movw	r10, r20
    10a0:	fc 01       	movw	r30, r24
    10a2:	17 82       	std	Z+7, r1	; 0x07
    10a4:	16 82       	std	Z+6, r1	; 0x06
    10a6:	83 81       	ldd	r24, Z+3	; 0x03
    10a8:	81 fd       	sbrc	r24, 1
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <vfprintf+0x22>
    10ac:	6f ef       	ldi	r22, 0xFF	; 255
    10ae:	7f ef       	ldi	r23, 0xFF	; 255
    10b0:	be c1       	rjmp	.+892    	; 0x142e <vfprintf+0x39e>
    10b2:	1e 01       	movw	r2, r28
    10b4:	08 94       	sec
    10b6:	21 1c       	adc	r2, r1
    10b8:	31 1c       	adc	r3, r1
    10ba:	9f e3       	ldi	r25, 0x3F	; 63
    10bc:	69 2e       	mov	r6, r25
    10be:	f4 01       	movw	r30, r8
    10c0:	33 81       	ldd	r19, Z+3	; 0x03
    10c2:	f2 01       	movw	r30, r4
    10c4:	33 fd       	sbrc	r19, 3
    10c6:	85 91       	lpm	r24, Z+
    10c8:	33 ff       	sbrs	r19, 3
    10ca:	81 91       	ld	r24, Z+
    10cc:	2f 01       	movw	r4, r30
    10ce:	88 23       	and	r24, r24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <vfprintf+0x44>
    10d2:	aa c1       	rjmp	.+852    	; 0x1428 <vfprintf+0x398>
    10d4:	85 32       	cpi	r24, 0x25	; 37
    10d6:	39 f4       	brne	.+14     	; 0x10e6 <vfprintf+0x56>
    10d8:	33 fd       	sbrc	r19, 3
    10da:	85 91       	lpm	r24, Z+
    10dc:	33 ff       	sbrs	r19, 3
    10de:	81 91       	ld	r24, Z+
    10e0:	2f 01       	movw	r4, r30
    10e2:	85 32       	cpi	r24, 0x25	; 37
    10e4:	21 f4       	brne	.+8      	; 0x10ee <vfprintf+0x5e>
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	b4 01       	movw	r22, r8
    10ea:	83 df       	rcall	.-250    	; 0xff2 <fputc>
    10ec:	e8 cf       	rjmp	.-48     	; 0x10be <vfprintf+0x2e>
    10ee:	98 2f       	mov	r25, r24
    10f0:	ff 24       	eor	r15, r15
    10f2:	ee 24       	eor	r14, r14
    10f4:	77 24       	eor	r7, r7
    10f6:	ff e1       	ldi	r31, 0x1F	; 31
    10f8:	ff 15       	cp	r31, r15
    10fa:	d0 f0       	brcs	.+52     	; 0x1130 <vfprintf+0xa0>
    10fc:	9b 32       	cpi	r25, 0x2B	; 43
    10fe:	69 f0       	breq	.+26     	; 0x111a <vfprintf+0x8a>
    1100:	9c 32       	cpi	r25, 0x2C	; 44
    1102:	28 f4       	brcc	.+10     	; 0x110e <vfprintf+0x7e>
    1104:	90 32       	cpi	r25, 0x20	; 32
    1106:	59 f0       	breq	.+22     	; 0x111e <vfprintf+0x8e>
    1108:	93 32       	cpi	r25, 0x23	; 35
    110a:	91 f4       	brne	.+36     	; 0x1130 <vfprintf+0xa0>
    110c:	0e c0       	rjmp	.+28     	; 0x112a <vfprintf+0x9a>
    110e:	9d 32       	cpi	r25, 0x2D	; 45
    1110:	49 f0       	breq	.+18     	; 0x1124 <vfprintf+0x94>
    1112:	90 33       	cpi	r25, 0x30	; 48
    1114:	69 f4       	brne	.+26     	; 0x1130 <vfprintf+0xa0>
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	2a c0       	rjmp	.+84     	; 0x116e <vfprintf+0xde>
    111a:	52 e0       	ldi	r21, 0x02	; 2
    111c:	f5 2a       	or	r15, r21
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	f8 2a       	or	r15, r24
    1122:	2e c0       	rjmp	.+92     	; 0x1180 <vfprintf+0xf0>
    1124:	98 e0       	ldi	r25, 0x08	; 8
    1126:	f9 2a       	or	r15, r25
    1128:	2b c0       	rjmp	.+86     	; 0x1180 <vfprintf+0xf0>
    112a:	e0 e1       	ldi	r30, 0x10	; 16
    112c:	fe 2a       	or	r15, r30
    112e:	28 c0       	rjmp	.+80     	; 0x1180 <vfprintf+0xf0>
    1130:	f7 fc       	sbrc	r15, 7
    1132:	2f c0       	rjmp	.+94     	; 0x1192 <vfprintf+0x102>
    1134:	29 2f       	mov	r18, r25
    1136:	20 53       	subi	r18, 0x30	; 48
    1138:	2a 30       	cpi	r18, 0x0A	; 10
    113a:	a0 f4       	brcc	.+40     	; 0x1164 <vfprintf+0xd4>
    113c:	f6 fe       	sbrs	r15, 6
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <vfprintf+0xc0>
    1140:	87 2d       	mov	r24, r7
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	6a e0       	ldi	r22, 0x0A	; 10
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	ec d1       	rcall	.+984    	; 0x1522 <__mulhi3>
    114a:	78 2e       	mov	r7, r24
    114c:	72 0e       	add	r7, r18
    114e:	18 c0       	rjmp	.+48     	; 0x1180 <vfprintf+0xf0>
    1150:	8e 2d       	mov	r24, r14
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	6a e0       	ldi	r22, 0x0A	; 10
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	e4 d1       	rcall	.+968    	; 0x1522 <__mulhi3>
    115a:	e8 2e       	mov	r14, r24
    115c:	e2 0e       	add	r14, r18
    115e:	f0 e2       	ldi	r31, 0x20	; 32
    1160:	ff 2a       	or	r15, r31
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <vfprintf+0xf0>
    1164:	9e 32       	cpi	r25, 0x2E	; 46
    1166:	29 f4       	brne	.+10     	; 0x1172 <vfprintf+0xe2>
    1168:	f6 fc       	sbrc	r15, 6
    116a:	5e c1       	rjmp	.+700    	; 0x1428 <vfprintf+0x398>
    116c:	40 e4       	ldi	r20, 0x40	; 64
    116e:	f4 2a       	or	r15, r20
    1170:	07 c0       	rjmp	.+14     	; 0x1180 <vfprintf+0xf0>
    1172:	9c 36       	cpi	r25, 0x6C	; 108
    1174:	19 f4       	brne	.+6      	; 0x117c <vfprintf+0xec>
    1176:	50 e8       	ldi	r21, 0x80	; 128
    1178:	f5 2a       	or	r15, r21
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <vfprintf+0xf0>
    117c:	98 36       	cpi	r25, 0x68	; 104
    117e:	49 f4       	brne	.+18     	; 0x1192 <vfprintf+0x102>
    1180:	f2 01       	movw	r30, r4
    1182:	33 fd       	sbrc	r19, 3
    1184:	95 91       	lpm	r25, Z+
    1186:	33 ff       	sbrs	r19, 3
    1188:	91 91       	ld	r25, Z+
    118a:	2f 01       	movw	r4, r30
    118c:	99 23       	and	r25, r25
    118e:	09 f0       	breq	.+2      	; 0x1192 <vfprintf+0x102>
    1190:	b2 cf       	rjmp	.-156    	; 0x10f6 <vfprintf+0x66>
    1192:	89 2f       	mov	r24, r25
    1194:	85 54       	subi	r24, 0x45	; 69
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	18 f0       	brcs	.+6      	; 0x11a0 <vfprintf+0x110>
    119a:	80 52       	subi	r24, 0x20	; 32
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	30 f4       	brcc	.+12     	; 0x11ac <vfprintf+0x11c>
    11a0:	44 e0       	ldi	r20, 0x04	; 4
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	a4 0e       	add	r10, r20
    11a6:	b5 1e       	adc	r11, r21
    11a8:	69 82       	std	Y+1, r6	; 0x01
    11aa:	0f c0       	rjmp	.+30     	; 0x11ca <vfprintf+0x13a>
    11ac:	93 36       	cpi	r25, 0x63	; 99
    11ae:	31 f0       	breq	.+12     	; 0x11bc <vfprintf+0x12c>
    11b0:	93 37       	cpi	r25, 0x73	; 115
    11b2:	79 f0       	breq	.+30     	; 0x11d2 <vfprintf+0x142>
    11b4:	93 35       	cpi	r25, 0x53	; 83
    11b6:	09 f0       	breq	.+2      	; 0x11ba <vfprintf+0x12a>
    11b8:	52 c0       	rjmp	.+164    	; 0x125e <vfprintf+0x1ce>
    11ba:	1f c0       	rjmp	.+62     	; 0x11fa <vfprintf+0x16a>
    11bc:	f5 01       	movw	r30, r10
    11be:	80 81       	ld	r24, Z
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	42 e0       	ldi	r20, 0x02	; 2
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	a4 0e       	add	r10, r20
    11c8:	b5 1e       	adc	r11, r21
    11ca:	61 01       	movw	r12, r2
    11cc:	01 e0       	ldi	r16, 0x01	; 1
    11ce:	10 e0       	ldi	r17, 0x00	; 0
    11d0:	11 c0       	rjmp	.+34     	; 0x11f4 <vfprintf+0x164>
    11d2:	f5 01       	movw	r30, r10
    11d4:	c0 80       	ld	r12, Z
    11d6:	d1 80       	ldd	r13, Z+1	; 0x01
    11d8:	f6 fc       	sbrc	r15, 6
    11da:	03 c0       	rjmp	.+6      	; 0x11e2 <vfprintf+0x152>
    11dc:	6f ef       	ldi	r22, 0xFF	; 255
    11de:	7f ef       	ldi	r23, 0xFF	; 255
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <vfprintf+0x156>
    11e2:	67 2d       	mov	r22, r7
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	42 e0       	ldi	r20, 0x02	; 2
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	a4 0e       	add	r10, r20
    11ec:	b5 1e       	adc	r11, r21
    11ee:	c6 01       	movw	r24, r12
    11f0:	2d d1       	rcall	.+602    	; 0x144c <strnlen>
    11f2:	8c 01       	movw	r16, r24
    11f4:	5f e7       	ldi	r21, 0x7F	; 127
    11f6:	f5 22       	and	r15, r21
    11f8:	13 c0       	rjmp	.+38     	; 0x1220 <vfprintf+0x190>
    11fa:	f5 01       	movw	r30, r10
    11fc:	c0 80       	ld	r12, Z
    11fe:	d1 80       	ldd	r13, Z+1	; 0x01
    1200:	f6 fc       	sbrc	r15, 6
    1202:	03 c0       	rjmp	.+6      	; 0x120a <vfprintf+0x17a>
    1204:	6f ef       	ldi	r22, 0xFF	; 255
    1206:	7f ef       	ldi	r23, 0xFF	; 255
    1208:	02 c0       	rjmp	.+4      	; 0x120e <vfprintf+0x17e>
    120a:	67 2d       	mov	r22, r7
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	42 e0       	ldi	r20, 0x02	; 2
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	a4 0e       	add	r10, r20
    1214:	b5 1e       	adc	r11, r21
    1216:	c6 01       	movw	r24, r12
    1218:	0e d1       	rcall	.+540    	; 0x1436 <strnlen_P>
    121a:	8c 01       	movw	r16, r24
    121c:	50 e8       	ldi	r21, 0x80	; 128
    121e:	f5 2a       	or	r15, r21
    1220:	f3 fe       	sbrs	r15, 3
    1222:	06 c0       	rjmp	.+12     	; 0x1230 <vfprintf+0x1a0>
    1224:	18 c0       	rjmp	.+48     	; 0x1256 <vfprintf+0x1c6>
    1226:	80 e2       	ldi	r24, 0x20	; 32
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	b4 01       	movw	r22, r8
    122c:	e2 de       	rcall	.-572    	; 0xff2 <fputc>
    122e:	ea 94       	dec	r14
    1230:	8e 2d       	mov	r24, r14
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	08 17       	cp	r16, r24
    1236:	19 07       	cpc	r17, r25
    1238:	b0 f3       	brcs	.-20     	; 0x1226 <vfprintf+0x196>
    123a:	0d c0       	rjmp	.+26     	; 0x1256 <vfprintf+0x1c6>
    123c:	f6 01       	movw	r30, r12
    123e:	f7 fc       	sbrc	r15, 7
    1240:	85 91       	lpm	r24, Z+
    1242:	f7 fe       	sbrs	r15, 7
    1244:	81 91       	ld	r24, Z+
    1246:	6f 01       	movw	r12, r30
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	b4 01       	movw	r22, r8
    124c:	d2 de       	rcall	.-604    	; 0xff2 <fputc>
    124e:	e1 10       	cpse	r14, r1
    1250:	ea 94       	dec	r14
    1252:	01 50       	subi	r16, 0x01	; 1
    1254:	10 40       	sbci	r17, 0x00	; 0
    1256:	01 15       	cp	r16, r1
    1258:	11 05       	cpc	r17, r1
    125a:	81 f7       	brne	.-32     	; 0x123c <vfprintf+0x1ac>
    125c:	e2 c0       	rjmp	.+452    	; 0x1422 <vfprintf+0x392>
    125e:	94 36       	cpi	r25, 0x64	; 100
    1260:	11 f0       	breq	.+4      	; 0x1266 <vfprintf+0x1d6>
    1262:	99 36       	cpi	r25, 0x69	; 105
    1264:	61 f5       	brne	.+88     	; 0x12be <vfprintf+0x22e>
    1266:	f7 fe       	sbrs	r15, 7
    1268:	08 c0       	rjmp	.+16     	; 0x127a <vfprintf+0x1ea>
    126a:	f5 01       	movw	r30, r10
    126c:	20 81       	ld	r18, Z
    126e:	31 81       	ldd	r19, Z+1	; 0x01
    1270:	42 81       	ldd	r20, Z+2	; 0x02
    1272:	53 81       	ldd	r21, Z+3	; 0x03
    1274:	84 e0       	ldi	r24, 0x04	; 4
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0a c0       	rjmp	.+20     	; 0x128e <vfprintf+0x1fe>
    127a:	f5 01       	movw	r30, r10
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	9c 01       	movw	r18, r24
    1282:	44 27       	eor	r20, r20
    1284:	37 fd       	sbrc	r19, 7
    1286:	40 95       	com	r20
    1288:	54 2f       	mov	r21, r20
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a8 0e       	add	r10, r24
    1290:	b9 1e       	adc	r11, r25
    1292:	9f e6       	ldi	r25, 0x6F	; 111
    1294:	f9 22       	and	r15, r25
    1296:	57 ff       	sbrs	r21, 7
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <vfprintf+0x21c>
    129a:	50 95       	com	r21
    129c:	40 95       	com	r20
    129e:	30 95       	com	r19
    12a0:	21 95       	neg	r18
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	4f 4f       	sbci	r20, 0xFF	; 255
    12a6:	5f 4f       	sbci	r21, 0xFF	; 255
    12a8:	e0 e8       	ldi	r30, 0x80	; 128
    12aa:	fe 2a       	or	r15, r30
    12ac:	ca 01       	movw	r24, r20
    12ae:	b9 01       	movw	r22, r18
    12b0:	a1 01       	movw	r20, r2
    12b2:	2a e0       	ldi	r18, 0x0A	; 10
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	d5 d0       	rcall	.+426    	; 0x1462 <__ultoa_invert>
    12b8:	d8 2e       	mov	r13, r24
    12ba:	d2 18       	sub	r13, r2
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <vfprintf+0x2ac>
    12be:	95 37       	cpi	r25, 0x75	; 117
    12c0:	29 f4       	brne	.+10     	; 0x12cc <vfprintf+0x23c>
    12c2:	1f 2d       	mov	r17, r15
    12c4:	1f 7e       	andi	r17, 0xEF	; 239
    12c6:	2a e0       	ldi	r18, 0x0A	; 10
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	1d c0       	rjmp	.+58     	; 0x1306 <vfprintf+0x276>
    12cc:	1f 2d       	mov	r17, r15
    12ce:	19 7f       	andi	r17, 0xF9	; 249
    12d0:	9f 36       	cpi	r25, 0x6F	; 111
    12d2:	61 f0       	breq	.+24     	; 0x12ec <vfprintf+0x25c>
    12d4:	90 37       	cpi	r25, 0x70	; 112
    12d6:	20 f4       	brcc	.+8      	; 0x12e0 <vfprintf+0x250>
    12d8:	98 35       	cpi	r25, 0x58	; 88
    12da:	09 f0       	breq	.+2      	; 0x12de <vfprintf+0x24e>
    12dc:	a5 c0       	rjmp	.+330    	; 0x1428 <vfprintf+0x398>
    12de:	0f c0       	rjmp	.+30     	; 0x12fe <vfprintf+0x26e>
    12e0:	90 37       	cpi	r25, 0x70	; 112
    12e2:	39 f0       	breq	.+14     	; 0x12f2 <vfprintf+0x262>
    12e4:	98 37       	cpi	r25, 0x78	; 120
    12e6:	09 f0       	breq	.+2      	; 0x12ea <vfprintf+0x25a>
    12e8:	9f c0       	rjmp	.+318    	; 0x1428 <vfprintf+0x398>
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <vfprintf+0x264>
    12ec:	28 e0       	ldi	r18, 0x08	; 8
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	0a c0       	rjmp	.+20     	; 0x1306 <vfprintf+0x276>
    12f2:	10 61       	ori	r17, 0x10	; 16
    12f4:	14 fd       	sbrc	r17, 4
    12f6:	14 60       	ori	r17, 0x04	; 4
    12f8:	20 e1       	ldi	r18, 0x10	; 16
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <vfprintf+0x276>
    12fe:	14 fd       	sbrc	r17, 4
    1300:	16 60       	ori	r17, 0x06	; 6
    1302:	20 e1       	ldi	r18, 0x10	; 16
    1304:	32 e0       	ldi	r19, 0x02	; 2
    1306:	17 ff       	sbrs	r17, 7
    1308:	08 c0       	rjmp	.+16     	; 0x131a <vfprintf+0x28a>
    130a:	f5 01       	movw	r30, r10
    130c:	60 81       	ld	r22, Z
    130e:	71 81       	ldd	r23, Z+1	; 0x01
    1310:	82 81       	ldd	r24, Z+2	; 0x02
    1312:	93 81       	ldd	r25, Z+3	; 0x03
    1314:	44 e0       	ldi	r20, 0x04	; 4
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	08 c0       	rjmp	.+16     	; 0x132a <vfprintf+0x29a>
    131a:	f5 01       	movw	r30, r10
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	bc 01       	movw	r22, r24
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	42 e0       	ldi	r20, 0x02	; 2
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	a4 0e       	add	r10, r20
    132c:	b5 1e       	adc	r11, r21
    132e:	a1 01       	movw	r20, r2
    1330:	98 d0       	rcall	.+304    	; 0x1462 <__ultoa_invert>
    1332:	d8 2e       	mov	r13, r24
    1334:	d2 18       	sub	r13, r2
    1336:	8f e7       	ldi	r24, 0x7F	; 127
    1338:	f8 2e       	mov	r15, r24
    133a:	f1 22       	and	r15, r17
    133c:	f6 fe       	sbrs	r15, 6
    133e:	0b c0       	rjmp	.+22     	; 0x1356 <vfprintf+0x2c6>
    1340:	5e ef       	ldi	r21, 0xFE	; 254
    1342:	f5 22       	and	r15, r21
    1344:	d7 14       	cp	r13, r7
    1346:	38 f4       	brcc	.+14     	; 0x1356 <vfprintf+0x2c6>
    1348:	f4 fe       	sbrs	r15, 4
    134a:	07 c0       	rjmp	.+14     	; 0x135a <vfprintf+0x2ca>
    134c:	f2 fc       	sbrc	r15, 2
    134e:	05 c0       	rjmp	.+10     	; 0x135a <vfprintf+0x2ca>
    1350:	8f ee       	ldi	r24, 0xEF	; 239
    1352:	f8 22       	and	r15, r24
    1354:	02 c0       	rjmp	.+4      	; 0x135a <vfprintf+0x2ca>
    1356:	1d 2d       	mov	r17, r13
    1358:	01 c0       	rjmp	.+2      	; 0x135c <vfprintf+0x2cc>
    135a:	17 2d       	mov	r17, r7
    135c:	f4 fe       	sbrs	r15, 4
    135e:	0d c0       	rjmp	.+26     	; 0x137a <vfprintf+0x2ea>
    1360:	fe 01       	movw	r30, r28
    1362:	ed 0d       	add	r30, r13
    1364:	f1 1d       	adc	r31, r1
    1366:	80 81       	ld	r24, Z
    1368:	80 33       	cpi	r24, 0x30	; 48
    136a:	19 f4       	brne	.+6      	; 0x1372 <vfprintf+0x2e2>
    136c:	99 ee       	ldi	r25, 0xE9	; 233
    136e:	f9 22       	and	r15, r25
    1370:	08 c0       	rjmp	.+16     	; 0x1382 <vfprintf+0x2f2>
    1372:	1f 5f       	subi	r17, 0xFF	; 255
    1374:	f2 fe       	sbrs	r15, 2
    1376:	05 c0       	rjmp	.+10     	; 0x1382 <vfprintf+0x2f2>
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <vfprintf+0x2f0>
    137a:	8f 2d       	mov	r24, r15
    137c:	86 78       	andi	r24, 0x86	; 134
    137e:	09 f0       	breq	.+2      	; 0x1382 <vfprintf+0x2f2>
    1380:	1f 5f       	subi	r17, 0xFF	; 255
    1382:	0f 2d       	mov	r16, r15
    1384:	f3 fc       	sbrc	r15, 3
    1386:	13 c0       	rjmp	.+38     	; 0x13ae <vfprintf+0x31e>
    1388:	f0 fe       	sbrs	r15, 0
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <vfprintf+0x318>
    138c:	1e 15       	cp	r17, r14
    138e:	10 f0       	brcs	.+4      	; 0x1394 <vfprintf+0x304>
    1390:	7d 2c       	mov	r7, r13
    1392:	0a c0       	rjmp	.+20     	; 0x13a8 <vfprintf+0x318>
    1394:	7d 2c       	mov	r7, r13
    1396:	7e 0c       	add	r7, r14
    1398:	71 1a       	sub	r7, r17
    139a:	1e 2d       	mov	r17, r14
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <vfprintf+0x318>
    139e:	80 e2       	ldi	r24, 0x20	; 32
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	b4 01       	movw	r22, r8
    13a4:	26 de       	rcall	.-948    	; 0xff2 <fputc>
    13a6:	1f 5f       	subi	r17, 0xFF	; 255
    13a8:	1e 15       	cp	r17, r14
    13aa:	c8 f3       	brcs	.-14     	; 0x139e <vfprintf+0x30e>
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <vfprintf+0x326>
    13ae:	1e 15       	cp	r17, r14
    13b0:	10 f4       	brcc	.+4      	; 0x13b6 <vfprintf+0x326>
    13b2:	e1 1a       	sub	r14, r17
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <vfprintf+0x328>
    13b6:	ee 24       	eor	r14, r14
    13b8:	04 ff       	sbrs	r16, 4
    13ba:	0e c0       	rjmp	.+28     	; 0x13d8 <vfprintf+0x348>
    13bc:	80 e3       	ldi	r24, 0x30	; 48
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	b4 01       	movw	r22, r8
    13c2:	17 de       	rcall	.-978    	; 0xff2 <fputc>
    13c4:	02 ff       	sbrs	r16, 2
    13c6:	1b c0       	rjmp	.+54     	; 0x13fe <vfprintf+0x36e>
    13c8:	01 fd       	sbrc	r16, 1
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <vfprintf+0x342>
    13cc:	88 e7       	ldi	r24, 0x78	; 120
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e c0       	rjmp	.+28     	; 0x13ee <vfprintf+0x35e>
    13d2:	88 e5       	ldi	r24, 0x58	; 88
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0b c0       	rjmp	.+22     	; 0x13ee <vfprintf+0x35e>
    13d8:	80 2f       	mov	r24, r16
    13da:	86 78       	andi	r24, 0x86	; 134
    13dc:	81 f0       	breq	.+32     	; 0x13fe <vfprintf+0x36e>
    13de:	01 ff       	sbrs	r16, 1
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <vfprintf+0x356>
    13e2:	8b e2       	ldi	r24, 0x2B	; 43
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <vfprintf+0x358>
    13e6:	80 e2       	ldi	r24, 0x20	; 32
    13e8:	f7 fc       	sbrc	r15, 7
    13ea:	8d e2       	ldi	r24, 0x2D	; 45
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	b4 01       	movw	r22, r8
    13f0:	00 de       	rcall	.-1024   	; 0xff2 <fputc>
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <vfprintf+0x36e>
    13f4:	80 e3       	ldi	r24, 0x30	; 48
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	b4 01       	movw	r22, r8
    13fa:	fb dd       	rcall	.-1034   	; 0xff2 <fputc>
    13fc:	7a 94       	dec	r7
    13fe:	d7 14       	cp	r13, r7
    1400:	c8 f3       	brcs	.-14     	; 0x13f4 <vfprintf+0x364>
    1402:	da 94       	dec	r13
    1404:	f1 01       	movw	r30, r2
    1406:	ed 0d       	add	r30, r13
    1408:	f1 1d       	adc	r31, r1
    140a:	80 81       	ld	r24, Z
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	b4 01       	movw	r22, r8
    1410:	f0 dd       	rcall	.-1056   	; 0xff2 <fputc>
    1412:	dd 20       	and	r13, r13
    1414:	b1 f7       	brne	.-20     	; 0x1402 <vfprintf+0x372>
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <vfprintf+0x392>
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	b4 01       	movw	r22, r8
    141e:	e9 dd       	rcall	.-1070   	; 0xff2 <fputc>
    1420:	ea 94       	dec	r14
    1422:	ee 20       	and	r14, r14
    1424:	c9 f7       	brne	.-14     	; 0x1418 <vfprintf+0x388>
    1426:	4b ce       	rjmp	.-874    	; 0x10be <vfprintf+0x2e>
    1428:	f4 01       	movw	r30, r8
    142a:	66 81       	ldd	r22, Z+6	; 0x06
    142c:	77 81       	ldd	r23, Z+7	; 0x07
    142e:	cb 01       	movw	r24, r22
    1430:	2b 96       	adiw	r28, 0x0b	; 11
    1432:	e2 e1       	ldi	r30, 0x12	; 18
    1434:	81 cd       	rjmp	.-1278   	; 0xf38 <__epilogue_restores__>

00001436 <strnlen_P>:
    1436:	fc 01       	movw	r30, r24
    1438:	05 90       	lpm	r0, Z+
    143a:	61 50       	subi	r22, 0x01	; 1
    143c:	70 40       	sbci	r23, 0x00	; 0
    143e:	01 10       	cpse	r0, r1
    1440:	d8 f7       	brcc	.-10     	; 0x1438 <strnlen_P+0x2>
    1442:	80 95       	com	r24
    1444:	90 95       	com	r25
    1446:	8e 0f       	add	r24, r30
    1448:	9f 1f       	adc	r25, r31
    144a:	08 95       	ret

0000144c <strnlen>:
    144c:	fc 01       	movw	r30, r24
    144e:	61 50       	subi	r22, 0x01	; 1
    1450:	70 40       	sbci	r23, 0x00	; 0
    1452:	01 90       	ld	r0, Z+
    1454:	01 10       	cpse	r0, r1
    1456:	d8 f7       	brcc	.-10     	; 0x144e <strnlen+0x2>
    1458:	80 95       	com	r24
    145a:	90 95       	com	r25
    145c:	8e 0f       	add	r24, r30
    145e:	9f 1f       	adc	r25, r31
    1460:	08 95       	ret

00001462 <__ultoa_invert>:
    1462:	fa 01       	movw	r30, r20
    1464:	aa 27       	eor	r26, r26
    1466:	28 30       	cpi	r18, 0x08	; 8
    1468:	61 f1       	breq	.+88     	; 0x14c2 <__ultoa_invert+0x60>
    146a:	20 31       	cpi	r18, 0x10	; 16
    146c:	91 f1       	breq	.+100    	; 0x14d2 <__ultoa_invert+0x70>
    146e:	e8 94       	clt
    1470:	6f 93       	push	r22
    1472:	6e 7f       	andi	r22, 0xFE	; 254
    1474:	6e 5f       	subi	r22, 0xFE	; 254
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	af 4f       	sbci	r26, 0xFF	; 255
    147e:	b1 e0       	ldi	r27, 0x01	; 1
    1480:	40 d0       	rcall	.+128    	; 0x1502 <__ultoa_invert+0xa0>
    1482:	b4 e0       	ldi	r27, 0x04	; 4
    1484:	3e d0       	rcall	.+124    	; 0x1502 <__ultoa_invert+0xa0>
    1486:	67 0f       	add	r22, r23
    1488:	78 1f       	adc	r23, r24
    148a:	89 1f       	adc	r24, r25
    148c:	9a 1f       	adc	r25, r26
    148e:	a1 1d       	adc	r26, r1
    1490:	68 0f       	add	r22, r24
    1492:	79 1f       	adc	r23, r25
    1494:	8a 1f       	adc	r24, r26
    1496:	91 1d       	adc	r25, r1
    1498:	a1 1d       	adc	r26, r1
    149a:	6a 0f       	add	r22, r26
    149c:	71 1d       	adc	r23, r1
    149e:	81 1d       	adc	r24, r1
    14a0:	91 1d       	adc	r25, r1
    14a2:	a1 1d       	adc	r26, r1
    14a4:	22 d0       	rcall	.+68     	; 0x14ea <__ultoa_invert+0x88>
    14a6:	09 f4       	brne	.+2      	; 0x14aa <__ultoa_invert+0x48>
    14a8:	68 94       	set
    14aa:	3f 91       	pop	r19
    14ac:	06 2e       	mov	r0, r22
    14ae:	00 0c       	add	r0, r0
    14b0:	30 19       	sub	r19, r0
    14b2:	00 0c       	add	r0, r0
    14b4:	00 0c       	add	r0, r0
    14b6:	30 19       	sub	r19, r0
    14b8:	30 5d       	subi	r19, 0xD0	; 208
    14ba:	31 93       	st	Z+, r19
    14bc:	ce f6       	brtc	.-78     	; 0x1470 <__ultoa_invert+0xe>
    14be:	cf 01       	movw	r24, r30
    14c0:	08 95       	ret
    14c2:	46 2f       	mov	r20, r22
    14c4:	47 70       	andi	r20, 0x07	; 7
    14c6:	40 5d       	subi	r20, 0xD0	; 208
    14c8:	41 93       	st	Z+, r20
    14ca:	b3 e0       	ldi	r27, 0x03	; 3
    14cc:	0f d0       	rcall	.+30     	; 0x14ec <__ultoa_invert+0x8a>
    14ce:	c9 f7       	brne	.-14     	; 0x14c2 <__ultoa_invert+0x60>
    14d0:	f6 cf       	rjmp	.-20     	; 0x14be <__ultoa_invert+0x5c>
    14d2:	46 2f       	mov	r20, r22
    14d4:	4f 70       	andi	r20, 0x0F	; 15
    14d6:	40 5d       	subi	r20, 0xD0	; 208
    14d8:	4a 33       	cpi	r20, 0x3A	; 58
    14da:	18 f0       	brcs	.+6      	; 0x14e2 <__ultoa_invert+0x80>
    14dc:	49 5d       	subi	r20, 0xD9	; 217
    14de:	31 fd       	sbrc	r19, 1
    14e0:	40 52       	subi	r20, 0x20	; 32
    14e2:	41 93       	st	Z+, r20
    14e4:	02 d0       	rcall	.+4      	; 0x14ea <__ultoa_invert+0x88>
    14e6:	a9 f7       	brne	.-22     	; 0x14d2 <__ultoa_invert+0x70>
    14e8:	ea cf       	rjmp	.-44     	; 0x14be <__ultoa_invert+0x5c>
    14ea:	b4 e0       	ldi	r27, 0x04	; 4
    14ec:	a6 95       	lsr	r26
    14ee:	97 95       	ror	r25
    14f0:	87 95       	ror	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	ba 95       	dec	r27
    14f8:	c9 f7       	brne	.-14     	; 0x14ec <__ultoa_invert+0x8a>
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 05       	cpc	r22, r1
    14fe:	71 05       	cpc	r23, r1
    1500:	08 95       	ret
    1502:	9b 01       	movw	r18, r22
    1504:	ac 01       	movw	r20, r24
    1506:	0a 2e       	mov	r0, r26
    1508:	06 94       	lsr	r0
    150a:	57 95       	ror	r21
    150c:	47 95       	ror	r20
    150e:	37 95       	ror	r19
    1510:	27 95       	ror	r18
    1512:	ba 95       	dec	r27
    1514:	c9 f7       	brne	.-14     	; 0x1508 <__ultoa_invert+0xa6>
    1516:	62 0f       	add	r22, r18
    1518:	73 1f       	adc	r23, r19
    151a:	84 1f       	adc	r24, r20
    151c:	95 1f       	adc	r25, r21
    151e:	a0 1d       	adc	r26, r0
    1520:	08 95       	ret

00001522 <__mulhi3>:
    1522:	55 27       	eor	r21, r21
    1524:	00 24       	eor	r0, r0

00001526 <__mulhi3_loop>:
    1526:	80 ff       	sbrs	r24, 0
    1528:	02 c0       	rjmp	.+4      	; 0x152e <__mulhi3_skip1>
    152a:	06 0e       	add	r0, r22
    152c:	57 1f       	adc	r21, r23

0000152e <__mulhi3_skip1>:
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	61 15       	cp	r22, r1
    1534:	71 05       	cpc	r23, r1
    1536:	21 f0       	breq	.+8      	; 0x1540 <__mulhi3_exit>
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	99 f7       	brne	.-26     	; 0x1526 <__mulhi3_loop>

00001540 <__mulhi3_exit>:
    1540:	95 2f       	mov	r25, r21
    1542:	80 2d       	mov	r24, r0
    1544:	08 95       	ret

00001546 <_exit>:
    1546:	f8 94       	cli

00001548 <__stop_program>:
    1548:	ff cf       	rjmp	.-2      	; 0x1548 <__stop_program>
